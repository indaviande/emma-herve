/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 0);
/******/ })
/************************************************************************/
/******/ ({

/***/ "./node_modules/.pnpm/@barba/core@2.9.7/node_modules/@barba/core/dist/barba.umd.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/.pnpm/@barba/core@2.9.7/node_modules/@barba/core/dist/barba.umd.js ***!
  \*****************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__;function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

!function (t, n) {
  "object" == ( false ? undefined : _typeof(exports)) && "undefined" != typeof module ? module.exports = n() :  true ? !(__WEBPACK_AMD_DEFINE_FACTORY__ = (n),
				__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
				(__WEBPACK_AMD_DEFINE_FACTORY__.call(exports, __webpack_require__, exports, module)) :
				__WEBPACK_AMD_DEFINE_FACTORY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)) : undefined;
}(this, function () {
  function t(t, n) {
    for (var r = 0; r < n.length; r++) {
      var e = n[r];
      e.enumerable = e.enumerable || !1, e.configurable = !0, "value" in e && (e.writable = !0), Object.defineProperty(t, e.key, e);
    }
  }

  function n(n, r, e) {
    return r && t(n.prototype, r), e && t(n, e), n;
  }

  function r() {
    return (r = Object.assign || function (t) {
      for (var n = 1; n < arguments.length; n++) {
        var r = arguments[n];

        for (var e in r) {
          Object.prototype.hasOwnProperty.call(r, e) && (t[e] = r[e]);
        }
      }

      return t;
    }).apply(this, arguments);
  }

  function e(t, n) {
    t.prototype = Object.create(n.prototype), t.prototype.constructor = t, t.__proto__ = n;
  }

  function i(t) {
    return (i = Object.setPrototypeOf ? Object.getPrototypeOf : function (t) {
      return t.__proto__ || Object.getPrototypeOf(t);
    })(t);
  }

  function o(t, n) {
    return (o = Object.setPrototypeOf || function (t, n) {
      return t.__proto__ = n, t;
    })(t, n);
  }

  function u(t, n, r) {
    return (u = function () {
      if ("undefined" == typeof Reflect || !Reflect.construct) return !1;
      if (Reflect.construct.sham) return !1;
      if ("function" == typeof Proxy) return !0;

      try {
        return Date.prototype.toString.call(Reflect.construct(Date, [], function () {})), !0;
      } catch (t) {
        return !1;
      }
    }() ? Reflect.construct : function (t, n, r) {
      var e = [null];
      e.push.apply(e, n);
      var i = new (Function.bind.apply(t, e))();
      return r && o(i, r.prototype), i;
    }).apply(null, arguments);
  }

  function f(t) {
    var n = "function" == typeof Map ? new Map() : void 0;
    return (f = function f(t) {
      if (null === t || -1 === Function.toString.call(t).indexOf("[native code]")) return t;
      if ("function" != typeof t) throw new TypeError("Super expression must either be null or a function");

      if (void 0 !== n) {
        if (n.has(t)) return n.get(t);
        n.set(t, r);
      }

      function r() {
        return u(t, arguments, i(this).constructor);
      }

      return r.prototype = Object.create(t.prototype, {
        constructor: {
          value: r,
          enumerable: !1,
          writable: !0,
          configurable: !0
        }
      }), o(r, t);
    })(t);
  }

  function s(t, n) {
    try {
      var r = t();
    } catch (t) {
      return n(t);
    }

    return r && r.then ? r.then(void 0, n) : r;
  }

  "undefined" != typeof Symbol && (Symbol.iterator || (Symbol.iterator = Symbol("Symbol.iterator"))), "undefined" != typeof Symbol && (Symbol.asyncIterator || (Symbol.asyncIterator = Symbol("Symbol.asyncIterator")));

  var c,
      a = "2.9.7",
      h = function h() {};

  !function (t) {
    t[t.off = 0] = "off", t[t.error = 1] = "error", t[t.warning = 2] = "warning", t[t.info = 3] = "info", t[t.debug = 4] = "debug";
  }(c || (c = {}));

  var v = c.off,
      l = function () {
    function t(t) {
      this.t = t;
    }

    t.getLevel = function () {
      return v;
    }, t.setLevel = function (t) {
      return v = c[t];
    };
    var n = t.prototype;
    return n.error = function () {
      for (var t = arguments.length, n = new Array(t), r = 0; r < t; r++) {
        n[r] = arguments[r];
      }

      this.i(console.error, c.error, n);
    }, n.warn = function () {
      for (var t = arguments.length, n = new Array(t), r = 0; r < t; r++) {
        n[r] = arguments[r];
      }

      this.i(console.warn, c.warning, n);
    }, n.info = function () {
      for (var t = arguments.length, n = new Array(t), r = 0; r < t; r++) {
        n[r] = arguments[r];
      }

      this.i(console.info, c.info, n);
    }, n.debug = function () {
      for (var t = arguments.length, n = new Array(t), r = 0; r < t; r++) {
        n[r] = arguments[r];
      }

      this.i(console.log, c.debug, n);
    }, n.i = function (n, r, e) {
      r <= t.getLevel() && n.apply(console, ["[" + this.t + "] "].concat(e));
    }, t;
  }(),
      d = O,
      m = E,
      p = g,
      w = x,
      b = T,
      y = "/",
      P = new RegExp(["(\\\\.)", "(?:\\:(\\w+)(?:\\(((?:\\\\.|[^\\\\()])+)\\))?|\\(((?:\\\\.|[^\\\\()])+)\\))([+*?])?"].join("|"), "g");

  function g(t, n) {
    for (var r, e = [], i = 0, o = 0, u = "", f = n && n.delimiter || y, s = n && n.whitelist || void 0, c = !1; null !== (r = P.exec(t));) {
      var a = r[0],
          h = r[1],
          v = r.index;
      if (u += t.slice(o, v), o = v + a.length, h) u += h[1], c = !0;else {
        var l = "",
            d = r[2],
            m = r[3],
            p = r[4],
            w = r[5];

        if (!c && u.length) {
          var b = u.length - 1,
              g = u[b];
          (!s || s.indexOf(g) > -1) && (l = g, u = u.slice(0, b));
        }

        u && (e.push(u), u = "", c = !1);
        var E = m || p,
            x = l || f;
        e.push({
          name: d || i++,
          prefix: l,
          delimiter: x,
          optional: "?" === w || "*" === w,
          repeat: "+" === w || "*" === w,
          pattern: E ? A(E) : "[^" + k(x === f ? x : x + f) + "]+?"
        });
      }
    }

    return (u || o < t.length) && e.push(u + t.substr(o)), e;
  }

  function E(t, n) {
    return function (r, e) {
      var i = t.exec(r);
      if (!i) return !1;

      for (var o = i[0], u = i.index, f = {}, s = e && e.decode || decodeURIComponent, c = 1; c < i.length; c++) {
        if (void 0 !== i[c]) {
          var a = n[c - 1];
          f[a.name] = a.repeat ? i[c].split(a.delimiter).map(function (t) {
            return s(t, a);
          }) : s(i[c], a);
        }
      }

      return {
        path: o,
        index: u,
        params: f
      };
    };
  }

  function x(t, n) {
    for (var r = new Array(t.length), e = 0; e < t.length; e++) {
      "object" == _typeof(t[e]) && (r[e] = new RegExp("^(?:" + t[e].pattern + ")$", R(n)));
    }

    return function (n, e) {
      for (var i = "", o = e && e.encode || encodeURIComponent, u = !e || !1 !== e.validate, f = 0; f < t.length; f++) {
        var s = t[f];

        if ("string" != typeof s) {
          var c,
              a = n ? n[s.name] : void 0;

          if (Array.isArray(a)) {
            if (!s.repeat) throw new TypeError('Expected "' + s.name + '" to not repeat, but got array');

            if (0 === a.length) {
              if (s.optional) continue;
              throw new TypeError('Expected "' + s.name + '" to not be empty');
            }

            for (var h = 0; h < a.length; h++) {
              if (c = o(a[h], s), u && !r[f].test(c)) throw new TypeError('Expected all "' + s.name + '" to match "' + s.pattern + '"');
              i += (0 === h ? s.prefix : s.delimiter) + c;
            }
          } else if ("string" != typeof a && "number" != typeof a && "boolean" != typeof a) {
            if (!s.optional) throw new TypeError('Expected "' + s.name + '" to be ' + (s.repeat ? "an array" : "a string"));
          } else {
            if (c = o(String(a), s), u && !r[f].test(c)) throw new TypeError('Expected "' + s.name + '" to match "' + s.pattern + '", but got "' + c + '"');
            i += s.prefix + c;
          }
        } else i += s;
      }

      return i;
    };
  }

  function k(t) {
    return t.replace(/([.+*?=^!:${}()[\]|/\\])/g, "\\$1");
  }

  function A(t) {
    return t.replace(/([=!:$/()])/g, "\\$1");
  }

  function R(t) {
    return t && t.sensitive ? "" : "i";
  }

  function T(t, n, r) {
    for (var e = (r = r || {}).strict, i = !1 !== r.start, o = !1 !== r.end, u = r.delimiter || y, f = [].concat(r.endsWith || []).map(k).concat("$").join("|"), s = i ? "^" : "", c = 0; c < t.length; c++) {
      var a = t[c];
      if ("string" == typeof a) s += k(a);else {
        var h = a.repeat ? "(?:" + a.pattern + ")(?:" + k(a.delimiter) + "(?:" + a.pattern + "))*" : a.pattern;
        n && n.push(a), s += a.optional ? a.prefix ? "(?:" + k(a.prefix) + "(" + h + "))?" : "(" + h + ")?" : k(a.prefix) + "(" + h + ")";
      }
    }

    if (o) e || (s += "(?:" + k(u) + ")?"), s += "$" === f ? "$" : "(?=" + f + ")";else {
      var v = t[t.length - 1],
          l = "string" == typeof v ? v[v.length - 1] === u : void 0 === v;
      e || (s += "(?:" + k(u) + "(?=" + f + "))?"), l || (s += "(?=" + k(u) + "|" + f + ")");
    }
    return new RegExp(s, R(r));
  }

  function O(t, n, r) {
    return t instanceof RegExp ? function (t, n) {
      if (!n) return t;
      var r = t.source.match(/\((?!\?)/g);
      if (r) for (var e = 0; e < r.length; e++) {
        n.push({
          name: e,
          prefix: null,
          delimiter: null,
          optional: !1,
          repeat: !1,
          pattern: null
        });
      }
      return t;
    }(t, n) : Array.isArray(t) ? function (t, n, r) {
      for (var e = [], i = 0; i < t.length; i++) {
        e.push(O(t[i], n, r).source);
      }

      return new RegExp("(?:" + e.join("|") + ")", R(r));
    }(t, n, r) : function (t, n, r) {
      return T(g(t, r), n, r);
    }(t, n, r);
  }

  d.match = function (t, n) {
    var r = [];
    return E(O(t, r, n), r);
  }, d.regexpToFunction = m, d.parse = p, d.compile = function (t, n) {
    return x(g(t, n), n);
  }, d.tokensToFunction = w, d.tokensToRegExp = b;

  var S = {
    container: "container",
    history: "history",
    namespace: "namespace",
    prefix: "data-barba",
    prevent: "prevent",
    wrapper: "wrapper"
  },
      j = new (function () {
    function t() {
      this.o = S, this.u = new DOMParser();
    }

    var n = t.prototype;
    return n.toString = function (t) {
      return t.outerHTML;
    }, n.toDocument = function (t) {
      return this.u.parseFromString(t, "text/html");
    }, n.toElement = function (t) {
      var n = document.createElement("div");
      return n.innerHTML = t, n;
    }, n.getHtml = function (t) {
      return void 0 === t && (t = document), this.toString(t.documentElement);
    }, n.getWrapper = function (t) {
      return void 0 === t && (t = document), t.querySelector("[" + this.o.prefix + '="' + this.o.wrapper + '"]');
    }, n.getContainer = function (t) {
      return void 0 === t && (t = document), t.querySelector("[" + this.o.prefix + '="' + this.o.container + '"]');
    }, n.removeContainer = function (t) {
      document.body.contains(t) && t.parentNode.removeChild(t);
    }, n.addContainer = function (t, n) {
      var r = this.getContainer();
      r ? this.s(t, r) : n.appendChild(t);
    }, n.getNamespace = function (t) {
      void 0 === t && (t = document);
      var n = t.querySelector("[" + this.o.prefix + "-" + this.o.namespace + "]");
      return n ? n.getAttribute(this.o.prefix + "-" + this.o.namespace) : null;
    }, n.getHref = function (t) {
      if (t.tagName && "a" === t.tagName.toLowerCase()) {
        if ("string" == typeof t.href) return t.href;
        var n = t.getAttribute("href") || t.getAttribute("xlink:href");
        if (n) return this.resolveUrl(n.baseVal || n);
      }

      return null;
    }, n.resolveUrl = function () {
      for (var t = arguments.length, n = new Array(t), r = 0; r < t; r++) {
        n[r] = arguments[r];
      }

      var e = n.length;
      if (0 === e) throw new Error("resolveUrl requires at least one argument; got none.");
      var i = document.createElement("base");
      if (i.href = arguments[0], 1 === e) return i.href;
      var o = document.getElementsByTagName("head")[0];
      o.insertBefore(i, o.firstChild);

      for (var u, f = document.createElement("a"), s = 1; s < e; s++) {
        f.href = arguments[s], i.href = u = f.href;
      }

      return o.removeChild(i), u;
    }, n.s = function (t, n) {
      n.parentNode.insertBefore(t, n.nextSibling);
    }, t;
  }())(),
      M = new (function () {
    function t() {
      this.h = [], this.v = -1;
    }

    var e = t.prototype;
    return e.init = function (t, n) {
      this.l = "barba";
      var r = {
        ns: n,
        scroll: {
          x: window.scrollX,
          y: window.scrollY
        },
        url: t
      };
      this.h.push(r), this.v = 0;
      var e = {
        from: this.l,
        index: 0,
        states: [].concat(this.h)
      };
      window.history && window.history.replaceState(e, "", t);
    }, e.change = function (t, n, r) {
      if (r && r.state) {
        var e = r.state,
            i = e.index;
        n = this.m(this.v - i), this.replace(e.states), this.v = i;
      } else this.add(t, n);

      return n;
    }, e.add = function (t, n) {
      var r = this.size,
          e = this.p(n),
          i = {
        ns: "tmp",
        scroll: {
          x: window.scrollX,
          y: window.scrollY
        },
        url: t
      };
      this.h.push(i), this.v = r;
      var o = {
        from: this.l,
        index: r,
        states: [].concat(this.h)
      };

      switch (e) {
        case "push":
          window.history && window.history.pushState(o, "", t);
          break;

        case "replace":
          window.history && window.history.replaceState(o, "", t);
      }
    }, e.update = function (t, n) {
      var e = n || this.v,
          i = r({}, this.get(e), {}, t);
      this.set(e, i);
    }, e.remove = function (t) {
      t ? this.h.splice(t, 1) : this.h.pop(), this.v--;
    }, e.clear = function () {
      this.h = [], this.v = -1;
    }, e.replace = function (t) {
      this.h = t;
    }, e.get = function (t) {
      return this.h[t];
    }, e.set = function (t, n) {
      return this.h[t] = n;
    }, e.p = function (t) {
      var n = "push",
          r = t,
          e = S.prefix + "-" + S.history;
      return r.hasAttribute && r.hasAttribute(e) && (n = r.getAttribute(e)), n;
    }, e.m = function (t) {
      return Math.abs(t) > 1 ? t > 0 ? "forward" : "back" : 0 === t ? "popstate" : t > 0 ? "back" : "forward";
    }, n(t, [{
      key: "current",
      get: function get() {
        return this.h[this.v];
      }
    }, {
      key: "state",
      get: function get() {
        return this.h[this.h.length - 1];
      }
    }, {
      key: "previous",
      get: function get() {
        return this.v < 1 ? null : this.h[this.v - 1];
      }
    }, {
      key: "size",
      get: function get() {
        return this.h.length;
      }
    }]), t;
  }())(),
      L = function L(t, n) {
    try {
      var r = function () {
        if (!n.next.html) return Promise.resolve(t).then(function (t) {
          var r = n.next;

          if (t) {
            var e = j.toElement(t);
            r.namespace = j.getNamespace(e), r.container = j.getContainer(e), r.html = t, M.update({
              ns: r.namespace
            });
            var i = j.toDocument(t);
            document.title = i.title;
          }
        });
      }();

      return Promise.resolve(r && r.then ? r.then(function () {}) : void 0);
    } catch (t) {
      return Promise.reject(t);
    }
  },
      $ = d,
      _ = {
    __proto__: null,
    update: L,
    nextTick: function nextTick() {
      return new Promise(function (t) {
        window.requestAnimationFrame(t);
      });
    },
    pathToRegexp: $
  },
      q = function q() {
    return window.location.origin;
  },
      B = function B(t) {
    return void 0 === t && (t = window.location.href), U(t).port;
  },
      U = function U(t) {
    var n,
        r = t.match(/:\d+/);
    if (null === r) /^http/.test(t) && (n = 80), /^https/.test(t) && (n = 443);else {
      var e = r[0].substring(1);
      n = parseInt(e, 10);
    }
    var i,
        o = t.replace(q(), ""),
        u = {},
        f = o.indexOf("#");
    f >= 0 && (i = o.slice(f + 1), o = o.slice(0, f));
    var s = o.indexOf("?");
    return s >= 0 && (u = D(o.slice(s + 1)), o = o.slice(0, s)), {
      hash: i,
      path: o,
      port: n,
      query: u
    };
  },
      D = function D(t) {
    return t.split("&").reduce(function (t, n) {
      var r = n.split("=");
      return t[r[0]] = r[1], t;
    }, {});
  },
      F = function F(t) {
    return void 0 === t && (t = window.location.href), t.replace(/(\/#.*|\/|#.*)$/, "");
  },
      H = {
    __proto__: null,
    getHref: function getHref() {
      return window.location.href;
    },
    getOrigin: q,
    getPort: B,
    getPath: function getPath(t) {
      return void 0 === t && (t = window.location.href), U(t).path;
    },
    parse: U,
    parseQuery: D,
    clean: F
  };

  function I(t, n, r) {
    return void 0 === n && (n = 2e3), new Promise(function (e, i) {
      var o = new XMLHttpRequest();
      o.onreadystatechange = function () {
        if (o.readyState === XMLHttpRequest.DONE) if (200 === o.status) e(o.responseText);else if (o.status) {
          var n = {
            status: o.status,
            statusText: o.statusText
          };
          r(t, n), i(n);
        }
      }, o.ontimeout = function () {
        var e = new Error("Timeout error [" + n + "]");
        r(t, e), i(e);
      }, o.onerror = function () {
        var n = new Error("Fetch error");
        r(t, n), i(n);
      }, o.open("GET", t), o.timeout = n, o.setRequestHeader("Accept", "text/html,application/xhtml+xml,application/xml"), o.setRequestHeader("x-barba", "yes"), o.send();
    });
  }

  var C = function C(t) {
    return !!t && ("object" == _typeof(t) || "function" == typeof t) && "function" == typeof t.then;
  };

  function N(t, n) {
    return void 0 === n && (n = {}), function () {
      for (var r = arguments.length, e = new Array(r), i = 0; i < r; i++) {
        e[i] = arguments[i];
      }

      var o = !1,
          u = new Promise(function (r, i) {
        n.async = function () {
          return o = !0, function (t, n) {
            t ? i(t) : r(n);
          };
        };

        var u = t.apply(n, e);
        o || (C(u) ? u.then(r, i) : r(u));
      });
      return u;
    };
  }

  var X = new (function (t) {
    function n() {
      var n;
      return (n = t.call(this) || this).logger = new l("@barba/core"), n.all = ["ready", "page", "reset", "currentAdded", "currentRemoved", "nextAdded", "nextRemoved", "beforeOnce", "once", "afterOnce", "before", "beforeLeave", "leave", "afterLeave", "beforeEnter", "enter", "afterEnter", "after"], n.registered = new Map(), n.init(), n;
    }

    e(n, t);
    var r = n.prototype;
    return r.init = function () {
      var t = this;
      this.registered.clear(), this.all.forEach(function (n) {
        t[n] || (t[n] = function (r, e) {
          t.registered.has(n) || t.registered.set(n, new Set()), t.registered.get(n).add({
            ctx: e || {},
            fn: r
          });
        });
      });
    }, r["do"] = function (t) {
      for (var n = this, r = arguments.length, e = new Array(r > 1 ? r - 1 : 0), i = 1; i < r; i++) {
        e[i - 1] = arguments[i];
      }

      if (this.registered.has(t)) {
        var o = Promise.resolve();
        return this.registered.get(t).forEach(function (t) {
          o = o.then(function () {
            return N(t.fn, t.ctx).apply(void 0, e);
          });
        }), o["catch"](function (r) {
          n.logger.debug("Hook error [" + t + "]"), n.logger.error(r);
        });
      }

      return Promise.resolve();
    }, r.clear = function () {
      var t = this;
      this.all.forEach(function (n) {
        delete t[n];
      }), this.init();
    }, r.help = function () {
      this.logger.info("Available hooks: " + this.all.join(","));
      var t = [];
      this.registered.forEach(function (n, r) {
        return t.push(r);
      }), this.logger.info("Registered hooks: " + t.join(","));
    }, n;
  }(h))(),
      z = function () {
    function t(t) {
      if (this.P = [], "boolean" == typeof t) this.g = t;else {
        var n = Array.isArray(t) ? t : [t];
        this.P = n.map(function (t) {
          return $(t);
        });
      }
    }

    return t.prototype.checkHref = function (t) {
      if ("boolean" == typeof this.g) return this.g;
      var n = U(t).path;
      return this.P.some(function (t) {
        return null !== t.exec(n);
      });
    }, t;
  }(),
      G = function (t) {
    function n(n) {
      var r;
      return (r = t.call(this, n) || this).k = new Map(), r;
    }

    e(n, t);
    var i = n.prototype;
    return i.set = function (t, n, r) {
      return this.k.set(t, {
        action: r,
        request: n
      }), {
        action: r,
        request: n
      };
    }, i.get = function (t) {
      return this.k.get(t);
    }, i.getRequest = function (t) {
      return this.k.get(t).request;
    }, i.getAction = function (t) {
      return this.k.get(t).action;
    }, i.has = function (t) {
      return !this.checkHref(t) && this.k.has(t);
    }, i["delete"] = function (t) {
      return this.k["delete"](t);
    }, i.update = function (t, n) {
      var e = r({}, this.k.get(t), {}, n);
      return this.k.set(t, e), e;
    }, n;
  }(z),
      Q = function Q() {
    return !window.history.pushState;
  },
      W = function W(t) {
    return !t.el || !t.href;
  },
      J = function J(t) {
    var n = t.event;
    return n.which > 1 || n.metaKey || n.ctrlKey || n.shiftKey || n.altKey;
  },
      K = function K(t) {
    var n = t.el;
    return n.hasAttribute("target") && "_blank" === n.target;
  },
      V = function V(t) {
    var n = t.el;
    return void 0 !== n.protocol && window.location.protocol !== n.protocol || void 0 !== n.hostname && window.location.hostname !== n.hostname;
  },
      Y = function Y(t) {
    var n = t.el;
    return void 0 !== n.port && B() !== B(n.href);
  },
      Z = function Z(t) {
    var n = t.el;
    return n.getAttribute && "string" == typeof n.getAttribute("download");
  },
      tt = function tt(t) {
    return t.el.hasAttribute(S.prefix + "-" + S.prevent);
  },
      nt = function nt(t) {
    return Boolean(t.el.closest("[" + S.prefix + "-" + S.prevent + '="all"]'));
  },
      rt = function rt(t) {
    var n = t.href;
    return F(n) === F() && B(n) === B();
  },
      et = function (t) {
    function n(n) {
      var r;
      return (r = t.call(this, n) || this).suite = [], r.tests = new Map(), r.init(), r;
    }

    e(n, t);
    var r = n.prototype;
    return r.init = function () {
      this.add("pushState", Q), this.add("exists", W), this.add("newTab", J), this.add("blank", K), this.add("corsDomain", V), this.add("corsPort", Y), this.add("download", Z), this.add("preventSelf", tt), this.add("preventAll", nt), this.add("sameUrl", rt, !1);
    }, r.add = function (t, n, r) {
      void 0 === r && (r = !0), this.tests.set(t, n), r && this.suite.push(t);
    }, r.run = function (t, n, r, e) {
      return this.tests.get(t)({
        el: n,
        event: r,
        href: e
      });
    }, r.checkLink = function (t, n, r) {
      var e = this;
      return this.suite.some(function (i) {
        return e.run(i, t, n, r);
      });
    }, n;
  }(z),
      it = function (t) {
    function n(r, e) {
      var i;
      void 0 === e && (e = "Barba error");

      for (var o = arguments.length, u = new Array(o > 2 ? o - 2 : 0), f = 2; f < o; f++) {
        u[f - 2] = arguments[f];
      }

      return (i = t.call.apply(t, [this].concat(u)) || this).error = r, i.label = e, Error.captureStackTrace && Error.captureStackTrace(function (t) {
        if (void 0 === t) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
        return t;
      }(i), n), i.name = "BarbaError", i;
    }

    return e(n, t), n;
  }(f(Error)),
      ot = function () {
    function t(t) {
      void 0 === t && (t = []), this.logger = new l("@barba/core"), this.all = [], this.page = [], this.once = [], this.A = [{
        name: "namespace",
        type: "strings"
      }, {
        name: "custom",
        type: "function"
      }], t && (this.all = this.all.concat(t)), this.update();
    }

    var n = t.prototype;
    return n.add = function (t, n) {
      switch (t) {
        case "rule":
          this.A.splice(n.position || 0, 0, n.value);
          break;

        case "transition":
        default:
          this.all.push(n);
      }

      this.update();
    }, n.resolve = function (t, n) {
      var r = this;
      void 0 === n && (n = {});
      var e = n.once ? this.once : this.page;
      e = e.filter(n.self ? function (t) {
        return t.name && "self" === t.name;
      } : function (t) {
        return !t.name || "self" !== t.name;
      });
      var i = new Map(),
          o = e.find(function (e) {
        var o = !0,
            u = {};
        return !(!n.self || "self" !== e.name) || (r.A.reverse().forEach(function (n) {
          o && (o = r.R(e, n, t, u), e.from && e.to && (o = r.R(e, n, t, u, "from") && r.R(e, n, t, u, "to")), e.from && !e.to && (o = r.R(e, n, t, u, "from")), !e.from && e.to && (o = r.R(e, n, t, u, "to")));
        }), i.set(e, u), o);
      }),
          u = i.get(o),
          f = [];

      if (f.push(n.once ? "once" : "page"), n.self && f.push("self"), u) {
        var s,
            c = [o];
        Object.keys(u).length > 0 && c.push(u), (s = this.logger).info.apply(s, ["Transition found [" + f.join(",") + "]"].concat(c));
      } else this.logger.info("No transition found [" + f.join(",") + "]");

      return o;
    }, n.update = function () {
      var t = this;
      this.all = this.all.map(function (n) {
        return t.T(n);
      }).sort(function (t, n) {
        return t.priority - n.priority;
      }).reverse().map(function (t) {
        return delete t.priority, t;
      }), this.page = this.all.filter(function (t) {
        return void 0 !== t.leave || void 0 !== t.enter;
      }), this.once = this.all.filter(function (t) {
        return void 0 !== t.once;
      });
    }, n.R = function (t, n, r, e, i) {
      var o = !0,
          u = !1,
          f = t,
          s = n.name,
          c = s,
          a = s,
          h = s,
          v = i ? f[i] : f,
          l = "to" === i ? r.next : r.current;

      if (i ? v && v[s] : v[s]) {
        switch (n.type) {
          case "strings":
          default:
            var d = Array.isArray(v[c]) ? v[c] : [v[c]];
            l[c] && -1 !== d.indexOf(l[c]) && (u = !0), -1 === d.indexOf(l[c]) && (o = !1);
            break;

          case "object":
            var m = Array.isArray(v[a]) ? v[a] : [v[a]];
            l[a] ? (l[a].name && -1 !== m.indexOf(l[a].name) && (u = !0), -1 === m.indexOf(l[a].name) && (o = !1)) : o = !1;
            break;

          case "function":
            v[h](r) ? u = !0 : o = !1;
        }

        u && (i ? (e[i] = e[i] || {}, e[i][s] = f[i][s]) : e[s] = f[s]);
      }

      return o;
    }, n.O = function (t, n, r) {
      var e = 0;
      return (t[n] || t.from && t.from[n] || t.to && t.to[n]) && (e += Math.pow(10, r), t.from && t.from[n] && (e += 1), t.to && t.to[n] && (e += 2)), e;
    }, n.T = function (t) {
      var n = this;
      t.priority = 0;
      var r = 0;
      return this.A.forEach(function (e, i) {
        r += n.O(t, e.name, i + 1);
      }), t.priority = r, t;
    }, t;
  }(),
      ut = function () {
    function t(t) {
      void 0 === t && (t = []), this.logger = new l("@barba/core"), this.S = !1, this.store = new ot(t);
    }

    var r = t.prototype;
    return r.get = function (t, n) {
      return this.store.resolve(t, n);
    }, r.doOnce = function (t) {
      var n = t.data,
          r = t.transition;

      try {
        var e = function e() {
          i.S = !1;
        },
            i = this,
            o = r || {};

        i.S = !0;
        var u = s(function () {
          return Promise.resolve(i.j("beforeOnce", n, o)).then(function () {
            return Promise.resolve(i.once(n, o)).then(function () {
              return Promise.resolve(i.j("afterOnce", n, o)).then(function () {});
            });
          });
        }, function (t) {
          i.S = !1, i.logger.debug("Transition error [before/after/once]"), i.logger.error(t);
        });
        return Promise.resolve(u && u.then ? u.then(e) : e());
      } catch (t) {
        return Promise.reject(t);
      }
    }, r.doPage = function (t) {
      var n = t.data,
          r = t.transition,
          e = t.page,
          i = t.wrapper;

      try {
        var o = function o(t) {
          if (u) return t;
          f.S = !1;
        },
            u = !1,
            f = this,
            c = r || {},
            a = !0 === c.sync || !1;

        f.S = !0;
        var h = s(function () {
          function t() {
            return Promise.resolve(f.j("before", n, c)).then(function () {
              var t = !1;

              function r(r) {
                return t ? r : Promise.resolve(f.remove(n)).then(function () {
                  return Promise.resolve(f.j("after", n, c)).then(function () {});
                });
              }

              var o = function () {
                if (a) return s(function () {
                  return Promise.resolve(f.add(n, i)).then(function () {
                    return Promise.resolve(f.j("beforeLeave", n, c)).then(function () {
                      return Promise.resolve(f.j("beforeEnter", n, c)).then(function () {
                        return Promise.resolve(Promise.all([f.leave(n, c), f.enter(n, c)])).then(function () {
                          return Promise.resolve(f.j("afterLeave", n, c)).then(function () {
                            return Promise.resolve(f.j("afterEnter", n, c)).then(function () {});
                          });
                        });
                      });
                    });
                  });
                }, function (t) {
                  if (f.M(t)) throw new it(t, "Transition error [sync]");
                });

                var r = function r(_r) {
                  return t ? _r : s(function () {
                    var t = function () {
                      if (!1 !== o) return Promise.resolve(f.add(n, i)).then(function () {
                        return Promise.resolve(f.j("beforeEnter", n, c)).then(function () {
                          return Promise.resolve(f.enter(n, c, o)).then(function () {
                            return Promise.resolve(f.j("afterEnter", n, c)).then(function () {});
                          });
                        });
                      });
                    }();

                    if (t && t.then) return t.then(function () {});
                  }, function (t) {
                    if (f.M(t)) throw new it(t, "Transition error [before/after/enter]");
                  });
                },
                    o = !1,
                    u = s(function () {
                  return Promise.resolve(f.j("beforeLeave", n, c)).then(function () {
                    return Promise.resolve(Promise.all([f.leave(n, c), L(e, n)]).then(function (t) {
                      return t[0];
                    })).then(function (t) {
                      return o = t, Promise.resolve(f.j("afterLeave", n, c)).then(function () {});
                    });
                  });
                }, function (t) {
                  if (f.M(t)) throw new it(t, "Transition error [before/after/leave]");
                });

                return u && u.then ? u.then(r) : r(u);
              }();

              return o && o.then ? o.then(r) : r(o);
            });
          }

          var r = function () {
            if (a) return Promise.resolve(L(e, n)).then(function () {});
          }();

          return r && r.then ? r.then(t) : t();
        }, function (t) {
          if (f.S = !1, t.name && "BarbaError" === t.name) throw f.logger.debug(t.label), f.logger.error(t.error), t;
          throw f.logger.debug("Transition error [page]"), f.logger.error(t), t;
        });
        return Promise.resolve(h && h.then ? h.then(o) : o(h));
      } catch (t) {
        return Promise.reject(t);
      }
    }, r.once = function (t, n) {
      try {
        return Promise.resolve(X["do"]("once", t, n)).then(function () {
          return n.once ? N(n.once, n)(t) : Promise.resolve();
        });
      } catch (t) {
        return Promise.reject(t);
      }
    }, r.leave = function (t, n) {
      try {
        return Promise.resolve(X["do"]("leave", t, n)).then(function () {
          return n.leave ? N(n.leave, n)(t) : Promise.resolve();
        });
      } catch (t) {
        return Promise.reject(t);
      }
    }, r.enter = function (t, n, r) {
      try {
        return Promise.resolve(X["do"]("enter", t, n)).then(function () {
          return n.enter ? N(n.enter, n)(t, r) : Promise.resolve();
        });
      } catch (t) {
        return Promise.reject(t);
      }
    }, r.add = function (t, n) {
      try {
        return j.addContainer(t.next.container, n), X["do"]("nextAdded", t), Promise.resolve();
      } catch (t) {
        return Promise.reject(t);
      }
    }, r.remove = function (t) {
      try {
        return j.removeContainer(t.current.container), X["do"]("currentRemoved", t), Promise.resolve();
      } catch (t) {
        return Promise.reject(t);
      }
    }, r.M = function (t) {
      return t.message ? !/Timeout error|Fetch error/.test(t.message) : !t.status;
    }, r.j = function (t, n, r) {
      try {
        return Promise.resolve(X["do"](t, n, r)).then(function () {
          return r[t] ? N(r[t], r)(n) : Promise.resolve();
        });
      } catch (t) {
        return Promise.reject(t);
      }
    }, n(t, [{
      key: "isRunning",
      get: function get() {
        return this.S;
      },
      set: function set(t) {
        this.S = t;
      }
    }, {
      key: "hasOnce",
      get: function get() {
        return this.store.once.length > 0;
      }
    }, {
      key: "hasSelf",
      get: function get() {
        return this.store.all.some(function (t) {
          return "self" === t.name;
        });
      }
    }, {
      key: "shouldWait",
      get: function get() {
        return this.store.all.some(function (t) {
          return t.to && !t.to.route || t.sync;
        });
      }
    }]), t;
  }(),
      ft = function () {
    function t(t) {
      var n = this;
      this.names = ["beforeLeave", "afterLeave", "beforeEnter", "afterEnter"], this.byNamespace = new Map(), 0 !== t.length && (t.forEach(function (t) {
        n.byNamespace.set(t.namespace, t);
      }), this.names.forEach(function (t) {
        X[t](n.L(t));
      }));
    }

    return t.prototype.L = function (t) {
      var n = this;
      return function (r) {
        var e = t.match(/enter/i) ? r.next : r.current,
            i = n.byNamespace.get(e.namespace);
        return i && i[t] ? N(i[t], i)(r) : Promise.resolve();
      };
    }, t;
  }();

  Element.prototype.matches || (Element.prototype.matches = Element.prototype.msMatchesSelector || Element.prototype.webkitMatchesSelector), Element.prototype.closest || (Element.prototype.closest = function (t) {
    var n = this;

    do {
      if (n.matches(t)) return n;
      n = n.parentElement || n.parentNode;
    } while (null !== n && 1 === n.nodeType);

    return null;
  });
  var st = {
    container: null,
    html: "",
    namespace: "",
    url: {
      hash: "",
      href: "",
      path: "",
      port: null,
      query: {}
    }
  };
  return new (function () {
    function t() {
      this.version = a, this.schemaPage = st, this.Logger = l, this.logger = new l("@barba/core"), this.plugins = [], this.hooks = X, this.dom = j, this.helpers = _, this.history = M, this.request = I, this.url = H;
    }

    var e = t.prototype;
    return e.use = function (t, n) {
      var r = this.plugins;
      r.indexOf(t) > -1 ? this.logger.warn("Plugin [" + t.name + "] already installed.") : "function" == typeof t.install ? (t.install(this, n), r.push(t)) : this.logger.warn("Plugin [" + t.name + '] has no "install" method.');
    }, e.init = function (t) {
      var n = void 0 === t ? {} : t,
          e = n.transitions,
          i = void 0 === e ? [] : e,
          o = n.views,
          u = void 0 === o ? [] : o,
          f = n.schema,
          s = void 0 === f ? S : f,
          c = n.requestError,
          a = n.timeout,
          h = void 0 === a ? 2e3 : a,
          v = n.cacheIgnore,
          d = void 0 !== v && v,
          m = n.prefetchIgnore,
          p = void 0 !== m && m,
          w = n.preventRunning,
          b = void 0 !== w && w,
          y = n.prevent,
          P = void 0 === y ? null : y,
          g = n.debug,
          E = n.logLevel;
      if (l.setLevel(!0 === (void 0 !== g && g) ? "debug" : void 0 === E ? "off" : E), this.logger.info(this.version), Object.keys(s).forEach(function (t) {
        S[t] && (S[t] = s[t]);
      }), this.$ = c, this.timeout = h, this.cacheIgnore = d, this.prefetchIgnore = p, this.preventRunning = b, this._ = this.dom.getWrapper(), !this._) throw new Error("[@barba/core] No Barba wrapper found");
      this._.setAttribute("aria-live", "polite"), this.q();
      var x = this.data.current;
      if (!x.container) throw new Error("[@barba/core] No Barba container found");

      if (this.cache = new G(d), this.prevent = new et(p), this.transitions = new ut(i), this.views = new ft(u), null !== P) {
        if ("function" != typeof P) throw new Error("[@barba/core] Prevent should be a function");
        this.prevent.add("preventCustom", P);
      }

      this.history.init(x.url.href, x.namespace), this.B = this.B.bind(this), this.U = this.U.bind(this), this.D = this.D.bind(this), this.F(), this.plugins.forEach(function (t) {
        return t.init();
      });
      var k = this.data;
      k.trigger = "barba", k.next = k.current, k.current = r({}, this.schemaPage), this.hooks["do"]("ready", k), this.once(k), this.q();
    }, e.destroy = function () {
      this.q(), this.H(), this.history.clear(), this.hooks.clear(), this.plugins = [];
    }, e.force = function (t) {
      window.location.assign(t);
    }, e.go = function (t, n, r) {
      var e;
      if (void 0 === n && (n = "barba"), this.transitions.isRunning) this.force(t);else if (!(e = "popstate" === n ? this.history.current && this.url.getPath(this.history.current.url) === this.url.getPath(t) : this.prevent.run("sameUrl", null, null, t)) || this.transitions.hasSelf) return n = this.history.change(t, n, r), r && (r.stopPropagation(), r.preventDefault()), this.page(t, n, e);
    }, e.once = function (t) {
      try {
        var n = this;
        return Promise.resolve(n.hooks["do"]("beforeEnter", t)).then(function () {
          function r() {
            return Promise.resolve(n.hooks["do"]("afterEnter", t)).then(function () {});
          }

          var e = function () {
            if (n.transitions.hasOnce) {
              var r = n.transitions.get(t, {
                once: !0
              });
              return Promise.resolve(n.transitions.doOnce({
                transition: r,
                data: t
              })).then(function () {});
            }
          }();

          return e && e.then ? e.then(r) : r();
        });
      } catch (t) {
        return Promise.reject(t);
      }
    }, e.page = function (t, n, e) {
      try {
        var i = function i() {
          var t = o.data;
          return Promise.resolve(o.hooks["do"]("page", t)).then(function () {
            var n = s(function () {
              var n = o.transitions.get(t, {
                once: !1,
                self: e
              });
              return Promise.resolve(o.transitions.doPage({
                data: t,
                page: u,
                transition: n,
                wrapper: o._
              })).then(function () {
                o.q();
              });
            }, function () {
              0 === l.getLevel() && o.force(t.current.url.href);
            });
            if (n && n.then) return n.then(function () {});
          });
        },
            o = this;

        o.data.next.url = r({
          href: t
        }, o.url.parse(t)), o.data.trigger = n;

        var u = o.cache.has(t) ? o.cache.update(t, {
          action: "click"
        }).request : o.cache.set(t, o.request(t, o.timeout, o.onRequestError.bind(o, n)), "click").request,
            f = function () {
          if (o.transitions.shouldWait) return Promise.resolve(L(u, o.data)).then(function () {});
        }();

        return Promise.resolve(f && f.then ? f.then(i) : i());
      } catch (t) {
        return Promise.reject(t);
      }
    }, e.onRequestError = function (t) {
      this.transitions.isRunning = !1;

      for (var n = arguments.length, r = new Array(n > 1 ? n - 1 : 0), e = 1; e < n; e++) {
        r[e - 1] = arguments[e];
      }

      var i = r[0],
          o = r[1],
          u = this.cache.getAction(i);
      return this.cache["delete"](i), !(this.$ && !1 === this.$(t, u, i, o) || ("click" === u && this.force(i), 1));
    }, e.prefetch = function (t) {
      var n = this;
      this.cache.has(t) || this.cache.set(t, this.request(t, this.timeout, this.onRequestError.bind(this, "barba"))["catch"](function (t) {
        n.logger.error(t);
      }), "prefetch");
    }, e.F = function () {
      !0 !== this.prefetchIgnore && (document.addEventListener("mouseover", this.B), document.addEventListener("touchstart", this.B)), document.addEventListener("click", this.U), window.addEventListener("popstate", this.D);
    }, e.H = function () {
      !0 !== this.prefetchIgnore && (document.removeEventListener("mouseover", this.B), document.removeEventListener("touchstart", this.B)), document.removeEventListener("click", this.U), window.removeEventListener("popstate", this.D);
    }, e.B = function (t) {
      var n = this,
          r = this.I(t);

      if (r) {
        var e = this.dom.getHref(r);
        this.prevent.checkHref(e) || this.cache.has(e) || this.cache.set(e, this.request(e, this.timeout, this.onRequestError.bind(this, r))["catch"](function (t) {
          n.logger.error(t);
        }), "enter");
      }
    }, e.U = function (t) {
      var n = this.I(t);
      if (n) return this.transitions.isRunning && this.preventRunning ? (t.preventDefault(), void t.stopPropagation()) : void this.go(this.dom.getHref(n), n, t);
    }, e.D = function (t) {
      this.go(this.url.getHref(), "popstate", t);
    }, e.I = function (t) {
      for (var n = t.target; n && !this.dom.getHref(n);) {
        n = n.parentNode;
      }

      if (n && !this.prevent.checkLink(n, t, this.dom.getHref(n))) return n;
    }, e.q = function () {
      var t = this.url.getHref(),
          n = {
        container: this.dom.getContainer(),
        html: this.dom.getHtml(),
        namespace: this.dom.getNamespace(),
        url: r({
          href: t
        }, this.url.parse(t))
      };
      this.C = {
        current: n,
        next: r({}, this.schemaPage),
        trigger: void 0
      }, this.hooks["do"]("reset", this.data);
    }, n(t, [{
      key: "data",
      get: function get() {
        return this.C;
      }
    }, {
      key: "wrapper",
      get: function get() {
        return this._;
      }
    }]), t;
  }())();
});

/***/ }),

/***/ "./node_modules/.pnpm/ev-emitter@1.1.1/node_modules/ev-emitter/ev-emitter.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/.pnpm/ev-emitter@1.1.1/node_modules/ev-emitter/ev-emitter.js ***!
  \***********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__;function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

/**
 * EvEmitter v1.1.0
 * Lil' event emitter
 * MIT License
 */

/* jshint unused: true, undef: true, strict: true */
(function (global, factory) {
  // universal module definition

  /* jshint strict: false */

  /* globals define, module, window */
  if (true) {
    // AMD - RequireJS
    !(__WEBPACK_AMD_DEFINE_FACTORY__ = (factory),
				__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
				(__WEBPACK_AMD_DEFINE_FACTORY__.call(exports, __webpack_require__, exports, module)) :
				__WEBPACK_AMD_DEFINE_FACTORY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
  } else {}
})(typeof window != 'undefined' ? window : this, function () {
  "use strict";

  function EvEmitter() {}

  var proto = EvEmitter.prototype;

  proto.on = function (eventName, listener) {
    if (!eventName || !listener) {
      return;
    } // set events hash


    var events = this._events = this._events || {}; // set listeners array

    var listeners = events[eventName] = events[eventName] || []; // only add once

    if (listeners.indexOf(listener) == -1) {
      listeners.push(listener);
    }

    return this;
  };

  proto.once = function (eventName, listener) {
    if (!eventName || !listener) {
      return;
    } // add event


    this.on(eventName, listener); // set once flag
    // set onceEvents hash

    var onceEvents = this._onceEvents = this._onceEvents || {}; // set onceListeners object

    var onceListeners = onceEvents[eventName] = onceEvents[eventName] || {}; // set flag

    onceListeners[listener] = true;
    return this;
  };

  proto.off = function (eventName, listener) {
    var listeners = this._events && this._events[eventName];

    if (!listeners || !listeners.length) {
      return;
    }

    var index = listeners.indexOf(listener);

    if (index != -1) {
      listeners.splice(index, 1);
    }

    return this;
  };

  proto.emitEvent = function (eventName, args) {
    var listeners = this._events && this._events[eventName];

    if (!listeners || !listeners.length) {
      return;
    } // copy over to avoid interference if .off() in listener


    listeners = listeners.slice(0);
    args = args || []; // once stuff

    var onceListeners = this._onceEvents && this._onceEvents[eventName];

    for (var i = 0; i < listeners.length; i++) {
      var listener = listeners[i];
      var isOnce = onceListeners && onceListeners[listener];

      if (isOnce) {
        // remove listener
        // remove before trigger to prevent recursion
        this.off(eventName, listener); // unset once flag

        delete onceListeners[listener];
      } // trigger listener


      listener.apply(this, args);
    }

    return this;
  };

  proto.allOff = function () {
    delete this._events;
    delete this._onceEvents;
  };

  return EvEmitter;
});

/***/ }),

/***/ "./node_modules/.pnpm/gsap@3.5.1/node_modules/gsap/CSSPlugin.js":
/*!**********************************************************************!*\
  !*** ./node_modules/.pnpm/gsap@3.5.1/node_modules/gsap/CSSPlugin.js ***!
  \**********************************************************************/
/*! exports provided: CSSPlugin, default, _getBBox, _createElement, checkPrefix */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CSSPlugin", function() { return CSSPlugin; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return CSSPlugin; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "_getBBox", function() { return _getBBox; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "_createElement", function() { return _createElement; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "checkPrefix", function() { return _checkPropPrefix; });
/* harmony import */ var _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./gsap-core.js */ "./node_modules/.pnpm/gsap@3.5.1/node_modules/gsap/gsap-core.js");
function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

/*!
 * CSSPlugin 3.5.1
 * https://greensock.com
 *
 * Copyright 2008-2020, GreenSock. All rights reserved.
 * Subject to the terms at https://greensock.com/standard-license or for
 * Club GreenSock members, the agreement issued with that membership.
 * @author: Jack Doyle, jack@greensock.com
*/

/* eslint-disable */


var _win,
    _doc,
    _docElement,
    _pluginInitted,
    _tempDiv,
    _tempDivStyler,
    _recentSetterPlugin,
    _windowExists = function _windowExists() {
  return typeof window !== "undefined";
},
    _transformProps = {},
    _RAD2DEG = 180 / Math.PI,
    _DEG2RAD = Math.PI / 180,
    _atan2 = Math.atan2,
    _bigNum = 1e8,
    _capsExp = /([A-Z])/g,
    _horizontalExp = /(?:left|right|width|margin|padding|x)/i,
    _complexExp = /[\s,\(]\S/,
    _propertyAliases = {
  autoAlpha: "opacity,visibility",
  scale: "scaleX,scaleY",
  alpha: "opacity"
},
    _renderCSSProp = function _renderCSSProp(ratio, data) {
  return data.set(data.t, data.p, Math.round((data.s + data.c * ratio) * 10000) / 10000 + data.u, data);
},
    _renderPropWithEnd = function _renderPropWithEnd(ratio, data) {
  return data.set(data.t, data.p, ratio === 1 ? data.e : Math.round((data.s + data.c * ratio) * 10000) / 10000 + data.u, data);
},
    _renderCSSPropWithBeginning = function _renderCSSPropWithBeginning(ratio, data) {
  return data.set(data.t, data.p, ratio ? Math.round((data.s + data.c * ratio) * 10000) / 10000 + data.u : data.b, data);
},
    //if units change, we need a way to render the original unit/value when the tween goes all the way back to the beginning (ratio:0)
_renderRoundedCSSProp = function _renderRoundedCSSProp(ratio, data) {
  var value = data.s + data.c * ratio;
  data.set(data.t, data.p, ~~(value + (value < 0 ? -.5 : .5)) + data.u, data);
},
    _renderNonTweeningValue = function _renderNonTweeningValue(ratio, data) {
  return data.set(data.t, data.p, ratio ? data.e : data.b, data);
},
    _renderNonTweeningValueOnlyAtEnd = function _renderNonTweeningValueOnlyAtEnd(ratio, data) {
  return data.set(data.t, data.p, ratio !== 1 ? data.b : data.e, data);
},
    _setterCSSStyle = function _setterCSSStyle(target, property, value) {
  return target.style[property] = value;
},
    _setterCSSProp = function _setterCSSProp(target, property, value) {
  return target.style.setProperty(property, value);
},
    _setterTransform = function _setterTransform(target, property, value) {
  return target._gsap[property] = value;
},
    _setterScale = function _setterScale(target, property, value) {
  return target._gsap.scaleX = target._gsap.scaleY = value;
},
    _setterScaleWithRender = function _setterScaleWithRender(target, property, value, data, ratio) {
  var cache = target._gsap;
  cache.scaleX = cache.scaleY = value;
  cache.renderTransform(ratio, cache);
},
    _setterTransformWithRender = function _setterTransformWithRender(target, property, value, data, ratio) {
  var cache = target._gsap;
  cache[property] = value;
  cache.renderTransform(ratio, cache);
},
    _transformProp = "transform",
    _transformOriginProp = _transformProp + "Origin",
    _supports3D,
    _createElement = function _createElement(type, ns) {
  var e = _doc.createElementNS ? _doc.createElementNS((ns || "http://www.w3.org/1999/xhtml").replace(/^https/, "http"), type) : _doc.createElement(type); //some servers swap in https for http in the namespace which can break things, making "style" inaccessible.

  return e.style ? e : _doc.createElement(type); //some environments won't allow access to the element's style when created with a namespace in which case we default to the standard createElement() to work around the issue. Also note that when GSAP is embedded directly inside an SVG file, createElement() won't allow access to the style object in Firefox (see https://greensock.com/forums/topic/20215-problem-using-tweenmax-in-standalone-self-containing-svg-file-err-cannot-set-property-csstext-of-undefined/).
},
    _getComputedProperty = function _getComputedProperty(target, property, skipPrefixFallback) {
  var cs = getComputedStyle(target);
  return cs[property] || cs.getPropertyValue(property.replace(_capsExp, "-$1").toLowerCase()) || cs.getPropertyValue(property) || !skipPrefixFallback && _getComputedProperty(target, _checkPropPrefix(property) || property, 1) || ""; //css variables may not need caps swapped out for dashes and lowercase.
},
    _prefixes = "O,Moz,ms,Ms,Webkit".split(","),
    _checkPropPrefix = function _checkPropPrefix(property, element, preferPrefix) {
  var e = element || _tempDiv,
      s = e.style,
      i = 5;

  if (property in s && !preferPrefix) {
    return property;
  }

  property = property.charAt(0).toUpperCase() + property.substr(1);

  while (i-- && !(_prefixes[i] + property in s)) {}

  return i < 0 ? null : (i === 3 ? "ms" : i >= 0 ? _prefixes[i] : "") + property;
},
    _initCore = function _initCore() {
  if (_windowExists() && window.document) {
    _win = window;
    _doc = _win.document;
    _docElement = _doc.documentElement;
    _tempDiv = _createElement("div") || {
      style: {}
    };
    _tempDivStyler = _createElement("div");
    _transformProp = _checkPropPrefix(_transformProp);
    _transformOriginProp = _transformProp + "Origin";
    _tempDiv.style.cssText = "border-width:0;line-height:0;position:absolute;padding:0"; //make sure to override certain properties that may contaminate measurements, in case the user has overreaching style sheets.

    _supports3D = !!_checkPropPrefix("perspective");
    _pluginInitted = 1;
  }
},
    _getBBoxHack = function _getBBoxHack(swapIfPossible) {
  //works around issues in some browsers (like Firefox) that don't correctly report getBBox() on SVG elements inside a <defs> element and/or <mask>. We try creating an SVG, adding it to the documentElement and toss the element in there so that it's definitely part of the rendering tree, then grab the bbox and if it works, we actually swap out the original getBBox() method for our own that does these extra steps whenever getBBox is needed. This helps ensure that performance is optimal (only do all these extra steps when absolutely necessary...most elements don't need it).
  var svg = _createElement("svg", this.ownerSVGElement && this.ownerSVGElement.getAttribute("xmlns") || "http://www.w3.org/2000/svg"),
      oldParent = this.parentNode,
      oldSibling = this.nextSibling,
      oldCSS = this.style.cssText,
      bbox;

  _docElement.appendChild(svg);

  svg.appendChild(this);
  this.style.display = "block";

  if (swapIfPossible) {
    try {
      bbox = this.getBBox();
      this._gsapBBox = this.getBBox; //store the original

      this.getBBox = _getBBoxHack;
    } catch (e) {}
  } else if (this._gsapBBox) {
    bbox = this._gsapBBox();
  }

  if (oldParent) {
    if (oldSibling) {
      oldParent.insertBefore(this, oldSibling);
    } else {
      oldParent.appendChild(this);
    }
  }

  _docElement.removeChild(svg);

  this.style.cssText = oldCSS;
  return bbox;
},
    _getAttributeFallbacks = function _getAttributeFallbacks(target, attributesArray) {
  var i = attributesArray.length;

  while (i--) {
    if (target.hasAttribute(attributesArray[i])) {
      return target.getAttribute(attributesArray[i]);
    }
  }
},
    _getBBox = function _getBBox(target) {
  var bounds;

  try {
    bounds = target.getBBox(); //Firefox throws errors if you try calling getBBox() on an SVG element that's not rendered (like in a <symbol> or <defs>). https://bugzilla.mozilla.org/show_bug.cgi?id=612118
  } catch (error) {
    bounds = _getBBoxHack.call(target, true);
  }

  bounds && (bounds.width || bounds.height) || target.getBBox === _getBBoxHack || (bounds = _getBBoxHack.call(target, true)); //some browsers (like Firefox) misreport the bounds if the element has zero width and height (it just assumes it's at x:0, y:0), thus we need to manually grab the position in that case.

  return bounds && !bounds.width && !bounds.x && !bounds.y ? {
    x: +_getAttributeFallbacks(target, ["x", "cx", "x1"]) || 0,
    y: +_getAttributeFallbacks(target, ["y", "cy", "y1"]) || 0,
    width: 0,
    height: 0
  } : bounds;
},
    _isSVG = function _isSVG(e) {
  return !!(e.getCTM && (!e.parentNode || e.ownerSVGElement) && _getBBox(e));
},
    //reports if the element is an SVG on which getBBox() actually works
_removeProperty = function _removeProperty(target, property) {
  if (property) {
    var style = target.style;

    if (property in _transformProps && property !== _transformOriginProp) {
      property = _transformProp;
    }

    if (style.removeProperty) {
      if (property.substr(0, 2) === "ms" || property.substr(0, 6) === "webkit") {
        //Microsoft and some Webkit browsers don't conform to the standard of capitalizing the first prefix character, so we adjust so that when we prefix the caps with a dash, it's correct (otherwise it'd be "ms-transform" instead of "-ms-transform" for IE9, for example)
        property = "-" + property;
      }

      style.removeProperty(property.replace(_capsExp, "-$1").toLowerCase());
    } else {
      //note: old versions of IE use "removeAttribute()" instead of "removeProperty()"
      style.removeAttribute(property);
    }
  }
},
    _addNonTweeningPT = function _addNonTweeningPT(plugin, target, property, beginning, end, onlySetAtEnd) {
  var pt = new _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__["PropTween"](plugin._pt, target, property, 0, 1, onlySetAtEnd ? _renderNonTweeningValueOnlyAtEnd : _renderNonTweeningValue);
  plugin._pt = pt;
  pt.b = beginning;
  pt.e = end;

  plugin._props.push(property);

  return pt;
},
    _nonConvertibleUnits = {
  deg: 1,
  rad: 1,
  turn: 1
},
    //takes a single value like 20px and converts it to the unit specified, like "%", returning only the numeric amount.
_convertToUnit = function _convertToUnit(target, property, value, unit) {
  var curValue = parseFloat(value) || 0,
      curUnit = (value + "").trim().substr((curValue + "").length) || "px",
      // some browsers leave extra whitespace at the beginning of CSS variables, hence the need to trim()
  style = _tempDiv.style,
      horizontal = _horizontalExp.test(property),
      isRootSVG = target.tagName.toLowerCase() === "svg",
      measureProperty = (isRootSVG ? "client" : "offset") + (horizontal ? "Width" : "Height"),
      amount = 100,
      toPixels = unit === "px",
      toPercent = unit === "%",
      px,
      parent,
      cache,
      isSVG;

  if (unit === curUnit || !curValue || _nonConvertibleUnits[unit] || _nonConvertibleUnits[curUnit]) {
    return curValue;
  }

  curUnit !== "px" && !toPixels && (curValue = _convertToUnit(target, property, value, "px"));
  isSVG = target.getCTM && _isSVG(target);

  if (toPercent && (_transformProps[property] || ~property.indexOf("adius"))) {
    //transforms and borderRadius are relative to the size of the element itself!
    return Object(_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__["_round"])(curValue / (isSVG ? target.getBBox()[horizontal ? "width" : "height"] : target[measureProperty]) * amount);
  }

  style[horizontal ? "width" : "height"] = amount + (toPixels ? curUnit : unit);
  parent = ~property.indexOf("adius") || unit === "em" && target.appendChild && !isRootSVG ? target : target.parentNode;

  if (isSVG) {
    parent = (target.ownerSVGElement || {}).parentNode;
  }

  if (!parent || parent === _doc || !parent.appendChild) {
    parent = _doc.body;
  }

  cache = parent._gsap;

  if (cache && toPercent && cache.width && horizontal && cache.time === _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__["_ticker"].time) {
    return Object(_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__["_round"])(curValue / cache.width * amount);
  } else {
    (toPercent || curUnit === "%") && (style.position = _getComputedProperty(target, "position"));
    parent === target && (style.position = "static"); // like for borderRadius, if it's a % we must have it relative to the target itself but that may not have position: relative or position: absolute in which case it'd go up the chain until it finds its offsetParent (bad). position: static protects against that.

    parent.appendChild(_tempDiv);
    px = _tempDiv[measureProperty];
    parent.removeChild(_tempDiv);
    style.position = "absolute";

    if (horizontal && toPercent) {
      cache = Object(_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__["_getCache"])(parent);
      cache.time = _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__["_ticker"].time;
      cache.width = parent[measureProperty];
    }
  }

  return Object(_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__["_round"])(toPixels ? px * curValue / amount : px && curValue ? amount / px * curValue : 0);
},
    _get = function _get(target, property, unit, uncache) {
  var value;
  _pluginInitted || _initCore();

  if (property in _propertyAliases && property !== "transform") {
    property = _propertyAliases[property];

    if (~property.indexOf(",")) {
      property = property.split(",")[0];
    }
  }

  if (_transformProps[property] && property !== "transform") {
    value = _parseTransform(target, uncache);
    value = property !== "transformOrigin" ? value[property] : _firstTwoOnly(_getComputedProperty(target, _transformOriginProp)) + " " + value.zOrigin + "px";
  } else {
    value = target.style[property];

    if (!value || value === "auto" || uncache || ~(value + "").indexOf("calc(")) {
      value = _specialProps[property] && _specialProps[property](target, property, unit) || _getComputedProperty(target, property) || Object(_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__["_getProperty"])(target, property) || (property === "opacity" ? 1 : 0); // note: some browsers, like Firefox, don't report borderRadius correctly! Instead, it only reports every corner like  borderTopLeftRadius
    }
  }

  return unit && !~(value + "").indexOf(" ") ? _convertToUnit(target, property, value, unit) + unit : value;
},
    _tweenComplexCSSString = function _tweenComplexCSSString(target, prop, start, end) {
  //note: we call _tweenComplexCSSString.call(pluginInstance...) to ensure that it's scoped properly. We may call it from within a plugin too, thus "this" would refer to the plugin.
  if (!start || start === "none") {
    // some browsers like Safari actually PREFER the prefixed property and mis-report the unprefixed value like clipPath (BUG). In other words, even though clipPath exists in the style ("clipPath" in target.style) and it's set in the CSS properly (along with -webkit-clip-path), Safari reports clipPath as "none" whereas WebkitClipPath reports accurately like "ellipse(100% 0% at 50% 0%)", so in this case we must SWITCH to using the prefixed property instead. See https://greensock.com/forums/topic/18310-clippath-doesnt-work-on-ios/
    var p = _checkPropPrefix(prop, target, 1),
        s = p && _getComputedProperty(target, p, 1);

    if (s && s !== start) {
      prop = p;
      start = s;
    } else if (prop === "borderColor") {
      start = _getComputedProperty(target, "borderTopColor"); // Firefox bug: always reports "borderColor" as "", so we must fall back to borderTopColor. See https://greensock.com/forums/topic/24583-how-to-return-colors-that-i-had-after-reverse/
    }
  }

  var pt = new _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__["PropTween"](this._pt, target.style, prop, 0, 1, _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__["_renderComplexString"]),
      index = 0,
      matchIndex = 0,
      a,
      result,
      startValues,
      startNum,
      color,
      startValue,
      endValue,
      endNum,
      chunk,
      endUnit,
      startUnit,
      relative,
      endValues;
  pt.b = start;
  pt.e = end;
  start += ""; //ensure values are strings

  end += "";

  if (end === "auto") {
    target.style[prop] = end;
    end = _getComputedProperty(target, prop) || end;
    target.style[prop] = start;
  }

  a = [start, end];

  Object(_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__["_colorStringFilter"])(a); //pass an array with the starting and ending values and let the filter do whatever it needs to the values. If colors are found, it returns true and then we must match where the color shows up order-wise because for things like boxShadow, sometimes the browser provides the computed values with the color FIRST, but the user provides it with the color LAST, so flip them if necessary. Same for drop-shadow().


  start = a[0];
  end = a[1];
  startValues = start.match(_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__["_numWithUnitExp"]) || [];
  endValues = end.match(_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__["_numWithUnitExp"]) || [];

  if (endValues.length) {
    while (result = _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__["_numWithUnitExp"].exec(end)) {
      endValue = result[0];
      chunk = end.substring(index, result.index);

      if (color) {
        color = (color + 1) % 5;
      } else if (chunk.substr(-5) === "rgba(" || chunk.substr(-5) === "hsla(") {
        color = 1;
      }

      if (endValue !== (startValue = startValues[matchIndex++] || "")) {
        startNum = parseFloat(startValue) || 0;
        startUnit = startValue.substr((startNum + "").length);
        relative = endValue.charAt(1) === "=" ? +(endValue.charAt(0) + "1") : 0;

        if (relative) {
          endValue = endValue.substr(2);
        }

        endNum = parseFloat(endValue);
        endUnit = endValue.substr((endNum + "").length);
        index = _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__["_numWithUnitExp"].lastIndex - endUnit.length;

        if (!endUnit) {
          //if something like "perspective:300" is passed in and we must add a unit to the end
          endUnit = endUnit || _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__["_config"].units[prop] || startUnit;

          if (index === end.length) {
            end += endUnit;
            pt.e += endUnit;
          }
        }

        if (startUnit !== endUnit) {
          startNum = _convertToUnit(target, prop, startValue, endUnit) || 0;
        } //these nested PropTweens are handled in a special way - we'll never actually call a render or setter method on them. We'll just loop through them in the parent complex string PropTween's render method.


        pt._pt = {
          _next: pt._pt,
          p: chunk || matchIndex === 1 ? chunk : ",",
          //note: SVG spec allows omission of comma/space when a negative sign is wedged between two numbers, like 2.5-5.3 instead of 2.5,-5.3 but when tweening, the negative value may switch to positive, so we insert the comma just in case.
          s: startNum,
          c: relative ? relative * endNum : endNum - startNum,
          m: color && color < 4 ? Math.round : 0
        };
      }
    }

    pt.c = index < end.length ? end.substring(index, end.length) : ""; //we use the "c" of the PropTween to store the final part of the string (after the last number)
  } else {
    pt.r = prop === "display" && end === "none" ? _renderNonTweeningValueOnlyAtEnd : _renderNonTweeningValue;
  }

  if (_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__["_relExp"].test(end)) {
    pt.e = 0; //if the end string contains relative values or dynamic random(...) values, delete the end it so that on the final render we don't actually set it to the string with += or -= characters (forces it to use the calculated value).
  }

  this._pt = pt; //start the linked list with this new PropTween. Remember, we call _tweenComplexCSSString.call(pluginInstance...) to ensure that it's scoped properly. We may call it from within another plugin too, thus "this" would refer to the plugin.

  return pt;
},
    _keywordToPercent = {
  top: "0%",
  bottom: "100%",
  left: "0%",
  right: "100%",
  center: "50%"
},
    _convertKeywordsToPercentages = function _convertKeywordsToPercentages(value) {
  var split = value.split(" "),
      x = split[0],
      y = split[1] || "50%";

  if (x === "top" || x === "bottom" || y === "left" || y === "right") {
    //the user provided them in the wrong order, so flip them
    value = x;
    x = y;
    y = value;
  }

  split[0] = _keywordToPercent[x] || x;
  split[1] = _keywordToPercent[y] || y;
  return split.join(" ");
},
    _renderClearProps = function _renderClearProps(ratio, data) {
  if (data.tween && data.tween._time === data.tween._dur) {
    var target = data.t,
        style = target.style,
        props = data.u,
        cache = target._gsap,
        prop,
        clearTransforms,
        i;

    if (props === "all" || props === true) {
      style.cssText = "";
      clearTransforms = 1;
    } else {
      props = props.split(",");
      i = props.length;

      while (--i > -1) {
        prop = props[i];

        if (_transformProps[prop]) {
          clearTransforms = 1;
          prop = prop === "transformOrigin" ? _transformOriginProp : _transformProp;
        }

        _removeProperty(target, prop);
      }
    }

    if (clearTransforms) {
      _removeProperty(target, _transformProp);

      if (cache) {
        cache.svg && target.removeAttribute("transform");

        _parseTransform(target, 1); // force all the cached values back to "normal"/identity, otherwise if there's another tween that's already set to render transforms on this element, it could display the wrong values.


        cache.uncache = 1;
      }
    }
  }
},
    // note: specialProps should return 1 if (and only if) they have a non-zero priority. It indicates we need to sort the linked list.
_specialProps = {
  clearProps: function clearProps(plugin, target, property, endValue, tween) {
    if (tween.data !== "isFromStart") {
      var pt = plugin._pt = new _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__["PropTween"](plugin._pt, target, property, 0, 0, _renderClearProps);
      pt.u = endValue;
      pt.pr = -10;
      pt.tween = tween;

      plugin._props.push(property);

      return 1;
    }
  }
  /* className feature (about 0.4kb gzipped).
  , className(plugin, target, property, endValue, tween) {
  	let _renderClassName = (ratio, data) => {
  			data.css.render(ratio, data.css);
  			if (!ratio || ratio === 1) {
  				let inline = data.rmv,
  					target = data.t,
  					p;
  				target.setAttribute("class", ratio ? data.e : data.b);
  				for (p in inline) {
  					_removeProperty(target, p);
  				}
  			}
  		},
  		_getAllStyles = (target) => {
  			let styles = {},
  				computed = getComputedStyle(target),
  				p;
  			for (p in computed) {
  				if (isNaN(p) && p !== "cssText" && p !== "length") {
  					styles[p] = computed[p];
  				}
  			}
  			_setDefaults(styles, _parseTransform(target, 1));
  			return styles;
  		},
  		startClassList = target.getAttribute("class"),
  		style = target.style,
  		cssText = style.cssText,
  		cache = target._gsap,
  		classPT = cache.classPT,
  		inlineToRemoveAtEnd = {},
  		data = {t:target, plugin:plugin, rmv:inlineToRemoveAtEnd, b:startClassList, e:(endValue.charAt(1) !== "=") ? endValue : startClassList.replace(new RegExp("(?:\\s|^)" + endValue.substr(2) + "(?![\\w-])"), "") + ((endValue.charAt(0) === "+") ? " " + endValue.substr(2) : "")},
  		changingVars = {},
  		startVars = _getAllStyles(target),
  		transformRelated = /(transform|perspective)/i,
  		endVars, p;
  	if (classPT) {
  		classPT.r(1, classPT.d);
  		_removeLinkedListItem(classPT.d.plugin, classPT, "_pt");
  	}
  	target.setAttribute("class", data.e);
  	endVars = _getAllStyles(target, true);
  	target.setAttribute("class", startClassList);
  	for (p in endVars) {
  		if (endVars[p] !== startVars[p] && !transformRelated.test(p)) {
  			changingVars[p] = endVars[p];
  			if (!style[p] && style[p] !== "0") {
  				inlineToRemoveAtEnd[p] = 1;
  			}
  		}
  	}
  	cache.classPT = plugin._pt = new PropTween(plugin._pt, target, "className", 0, 0, _renderClassName, data, 0, -11);
  	if (style.cssText !== cssText) { //only apply if things change. Otherwise, in cases like a background-image that's pulled dynamically, it could cause a refresh. See https://greensock.com/forums/topic/20368-possible-gsap-bug-switching-classnames-in-chrome/.
  		style.cssText = cssText; //we recorded cssText before we swapped classes and ran _getAllStyles() because in cases when a className tween is overwritten, we remove all the related tweening properties from that class change (otherwise class-specific stuff can't override properties we've directly set on the target's style object due to specificity).
  	}
  	_parseTransform(target, true); //to clear the caching of transforms
  	data.css = new gsap.plugins.css();
  	data.css.init(target, changingVars, tween);
  	plugin._props.push(...data.css._props);
  	return 1;
  }
  */

},

/*
 * --------------------------------------------------------------------------------------
 * TRANSFORMS
 * --------------------------------------------------------------------------------------
 */
_identity2DMatrix = [1, 0, 0, 1, 0, 0],
    _rotationalProperties = {},
    _isNullTransform = function _isNullTransform(value) {
  return value === "matrix(1, 0, 0, 1, 0, 0)" || value === "none" || !value;
},
    _getComputedTransformMatrixAsArray = function _getComputedTransformMatrixAsArray(target) {
  var matrixString = _getComputedProperty(target, _transformProp);

  return _isNullTransform(matrixString) ? _identity2DMatrix : matrixString.substr(7).match(_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__["_numExp"]).map(_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__["_round"]);
},
    _getMatrix = function _getMatrix(target, force2D) {
  var cache = target._gsap || Object(_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__["_getCache"])(target),
      style = target.style,
      matrix = _getComputedTransformMatrixAsArray(target),
      parent,
      nextSibling,
      temp,
      addedToDOM;

  if (cache.svg && target.getAttribute("transform")) {
    temp = target.transform.baseVal.consolidate().matrix; //ensures that even complex values like "translate(50,60) rotate(135,0,0)" are parsed because it mashes it into a matrix.

    matrix = [temp.a, temp.b, temp.c, temp.d, temp.e, temp.f];
    return matrix.join(",") === "1,0,0,1,0,0" ? _identity2DMatrix : matrix;
  } else if (matrix === _identity2DMatrix && !target.offsetParent && target !== _docElement && !cache.svg) {
    //note: if offsetParent is null, that means the element isn't in the normal document flow, like if it has display:none or one of its ancestors has display:none). Firefox returns null for getComputedStyle() if the element is in an iframe that has display:none. https://bugzilla.mozilla.org/show_bug.cgi?id=548397
    //browsers don't report transforms accurately unless the element is in the DOM and has a display value that's not "none". Firefox and Microsoft browsers have a partial bug where they'll report transforms even if display:none BUT not any percentage-based values like translate(-50%, 8px) will be reported as if it's translate(0, 8px).
    temp = style.display;
    style.display = "block";
    parent = target.parentNode;

    if (!parent || !target.offsetParent) {
      // note: in 3.3.0 we switched target.offsetParent to _doc.body.contains(target) to avoid [sometimes unnecessary] MutationObserver calls but that wasn't adequate because there are edge cases where nested position: fixed elements need to get reparented to accurately sense transforms. See https://github.com/greensock/GSAP/issues/388 and https://github.com/greensock/GSAP/issues/375
      addedToDOM = 1; //flag

      nextSibling = target.nextSibling;

      _docElement.appendChild(target); //we must add it to the DOM in order to get values properly

    }

    matrix = _getComputedTransformMatrixAsArray(target);
    temp ? style.display = temp : _removeProperty(target, "display");

    if (addedToDOM) {
      nextSibling ? parent.insertBefore(target, nextSibling) : parent ? parent.appendChild(target) : _docElement.removeChild(target);
    }
  }

  return force2D && matrix.length > 6 ? [matrix[0], matrix[1], matrix[4], matrix[5], matrix[12], matrix[13]] : matrix;
},
    _applySVGOrigin = function _applySVGOrigin(target, origin, originIsAbsolute, smooth, matrixArray, pluginToAddPropTweensTo) {
  var cache = target._gsap,
      matrix = matrixArray || _getMatrix(target, true),
      xOriginOld = cache.xOrigin || 0,
      yOriginOld = cache.yOrigin || 0,
      xOffsetOld = cache.xOffset || 0,
      yOffsetOld = cache.yOffset || 0,
      a = matrix[0],
      b = matrix[1],
      c = matrix[2],
      d = matrix[3],
      tx = matrix[4],
      ty = matrix[5],
      originSplit = origin.split(" "),
      xOrigin = parseFloat(originSplit[0]) || 0,
      yOrigin = parseFloat(originSplit[1]) || 0,
      bounds,
      determinant,
      x,
      y;

  if (!originIsAbsolute) {
    bounds = _getBBox(target);
    xOrigin = bounds.x + (~originSplit[0].indexOf("%") ? xOrigin / 100 * bounds.width : xOrigin);
    yOrigin = bounds.y + (~(originSplit[1] || originSplit[0]).indexOf("%") ? yOrigin / 100 * bounds.height : yOrigin);
  } else if (matrix !== _identity2DMatrix && (determinant = a * d - b * c)) {
    //if it's zero (like if scaleX and scaleY are zero), skip it to avoid errors with dividing by zero.
    x = xOrigin * (d / determinant) + yOrigin * (-c / determinant) + (c * ty - d * tx) / determinant;
    y = xOrigin * (-b / determinant) + yOrigin * (a / determinant) - (a * ty - b * tx) / determinant;
    xOrigin = x;
    yOrigin = y;
  }

  if (smooth || smooth !== false && cache.smooth) {
    tx = xOrigin - xOriginOld;
    ty = yOrigin - yOriginOld;
    cache.xOffset = xOffsetOld + (tx * a + ty * c) - tx;
    cache.yOffset = yOffsetOld + (tx * b + ty * d) - ty;
  } else {
    cache.xOffset = cache.yOffset = 0;
  }

  cache.xOrigin = xOrigin;
  cache.yOrigin = yOrigin;
  cache.smooth = !!smooth;
  cache.origin = origin;
  cache.originIsAbsolute = !!originIsAbsolute;
  target.style[_transformOriginProp] = "0px 0px"; //otherwise, if someone sets  an origin via CSS, it will likely interfere with the SVG transform attribute ones (because remember, we're baking the origin into the matrix() value).

  if (pluginToAddPropTweensTo) {
    _addNonTweeningPT(pluginToAddPropTweensTo, cache, "xOrigin", xOriginOld, xOrigin);

    _addNonTweeningPT(pluginToAddPropTweensTo, cache, "yOrigin", yOriginOld, yOrigin);

    _addNonTweeningPT(pluginToAddPropTweensTo, cache, "xOffset", xOffsetOld, cache.xOffset);

    _addNonTweeningPT(pluginToAddPropTweensTo, cache, "yOffset", yOffsetOld, cache.yOffset);
  }

  target.setAttribute("data-svg-origin", xOrigin + " " + yOrigin);
},
    _parseTransform = function _parseTransform(target, uncache) {
  var cache = target._gsap || new _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__["GSCache"](target);

  if ("x" in cache && !uncache && !cache.uncache) {
    return cache;
  }

  var style = target.style,
      invertedScaleX = cache.scaleX < 0,
      px = "px",
      deg = "deg",
      origin = _getComputedProperty(target, _transformOriginProp) || "0",
      x,
      y,
      z,
      scaleX,
      scaleY,
      rotation,
      rotationX,
      rotationY,
      skewX,
      skewY,
      perspective,
      xOrigin,
      yOrigin,
      matrix,
      angle,
      cos,
      sin,
      a,
      b,
      c,
      d,
      a12,
      a22,
      t1,
      t2,
      t3,
      a13,
      a23,
      a33,
      a42,
      a43,
      a32;
  x = y = z = rotation = rotationX = rotationY = skewX = skewY = perspective = 0;
  scaleX = scaleY = 1;
  cache.svg = !!(target.getCTM && _isSVG(target));
  matrix = _getMatrix(target, cache.svg);

  if (cache.svg) {
    t1 = !cache.uncache && target.getAttribute("data-svg-origin");

    _applySVGOrigin(target, t1 || origin, !!t1 || cache.originIsAbsolute, cache.smooth !== false, matrix);
  }

  xOrigin = cache.xOrigin || 0;
  yOrigin = cache.yOrigin || 0;

  if (matrix !== _identity2DMatrix) {
    a = matrix[0]; //a11

    b = matrix[1]; //a21

    c = matrix[2]; //a31

    d = matrix[3]; //a41

    x = a12 = matrix[4];
    y = a22 = matrix[5]; //2D matrix

    if (matrix.length === 6) {
      scaleX = Math.sqrt(a * a + b * b);
      scaleY = Math.sqrt(d * d + c * c);
      rotation = a || b ? _atan2(b, a) * _RAD2DEG : 0; //note: if scaleX is 0, we cannot accurately measure rotation. Same for skewX with a scaleY of 0. Therefore, we default to the previously recorded value (or zero if that doesn't exist).

      skewX = c || d ? _atan2(c, d) * _RAD2DEG + rotation : 0;
      skewX && (scaleY *= Math.cos(skewX * _DEG2RAD));

      if (cache.svg) {
        x -= xOrigin - (xOrigin * a + yOrigin * c);
        y -= yOrigin - (xOrigin * b + yOrigin * d);
      } //3D matrix

    } else {
      a32 = matrix[6];
      a42 = matrix[7];
      a13 = matrix[8];
      a23 = matrix[9];
      a33 = matrix[10];
      a43 = matrix[11];
      x = matrix[12];
      y = matrix[13];
      z = matrix[14];
      angle = _atan2(a32, a33);
      rotationX = angle * _RAD2DEG; //rotationX

      if (angle) {
        cos = Math.cos(-angle);
        sin = Math.sin(-angle);
        t1 = a12 * cos + a13 * sin;
        t2 = a22 * cos + a23 * sin;
        t3 = a32 * cos + a33 * sin;
        a13 = a12 * -sin + a13 * cos;
        a23 = a22 * -sin + a23 * cos;
        a33 = a32 * -sin + a33 * cos;
        a43 = a42 * -sin + a43 * cos;
        a12 = t1;
        a22 = t2;
        a32 = t3;
      } //rotationY


      angle = _atan2(-c, a33);
      rotationY = angle * _RAD2DEG;

      if (angle) {
        cos = Math.cos(-angle);
        sin = Math.sin(-angle);
        t1 = a * cos - a13 * sin;
        t2 = b * cos - a23 * sin;
        t3 = c * cos - a33 * sin;
        a43 = d * sin + a43 * cos;
        a = t1;
        b = t2;
        c = t3;
      } //rotationZ


      angle = _atan2(b, a);
      rotation = angle * _RAD2DEG;

      if (angle) {
        cos = Math.cos(angle);
        sin = Math.sin(angle);
        t1 = a * cos + b * sin;
        t2 = a12 * cos + a22 * sin;
        b = b * cos - a * sin;
        a22 = a22 * cos - a12 * sin;
        a = t1;
        a12 = t2;
      }

      if (rotationX && Math.abs(rotationX) + Math.abs(rotation) > 359.9) {
        //when rotationY is set, it will often be parsed as 180 degrees different than it should be, and rotationX and rotation both being 180 (it looks the same), so we adjust for that here.
        rotationX = rotation = 0;
        rotationY = 180 - rotationY;
      }

      scaleX = Object(_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__["_round"])(Math.sqrt(a * a + b * b + c * c));
      scaleY = Object(_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__["_round"])(Math.sqrt(a22 * a22 + a32 * a32));
      angle = _atan2(a12, a22);
      skewX = Math.abs(angle) > 0.0002 ? angle * _RAD2DEG : 0;
      perspective = a43 ? 1 / (a43 < 0 ? -a43 : a43) : 0;
    }

    if (cache.svg) {
      //sense if there are CSS transforms applied on an SVG element in which case we must overwrite them when rendering. The transform attribute is more reliable cross-browser, but we can't just remove the CSS ones because they may be applied in a CSS rule somewhere (not just inline).
      t1 = target.getAttribute("transform");
      cache.forceCSS = target.setAttribute("transform", "") || !_isNullTransform(_getComputedProperty(target, _transformProp));
      t1 && target.setAttribute("transform", t1);
    }
  }

  if (Math.abs(skewX) > 90 && Math.abs(skewX) < 270) {
    if (invertedScaleX) {
      scaleX *= -1;
      skewX += rotation <= 0 ? 180 : -180;
      rotation += rotation <= 0 ? 180 : -180;
    } else {
      scaleY *= -1;
      skewX += skewX <= 0 ? 180 : -180;
    }
  }

  cache.x = ((cache.xPercent = x && Math.round(target.offsetWidth / 2) === Math.round(-x) ? -50 : 0) ? 0 : x) + px;
  cache.y = ((cache.yPercent = y && Math.round(target.offsetHeight / 2) === Math.round(-y) ? -50 : 0) ? 0 : y) + px;
  cache.z = z + px;
  cache.scaleX = Object(_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__["_round"])(scaleX);
  cache.scaleY = Object(_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__["_round"])(scaleY);
  cache.rotation = Object(_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__["_round"])(rotation) + deg;
  cache.rotationX = Object(_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__["_round"])(rotationX) + deg;
  cache.rotationY = Object(_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__["_round"])(rotationY) + deg;
  cache.skewX = skewX + deg;
  cache.skewY = skewY + deg;
  cache.transformPerspective = perspective + px;

  if (cache.zOrigin = parseFloat(origin.split(" ")[2]) || 0) {
    style[_transformOriginProp] = _firstTwoOnly(origin);
  }

  cache.xOffset = cache.yOffset = 0;
  cache.force3D = _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__["_config"].force3D;
  cache.renderTransform = cache.svg ? _renderSVGTransforms : _supports3D ? _renderCSSTransforms : _renderNon3DTransforms;
  cache.uncache = 0;
  return cache;
},
    _firstTwoOnly = function _firstTwoOnly(value) {
  return (value = value.split(" "))[0] + " " + value[1];
},
    //for handling transformOrigin values, stripping out the 3rd dimension
_addPxTranslate = function _addPxTranslate(target, start, value) {
  var unit = Object(_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__["getUnit"])(start);
  return Object(_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__["_round"])(parseFloat(start) + parseFloat(_convertToUnit(target, "x", value + "px", unit))) + unit;
},
    _renderNon3DTransforms = function _renderNon3DTransforms(ratio, cache) {
  cache.z = "0px";
  cache.rotationY = cache.rotationX = "0deg";
  cache.force3D = 0;

  _renderCSSTransforms(ratio, cache);
},
    _zeroDeg = "0deg",
    _zeroPx = "0px",
    _endParenthesis = ") ",
    _renderCSSTransforms = function _renderCSSTransforms(ratio, cache) {
  var _ref = cache || this,
      xPercent = _ref.xPercent,
      yPercent = _ref.yPercent,
      x = _ref.x,
      y = _ref.y,
      z = _ref.z,
      rotation = _ref.rotation,
      rotationY = _ref.rotationY,
      rotationX = _ref.rotationX,
      skewX = _ref.skewX,
      skewY = _ref.skewY,
      scaleX = _ref.scaleX,
      scaleY = _ref.scaleY,
      transformPerspective = _ref.transformPerspective,
      force3D = _ref.force3D,
      target = _ref.target,
      zOrigin = _ref.zOrigin,
      transforms = "",
      use3D = force3D === "auto" && ratio && ratio !== 1 || force3D === true; // Safari has a bug that causes it not to render 3D transform-origin values properly, so we force the z origin to 0, record it in the cache, and then do the math here to offset the translate values accordingly (basically do the 3D transform-origin part manually)


  if (zOrigin && (rotationX !== _zeroDeg || rotationY !== _zeroDeg)) {
    var angle = parseFloat(rotationY) * _DEG2RAD,
        a13 = Math.sin(angle),
        a33 = Math.cos(angle),
        cos;

    angle = parseFloat(rotationX) * _DEG2RAD;
    cos = Math.cos(angle);
    x = _addPxTranslate(target, x, a13 * cos * -zOrigin);
    y = _addPxTranslate(target, y, -Math.sin(angle) * -zOrigin);
    z = _addPxTranslate(target, z, a33 * cos * -zOrigin + zOrigin);
  }

  if (transformPerspective !== _zeroPx) {
    transforms += "perspective(" + transformPerspective + _endParenthesis;
  }

  if (xPercent || yPercent) {
    transforms += "translate(" + xPercent + "%, " + yPercent + "%) ";
  }

  if (use3D || x !== _zeroPx || y !== _zeroPx || z !== _zeroPx) {
    transforms += z !== _zeroPx || use3D ? "translate3d(" + x + ", " + y + ", " + z + ") " : "translate(" + x + ", " + y + _endParenthesis;
  }

  if (rotation !== _zeroDeg) {
    transforms += "rotate(" + rotation + _endParenthesis;
  }

  if (rotationY !== _zeroDeg) {
    transforms += "rotateY(" + rotationY + _endParenthesis;
  }

  if (rotationX !== _zeroDeg) {
    transforms += "rotateX(" + rotationX + _endParenthesis;
  }

  if (skewX !== _zeroDeg || skewY !== _zeroDeg) {
    transforms += "skew(" + skewX + ", " + skewY + _endParenthesis;
  }

  if (scaleX !== 1 || scaleY !== 1) {
    transforms += "scale(" + scaleX + ", " + scaleY + _endParenthesis;
  }

  target.style[_transformProp] = transforms || "translate(0, 0)";
},
    _renderSVGTransforms = function _renderSVGTransforms(ratio, cache) {
  var _ref2 = cache || this,
      xPercent = _ref2.xPercent,
      yPercent = _ref2.yPercent,
      x = _ref2.x,
      y = _ref2.y,
      rotation = _ref2.rotation,
      skewX = _ref2.skewX,
      skewY = _ref2.skewY,
      scaleX = _ref2.scaleX,
      scaleY = _ref2.scaleY,
      target = _ref2.target,
      xOrigin = _ref2.xOrigin,
      yOrigin = _ref2.yOrigin,
      xOffset = _ref2.xOffset,
      yOffset = _ref2.yOffset,
      forceCSS = _ref2.forceCSS,
      tx = parseFloat(x),
      ty = parseFloat(y),
      a11,
      a21,
      a12,
      a22,
      temp;

  rotation = parseFloat(rotation);
  skewX = parseFloat(skewX);
  skewY = parseFloat(skewY);

  if (skewY) {
    //for performance reasons, we combine all skewing into the skewX and rotation values. Remember, a skewY of 10 degrees looks the same as a rotation of 10 degrees plus a skewX of 10 degrees.
    skewY = parseFloat(skewY);
    skewX += skewY;
    rotation += skewY;
  }

  if (rotation || skewX) {
    rotation *= _DEG2RAD;
    skewX *= _DEG2RAD;
    a11 = Math.cos(rotation) * scaleX;
    a21 = Math.sin(rotation) * scaleX;
    a12 = Math.sin(rotation - skewX) * -scaleY;
    a22 = Math.cos(rotation - skewX) * scaleY;

    if (skewX) {
      skewY *= _DEG2RAD;
      temp = Math.tan(skewX - skewY);
      temp = Math.sqrt(1 + temp * temp);
      a12 *= temp;
      a22 *= temp;

      if (skewY) {
        temp = Math.tan(skewY);
        temp = Math.sqrt(1 + temp * temp);
        a11 *= temp;
        a21 *= temp;
      }
    }

    a11 = Object(_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__["_round"])(a11);
    a21 = Object(_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__["_round"])(a21);
    a12 = Object(_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__["_round"])(a12);
    a22 = Object(_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__["_round"])(a22);
  } else {
    a11 = scaleX;
    a22 = scaleY;
    a21 = a12 = 0;
  }

  if (tx && !~(x + "").indexOf("px") || ty && !~(y + "").indexOf("px")) {
    tx = _convertToUnit(target, "x", x, "px");
    ty = _convertToUnit(target, "y", y, "px");
  }

  if (xOrigin || yOrigin || xOffset || yOffset) {
    tx = Object(_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__["_round"])(tx + xOrigin - (xOrigin * a11 + yOrigin * a12) + xOffset);
    ty = Object(_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__["_round"])(ty + yOrigin - (xOrigin * a21 + yOrigin * a22) + yOffset);
  }

  if (xPercent || yPercent) {
    //The SVG spec doesn't support percentage-based translation in the "transform" attribute, so we merge it into the translation to simulate it.
    temp = target.getBBox();
    tx = Object(_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__["_round"])(tx + xPercent / 100 * temp.width);
    ty = Object(_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__["_round"])(ty + yPercent / 100 * temp.height);
  }

  temp = "matrix(" + a11 + "," + a21 + "," + a12 + "," + a22 + "," + tx + "," + ty + ")";
  target.setAttribute("transform", temp);

  if (forceCSS) {
    //some browsers prioritize CSS transforms over the transform attribute. When we sense that the user has CSS transforms applied, we must overwrite them this way (otherwise some browser simply won't render the  transform attribute changes!)
    target.style[_transformProp] = temp;
  }
},
    _addRotationalPropTween = function _addRotationalPropTween(plugin, target, property, startNum, endValue, relative) {
  var cap = 360,
      isString = Object(_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__["_isString"])(endValue),
      endNum = parseFloat(endValue) * (isString && ~endValue.indexOf("rad") ? _RAD2DEG : 1),
      change = relative ? endNum * relative : endNum - startNum,
      finalValue = startNum + change + "deg",
      direction,
      pt;

  if (isString) {
    direction = endValue.split("_")[1];

    if (direction === "short") {
      change %= cap;

      if (change !== change % (cap / 2)) {
        change += change < 0 ? cap : -cap;
      }
    }

    if (direction === "cw" && change < 0) {
      change = (change + cap * _bigNum) % cap - ~~(change / cap) * cap;
    } else if (direction === "ccw" && change > 0) {
      change = (change - cap * _bigNum) % cap - ~~(change / cap) * cap;
    }
  }

  plugin._pt = pt = new _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__["PropTween"](plugin._pt, target, property, startNum, change, _renderPropWithEnd);
  pt.e = finalValue;
  pt.u = "deg";

  plugin._props.push(property);

  return pt;
},
    _addRawTransformPTs = function _addRawTransformPTs(plugin, transforms, target) {
  //for handling cases where someone passes in a whole transform string, like transform: "scale(2, 3) rotate(20deg) translateY(30em)"
  var style = _tempDivStyler.style,
      startCache = target._gsap,
      exclude = "perspective,force3D,transformOrigin,svgOrigin",
      endCache,
      p,
      startValue,
      endValue,
      startNum,
      endNum,
      startUnit,
      endUnit;
  style.cssText = getComputedStyle(target).cssText + ";position:absolute;display:block;"; //%-based translations will fail unless we set the width/height to match the original target (and padding/borders can affect it)

  style[_transformProp] = transforms;

  _doc.body.appendChild(_tempDivStyler);

  endCache = _parseTransform(_tempDivStyler, 1);

  for (p in _transformProps) {
    startValue = startCache[p];
    endValue = endCache[p];

    if (startValue !== endValue && exclude.indexOf(p) < 0) {
      //tweening to no perspective gives very unintuitive results - just keep the same perspective in that case.
      startUnit = Object(_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__["getUnit"])(startValue);
      endUnit = Object(_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__["getUnit"])(endValue);
      startNum = startUnit !== endUnit ? _convertToUnit(target, p, startValue, endUnit) : parseFloat(startValue);
      endNum = parseFloat(endValue);
      plugin._pt = new _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__["PropTween"](plugin._pt, startCache, p, startNum, endNum - startNum, _renderCSSProp);
      plugin._pt.u = endUnit || 0;

      plugin._props.push(p);
    }
  }

  _doc.body.removeChild(_tempDivStyler);
}; // handle splitting apart padding, margin, borderWidth, and borderRadius into their 4 components. Firefox, for example, won't report borderRadius correctly - it will only do borderTopLeftRadius and the other corners. We also want to handle paddingTop, marginLeft, borderRightWidth, etc.


Object(_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__["_forEachName"])("padding,margin,Width,Radius", function (name, index) {
  var t = "Top",
      r = "Right",
      b = "Bottom",
      l = "Left",
      props = (index < 3 ? [t, r, b, l] : [t + l, t + r, b + r, b + l]).map(function (side) {
    return index < 2 ? name + side : "border" + side + name;
  });

  _specialProps[index > 1 ? "border" + name : name] = function (plugin, target, property, endValue, tween) {
    var a, vars;

    if (arguments.length < 4) {
      // getter, passed target, property, and unit (from _get())
      a = props.map(function (prop) {
        return _get(plugin, prop, property);
      });
      vars = a.join(" ");
      return vars.split(a[0]).length === 5 ? a[0] : vars;
    }

    a = (endValue + "").split(" ");
    vars = {};
    props.forEach(function (prop, i) {
      return vars[prop] = a[i] = a[i] || a[(i - 1) / 2 | 0];
    });
    plugin.init(target, vars, tween);
  };
});

var CSSPlugin = {
  name: "css",
  register: _initCore,
  targetTest: function targetTest(target) {
    return target.style && target.nodeType;
  },
  init: function init(target, vars, tween, index, targets) {
    var props = this._props,
        style = target.style,
        startValue,
        endValue,
        endNum,
        startNum,
        type,
        specialProp,
        p,
        startUnit,
        endUnit,
        relative,
        isTransformRelated,
        transformPropTween,
        cache,
        smooth,
        hasPriority;
    _pluginInitted || _initCore();

    for (p in vars) {
      if (p === "autoRound") {
        continue;
      }

      endValue = vars[p];

      if (_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__["_plugins"][p] && Object(_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__["_checkPlugin"])(p, vars, tween, index, target, targets)) {
        //plugins
        continue;
      }

      type = _typeof(endValue);
      specialProp = _specialProps[p];

      if (type === "function") {
        endValue = endValue.call(tween, index, target, targets);
        type = _typeof(endValue);
      }

      if (type === "string" && ~endValue.indexOf("random(")) {
        endValue = Object(_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__["_replaceRandom"])(endValue);
      }

      if (specialProp) {
        if (specialProp(this, target, p, endValue, tween)) {
          hasPriority = 1;
        }
      } else if (p.substr(0, 2) === "--") {
        //CSS variable
        this.add(style, "setProperty", getComputedStyle(target).getPropertyValue(p) + "", endValue + "", index, targets, 0, 0, p);
      } else if (type !== "undefined") {
        startValue = _get(target, p);
        startNum = parseFloat(startValue);
        relative = type === "string" && endValue.charAt(1) === "=" ? +(endValue.charAt(0) + "1") : 0;

        if (relative) {
          endValue = endValue.substr(2);
        }

        endNum = parseFloat(endValue);

        if (p in _propertyAliases) {
          if (p === "autoAlpha") {
            //special case where we control the visibility along with opacity. We still allow the opacity value to pass through and get tweened.
            if (startNum === 1 && _get(target, "visibility") === "hidden" && endNum) {
              //if visibility is initially set to "hidden", we should interpret that as intent to make opacity 0 (a convenience)
              startNum = 0;
            }

            _addNonTweeningPT(this, style, "visibility", startNum ? "inherit" : "hidden", endNum ? "inherit" : "hidden", !endNum);
          }

          if (p !== "scale" && p !== "transform") {
            p = _propertyAliases[p];
            ~p.indexOf(",") && (p = p.split(",")[0]);
          }
        }

        isTransformRelated = p in _transformProps; //--- TRANSFORM-RELATED ---

        if (isTransformRelated) {
          if (!transformPropTween) {
            cache = target._gsap;
            cache.renderTransform || _parseTransform(target); // if, for example, gsap.set(... {transform:"translateX(50vw)"}), the _get() call doesn't parse the transform, thus cache.renderTransform won't be set yet so force the parsing of the transform here.

            smooth = vars.smoothOrigin !== false && cache.smooth;
            transformPropTween = this._pt = new _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__["PropTween"](this._pt, style, _transformProp, 0, 1, cache.renderTransform, cache, 0, -1); //the first time through, create the rendering PropTween so that it runs LAST (in the linked list, we keep adding to the beginning)

            transformPropTween.dep = 1; //flag it as dependent so that if things get killed/overwritten and this is the only PropTween left, we can safely kill the whole tween.
          }

          if (p === "scale") {
            this._pt = new _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__["PropTween"](this._pt, cache, "scaleY", cache.scaleY, relative ? relative * endNum : endNum - cache.scaleY);
            props.push("scaleY", p);
            p += "X";
          } else if (p === "transformOrigin") {
            endValue = _convertKeywordsToPercentages(endValue); //in case something like "left top" or "bottom right" is passed in. Convert to percentages.

            if (cache.svg) {
              _applySVGOrigin(target, endValue, 0, smooth, 0, this);
            } else {
              endUnit = parseFloat(endValue.split(" ")[2]) || 0; //handle the zOrigin separately!

              endUnit !== cache.zOrigin && _addNonTweeningPT(this, cache, "zOrigin", cache.zOrigin, endUnit);

              _addNonTweeningPT(this, style, p, _firstTwoOnly(startValue), _firstTwoOnly(endValue));
            }

            continue;
          } else if (p === "svgOrigin") {
            _applySVGOrigin(target, endValue, 1, smooth, 0, this);

            continue;
          } else if (p in _rotationalProperties) {
            _addRotationalPropTween(this, cache, p, startNum, endValue, relative);

            continue;
          } else if (p === "smoothOrigin") {
            _addNonTweeningPT(this, cache, "smooth", cache.smooth, endValue);

            continue;
          } else if (p === "force3D") {
            cache[p] = endValue;
            continue;
          } else if (p === "transform") {
            _addRawTransformPTs(this, endValue, target);

            continue;
          }
        } else if (!(p in style)) {
          p = _checkPropPrefix(p) || p;
        }

        if (isTransformRelated || (endNum || endNum === 0) && (startNum || startNum === 0) && !_complexExp.test(endValue) && p in style) {
          startUnit = (startValue + "").substr((startNum + "").length);
          endNum || (endNum = 0); // protect against NaN

          endUnit = Object(_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__["getUnit"])(endValue) || (p in _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__["_config"].units ? _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__["_config"].units[p] : startUnit);
          startUnit !== endUnit && (startNum = _convertToUnit(target, p, startValue, endUnit));
          this._pt = new _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__["PropTween"](this._pt, isTransformRelated ? cache : style, p, startNum, relative ? relative * endNum : endNum - startNum, endUnit === "px" && vars.autoRound !== false && !isTransformRelated ? _renderRoundedCSSProp : _renderCSSProp);
          this._pt.u = endUnit || 0;

          if (startUnit !== endUnit) {
            //when the tween goes all the way back to the beginning, we need to revert it to the OLD/ORIGINAL value (with those units). We record that as a "b" (beginning) property and point to a render method that handles that. (performance optimization)
            this._pt.b = startValue;
            this._pt.r = _renderCSSPropWithBeginning;
          }
        } else if (!(p in style)) {
          if (p in target) {
            //maybe it's not a style - it could be a property added directly to an element in which case we'll try to animate that.
            this.add(target, p, target[p], endValue, index, targets);
          } else {
            Object(_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__["_missingPlugin"])(p, endValue);

            continue;
          }
        } else {
          _tweenComplexCSSString.call(this, target, p, startValue, endValue);
        }

        props.push(p);
      }
    }

    hasPriority && Object(_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__["_sortPropTweensByPriority"])(this);
  },
  get: _get,
  aliases: _propertyAliases,
  getSetter: function getSetter(target, property, plugin) {
    //returns a setter function that accepts target, property, value and applies it accordingly. Remember, properties like "x" aren't as simple as target.style.property = value because they've got to be applied to a proxy object and then merged into a transform string in a renderer.
    var p = _propertyAliases[property];
    p && p.indexOf(",") < 0 && (property = p);
    return property in _transformProps && property !== _transformOriginProp && (target._gsap.x || _get(target, "x")) ? plugin && _recentSetterPlugin === plugin ? property === "scale" ? _setterScale : _setterTransform : (_recentSetterPlugin = plugin || {}) && (property === "scale" ? _setterScaleWithRender : _setterTransformWithRender) : target.style && !Object(_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__["_isUndefined"])(target.style[property]) ? _setterCSSStyle : ~property.indexOf("-") ? _setterCSSProp : Object(_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__["_getSetter"])(target, property);
  },
  core: {
    _removeProperty: _removeProperty,
    _getMatrix: _getMatrix
  }
};
_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__["gsap"].utils.checkPrefix = _checkPropPrefix;

(function (positionAndScale, rotation, others, aliases) {
  var all = Object(_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__["_forEachName"])(positionAndScale + "," + rotation + "," + others, function (name) {
    _transformProps[name] = 1;
  });

  Object(_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__["_forEachName"])(rotation, function (name) {
    _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__["_config"].units[name] = "deg";
    _rotationalProperties[name] = 1;
  });

  _propertyAliases[all[13]] = positionAndScale + "," + rotation;

  Object(_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__["_forEachName"])(aliases, function (name) {
    var split = name.split(":");
    _propertyAliases[split[1]] = all[split[0]];
  });
})("x,y,z,scale,scaleX,scaleY,xPercent,yPercent", "rotation,rotationX,rotationY,skewX,skewY", "transform,transformOrigin,svgOrigin,force3D,smoothOrigin,transformPerspective", "0:translateX,1:translateY,2:translateZ,8:rotate,8:rotationZ,8:rotateZ,9:rotateX,10:rotateY");

Object(_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__["_forEachName"])("x,y,z,top,right,bottom,left,width,height,fontSize,padding,margin,perspective", function (name) {
  _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__["_config"].units[name] = "px";
});

_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__["gsap"].registerPlugin(CSSPlugin);


/***/ }),

/***/ "./node_modules/.pnpm/gsap@3.5.1/node_modules/gsap/gsap-core.js":
/*!**********************************************************************!*\
  !*** ./node_modules/.pnpm/gsap@3.5.1/node_modules/gsap/gsap-core.js ***!
  \**********************************************************************/
/*! exports provided: GSCache, Animation, Timeline, Tween, PropTween, gsap, Power0, Power1, Power2, Power3, Power4, Linear, Quad, Cubic, Quart, Quint, Strong, Elastic, Back, SteppedEase, Bounce, Sine, Expo, Circ, TweenMax, TweenLite, TimelineMax, TimelineLite, default, wrap, wrapYoyo, distribute, random, snap, normalize, getUnit, clamp, splitColor, toArray, mapRange, pipe, unitize, interpolate, shuffle, _getProperty, _numExp, _numWithUnitExp, _isString, _isUndefined, _renderComplexString, _relExp, _setDefaults, _removeLinkedListItem, _forEachName, _sortPropTweensByPriority, _colorStringFilter, _replaceRandom, _checkPlugin, _plugins, _ticker, _config, _roundModifier, _round, _missingPlugin, _getSetter, _getCache */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "GSCache", function() { return GSCache; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Animation", function() { return Animation; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Timeline", function() { return Timeline; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Tween", function() { return Tween; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PropTween", function() { return PropTween; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "gsap", function() { return gsap; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Power0", function() { return Power0; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Power1", function() { return Power1; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Power2", function() { return Power2; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Power3", function() { return Power3; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Power4", function() { return Power4; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Linear", function() { return Linear; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Quad", function() { return Quad; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Cubic", function() { return Cubic; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Quart", function() { return Quart; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Quint", function() { return Quint; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Strong", function() { return Strong; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Elastic", function() { return Elastic; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Back", function() { return Back; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SteppedEase", function() { return SteppedEase; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Bounce", function() { return Bounce; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Sine", function() { return Sine; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Expo", function() { return Expo; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Circ", function() { return Circ; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TweenMax", function() { return Tween; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TweenLite", function() { return Tween; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TimelineMax", function() { return Timeline; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TimelineLite", function() { return Timeline; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return gsap; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "wrap", function() { return wrap; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "wrapYoyo", function() { return wrapYoyo; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "distribute", function() { return distribute; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "random", function() { return random; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "snap", function() { return snap; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "normalize", function() { return normalize; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getUnit", function() { return getUnit; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "clamp", function() { return clamp; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "splitColor", function() { return splitColor; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "toArray", function() { return toArray; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "mapRange", function() { return mapRange; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "pipe", function() { return pipe; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "unitize", function() { return unitize; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "interpolate", function() { return interpolate; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "shuffle", function() { return shuffle; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "_getProperty", function() { return _getProperty; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "_numExp", function() { return _numExp; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "_numWithUnitExp", function() { return _numWithUnitExp; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "_isString", function() { return _isString; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "_isUndefined", function() { return _isUndefined; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "_renderComplexString", function() { return _renderComplexString; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "_relExp", function() { return _relExp; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "_setDefaults", function() { return _setDefaults; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "_removeLinkedListItem", function() { return _removeLinkedListItem; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "_forEachName", function() { return _forEachName; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "_sortPropTweensByPriority", function() { return _sortPropTweensByPriority; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "_colorStringFilter", function() { return _colorStringFilter; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "_replaceRandom", function() { return _replaceRandom; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "_checkPlugin", function() { return _checkPlugin; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "_plugins", function() { return _plugins; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "_ticker", function() { return _ticker; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "_config", function() { return _config; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "_roundModifier", function() { return _roundModifier; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "_round", function() { return _round; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "_missingPlugin", function() { return _missingPlugin; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "_getSetter", function() { return _getSetter; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "_getCache", function() { return _getCache; });
function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _assertThisInitialized(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return self;
}

function _inheritsLoose(subClass, superClass) {
  subClass.prototype = Object.create(superClass.prototype);
  subClass.prototype.constructor = subClass;
  subClass.__proto__ = superClass;
}
/*!
 * GSAP 3.5.1
 * https://greensock.com
 *
 * @license Copyright 2008-2020, GreenSock. All rights reserved.
 * Subject to the terms at https://greensock.com/standard-license or for
 * Club GreenSock members, the agreement issued with that membership.
 * @author: Jack Doyle, jack@greensock.com
*/

/* eslint-disable */


var _config = {
  autoSleep: 120,
  force3D: "auto",
  nullTargetWarn: 1,
  units: {
    lineHeight: ""
  }
},
    _defaults = {
  duration: .5,
  overwrite: false,
  delay: 0
},
    _bigNum = 1e8,
    _tinyNum = 1 / _bigNum,
    _2PI = Math.PI * 2,
    _HALF_PI = _2PI / 4,
    _gsID = 0,
    _sqrt = Math.sqrt,
    _cos = Math.cos,
    _sin = Math.sin,
    _isString = function _isString(value) {
  return typeof value === "string";
},
    _isFunction = function _isFunction(value) {
  return typeof value === "function";
},
    _isNumber = function _isNumber(value) {
  return typeof value === "number";
},
    _isUndefined = function _isUndefined(value) {
  return typeof value === "undefined";
},
    _isObject = function _isObject(value) {
  return _typeof(value) === "object";
},
    _isNotFalse = function _isNotFalse(value) {
  return value !== false;
},
    _windowExists = function _windowExists() {
  return typeof window !== "undefined";
},
    _isFuncOrString = function _isFuncOrString(value) {
  return _isFunction(value) || _isString(value);
},
    _isTypedArray = typeof ArrayBuffer === "function" && ArrayBuffer.isView || function () {},
    // note: IE10 has ArrayBuffer, but NOT ArrayBuffer.isView().
_isArray = Array.isArray,
    _strictNumExp = /(?:-?\.?\d|\.)+/gi,
    //only numbers (including negatives and decimals) but NOT relative values.
_numExp = /[-+=.]*\d+[.e\-+]*\d*[e\-\+]*\d*/g,
    //finds any numbers, including ones that start with += or -=, negative numbers, and ones in scientific notation like 1e-8.
_numWithUnitExp = /[-+=.]*\d+[.e-]*\d*[a-z%]*/g,
    _complexStringNumExp = /[-+=.]*\d+(?:\.|e-|e)*\d*/gi,
    //duplicate so that while we're looping through matches from exec(), it doesn't contaminate the lastIndex of _numExp which we use to search for colors too.
_relExp = /[+-]=-?[\.\d]+/,
    _delimitedValueExp = /[#\-+.]*\b[a-z\d-=+%.]+/gi,
    _globalTimeline,
    _win,
    _coreInitted,
    _doc,
    _globals = {},
    _installScope = {},
    _coreReady,
    _install = function _install(scope) {
  return (_installScope = _merge(scope, _globals)) && gsap;
},
    _missingPlugin = function _missingPlugin(property, value) {
  return console.warn("Invalid property", property, "set to", value, "Missing plugin? gsap.registerPlugin()");
},
    _warn = function _warn(message, suppress) {
  return !suppress && console.warn(message);
},
    _addGlobal = function _addGlobal(name, obj) {
  return name && (_globals[name] = obj) && _installScope && (_installScope[name] = obj) || _globals;
},
    _emptyFunc = function _emptyFunc() {
  return 0;
},
    _reservedProps = {},
    _lazyTweens = [],
    _lazyLookup = {},
    _lastRenderedFrame,
    _plugins = {},
    _effects = {},
    _nextGCFrame = 30,
    _harnessPlugins = [],
    _callbackNames = "",
    _harness = function _harness(targets) {
  var target = targets[0],
      harnessPlugin,
      i;
  _isObject(target) || _isFunction(target) || (targets = [targets]);

  if (!(harnessPlugin = (target._gsap || {}).harness)) {
    i = _harnessPlugins.length;

    while (i-- && !_harnessPlugins[i].targetTest(target)) {}

    harnessPlugin = _harnessPlugins[i];
  }

  i = targets.length;

  while (i--) {
    targets[i] && (targets[i]._gsap || (targets[i]._gsap = new GSCache(targets[i], harnessPlugin))) || targets.splice(i, 1);
  }

  return targets;
},
    _getCache = function _getCache(target) {
  return target._gsap || _harness(toArray(target))[0]._gsap;
},
    _getProperty = function _getProperty(target, property, v) {
  return (v = target[property]) && _isFunction(v) ? target[property]() : _isUndefined(v) && target.getAttribute && target.getAttribute(property) || v;
},
    _forEachName = function _forEachName(names, func) {
  return (names = names.split(",")).forEach(func) || names;
},
    //split a comma-delimited list of names into an array, then run a forEach() function and return the split array (this is just a way to consolidate/shorten some code).
_round = function _round(value) {
  return Math.round(value * 100000) / 100000 || 0;
},
    _arrayContainsAny = function _arrayContainsAny(toSearch, toFind) {
  //searches one array to find matches for any of the items in the toFind array. As soon as one is found, it returns true. It does NOT return all the matches; it's simply a boolean search.
  var l = toFind.length,
      i = 0;

  for (; toSearch.indexOf(toFind[i]) < 0 && ++i < l;) {}

  return i < l;
},
    _parseVars = function _parseVars(params, type, parent) {
  //reads the arguments passed to one of the key methods and figures out if the user is defining things with the OLD/legacy syntax where the duration is the 2nd parameter, and then it adjusts things accordingly and spits back the corrected vars object (with the duration added if necessary, as well as runBackwards or startAt or immediateRender). type 0 = to()/staggerTo(), 1 = from()/staggerFrom(), 2 = fromTo()/staggerFromTo()
  var isLegacy = _isNumber(params[1]),
      varsIndex = (isLegacy ? 2 : 1) + (type < 2 ? 0 : 1),
      vars = params[varsIndex],
      irVars;

  isLegacy && (vars.duration = params[1]);
  vars.parent = parent;

  if (type) {
    irVars = vars;

    while (parent && !("immediateRender" in irVars)) {
      // inheritance hasn't happened yet, but someone may have set a default in an ancestor timeline. We could do vars.immediateRender = _isNotFalse(_inheritDefaults(vars).immediateRender) but that'd exact a slight performance penalty because _inheritDefaults() also runs in the Tween constructor. We're paying a small kb price here to gain speed.
      irVars = parent.vars.defaults || {};
      parent = _isNotFalse(parent.vars.inherit) && parent.parent;
    }

    vars.immediateRender = _isNotFalse(irVars.immediateRender);
    type < 2 ? vars.runBackwards = 1 : vars.startAt = params[varsIndex - 1]; // "from" vars
  }

  return vars;
},
    _lazyRender = function _lazyRender() {
  var l = _lazyTweens.length,
      a = _lazyTweens.slice(0),
      i,
      tween;

  _lazyLookup = {};
  _lazyTweens.length = 0;

  for (i = 0; i < l; i++) {
    tween = a[i];
    tween && tween._lazy && (tween.render(tween._lazy[0], tween._lazy[1], true)._lazy = 0);
  }
},
    _lazySafeRender = function _lazySafeRender(animation, time, suppressEvents, force) {
  _lazyTweens.length && _lazyRender();
  animation.render(time, suppressEvents, force);
  _lazyTweens.length && _lazyRender(); //in case rendering caused any tweens to lazy-init, we should render them because typically when someone calls seek() or time() or progress(), they expect an immediate render.
},
    _numericIfPossible = function _numericIfPossible(value) {
  var n = parseFloat(value);
  return (n || n === 0) && (value + "").match(_delimitedValueExp).length < 2 ? n : _isString(value) ? value.trim() : value;
},
    _passThrough = function _passThrough(p) {
  return p;
},
    _setDefaults = function _setDefaults(obj, defaults) {
  for (var p in defaults) {
    p in obj || (obj[p] = defaults[p]);
  }

  return obj;
},
    _setKeyframeDefaults = function _setKeyframeDefaults(obj, defaults) {
  for (var p in defaults) {
    p in obj || p === "duration" || p === "ease" || (obj[p] = defaults[p]);
  }
},
    _merge = function _merge(base, toMerge) {
  for (var p in toMerge) {
    base[p] = toMerge[p];
  }

  return base;
},
    _mergeDeep = function _mergeDeep(base, toMerge) {
  for (var p in toMerge) {
    base[p] = _isObject(toMerge[p]) ? _mergeDeep(base[p] || (base[p] = {}), toMerge[p]) : toMerge[p];
  }

  return base;
},
    _copyExcluding = function _copyExcluding(obj, excluding) {
  var copy = {},
      p;

  for (p in obj) {
    p in excluding || (copy[p] = obj[p]);
  }

  return copy;
},
    _inheritDefaults = function _inheritDefaults(vars) {
  var parent = vars.parent || _globalTimeline,
      func = vars.keyframes ? _setKeyframeDefaults : _setDefaults;

  if (_isNotFalse(vars.inherit)) {
    while (parent) {
      func(vars, parent.vars.defaults);
      parent = parent.parent || parent._dp;
    }
  }

  return vars;
},
    _arraysMatch = function _arraysMatch(a1, a2) {
  var i = a1.length,
      match = i === a2.length;

  while (match && i-- && a1[i] === a2[i]) {}

  return i < 0;
},
    _addLinkedListItem = function _addLinkedListItem(parent, child, firstProp, lastProp, sortBy) {
  if (firstProp === void 0) {
    firstProp = "_first";
  }

  if (lastProp === void 0) {
    lastProp = "_last";
  }

  var prev = parent[lastProp],
      t;

  if (sortBy) {
    t = child[sortBy];

    while (prev && prev[sortBy] > t) {
      prev = prev._prev;
    }
  }

  if (prev) {
    child._next = prev._next;
    prev._next = child;
  } else {
    child._next = parent[firstProp];
    parent[firstProp] = child;
  }

  if (child._next) {
    child._next._prev = child;
  } else {
    parent[lastProp] = child;
  }

  child._prev = prev;
  child.parent = child._dp = parent;
  return child;
},
    _removeLinkedListItem = function _removeLinkedListItem(parent, child, firstProp, lastProp) {
  if (firstProp === void 0) {
    firstProp = "_first";
  }

  if (lastProp === void 0) {
    lastProp = "_last";
  }

  var prev = child._prev,
      next = child._next;

  if (prev) {
    prev._next = next;
  } else if (parent[firstProp] === child) {
    parent[firstProp] = next;
  }

  if (next) {
    next._prev = prev;
  } else if (parent[lastProp] === child) {
    parent[lastProp] = prev;
  }

  child._next = child._prev = child.parent = null; // don't delete the _dp just so we can revert if necessary. But parent should be null to indicate the item isn't in a linked list.
},
    _removeFromParent = function _removeFromParent(child, onlyIfParentHasAutoRemove) {
  child.parent && (!onlyIfParentHasAutoRemove || child.parent.autoRemoveChildren) && child.parent.remove(child);
  child._act = 0;
},
    _uncache = function _uncache(animation, child) {
  if (animation && (!child || child._end > animation._dur || child._start < 0)) {
    // performance optimization: if a child animation is passed in we should only uncache if that child EXTENDS the animation (its end time is beyond the end)
    var a = animation;

    while (a) {
      a._dirty = 1;
      a = a.parent;
    }
  }

  return animation;
},
    _recacheAncestors = function _recacheAncestors(animation) {
  var parent = animation.parent;

  while (parent && parent.parent) {
    //sometimes we must force a re-sort of all children and update the duration/totalDuration of all ancestor timelines immediately in case, for example, in the middle of a render loop, one tween alters another tween's timeScale which shoves its startTime before 0, forcing the parent timeline to shift around and shiftChildren() which could affect that next tween's render (startTime). Doesn't matter for the root timeline though.
    parent._dirty = 1;
    parent.totalDuration();
    parent = parent.parent;
  }

  return animation;
},
    _hasNoPausedAncestors = function _hasNoPausedAncestors(animation) {
  return !animation || animation._ts && _hasNoPausedAncestors(animation.parent);
},
    _elapsedCycleDuration = function _elapsedCycleDuration(animation) {
  return animation._repeat ? _animationCycle(animation._tTime, animation = animation.duration() + animation._rDelay) * animation : 0;
},
    // feed in the totalTime and cycleDuration and it'll return the cycle (iteration minus 1) and if the playhead is exactly at the very END, it will NOT bump up to the next cycle.
_animationCycle = function _animationCycle(tTime, cycleDuration) {
  return (tTime /= cycleDuration) && ~~tTime === tTime ? ~~tTime - 1 : ~~tTime;
},
    _parentToChildTotalTime = function _parentToChildTotalTime(parentTime, child) {
  return (parentTime - child._start) * child._ts + (child._ts >= 0 ? 0 : child._dirty ? child.totalDuration() : child._tDur);
},
    _setEnd = function _setEnd(animation) {
  return animation._end = _round(animation._start + (animation._tDur / Math.abs(animation._ts || animation._rts || _tinyNum) || 0));
},
    _alignPlayhead = function _alignPlayhead(animation, totalTime) {
  // adjusts the animation's _start and _end according to the provided totalTime (only if the parent's smoothChildTiming is true and the animation isn't paused). It doesn't do any rendering or forcing things back into parent timelines, etc. - that's what totalTime() is for.
  var parent = animation._dp;

  if (parent && parent.smoothChildTiming && animation._ts) {
    animation._start = _round(animation._dp._time - (animation._ts > 0 ? totalTime / animation._ts : ((animation._dirty ? animation.totalDuration() : animation._tDur) - totalTime) / -animation._ts));

    _setEnd(animation);

    parent._dirty || _uncache(parent, animation); //for performance improvement. If the parent's cache is already dirty, it already took care of marking the ancestors as dirty too, so skip the function call here.
  }

  return animation;
},

/*
_totalTimeToTime = (clampedTotalTime, duration, repeat, repeatDelay, yoyo) => {
	let cycleDuration = duration + repeatDelay,
		time = _round(clampedTotalTime % cycleDuration);
	if (time > duration) {
		time = duration;
	}
	return (yoyo && (~~(clampedTotalTime / cycleDuration) & 1)) ? duration - time : time;
},
*/
_postAddChecks = function _postAddChecks(timeline, child) {
  var t;

  if (child._time || child._initted && !child._dur) {
    //in case, for example, the _start is moved on a tween that has already rendered. Imagine it's at its end state, then the startTime is moved WAY later (after the end of this timeline), it should render at its beginning.
    t = _parentToChildTotalTime(timeline.rawTime(), child);

    if (!child._dur || _clamp(0, child.totalDuration(), t) - child._tTime > _tinyNum) {
      child.render(t, true);
    }
  } //if the timeline has already ended but the inserted tween/timeline extends the duration, we should enable this timeline again so that it renders properly. We should also align the playhead with the parent timeline's when appropriate.


  if (_uncache(timeline, child)._dp && timeline._initted && timeline._time >= timeline._dur && timeline._ts) {
    //in case any of the ancestors had completed but should now be enabled...
    if (timeline._dur < timeline.duration()) {
      t = timeline;

      while (t._dp) {
        t.rawTime() >= 0 && t.totalTime(t._tTime); //moves the timeline (shifts its startTime) if necessary, and also enables it. If it's currently zero, though, it may not be scheduled to render until later so there's no need to force it to align with the current playhead position. Only move to catch up with the playhead.

        t = t._dp;
      }
    }

    timeline._zTime = -_tinyNum; // helps ensure that the next render() will be forced (crossingStart = true in render()), even if the duration hasn't changed (we're adding a child which would need to get rendered). Definitely an edge case. Note: we MUST do this AFTER the loop above where the totalTime() might trigger a render() because this _addToTimeline() method gets called from the Animation constructor, BEFORE tweens even record their targets, etc. so we wouldn't want things to get triggered in the wrong order.
  }
},
    _addToTimeline = function _addToTimeline(timeline, child, position, skipChecks) {
  child.parent && _removeFromParent(child);
  child._start = _round(position + child._delay);
  child._end = _round(child._start + (child.totalDuration() / Math.abs(child.timeScale()) || 0));

  _addLinkedListItem(timeline, child, "_first", "_last", timeline._sort ? "_start" : 0);

  timeline._recent = child;
  skipChecks || _postAddChecks(timeline, child);
  return timeline;
},
    _scrollTrigger = function _scrollTrigger(animation, trigger) {
  return (_globals.ScrollTrigger || _missingPlugin("scrollTrigger", trigger)) && _globals.ScrollTrigger.create(trigger, animation);
},
    _attemptInitTween = function _attemptInitTween(tween, totalTime, force, suppressEvents) {
  _initTween(tween, totalTime);

  if (!tween._initted) {
    return 1;
  }

  if (!force && tween._pt && (tween._dur && tween.vars.lazy !== false || !tween._dur && tween.vars.lazy) && _lastRenderedFrame !== _ticker.frame) {
    _lazyTweens.push(tween);

    tween._lazy = [totalTime, suppressEvents];
    return 1;
  }
},
    _renderZeroDurationTween = function _renderZeroDurationTween(tween, totalTime, suppressEvents, force) {
  var prevRatio = tween.ratio,
      ratio = totalTime < 0 || !totalTime && prevRatio && !tween._start && tween._zTime > _tinyNum && !tween._dp._lock || (tween._ts < 0 || tween._dp._ts < 0) && tween.data !== "isFromStart" && tween.data !== "isStart" ? 0 : 1,
      // check parent's _lock because when a timeline repeats/yoyos and does its artificial wrapping, we shouldn't force the ratio back to 0. Also, if the tween or its parent is reversed and the totalTime is 0, we should go to a ratio of 0.
  repeatDelay = tween._rDelay,
      tTime = 0,
      pt,
      iteration,
      prevIteration;

  if (repeatDelay && tween._repeat) {
    // in case there's a zero-duration tween that has a repeat with a repeatDelay
    tTime = _clamp(0, tween._tDur, totalTime);
    iteration = _animationCycle(tTime, repeatDelay);
    prevIteration = _animationCycle(tween._tTime, repeatDelay);

    if (iteration !== prevIteration) {
      prevRatio = 1 - ratio;
      tween.vars.repeatRefresh && tween._initted && tween.invalidate();
    }
  }

  if (ratio !== prevRatio || force || tween._zTime === _tinyNum || !totalTime && tween._zTime) {
    if (!tween._initted && _attemptInitTween(tween, totalTime, force, suppressEvents)) {
      // if we render the very beginning (time == 0) of a fromTo(), we must force the render (normal tweens wouldn't need to render at a time of 0 when the prevTime was also 0). This is also mandatory to make sure overwriting kicks in immediately.
      return;
    }

    prevIteration = tween._zTime;
    tween._zTime = totalTime || (suppressEvents ? _tinyNum : 0); // when the playhead arrives at EXACTLY time 0 (right on top) of a zero-duration tween, we need to discern if events are suppressed so that when the playhead moves again (next time), it'll trigger the callback. If events are NOT suppressed, obviously the callback would be triggered in this render. Basically, the callback should fire either when the playhead ARRIVES or LEAVES this exact spot, not both. Imagine doing a timeline.seek(0) and there's a callback that sits at 0. Since events are suppressed on that seek() by default, nothing will fire, but when the playhead moves off of that position, the callback should fire. This behavior is what people intuitively expect.

    suppressEvents || (suppressEvents = totalTime && !prevIteration); // if it was rendered previously at exactly 0 (_zTime) and now the playhead is moving away, DON'T fire callbacks otherwise they'll seem like duplicates.

    tween.ratio = ratio;
    tween._from && (ratio = 1 - ratio);
    tween._time = 0;
    tween._tTime = tTime;
    suppressEvents || _callback(tween, "onStart");
    pt = tween._pt;

    while (pt) {
      pt.r(ratio, pt.d);
      pt = pt._next;
    }

    tween._startAt && totalTime < 0 && tween._startAt.render(totalTime, true, true);
    tween._onUpdate && !suppressEvents && _callback(tween, "onUpdate");
    tTime && tween._repeat && !suppressEvents && tween.parent && _callback(tween, "onRepeat");

    if ((totalTime >= tween._tDur || totalTime < 0) && tween.ratio === ratio) {
      ratio && _removeFromParent(tween, 1);

      if (!suppressEvents) {
        _callback(tween, ratio ? "onComplete" : "onReverseComplete", true);

        tween._prom && tween._prom();
      }
    }
  } else if (!tween._zTime) {
    tween._zTime = totalTime;
  }
},
    _findNextPauseTween = function _findNextPauseTween(animation, prevTime, time) {
  var child;

  if (time > prevTime) {
    child = animation._first;

    while (child && child._start <= time) {
      if (!child._dur && child.data === "isPause" && child._start > prevTime) {
        return child;
      }

      child = child._next;
    }
  } else {
    child = animation._last;

    while (child && child._start >= time) {
      if (!child._dur && child.data === "isPause" && child._start < prevTime) {
        return child;
      }

      child = child._prev;
    }
  }
},
    _setDuration = function _setDuration(animation, duration, skipUncache, leavePlayhead) {
  var repeat = animation._repeat,
      dur = _round(duration) || 0,
      totalProgress = animation._tTime / animation._tDur;
  totalProgress && !leavePlayhead && (animation._time *= dur / animation._dur);
  animation._dur = dur;
  animation._tDur = !repeat ? dur : repeat < 0 ? 1e10 : _round(dur * (repeat + 1) + animation._rDelay * repeat);
  totalProgress && !leavePlayhead ? _alignPlayhead(animation, animation._tTime = animation._tDur * totalProgress) : animation.parent && _setEnd(animation);
  skipUncache || _uncache(animation.parent, animation);
  return animation;
},
    _onUpdateTotalDuration = function _onUpdateTotalDuration(animation) {
  return animation instanceof Timeline ? _uncache(animation) : _setDuration(animation, animation._dur);
},
    _zeroPosition = {
  _start: 0,
  endTime: _emptyFunc
},
    _parsePosition = function _parsePosition(animation, position) {
  var labels = animation.labels,
      recent = animation._recent || _zeroPosition,
      clippedDuration = animation.duration() >= _bigNum ? recent.endTime(false) : animation._dur,
      //in case there's a child that infinitely repeats, users almost never intend for the insertion point of a new child to be based on a SUPER long value like that so we clip it and assume the most recently-added child's endTime should be used instead.
  i,
      offset;

  if (_isString(position) && (isNaN(position) || position in labels)) {
    //if the string is a number like "1", check to see if there's a label with that name, otherwise interpret it as a number (absolute value).
    i = position.charAt(0);

    if (i === "<" || i === ">") {
      return (i === "<" ? recent._start : recent.endTime(recent._repeat >= 0)) + (parseFloat(position.substr(1)) || 0);
    }

    i = position.indexOf("=");

    if (i < 0) {
      position in labels || (labels[position] = clippedDuration);
      return labels[position];
    }

    offset = +(position.charAt(i - 1) + position.substr(i + 1));
    return i > 1 ? _parsePosition(animation, position.substr(0, i - 1)) + offset : clippedDuration + offset;
  }

  return position == null ? clippedDuration : +position;
},
    _conditionalReturn = function _conditionalReturn(value, func) {
  return value || value === 0 ? func(value) : func;
},
    _clamp = function _clamp(min, max, value) {
  return value < min ? min : value > max ? max : value;
},
    getUnit = function getUnit(value) {
  return (value = (value + "").substr((parseFloat(value) + "").length)) && isNaN(value) ? value : "";
},
    // note: protect against padded numbers as strings, like "100.100". That shouldn't return "00" as the unit. If it's numeric, return no unit.
clamp = function clamp(min, max, value) {
  return _conditionalReturn(value, function (v) {
    return _clamp(min, max, v);
  });
},
    _slice = [].slice,
    _isArrayLike = function _isArrayLike(value, nonEmpty) {
  return value && _isObject(value) && "length" in value && (!nonEmpty && !value.length || value.length - 1 in value && _isObject(value[0])) && !value.nodeType && value !== _win;
},
    _flatten = function _flatten(ar, leaveStrings, accumulator) {
  if (accumulator === void 0) {
    accumulator = [];
  }

  return ar.forEach(function (value) {
    var _accumulator;

    return _isString(value) && !leaveStrings || _isArrayLike(value, 1) ? (_accumulator = accumulator).push.apply(_accumulator, toArray(value)) : accumulator.push(value);
  }) || accumulator;
},
    //takes any value and returns an array. If it's a string (and leaveStrings isn't true), it'll use document.querySelectorAll() and convert that to an array. It'll also accept iterables like jQuery objects.
toArray = function toArray(value, leaveStrings) {
  return _isString(value) && !leaveStrings && (_coreInitted || !_wake()) ? _slice.call(_doc.querySelectorAll(value), 0) : _isArray(value) ? _flatten(value, leaveStrings) : _isArrayLike(value) ? _slice.call(value, 0) : value ? [value] : [];
},
    shuffle = function shuffle(a) {
  return a.sort(function () {
    return .5 - Math.random();
  });
},
    // alternative that's a bit faster and more reliably diverse but bigger:   for (let j, v, i = a.length; i; j = Math.floor(Math.random() * i), v = a[--i], a[i] = a[j], a[j] = v); return a;
//for distributing values across an array. Can accept a number, a function or (most commonly) a function which can contain the following properties: {base, amount, from, ease, grid, axis, length, each}. Returns a function that expects the following parameters: index, target, array. Recognizes the following
distribute = function distribute(v) {
  if (_isFunction(v)) {
    return v;
  }

  var vars = _isObject(v) ? v : {
    each: v
  },
      //n:1 is just to indicate v was a number; we leverage that later to set v according to the length we get. If a number is passed in, we treat it like the old stagger value where 0.1, for example, would mean that things would be distributed with 0.1 between each element in the array rather than a total "amount" that's chunked out among them all.
  ease = _parseEase(vars.ease),
      from = vars.from || 0,
      base = parseFloat(vars.base) || 0,
      cache = {},
      isDecimal = from > 0 && from < 1,
      ratios = isNaN(from) || isDecimal,
      axis = vars.axis,
      ratioX = from,
      ratioY = from;

  if (_isString(from)) {
    ratioX = ratioY = {
      center: .5,
      edges: .5,
      end: 1
    }[from] || 0;
  } else if (!isDecimal && ratios) {
    ratioX = from[0];
    ratioY = from[1];
  }

  return function (i, target, a) {
    var l = (a || vars).length,
        distances = cache[l],
        originX,
        originY,
        x,
        y,
        d,
        j,
        max,
        min,
        wrapAt;

    if (!distances) {
      wrapAt = vars.grid === "auto" ? 0 : (vars.grid || [1, _bigNum])[1];

      if (!wrapAt) {
        max = -_bigNum;

        while (max < (max = a[wrapAt++].getBoundingClientRect().left) && wrapAt < l) {}

        wrapAt--;
      }

      distances = cache[l] = [];
      originX = ratios ? Math.min(wrapAt, l) * ratioX - .5 : from % wrapAt;
      originY = ratios ? l * ratioY / wrapAt - .5 : from / wrapAt | 0;
      max = 0;
      min = _bigNum;

      for (j = 0; j < l; j++) {
        x = j % wrapAt - originX;
        y = originY - (j / wrapAt | 0);
        distances[j] = d = !axis ? _sqrt(x * x + y * y) : Math.abs(axis === "y" ? y : x);
        d > max && (max = d);
        d < min && (min = d);
      }

      from === "random" && shuffle(distances);
      distances.max = max - min;
      distances.min = min;
      distances.v = l = (parseFloat(vars.amount) || parseFloat(vars.each) * (wrapAt > l ? l - 1 : !axis ? Math.max(wrapAt, l / wrapAt) : axis === "y" ? l / wrapAt : wrapAt) || 0) * (from === "edges" ? -1 : 1);
      distances.b = l < 0 ? base - l : base;
      distances.u = getUnit(vars.amount || vars.each) || 0; //unit

      ease = ease && l < 0 ? _invertEase(ease) : ease;
    }

    l = (distances[i] - distances.min) / distances.max || 0;
    return _round(distances.b + (ease ? ease(l) : l) * distances.v) + distances.u; //round in order to work around floating point errors
  };
},
    _roundModifier = function _roundModifier(v) {
  //pass in 0.1 get a function that'll round to the nearest tenth, or 5 to round to the closest 5, or 0.001 to the closest 1000th, etc.
  var p = v < 1 ? Math.pow(10, (v + "").length - 2) : 1; //to avoid floating point math errors (like 24 * 0.1 == 2.4000000000000004), we chop off at a specific number of decimal places (much faster than toFixed()

  return function (raw) {
    return Math.floor(Math.round(parseFloat(raw) / v) * v * p) / p + (_isNumber(raw) ? 0 : getUnit(raw));
  };
},
    snap = function snap(snapTo, value) {
  var isArray = _isArray(snapTo),
      radius,
      is2D;

  if (!isArray && _isObject(snapTo)) {
    radius = isArray = snapTo.radius || _bigNum;

    if (snapTo.values) {
      snapTo = toArray(snapTo.values);

      if (is2D = !_isNumber(snapTo[0])) {
        radius *= radius; //performance optimization so we don't have to Math.sqrt() in the loop.
      }
    } else {
      snapTo = _roundModifier(snapTo.increment);
    }
  }

  return _conditionalReturn(value, !isArray ? _roundModifier(snapTo) : _isFunction(snapTo) ? function (raw) {
    is2D = snapTo(raw);
    return Math.abs(is2D - raw) <= radius ? is2D : raw;
  } : function (raw) {
    var x = parseFloat(is2D ? raw.x : raw),
        y = parseFloat(is2D ? raw.y : 0),
        min = _bigNum,
        closest = 0,
        i = snapTo.length,
        dx,
        dy;

    while (i--) {
      if (is2D) {
        dx = snapTo[i].x - x;
        dy = snapTo[i].y - y;
        dx = dx * dx + dy * dy;
      } else {
        dx = Math.abs(snapTo[i] - x);
      }

      if (dx < min) {
        min = dx;
        closest = i;
      }
    }

    closest = !radius || min <= radius ? snapTo[closest] : raw;
    return is2D || closest === raw || _isNumber(raw) ? closest : closest + getUnit(raw);
  });
},
    random = function random(min, max, roundingIncrement, returnFunction) {
  return _conditionalReturn(_isArray(min) ? !max : roundingIncrement === true ? !!(roundingIncrement = 0) : !returnFunction, function () {
    return _isArray(min) ? min[~~(Math.random() * min.length)] : (roundingIncrement = roundingIncrement || 1e-5) && (returnFunction = roundingIncrement < 1 ? Math.pow(10, (roundingIncrement + "").length - 2) : 1) && Math.floor(Math.round((min + Math.random() * (max - min)) / roundingIncrement) * roundingIncrement * returnFunction) / returnFunction;
  });
},
    pipe = function pipe() {
  for (var _len = arguments.length, functions = new Array(_len), _key = 0; _key < _len; _key++) {
    functions[_key] = arguments[_key];
  }

  return function (value) {
    return functions.reduce(function (v, f) {
      return f(v);
    }, value);
  };
},
    unitize = function unitize(func, unit) {
  return function (value) {
    return func(parseFloat(value)) + (unit || getUnit(value));
  };
},
    normalize = function normalize(min, max, value) {
  return mapRange(min, max, 0, 1, value);
},
    _wrapArray = function _wrapArray(a, wrapper, value) {
  return _conditionalReturn(value, function (index) {
    return a[~~wrapper(index)];
  });
},
    wrap = function wrap(min, max, value) {
  // NOTE: wrap() CANNOT be an arrow function! A very odd compiling bug causes problems (unrelated to GSAP).
  var range = max - min;
  return _isArray(min) ? _wrapArray(min, wrap(0, min.length), max) : _conditionalReturn(value, function (value) {
    return (range + (value - min) % range) % range + min;
  });
},
    wrapYoyo = function wrapYoyo(min, max, value) {
  var range = max - min,
      total = range * 2;
  return _isArray(min) ? _wrapArray(min, wrapYoyo(0, min.length - 1), max) : _conditionalReturn(value, function (value) {
    value = (total + (value - min) % total) % total || 0;
    return min + (value > range ? total - value : value);
  });
},
    _replaceRandom = function _replaceRandom(value) {
  //replaces all occurrences of random(...) in a string with the calculated random value. can be a range like random(-100, 100, 5) or an array like random([0, 100, 500])
  var prev = 0,
      s = "",
      i,
      nums,
      end,
      isArray;

  while (~(i = value.indexOf("random(", prev))) {
    end = value.indexOf(")", i);
    isArray = value.charAt(i + 7) === "[";
    nums = value.substr(i + 7, end - i - 7).match(isArray ? _delimitedValueExp : _strictNumExp);
    s += value.substr(prev, i - prev) + random(isArray ? nums : +nums[0], isArray ? 0 : +nums[1], +nums[2] || 1e-5);
    prev = end + 1;
  }

  return s + value.substr(prev, value.length - prev);
},
    mapRange = function mapRange(inMin, inMax, outMin, outMax, value) {
  var inRange = inMax - inMin,
      outRange = outMax - outMin;
  return _conditionalReturn(value, function (value) {
    return outMin + ((value - inMin) / inRange * outRange || 0);
  });
},
    interpolate = function interpolate(start, end, progress, mutate) {
  var func = isNaN(start + end) ? 0 : function (p) {
    return (1 - p) * start + p * end;
  };

  if (!func) {
    var isString = _isString(start),
        master = {},
        p,
        i,
        interpolators,
        l,
        il;

    progress === true && (mutate = 1) && (progress = null);

    if (isString) {
      start = {
        p: start
      };
      end = {
        p: end
      };
    } else if (_isArray(start) && !_isArray(end)) {
      interpolators = [];
      l = start.length;
      il = l - 2;

      for (i = 1; i < l; i++) {
        interpolators.push(interpolate(start[i - 1], start[i])); //build the interpolators up front as a performance optimization so that when the function is called many times, it can just reuse them.
      }

      l--;

      func = function func(p) {
        p *= l;
        var i = Math.min(il, ~~p);
        return interpolators[i](p - i);
      };

      progress = end;
    } else if (!mutate) {
      start = _merge(_isArray(start) ? [] : {}, start);
    }

    if (!interpolators) {
      for (p in end) {
        _addPropTween.call(master, start, p, "get", end[p]);
      }

      func = function func(p) {
        return _renderPropTweens(p, master) || (isString ? start.p : start);
      };
    }
  }

  return _conditionalReturn(progress, func);
},
    _getLabelInDirection = function _getLabelInDirection(timeline, fromTime, backward) {
  //used for nextLabel() and previousLabel()
  var labels = timeline.labels,
      min = _bigNum,
      p,
      distance,
      label;

  for (p in labels) {
    distance = labels[p] - fromTime;

    if (distance < 0 === !!backward && distance && min > (distance = Math.abs(distance))) {
      label = p;
      min = distance;
    }
  }

  return label;
},
    _callback = function _callback(animation, type, executeLazyFirst) {
  var v = animation.vars,
      callback = v[type],
      params,
      scope;

  if (!callback) {
    return;
  }

  params = v[type + "Params"];
  scope = v.callbackScope || animation;
  executeLazyFirst && _lazyTweens.length && _lazyRender(); //in case rendering caused any tweens to lazy-init, we should render them because typically when a timeline finishes, users expect things to have rendered fully. Imagine an onUpdate on a timeline that reports/checks tweened values.

  return params ? callback.apply(scope, params) : callback.call(scope);
},
    _interrupt = function _interrupt(animation) {
  _removeFromParent(animation);

  animation.progress() < 1 && _callback(animation, "onInterrupt");
  return animation;
},
    _quickTween,
    _createPlugin = function _createPlugin(config) {
  config = !config.name && config["default"] || config; //UMD packaging wraps things oddly, so for example MotionPathHelper becomes {MotionPathHelper:MotionPathHelper, default:MotionPathHelper}.

  var name = config.name,
      isFunc = _isFunction(config),
      Plugin = name && !isFunc && config.init ? function () {
    this._props = [];
  } : config,
      //in case someone passes in an object that's not a plugin, like CustomEase
  instanceDefaults = {
    init: _emptyFunc,
    render: _renderPropTweens,
    add: _addPropTween,
    kill: _killPropTweensOf,
    modifier: _addPluginModifier,
    rawVars: 0
  },
      statics = {
    targetTest: 0,
    get: 0,
    getSetter: _getSetter,
    aliases: {},
    register: 0
  };

  _wake();

  if (config !== Plugin) {
    if (_plugins[name]) {
      return;
    }

    _setDefaults(Plugin, _setDefaults(_copyExcluding(config, instanceDefaults), statics)); //static methods


    _merge(Plugin.prototype, _merge(instanceDefaults, _copyExcluding(config, statics))); //instance methods


    _plugins[Plugin.prop = name] = Plugin;

    if (config.targetTest) {
      _harnessPlugins.push(Plugin);

      _reservedProps[name] = 1;
    }

    name = (name === "css" ? "CSS" : name.charAt(0).toUpperCase() + name.substr(1)) + "Plugin"; //for the global name. "motionPath" should become MotionPathPlugin
  }

  _addGlobal(name, Plugin);

  config.register && config.register(gsap, Plugin, PropTween);
},

/*
 * --------------------------------------------------------------------------------------
 * COLORS
 * --------------------------------------------------------------------------------------
 */
_255 = 255,
    _colorLookup = {
  aqua: [0, _255, _255],
  lime: [0, _255, 0],
  silver: [192, 192, 192],
  black: [0, 0, 0],
  maroon: [128, 0, 0],
  teal: [0, 128, 128],
  blue: [0, 0, _255],
  navy: [0, 0, 128],
  white: [_255, _255, _255],
  olive: [128, 128, 0],
  yellow: [_255, _255, 0],
  orange: [_255, 165, 0],
  gray: [128, 128, 128],
  purple: [128, 0, 128],
  green: [0, 128, 0],
  red: [_255, 0, 0],
  pink: [_255, 192, 203],
  cyan: [0, _255, _255],
  transparent: [_255, _255, _255, 0]
},
    _hue = function _hue(h, m1, m2) {
  h = h < 0 ? h + 1 : h > 1 ? h - 1 : h;
  return (h * 6 < 1 ? m1 + (m2 - m1) * h * 6 : h < .5 ? m2 : h * 3 < 2 ? m1 + (m2 - m1) * (2 / 3 - h) * 6 : m1) * _255 + .5 | 0;
},
    splitColor = function splitColor(v, toHSL, forceAlpha) {
  var a = !v ? _colorLookup.black : _isNumber(v) ? [v >> 16, v >> 8 & _255, v & _255] : 0,
      r,
      g,
      b,
      h,
      s,
      l,
      max,
      min,
      d,
      wasHSL;

  if (!a) {
    if (v.substr(-1) === ",") {
      //sometimes a trailing comma is included and we should chop it off (typically from a comma-delimited list of values like a textShadow:"2px 2px 2px blue, 5px 5px 5px rgb(255,0,0)" - in this example "blue," has a trailing comma. We could strip it out inside parseComplex() but we'd need to do it to the beginning and ending values plus it wouldn't provide protection from other potential scenarios like if the user passes in a similar value.
      v = v.substr(0, v.length - 1);
    }

    if (_colorLookup[v]) {
      a = _colorLookup[v];
    } else if (v.charAt(0) === "#") {
      if (v.length === 4) {
        //for shorthand like #9F0
        r = v.charAt(1);
        g = v.charAt(2);
        b = v.charAt(3);
        v = "#" + r + r + g + g + b + b;
      }

      v = parseInt(v.substr(1), 16);
      a = [v >> 16, v >> 8 & _255, v & _255];
    } else if (v.substr(0, 3) === "hsl") {
      a = wasHSL = v.match(_strictNumExp);

      if (!toHSL) {
        h = +a[0] % 360 / 360;
        s = +a[1] / 100;
        l = +a[2] / 100;
        g = l <= .5 ? l * (s + 1) : l + s - l * s;
        r = l * 2 - g;
        a.length > 3 && (a[3] *= 1); //cast as number

        a[0] = _hue(h + 1 / 3, r, g);
        a[1] = _hue(h, r, g);
        a[2] = _hue(h - 1 / 3, r, g);
      } else if (~v.indexOf("=")) {
        //if relative values are found, just return the raw strings with the relative prefixes in place.
        a = v.match(_numExp);
        forceAlpha && a.length < 4 && (a[3] = 1);
        return a;
      }
    } else {
      a = v.match(_strictNumExp) || _colorLookup.transparent;
    }

    a = a.map(Number);
  }

  if (toHSL && !wasHSL) {
    r = a[0] / _255;
    g = a[1] / _255;
    b = a[2] / _255;
    max = Math.max(r, g, b);
    min = Math.min(r, g, b);
    l = (max + min) / 2;

    if (max === min) {
      h = s = 0;
    } else {
      d = max - min;
      s = l > 0.5 ? d / (2 - max - min) : d / (max + min);
      h = max === r ? (g - b) / d + (g < b ? 6 : 0) : max === g ? (b - r) / d + 2 : (r - g) / d + 4;
      h *= 60;
    }

    a[0] = ~~(h + .5);
    a[1] = ~~(s * 100 + .5);
    a[2] = ~~(l * 100 + .5);
  }

  forceAlpha && a.length < 4 && (a[3] = 1);
  return a;
},
    _colorOrderData = function _colorOrderData(v) {
  // strips out the colors from the string, finds all the numeric slots (with units) and returns an array of those. The Array also has a "c" property which is an Array of the index values where the colors belong. This is to help work around issues where there's a mis-matched order of color/numeric data like drop-shadow(#f00 0px 1px 2px) and drop-shadow(0x 1px 2px #f00). This is basically a helper function used in _formatColors()
  var values = [],
      c = [],
      i = -1;
  v.split(_colorExp).forEach(function (v) {
    var a = v.match(_numWithUnitExp) || [];
    values.push.apply(values, a);
    c.push(i += a.length + 1);
  });
  values.c = c;
  return values;
},
    _formatColors = function _formatColors(s, toHSL, orderMatchData) {
  var result = "",
      colors = (s + result).match(_colorExp),
      type = toHSL ? "hsla(" : "rgba(",
      i = 0,
      c,
      shell,
      d,
      l;

  if (!colors) {
    return s;
  }

  colors = colors.map(function (color) {
    return (color = splitColor(color, toHSL, 1)) && type + (toHSL ? color[0] + "," + color[1] + "%," + color[2] + "%," + color[3] : color.join(",")) + ")";
  });

  if (orderMatchData) {
    d = _colorOrderData(s);
    c = orderMatchData.c;

    if (c.join(result) !== d.c.join(result)) {
      shell = s.replace(_colorExp, "1").split(_numWithUnitExp);
      l = shell.length - 1;

      for (; i < l; i++) {
        result += shell[i] + (~c.indexOf(i) ? colors.shift() || type + "0,0,0,0)" : (d.length ? d : colors.length ? colors : orderMatchData).shift());
      }
    }
  }

  if (!shell) {
    shell = s.split(_colorExp);
    l = shell.length - 1;

    for (; i < l; i++) {
      result += shell[i] + colors[i];
    }
  }

  return result + shell[l];
},
    _colorExp = function () {
  var s = "(?:\\b(?:(?:rgb|rgba|hsl|hsla)\\(.+?\\))|\\B#(?:[0-9a-f]{3}){1,2}\\b",
      //we'll dynamically build this Regular Expression to conserve file size. After building it, it will be able to find rgb(), rgba(), # (hexadecimal), and named color values like red, blue, purple, etc.,
  p;

  for (p in _colorLookup) {
    s += "|" + p + "\\b";
  }

  return new RegExp(s + ")", "gi");
}(),
    _hslExp = /hsl[a]?\(/,
    _colorStringFilter = function _colorStringFilter(a) {
  var combined = a.join(" "),
      toHSL;
  _colorExp.lastIndex = 0;

  if (_colorExp.test(combined)) {
    toHSL = _hslExp.test(combined);
    a[1] = _formatColors(a[1], toHSL);
    a[0] = _formatColors(a[0], toHSL, _colorOrderData(a[1])); // make sure the order of numbers/colors match with the END value.

    return true;
  }
},

/*
 * --------------------------------------------------------------------------------------
 * TICKER
 * --------------------------------------------------------------------------------------
 */
_tickerActive,
    _ticker = function () {
  var _getTime = Date.now,
      _lagThreshold = 500,
      _adjustedLag = 33,
      _startTime = _getTime(),
      _lastUpdate = _startTime,
      _gap = 1000 / 240,
      _nextTime = _gap,
      _listeners = [],
      _id,
      _req,
      _raf,
      _self,
      _delta,
      _i,
      _tick = function _tick(v) {
    var elapsed = _getTime() - _lastUpdate,
        manual = v === true,
        overlap,
        dispatch,
        time,
        frame;

    elapsed > _lagThreshold && (_startTime += elapsed - _adjustedLag);
    _lastUpdate += elapsed;
    time = _lastUpdate - _startTime;
    overlap = time - _nextTime;

    if (overlap > 0 || manual) {
      frame = ++_self.frame;
      _delta = time - _self.time * 1000;
      _self.time = time = time / 1000;
      _nextTime += overlap + (overlap >= _gap ? 4 : _gap - overlap);
      dispatch = 1;
    }

    manual || (_id = _req(_tick)); //make sure the request is made before we dispatch the "tick" event so that timing is maintained. Otherwise, if processing the "tick" requires a bunch of time (like 15ms) and we're using a setTimeout() that's based on 16.7ms, it'd technically take 31.7ms between frames otherwise.

    if (dispatch) {
      for (_i = 0; _i < _listeners.length; _i++) {
        // use _i and check _listeners.length instead of a variable because a listener could get removed during the loop, and if that happens to an element less than the current index, it'd throw things off in the loop.
        _listeners[_i](time, _delta, frame, v);
      }
    }
  };

  _self = {
    time: 0,
    frame: 0,
    tick: function tick() {
      _tick(true);
    },
    deltaRatio: function deltaRatio(fps) {
      return _delta / (1000 / (fps || 60));
    },
    wake: function wake() {
      if (_coreReady) {
        if (!_coreInitted && _windowExists()) {
          _win = _coreInitted = window;
          _doc = _win.document || {};
          _globals.gsap = gsap;
          (_win.gsapVersions || (_win.gsapVersions = [])).push(gsap.version);

          _install(_installScope || _win.GreenSockGlobals || !_win.gsap && _win || {});

          _raf = _win.requestAnimationFrame;
        }

        _id && _self.sleep();

        _req = _raf || function (f) {
          return setTimeout(f, _nextTime - _self.time * 1000 + 1 | 0);
        };

        _tickerActive = 1;

        _tick(2);
      }
    },
    sleep: function sleep() {
      (_raf ? _win.cancelAnimationFrame : clearTimeout)(_id);
      _tickerActive = 0;
      _req = _emptyFunc;
    },
    lagSmoothing: function lagSmoothing(threshold, adjustedLag) {
      _lagThreshold = threshold || 1 / _tinyNum; //zero should be interpreted as basically unlimited

      _adjustedLag = Math.min(adjustedLag, _lagThreshold, 0);
    },
    fps: function fps(_fps) {
      _gap = 1000 / (_fps || 240);
      _nextTime = _self.time * 1000 + _gap;
    },
    add: function add(callback) {
      _listeners.indexOf(callback) < 0 && _listeners.push(callback);

      _wake();
    },
    remove: function remove(callback) {
      var i;
      ~(i = _listeners.indexOf(callback)) && _listeners.splice(i, 1) && _i >= i && _i--;
    },
    _listeners: _listeners
  };
  return _self;
}(),
    _wake = function _wake() {
  return !_tickerActive && _ticker.wake();
},
    //also ensures the core classes are initialized.

/*
* -------------------------------------------------
* EASING
* -------------------------------------------------
*/
_easeMap = {},
    _customEaseExp = /^[\d.\-M][\d.\-,\s]/,
    _quotesExp = /["']/g,
    _parseObjectInString = function _parseObjectInString(value) {
  //takes a string like "{wiggles:10, type:anticipate})" and turns it into a real object. Notice it ends in ")" and includes the {} wrappers. This is because we only use this function for parsing ease configs and prioritized optimization rather than reusability.
  var obj = {},
      split = value.substr(1, value.length - 3).split(":"),
      key = split[0],
      i = 1,
      l = split.length,
      index,
      val,
      parsedVal;

  for (; i < l; i++) {
    val = split[i];
    index = i !== l - 1 ? val.lastIndexOf(",") : val.length;
    parsedVal = val.substr(0, index);
    obj[key] = isNaN(parsedVal) ? parsedVal.replace(_quotesExp, "").trim() : +parsedVal;
    key = val.substr(index + 1).trim();
  }

  return obj;
},
    _valueInParentheses = function _valueInParentheses(value) {
  var open = value.indexOf("(") + 1,
      close = value.indexOf(")"),
      nested = value.indexOf("(", open);
  return value.substring(open, ~nested && nested < close ? value.indexOf(")", close + 1) : close);
},
    _configEaseFromString = function _configEaseFromString(name) {
  //name can be a string like "elastic.out(1,0.5)", and pass in _easeMap as obj and it'll parse it out and call the actual function like _easeMap.Elastic.easeOut.config(1,0.5). It will also parse custom ease strings as long as CustomEase is loaded and registered (internally as _easeMap._CE).
  var split = (name + "").split("("),
      ease = _easeMap[split[0]];
  return ease && split.length > 1 && ease.config ? ease.config.apply(null, ~name.indexOf("{") ? [_parseObjectInString(split[1])] : _valueInParentheses(name).split(",").map(_numericIfPossible)) : _easeMap._CE && _customEaseExp.test(name) ? _easeMap._CE("", name) : ease;
},
    _invertEase = function _invertEase(ease) {
  return function (p) {
    return 1 - ease(1 - p);
  };
},
    // allow yoyoEase to be set in children and have those affected when the parent/ancestor timeline yoyos.
_propagateYoyoEase = function _propagateYoyoEase(timeline, isYoyo) {
  var child = timeline._first,
      ease;

  while (child) {
    if (child instanceof Timeline) {
      _propagateYoyoEase(child, isYoyo);
    } else if (child.vars.yoyoEase && (!child._yoyo || !child._repeat) && child._yoyo !== isYoyo) {
      if (child.timeline) {
        _propagateYoyoEase(child.timeline, isYoyo);
      } else {
        ease = child._ease;
        child._ease = child._yEase;
        child._yEase = ease;
        child._yoyo = isYoyo;
      }
    }

    child = child._next;
  }
},
    _parseEase = function _parseEase(ease, defaultEase) {
  return !ease ? defaultEase : (_isFunction(ease) ? ease : _easeMap[ease] || _configEaseFromString(ease)) || defaultEase;
},
    _insertEase = function _insertEase(names, easeIn, easeOut, easeInOut) {
  if (easeOut === void 0) {
    easeOut = function easeOut(p) {
      return 1 - easeIn(1 - p);
    };
  }

  if (easeInOut === void 0) {
    easeInOut = function easeInOut(p) {
      return p < .5 ? easeIn(p * 2) / 2 : 1 - easeIn((1 - p) * 2) / 2;
    };
  }

  var ease = {
    easeIn: easeIn,
    easeOut: easeOut,
    easeInOut: easeInOut
  },
      lowercaseName;

  _forEachName(names, function (name) {
    _easeMap[name] = _globals[name] = ease;
    _easeMap[lowercaseName = name.toLowerCase()] = easeOut;

    for (var p in ease) {
      _easeMap[lowercaseName + (p === "easeIn" ? ".in" : p === "easeOut" ? ".out" : ".inOut")] = _easeMap[name + "." + p] = ease[p];
    }
  });

  return ease;
},
    _easeInOutFromOut = function _easeInOutFromOut(easeOut) {
  return function (p) {
    return p < .5 ? (1 - easeOut(1 - p * 2)) / 2 : .5 + easeOut((p - .5) * 2) / 2;
  };
},
    _configElastic = function _configElastic(type, amplitude, period) {
  var p1 = amplitude >= 1 ? amplitude : 1,
      //note: if amplitude is < 1, we simply adjust the period for a more natural feel. Otherwise the math doesn't work right and the curve starts at 1.
  p2 = (period || (type ? .3 : .45)) / (amplitude < 1 ? amplitude : 1),
      p3 = p2 / _2PI * (Math.asin(1 / p1) || 0),
      easeOut = function easeOut(p) {
    return p === 1 ? 1 : p1 * Math.pow(2, -10 * p) * _sin((p - p3) * p2) + 1;
  },
      ease = type === "out" ? easeOut : type === "in" ? function (p) {
    return 1 - easeOut(1 - p);
  } : _easeInOutFromOut(easeOut);

  p2 = _2PI / p2; //precalculate to optimize

  ease.config = function (amplitude, period) {
    return _configElastic(type, amplitude, period);
  };

  return ease;
},
    _configBack = function _configBack(type, overshoot) {
  if (overshoot === void 0) {
    overshoot = 1.70158;
  }

  var easeOut = function easeOut(p) {
    return p ? --p * p * ((overshoot + 1) * p + overshoot) + 1 : 0;
  },
      ease = type === "out" ? easeOut : type === "in" ? function (p) {
    return 1 - easeOut(1 - p);
  } : _easeInOutFromOut(easeOut);

  ease.config = function (overshoot) {
    return _configBack(type, overshoot);
  };

  return ease;
}; // a cheaper (kb and cpu) but more mild way to get a parameterized weighted ease by feeding in a value between -1 (easeIn) and 1 (easeOut) where 0 is linear.
// _weightedEase = ratio => {
// 	let y = 0.5 + ratio / 2;
// 	return p => (2 * (1 - p) * p * y + p * p);
// },
// a stronger (but more expensive kb/cpu) parameterized weighted ease that lets you feed in a value between -1 (easeIn) and 1 (easeOut) where 0 is linear.
// _weightedEaseStrong = ratio => {
// 	ratio = .5 + ratio / 2;
// 	let o = 1 / 3 * (ratio < .5 ? ratio : 1 - ratio),
// 		b = ratio - o,
// 		c = ratio + o;
// 	return p => p === 1 ? p : 3 * b * (1 - p) * (1 - p) * p + 3 * c * (1 - p) * p * p + p * p * p;
// };


_forEachName("Linear,Quad,Cubic,Quart,Quint,Strong", function (name, i) {
  var power = i < 5 ? i + 1 : i;

  _insertEase(name + ",Power" + (power - 1), i ? function (p) {
    return Math.pow(p, power);
  } : function (p) {
    return p;
  }, function (p) {
    return 1 - Math.pow(1 - p, power);
  }, function (p) {
    return p < .5 ? Math.pow(p * 2, power) / 2 : 1 - Math.pow((1 - p) * 2, power) / 2;
  });
});

_easeMap.Linear.easeNone = _easeMap.none = _easeMap.Linear.easeIn;

_insertEase("Elastic", _configElastic("in"), _configElastic("out"), _configElastic());

(function (n, c) {
  var n1 = 1 / c,
      n2 = 2 * n1,
      n3 = 2.5 * n1,
      easeOut = function easeOut(p) {
    return p < n1 ? n * p * p : p < n2 ? n * Math.pow(p - 1.5 / c, 2) + .75 : p < n3 ? n * (p -= 2.25 / c) * p + .9375 : n * Math.pow(p - 2.625 / c, 2) + .984375;
  };

  _insertEase("Bounce", function (p) {
    return 1 - easeOut(1 - p);
  }, easeOut);
})(7.5625, 2.75);

_insertEase("Expo", function (p) {
  return p ? Math.pow(2, 10 * (p - 1)) : 0;
});

_insertEase("Circ", function (p) {
  return -(_sqrt(1 - p * p) - 1);
});

_insertEase("Sine", function (p) {
  return p === 1 ? 1 : -_cos(p * _HALF_PI) + 1;
});

_insertEase("Back", _configBack("in"), _configBack("out"), _configBack());

_easeMap.SteppedEase = _easeMap.steps = _globals.SteppedEase = {
  config: function config(steps, immediateStart) {
    if (steps === void 0) {
      steps = 1;
    }

    var p1 = 1 / steps,
        p2 = steps + (immediateStart ? 0 : 1),
        p3 = immediateStart ? 1 : 0,
        max = 1 - _tinyNum;
    return function (p) {
      return ((p2 * _clamp(0, max, p) | 0) + p3) * p1;
    };
  }
};
_defaults.ease = _easeMap["quad.out"];

_forEachName("onComplete,onUpdate,onStart,onRepeat,onReverseComplete,onInterrupt", function (name) {
  return _callbackNames += name + "," + name + "Params,";
});
/*
 * --------------------------------------------------------------------------------------
 * CACHE
 * --------------------------------------------------------------------------------------
 */


var GSCache = function GSCache(target, harness) {
  this.id = _gsID++;
  target._gsap = this;
  this.target = target;
  this.harness = harness;
  this.get = harness ? harness.get : _getProperty;
  this.set = harness ? harness.getSetter : _getSetter;
};
/*
 * --------------------------------------------------------------------------------------
 * ANIMATION
 * --------------------------------------------------------------------------------------
 */

var Animation = /*#__PURE__*/function () {
  function Animation(vars, time) {
    var parent = vars.parent || _globalTimeline;
    this.vars = vars;
    this._delay = +vars.delay || 0;

    if (this._repeat = vars.repeat || 0) {
      this._rDelay = vars.repeatDelay || 0;
      this._yoyo = !!vars.yoyo || !!vars.yoyoEase;
    }

    this._ts = 1;

    _setDuration(this, +vars.duration, 1, 1);

    this.data = vars.data;
    _tickerActive || _ticker.wake();
    parent && _addToTimeline(parent, this, time || time === 0 ? time : parent._time, 1);
    vars.reversed && this.reverse();
    vars.paused && this.paused(true);
  }

  var _proto = Animation.prototype;

  _proto.delay = function delay(value) {
    if (value || value === 0) {
      this.parent && this.parent.smoothChildTiming && this.startTime(this._start + value - this._delay);
      this._delay = value;
      return this;
    }

    return this._delay;
  };

  _proto.duration = function duration(value) {
    return arguments.length ? this.totalDuration(this._repeat > 0 ? value + (value + this._rDelay) * this._repeat : value) : this.totalDuration() && this._dur;
  };

  _proto.totalDuration = function totalDuration(value) {
    if (!arguments.length) {
      return this._tDur;
    }

    this._dirty = 0;
    return _setDuration(this, this._repeat < 0 ? value : (value - this._repeat * this._rDelay) / (this._repeat + 1));
  };

  _proto.totalTime = function totalTime(_totalTime, suppressEvents) {
    _wake();

    if (!arguments.length) {
      return this._tTime;
    }

    var parent = this._dp;

    if (parent && parent.smoothChildTiming && this._ts) {
      _alignPlayhead(this, _totalTime); //in case any of the ancestor timelines had completed but should now be enabled, we should reset their totalTime() which will also ensure that they're lined up properly and enabled. Skip for animations that are on the root (wasteful). Example: a TimelineLite.exportRoot() is performed when there's a paused tween on the root, the export will not complete until that tween is unpaused, but imagine a child gets restarted later, after all [unpaused] tweens have completed. The start of that child would get pushed out, but one of the ancestors may have completed.


      while (parent.parent) {
        if (parent.parent._time !== parent._start + (parent._ts >= 0 ? parent._tTime / parent._ts : (parent.totalDuration() - parent._tTime) / -parent._ts)) {
          parent.totalTime(parent._tTime, true);
        }

        parent = parent.parent;
      }

      if (!this.parent && this._dp.autoRemoveChildren && (this._ts > 0 && _totalTime < this._tDur || this._ts < 0 && _totalTime > 0 || !this._tDur && !_totalTime)) {
        //if the animation doesn't have a parent, put it back into its last parent (recorded as _dp for exactly cases like this). Limit to parents with autoRemoveChildren (like globalTimeline) so that if the user manually removes an animation from a timeline and then alters its playhead, it doesn't get added back in.
        _addToTimeline(this._dp, this, this._start - this._delay);
      }
    }

    if (this._tTime !== _totalTime || !this._dur && !suppressEvents || this._initted && Math.abs(this._zTime) === _tinyNum || !_totalTime && !this._initted && (this.add || this._ptLookup)) {
      // check for _ptLookup on a Tween instance to ensure it has actually finished being instantiated, otherwise if this.reverse() gets called in the Animation constructor, it could trigger a render() here even though the _targets weren't populated, thus when _init() is called there won't be any PropTweens (it'll act like the tween is non-functional)
      this._ts || (this._pTime = _totalTime); // otherwise, if an animation is paused, then the playhead is moved back to zero, then resumed, it'd revert back to the original time at the pause

      _lazySafeRender(this, _totalTime, suppressEvents);
    }

    return this;
  };

  _proto.time = function time(value, suppressEvents) {
    return arguments.length ? this.totalTime(Math.min(this.totalDuration(), value + _elapsedCycleDuration(this)) % this._dur || (value ? this._dur : 0), suppressEvents) : this._time; // note: if the modulus results in 0, the playhead could be exactly at the end or the beginning, and we always defer to the END with a non-zero value, otherwise if you set the time() to the very end (duration()), it would render at the START!
  };

  _proto.totalProgress = function totalProgress(value, suppressEvents) {
    return arguments.length ? this.totalTime(this.totalDuration() * value, suppressEvents) : this.totalDuration() ? Math.min(1, this._tTime / this._tDur) : this.ratio;
  };

  _proto.progress = function progress(value, suppressEvents) {
    return arguments.length ? this.totalTime(this.duration() * (this._yoyo && !(this.iteration() & 1) ? 1 - value : value) + _elapsedCycleDuration(this), suppressEvents) : this.duration() ? Math.min(1, this._time / this._dur) : this.ratio;
  };

  _proto.iteration = function iteration(value, suppressEvents) {
    var cycleDuration = this.duration() + this._rDelay;

    return arguments.length ? this.totalTime(this._time + (value - 1) * cycleDuration, suppressEvents) : this._repeat ? _animationCycle(this._tTime, cycleDuration) + 1 : 1;
  } // potential future addition:
  // isPlayingBackwards() {
  // 	let animation = this,
  // 		orientation = 1; // 1 = forward, -1 = backward
  // 	while (animation) {
  // 		orientation *= animation.reversed() || (animation.repeat() && !(animation.iteration() & 1)) ? -1 : 1;
  // 		animation = animation.parent;
  // 	}
  // 	return orientation < 0;
  // }
  ;

  _proto.timeScale = function timeScale(value) {
    if (!arguments.length) {
      return this._rts === -_tinyNum ? 0 : this._rts; // recorded timeScale. Special case: if someone calls reverse() on an animation with timeScale of 0, we assign it -_tinyNum to remember it's reversed.
    }

    if (this._rts === value) {
      return this;
    }

    var tTime = this.parent && this._ts ? _parentToChildTotalTime(this.parent._time, this) : this._tTime; // make sure to do the parentToChildTotalTime() BEFORE setting the new _ts because the old one must be used in that calculation.
    // prioritize rendering where the parent's playhead lines up instead of this._tTime because there could be a tween that's animating another tween's timeScale in the same rendering loop (same parent), thus if the timeScale tween renders first, it would alter _start BEFORE _tTime was set on that tick (in the rendering loop), effectively freezing it until the timeScale tween finishes.

    this._rts = +value || 0;
    this._ts = this._ps || value === -_tinyNum ? 0 : this._rts; // _ts is the functional timeScale which would be 0 if the animation is paused.

    return _recacheAncestors(this.totalTime(_clamp(-this._delay, this._tDur, tTime), true));
  };

  _proto.paused = function paused(value) {
    if (!arguments.length) {
      return this._ps;
    }

    if (this._ps !== value) {
      this._ps = value;

      if (value) {
        this._pTime = this._tTime || Math.max(-this._delay, this.rawTime()); // if the pause occurs during the delay phase, make sure that's factored in when resuming.

        this._ts = this._act = 0; // _ts is the functional timeScale, so a paused tween would effectively have a timeScale of 0. We record the "real" timeScale as _rts (recorded time scale)
      } else {
        _wake();

        this._ts = this._rts; //only defer to _pTime (pauseTime) if tTime is zero. Remember, someone could pause() an animation, then scrub the playhead and resume(). If the parent doesn't have smoothChildTiming, we render at the rawTime() because the startTime won't get updated.

        this.totalTime(this.parent && !this.parent.smoothChildTiming ? this.rawTime() : this._tTime || this._pTime, this.progress() === 1 && (this._tTime -= _tinyNum) && Math.abs(this._zTime) !== _tinyNum); // edge case: animation.progress(1).pause().play() wouldn't render again because the playhead is already at the end, but the call to totalTime() below will add it back to its parent...and not remove it again (since removing only happens upon rendering at a new time). Offsetting the _tTime slightly is done simply to cause the final render in totalTime() that'll pop it off its timeline (if autoRemoveChildren is true, of course). Check to make sure _zTime isn't -_tinyNum to avoid an edge case where the playhead is pushed to the end but INSIDE a tween/callback, the timeline itself is paused thus halting rendering and leaving a few unrendered. When resuming, it wouldn't render those otherwise.
      }
    }

    return this;
  };

  _proto.startTime = function startTime(value) {
    if (arguments.length) {
      this._start = value;
      var parent = this.parent || this._dp;
      parent && (parent._sort || !this.parent) && _addToTimeline(parent, this, value - this._delay);
      return this;
    }

    return this._start;
  };

  _proto.endTime = function endTime(includeRepeats) {
    return this._start + (_isNotFalse(includeRepeats) ? this.totalDuration() : this.duration()) / Math.abs(this._ts);
  };

  _proto.rawTime = function rawTime(wrapRepeats) {
    var parent = this.parent || this._dp; // _dp = detatched parent

    return !parent ? this._tTime : wrapRepeats && (!this._ts || this._repeat && this._time && this.totalProgress() < 1) ? this._tTime % (this._dur + this._rDelay) : !this._ts ? this._tTime : _parentToChildTotalTime(parent.rawTime(wrapRepeats), this);
  };

  _proto.globalTime = function globalTime(rawTime) {
    var animation = this,
        time = arguments.length ? rawTime : animation.rawTime();

    while (animation) {
      time = animation._start + time / (animation._ts || 1);
      animation = animation._dp;
    }

    return time;
  };

  _proto.repeat = function repeat(value) {
    if (arguments.length) {
      this._repeat = value;
      return _onUpdateTotalDuration(this);
    }

    return this._repeat;
  };

  _proto.repeatDelay = function repeatDelay(value) {
    if (arguments.length) {
      this._rDelay = value;
      return _onUpdateTotalDuration(this);
    }

    return this._rDelay;
  };

  _proto.yoyo = function yoyo(value) {
    if (arguments.length) {
      this._yoyo = value;
      return this;
    }

    return this._yoyo;
  };

  _proto.seek = function seek(position, suppressEvents) {
    return this.totalTime(_parsePosition(this, position), _isNotFalse(suppressEvents));
  };

  _proto.restart = function restart(includeDelay, suppressEvents) {
    return this.play().totalTime(includeDelay ? -this._delay : 0, _isNotFalse(suppressEvents));
  };

  _proto.play = function play(from, suppressEvents) {
    from != null && this.seek(from, suppressEvents);
    return this.reversed(false).paused(false);
  };

  _proto.reverse = function reverse(from, suppressEvents) {
    from != null && this.seek(from || this.totalDuration(), suppressEvents);
    return this.reversed(true).paused(false);
  };

  _proto.pause = function pause(atTime, suppressEvents) {
    atTime != null && this.seek(atTime, suppressEvents);
    return this.paused(true);
  };

  _proto.resume = function resume() {
    return this.paused(false);
  };

  _proto.reversed = function reversed(value) {
    if (arguments.length) {
      !!value !== this.reversed() && this.timeScale(-this._rts || (value ? -_tinyNum : 0)); // in case timeScale is zero, reversing would have no effect so we use _tinyNum.

      return this;
    }

    return this._rts < 0;
  };

  _proto.invalidate = function invalidate() {
    this._initted = 0;
    this._zTime = -_tinyNum;
    return this;
  };

  _proto.isActive = function isActive() {
    var parent = this.parent || this._dp,
        start = this._start,
        rawTime;
    return !!(!parent || this._ts && this._initted && parent.isActive() && (rawTime = parent.rawTime(true)) >= start && rawTime < this.endTime(true) - _tinyNum);
  };

  _proto.eventCallback = function eventCallback(type, callback, params) {
    var vars = this.vars;

    if (arguments.length > 1) {
      if (!callback) {
        delete vars[type];
      } else {
        vars[type] = callback;
        params && (vars[type + "Params"] = params);
        type === "onUpdate" && (this._onUpdate = callback);
      }

      return this;
    }

    return vars[type];
  };

  _proto.then = function then(onFulfilled) {
    var self = this;
    return new Promise(function (resolve) {
      var f = _isFunction(onFulfilled) ? onFulfilled : _passThrough,
          _resolve = function _resolve() {
        var _then = self.then;
        self.then = null; // temporarily null the then() method to avoid an infinite loop (see https://github.com/greensock/GSAP/issues/322)

        _isFunction(f) && (f = f(self)) && (f.then || f === self) && (self.then = _then);
        resolve(f);
        self.then = _then;
      };

      if (self._initted && self.totalProgress() === 1 && self._ts >= 0 || !self._tTime && self._ts < 0) {
        _resolve();
      } else {
        self._prom = _resolve;
      }
    });
  };

  _proto.kill = function kill() {
    _interrupt(this);
  };

  return Animation;
}();

_setDefaults(Animation.prototype, {
  _time: 0,
  _start: 0,
  _end: 0,
  _tTime: 0,
  _tDur: 0,
  _dirty: 0,
  _repeat: 0,
  _yoyo: false,
  parent: null,
  _initted: false,
  _rDelay: 0,
  _ts: 1,
  _dp: 0,
  ratio: 0,
  _zTime: -_tinyNum,
  _prom: 0,
  _ps: false,
  _rts: 1
});
/*
 * -------------------------------------------------
 * TIMELINE
 * -------------------------------------------------
 */


var Timeline = /*#__PURE__*/function (_Animation) {
  _inheritsLoose(Timeline, _Animation);

  function Timeline(vars, time) {
    var _this;

    if (vars === void 0) {
      vars = {};
    }

    _this = _Animation.call(this, vars, time) || this;
    _this.labels = {};
    _this.smoothChildTiming = !!vars.smoothChildTiming;
    _this.autoRemoveChildren = !!vars.autoRemoveChildren;
    _this._sort = _isNotFalse(vars.sortChildren);
    _this.parent && _postAddChecks(_this.parent, _assertThisInitialized(_this));
    vars.scrollTrigger && _scrollTrigger(_assertThisInitialized(_this), vars.scrollTrigger);
    return _this;
  }

  var _proto2 = Timeline.prototype;

  _proto2.to = function to(targets, vars, position) {
    new Tween(targets, _parseVars(arguments, 0, this), _parsePosition(this, _isNumber(vars) ? arguments[3] : position));
    return this;
  };

  _proto2.from = function from(targets, vars, position) {
    new Tween(targets, _parseVars(arguments, 1, this), _parsePosition(this, _isNumber(vars) ? arguments[3] : position));
    return this;
  };

  _proto2.fromTo = function fromTo(targets, fromVars, toVars, position) {
    new Tween(targets, _parseVars(arguments, 2, this), _parsePosition(this, _isNumber(fromVars) ? arguments[4] : position));
    return this;
  };

  _proto2.set = function set(targets, vars, position) {
    vars.duration = 0;
    vars.parent = this;
    _inheritDefaults(vars).repeatDelay || (vars.repeat = 0);
    vars.immediateRender = !!vars.immediateRender;
    new Tween(targets, vars, _parsePosition(this, position), 1);
    return this;
  };

  _proto2.call = function call(callback, params, position) {
    return _addToTimeline(this, Tween.delayedCall(0, callback, params), _parsePosition(this, position));
  } //ONLY for backward compatibility! Maybe delete?
  ;

  _proto2.staggerTo = function staggerTo(targets, duration, vars, stagger, position, onCompleteAll, onCompleteAllParams) {
    vars.duration = duration;
    vars.stagger = vars.stagger || stagger;
    vars.onComplete = onCompleteAll;
    vars.onCompleteParams = onCompleteAllParams;
    vars.parent = this;
    new Tween(targets, vars, _parsePosition(this, position));
    return this;
  };

  _proto2.staggerFrom = function staggerFrom(targets, duration, vars, stagger, position, onCompleteAll, onCompleteAllParams) {
    vars.runBackwards = 1;
    _inheritDefaults(vars).immediateRender = _isNotFalse(vars.immediateRender);
    return this.staggerTo(targets, duration, vars, stagger, position, onCompleteAll, onCompleteAllParams);
  };

  _proto2.staggerFromTo = function staggerFromTo(targets, duration, fromVars, toVars, stagger, position, onCompleteAll, onCompleteAllParams) {
    toVars.startAt = fromVars;
    _inheritDefaults(toVars).immediateRender = _isNotFalse(toVars.immediateRender);
    return this.staggerTo(targets, duration, toVars, stagger, position, onCompleteAll, onCompleteAllParams);
  };

  _proto2.render = function render(totalTime, suppressEvents, force) {
    var prevTime = this._time,
        tDur = this._dirty ? this.totalDuration() : this._tDur,
        dur = this._dur,
        tTime = this !== _globalTimeline && totalTime > tDur - _tinyNum && totalTime >= 0 ? tDur : totalTime < _tinyNum ? 0 : totalTime,
        crossingStart = this._zTime < 0 !== totalTime < 0 && (this._initted || !dur),
        time,
        child,
        next,
        iteration,
        cycleDuration,
        prevPaused,
        pauseTween,
        timeScale,
        prevStart,
        prevIteration,
        yoyo,
        isYoyo;

    if (tTime !== this._tTime || force || crossingStart) {
      if (prevTime !== this._time && dur) {
        //if totalDuration() finds a child with a negative startTime and smoothChildTiming is true, things get shifted around internally so we need to adjust the time accordingly. For example, if a tween starts at -30 we must shift EVERYTHING forward 30 seconds and move this timeline's startTime backward by 30 seconds so that things align with the playhead (no jump).
        tTime += this._time - prevTime;
        totalTime += this._time - prevTime;
      }

      time = tTime;
      prevStart = this._start;
      timeScale = this._ts;
      prevPaused = !timeScale;

      if (crossingStart) {
        dur || (prevTime = this._zTime); //when the playhead arrives at EXACTLY time 0 (right on top) of a zero-duration timeline, we need to discern if events are suppressed so that when the playhead moves again (next time), it'll trigger the callback. If events are NOT suppressed, obviously the callback would be triggered in this render. Basically, the callback should fire either when the playhead ARRIVES or LEAVES this exact spot, not both. Imagine doing a timeline.seek(0) and there's a callback that sits at 0. Since events are suppressed on that seek() by default, nothing will fire, but when the playhead moves off of that position, the callback should fire. This behavior is what people intuitively expect.

        (totalTime || !suppressEvents) && (this._zTime = totalTime);
      }

      if (this._repeat) {
        //adjust the time for repeats and yoyos
        yoyo = this._yoyo;
        cycleDuration = dur + this._rDelay;
        time = _round(tTime % cycleDuration); //round to avoid floating point errors. (4 % 0.8 should be 0 but some browsers report it as 0.79999999!)

        if (tTime === tDur) {
          // the tDur === tTime is for edge cases where there's a lengthy decimal on the duration and it may reach the very end but the time is rendered as not-quite-there (remember, tDur is rounded to 4 decimals whereas dur isn't)
          iteration = this._repeat;
          time = dur;
        } else {
          iteration = ~~(tTime / cycleDuration);

          if (iteration && iteration === tTime / cycleDuration) {
            time = dur;
            iteration--;
          }

          time > dur && (time = dur);
        }

        prevIteration = _animationCycle(this._tTime, cycleDuration);
        !prevTime && this._tTime && prevIteration !== iteration && (prevIteration = iteration); // edge case - if someone does addPause() at the very beginning of a repeating timeline, that pause is technically at the same spot as the end which causes this._time to get set to 0 when the totalTime would normally place the playhead at the end. See https://greensock.com/forums/topic/23823-closing-nav-animation-not-working-on-ie-and-iphone-6-maybe-other-older-browser/?tab=comments#comment-113005

        if (yoyo && iteration & 1) {
          time = dur - time;
          isYoyo = 1;
        }
        /*
        make sure children at the end/beginning of the timeline are rendered properly. If, for example,
        a 3-second long timeline rendered at 2.9 seconds previously, and now renders at 3.2 seconds (which
        would get translated to 2.8 seconds if the timeline yoyos or 0.2 seconds if it just repeats), there
        could be a callback or a short tween that's at 2.95 or 3 seconds in which wouldn't render. So
        we need to push the timeline to the end (and/or beginning depending on its yoyo value). Also we must
        ensure that zero-duration tweens at the very beginning or end of the Timeline work.
        */


        if (iteration !== prevIteration && !this._lock) {
          var rewinding = yoyo && prevIteration & 1,
              doesWrap = rewinding === (yoyo && iteration & 1);
          iteration < prevIteration && (rewinding = !rewinding);
          prevTime = rewinding ? 0 : dur;
          this._lock = 1;
          this.render(prevTime || (isYoyo ? 0 : _round(iteration * cycleDuration)), suppressEvents, !dur)._lock = 0;
          !suppressEvents && this.parent && _callback(this, "onRepeat");
          this.vars.repeatRefresh && !isYoyo && (this.invalidate()._lock = 1);

          if (prevTime !== this._time || prevPaused !== !this._ts) {
            return this;
          }

          dur = this._dur; // in case the duration changed in the onRepeat

          tDur = this._tDur;

          if (doesWrap) {
            this._lock = 2;
            prevTime = rewinding ? dur : -0.0001;
            this.render(prevTime, true);
            this.vars.repeatRefresh && !isYoyo && this.invalidate();
          }

          this._lock = 0;

          if (!this._ts && !prevPaused) {
            return this;
          } //in order for yoyoEase to work properly when there's a stagger, we must swap out the ease in each sub-tween.


          _propagateYoyoEase(this, isYoyo);
        }
      }

      if (this._hasPause && !this._forcing && this._lock < 2) {
        pauseTween = _findNextPauseTween(this, _round(prevTime), _round(time));

        if (pauseTween) {
          tTime -= time - (time = pauseTween._start);
        }
      }

      this._tTime = tTime;
      this._time = time;
      this._act = !timeScale; //as long as it's not paused, force it to be active so that if the user renders independent of the parent timeline, it'll be forced to re-render on the next tick.

      if (!this._initted) {
        this._onUpdate = this.vars.onUpdate;
        this._initted = 1;
        this._zTime = totalTime;
      }

      !prevTime && time && !suppressEvents && _callback(this, "onStart");

      if (time >= prevTime && totalTime >= 0) {
        child = this._first;

        while (child) {
          next = child._next;

          if ((child._act || time >= child._start) && child._ts && pauseTween !== child) {
            if (child.parent !== this) {
              // an extreme edge case - the child's render could do something like kill() the "next" one in the linked list, or reparent it. In that case we must re-initiate the whole render to be safe.
              return this.render(totalTime, suppressEvents, force);
            }

            child.render(child._ts > 0 ? (time - child._start) * child._ts : (child._dirty ? child.totalDuration() : child._tDur) + (time - child._start) * child._ts, suppressEvents, force);

            if (time !== this._time || !this._ts && !prevPaused) {
              //in case a tween pauses or seeks the timeline when rendering, like inside of an onUpdate/onComplete
              pauseTween = 0;
              next && (tTime += this._zTime = -_tinyNum); // it didn't finish rendering, so flag zTime as negative so that so that the next time render() is called it'll be forced (to render any remaining children)

              break;
            }
          }

          child = next;
        }
      } else {
        child = this._last;
        var adjustedTime = totalTime < 0 ? totalTime : time; //when the playhead goes backward beyond the start of this timeline, we must pass that information down to the child animations so that zero-duration tweens know whether to render their starting or ending values.

        while (child) {
          next = child._prev;

          if ((child._act || adjustedTime <= child._end) && child._ts && pauseTween !== child) {
            if (child.parent !== this) {
              // an extreme edge case - the child's render could do something like kill() the "next" one in the linked list, or reparent it. In that case we must re-initiate the whole render to be safe.
              return this.render(totalTime, suppressEvents, force);
            }

            child.render(child._ts > 0 ? (adjustedTime - child._start) * child._ts : (child._dirty ? child.totalDuration() : child._tDur) + (adjustedTime - child._start) * child._ts, suppressEvents, force);

            if (time !== this._time || !this._ts && !prevPaused) {
              //in case a tween pauses or seeks the timeline when rendering, like inside of an onUpdate/onComplete
              pauseTween = 0;
              next && (tTime += this._zTime = adjustedTime ? -_tinyNum : _tinyNum); // it didn't finish rendering, so adjust zTime so that so that the next time render() is called it'll be forced (to render any remaining children)

              break;
            }
          }

          child = next;
        }
      }

      if (pauseTween && !suppressEvents) {
        this.pause();
        pauseTween.render(time >= prevTime ? 0 : -_tinyNum)._zTime = time >= prevTime ? 1 : -1;

        if (this._ts) {
          //the callback resumed playback! So since we may have held back the playhead due to where the pause is positioned, go ahead and jump to where it's SUPPOSED to be (if no pause happened).
          this._start = prevStart; //if the pause was at an earlier time and the user resumed in the callback, it could reposition the timeline (changing its startTime), throwing things off slightly, so we make sure the _start doesn't shift.

          _setEnd(this);

          return this.render(totalTime, suppressEvents, force);
        }
      }

      this._onUpdate && !suppressEvents && _callback(this, "onUpdate", true);
      if (tTime === tDur && tDur >= this.totalDuration() || !tTime && prevTime) if (prevStart === this._start || Math.abs(timeScale) !== Math.abs(this._ts)) if (!this._lock) {
        (totalTime || !dur) && (tTime === tDur && this._ts > 0 || !tTime && this._ts < 0) && _removeFromParent(this, 1); // don't remove if the timeline is reversed and the playhead isn't at 0, otherwise tl.progress(1).reverse() won't work. Only remove if the playhead is at the end and timeScale is positive, or if the playhead is at 0 and the timeScale is negative.

        if (!suppressEvents && !(totalTime < 0 && !prevTime) && (tTime || prevTime)) {
          _callback(this, tTime === tDur ? "onComplete" : "onReverseComplete", true);

          this._prom && !(tTime < tDur && this.timeScale() > 0) && this._prom();
        }
      }
    }

    return this;
  };

  _proto2.add = function add(child, position) {
    var _this2 = this;

    if (!_isNumber(position)) {
      position = _parsePosition(this, position);
    }

    if (!(child instanceof Animation)) {
      if (_isArray(child)) {
        child.forEach(function (obj) {
          return _this2.add(obj, position);
        });
        return this;
      }

      if (_isString(child)) {
        return this.addLabel(child, position);
      }

      if (_isFunction(child)) {
        child = Tween.delayedCall(0, child);
      } else {
        return this;
      }
    }

    return this !== child ? _addToTimeline(this, child, position) : this; //don't allow a timeline to be added to itself as a child!
  };

  _proto2.getChildren = function getChildren(nested, tweens, timelines, ignoreBeforeTime) {
    if (nested === void 0) {
      nested = true;
    }

    if (tweens === void 0) {
      tweens = true;
    }

    if (timelines === void 0) {
      timelines = true;
    }

    if (ignoreBeforeTime === void 0) {
      ignoreBeforeTime = -_bigNum;
    }

    var a = [],
        child = this._first;

    while (child) {
      if (child._start >= ignoreBeforeTime) {
        if (child instanceof Tween) {
          tweens && a.push(child);
        } else {
          timelines && a.push(child);
          nested && a.push.apply(a, child.getChildren(true, tweens, timelines));
        }
      }

      child = child._next;
    }

    return a;
  };

  _proto2.getById = function getById(id) {
    var animations = this.getChildren(1, 1, 1),
        i = animations.length;

    while (i--) {
      if (animations[i].vars.id === id) {
        return animations[i];
      }
    }
  };

  _proto2.remove = function remove(child) {
    if (_isString(child)) {
      return this.removeLabel(child);
    }

    if (_isFunction(child)) {
      return this.killTweensOf(child);
    }

    _removeLinkedListItem(this, child);

    if (child === this._recent) {
      this._recent = this._last;
    }

    return _uncache(this);
  };

  _proto2.totalTime = function totalTime(_totalTime2, suppressEvents) {
    if (!arguments.length) {
      return this._tTime;
    }

    this._forcing = 1;

    if (!this._dp && this._ts) {
      //special case for the global timeline (or any other that has no parent or detached parent).
      this._start = _round(_ticker.time - (this._ts > 0 ? _totalTime2 / this._ts : (this.totalDuration() - _totalTime2) / -this._ts));
    }

    _Animation.prototype.totalTime.call(this, _totalTime2, suppressEvents);

    this._forcing = 0;
    return this;
  };

  _proto2.addLabel = function addLabel(label, position) {
    this.labels[label] = _parsePosition(this, position);
    return this;
  };

  _proto2.removeLabel = function removeLabel(label) {
    delete this.labels[label];
    return this;
  };

  _proto2.addPause = function addPause(position, callback, params) {
    var t = Tween.delayedCall(0, callback || _emptyFunc, params);
    t.data = "isPause";
    this._hasPause = 1;
    return _addToTimeline(this, t, _parsePosition(this, position));
  };

  _proto2.removePause = function removePause(position) {
    var child = this._first;
    position = _parsePosition(this, position);

    while (child) {
      if (child._start === position && child.data === "isPause") {
        _removeFromParent(child);
      }

      child = child._next;
    }
  };

  _proto2.killTweensOf = function killTweensOf(targets, props, onlyActive) {
    var tweens = this.getTweensOf(targets, onlyActive),
        i = tweens.length;

    while (i--) {
      _overwritingTween !== tweens[i] && tweens[i].kill(targets, props);
    }

    return this;
  };

  _proto2.getTweensOf = function getTweensOf(targets, onlyActive) {
    var a = [],
        parsedTargets = toArray(targets),
        child = this._first,
        isGlobalTime = _isNumber(onlyActive),
        // a number is interpreted as a global time. If the animation spans
    children;

    while (child) {
      if (child instanceof Tween) {
        if (_arrayContainsAny(child._targets, parsedTargets) && (isGlobalTime ? (!_overwritingTween || child._initted && child._ts) && child.globalTime(0) <= onlyActive && child.globalTime(child.totalDuration()) > onlyActive : !onlyActive || child.isActive())) {
          // note: if this is for overwriting, it should only be for tweens that aren't paused and are initted.
          a.push(child);
        }
      } else if ((children = child.getTweensOf(parsedTargets, onlyActive)).length) {
        a.push.apply(a, children);
      }

      child = child._next;
    }

    return a;
  };

  _proto2.tweenTo = function tweenTo(position, vars) {
    vars = vars || {};

    var tl = this,
        endTime = _parsePosition(tl, position),
        _vars = vars,
        startAt = _vars.startAt,
        _onStart = _vars.onStart,
        onStartParams = _vars.onStartParams,
        tween = Tween.to(tl, _setDefaults(vars, {
      ease: "none",
      lazy: false,
      time: endTime,
      overwrite: "auto",
      duration: vars.duration || Math.abs((endTime - (startAt && "time" in startAt ? startAt.time : tl._time)) / tl.timeScale()) || _tinyNum,
      onStart: function onStart() {
        tl.pause();
        var duration = vars.duration || Math.abs((endTime - tl._time) / tl.timeScale());
        tween._dur !== duration && _setDuration(tween, duration, 0, 1).render(tween._time, true, true);
        _onStart && _onStart.apply(tween, onStartParams || []); //in case the user had an onStart in the vars - we don't want to overwrite it.
      }
    }));

    return tween;
  };

  _proto2.tweenFromTo = function tweenFromTo(fromPosition, toPosition, vars) {
    return this.tweenTo(toPosition, _setDefaults({
      startAt: {
        time: _parsePosition(this, fromPosition)
      }
    }, vars));
  };

  _proto2.recent = function recent() {
    return this._recent;
  };

  _proto2.nextLabel = function nextLabel(afterTime) {
    if (afterTime === void 0) {
      afterTime = this._time;
    }

    return _getLabelInDirection(this, _parsePosition(this, afterTime));
  };

  _proto2.previousLabel = function previousLabel(beforeTime) {
    if (beforeTime === void 0) {
      beforeTime = this._time;
    }

    return _getLabelInDirection(this, _parsePosition(this, beforeTime), 1);
  };

  _proto2.currentLabel = function currentLabel(value) {
    return arguments.length ? this.seek(value, true) : this.previousLabel(this._time + _tinyNum);
  };

  _proto2.shiftChildren = function shiftChildren(amount, adjustLabels, ignoreBeforeTime) {
    if (ignoreBeforeTime === void 0) {
      ignoreBeforeTime = 0;
    }

    var child = this._first,
        labels = this.labels,
        p;

    while (child) {
      if (child._start >= ignoreBeforeTime) {
        child._start += amount;
        child._end += amount;
      }

      child = child._next;
    }

    if (adjustLabels) {
      for (p in labels) {
        if (labels[p] >= ignoreBeforeTime) {
          labels[p] += amount;
        }
      }
    }

    return _uncache(this);
  };

  _proto2.invalidate = function invalidate() {
    var child = this._first;
    this._lock = 0;

    while (child) {
      child.invalidate();
      child = child._next;
    }

    return _Animation.prototype.invalidate.call(this);
  };

  _proto2.clear = function clear(includeLabels) {
    if (includeLabels === void 0) {
      includeLabels = true;
    }

    var child = this._first,
        next;

    while (child) {
      next = child._next;
      this.remove(child);
      child = next;
    }

    this._time = this._tTime = this._pTime = 0;
    includeLabels && (this.labels = {});
    return _uncache(this);
  };

  _proto2.totalDuration = function totalDuration(value) {
    var max = 0,
        self = this,
        child = self._last,
        prevStart = _bigNum,
        prev,
        start,
        parent;

    if (arguments.length) {
      return self.timeScale((self._repeat < 0 ? self.duration() : self.totalDuration()) / (self.reversed() ? -value : value));
    }

    if (self._dirty) {
      parent = self.parent;

      while (child) {
        prev = child._prev; //record it here in case the tween changes position in the sequence...

        child._dirty && child.totalDuration(); //could change the tween._startTime, so make sure the animation's cache is clean before analyzing it.

        start = child._start;

        if (start > prevStart && self._sort && child._ts && !self._lock) {
          //in case one of the tweens shifted out of order, it needs to be re-inserted into the correct position in the sequence
          self._lock = 1; //prevent endless recursive calls - there are methods that get triggered that check duration/totalDuration when we add().

          _addToTimeline(self, child, start - child._delay, 1)._lock = 0;
        } else {
          prevStart = start;
        }

        if (start < 0 && child._ts) {
          //children aren't allowed to have negative startTimes unless smoothChildTiming is true, so adjust here if one is found.
          max -= start;

          if (!parent && !self._dp || parent && parent.smoothChildTiming) {
            self._start += start / self._ts;
            self._time -= start;
            self._tTime -= start;
          }

          self.shiftChildren(-start, false, -1e999);
          prevStart = 0;
        }

        child._end > max && child._ts && (max = child._end);
        child = prev;
      }

      _setDuration(self, self === _globalTimeline && self._time > max ? self._time : max, 1, 1);

      self._dirty = 0;
    }

    return self._tDur;
  };

  Timeline.updateRoot = function updateRoot(time) {
    if (_globalTimeline._ts) {
      _lazySafeRender(_globalTimeline, _parentToChildTotalTime(time, _globalTimeline));

      _lastRenderedFrame = _ticker.frame;
    }

    if (_ticker.frame >= _nextGCFrame) {
      _nextGCFrame += _config.autoSleep || 120;
      var child = _globalTimeline._first;
      if (!child || !child._ts) if (_config.autoSleep && _ticker._listeners.length < 2) {
        while (child && !child._ts) {
          child = child._next;
        }

        child || _ticker.sleep();
      }
    }
  };

  return Timeline;
}(Animation);

_setDefaults(Timeline.prototype, {
  _lock: 0,
  _hasPause: 0,
  _forcing: 0
});

var _addComplexStringPropTween = function _addComplexStringPropTween(target, prop, start, end, setter, stringFilter, funcParam) {
  //note: we call _addComplexStringPropTween.call(tweenInstance...) to ensure that it's scoped properly. We may call it from within a plugin too, thus "this" would refer to the plugin.
  var pt = new PropTween(this._pt, target, prop, 0, 1, _renderComplexString, null, setter),
      index = 0,
      matchIndex = 0,
      result,
      startNums,
      color,
      endNum,
      chunk,
      startNum,
      hasRandom,
      a;
  pt.b = start;
  pt.e = end;
  start += ""; //ensure values are strings

  end += "";

  if (hasRandom = ~end.indexOf("random(")) {
    end = _replaceRandom(end);
  }

  if (stringFilter) {
    a = [start, end];
    stringFilter(a, target, prop); //pass an array with the starting and ending values and let the filter do whatever it needs to the values.

    start = a[0];
    end = a[1];
  }

  startNums = start.match(_complexStringNumExp) || [];

  while (result = _complexStringNumExp.exec(end)) {
    endNum = result[0];
    chunk = end.substring(index, result.index);

    if (color) {
      color = (color + 1) % 5;
    } else if (chunk.substr(-5) === "rgba(") {
      color = 1;
    }

    if (endNum !== startNums[matchIndex++]) {
      startNum = parseFloat(startNums[matchIndex - 1]) || 0; //these nested PropTweens are handled in a special way - we'll never actually call a render or setter method on them. We'll just loop through them in the parent complex string PropTween's render method.

      pt._pt = {
        _next: pt._pt,
        p: chunk || matchIndex === 1 ? chunk : ",",
        //note: SVG spec allows omission of comma/space when a negative sign is wedged between two numbers, like 2.5-5.3 instead of 2.5,-5.3 but when tweening, the negative value may switch to positive, so we insert the comma just in case.
        s: startNum,
        c: endNum.charAt(1) === "=" ? parseFloat(endNum.substr(2)) * (endNum.charAt(0) === "-" ? -1 : 1) : parseFloat(endNum) - startNum,
        m: color && color < 4 ? Math.round : 0
      };
      index = _complexStringNumExp.lastIndex;
    }
  }

  pt.c = index < end.length ? end.substring(index, end.length) : ""; //we use the "c" of the PropTween to store the final part of the string (after the last number)

  pt.fp = funcParam;

  if (_relExp.test(end) || hasRandom) {
    pt.e = 0; //if the end string contains relative values or dynamic random(...) values, delete the end it so that on the final render we don't actually set it to the string with += or -= characters (forces it to use the calculated value).
  }

  this._pt = pt; //start the linked list with this new PropTween. Remember, we call _addComplexStringPropTween.call(tweenInstance...) to ensure that it's scoped properly. We may call it from within a plugin too, thus "this" would refer to the plugin.

  return pt;
},
    _addPropTween = function _addPropTween(target, prop, start, end, index, targets, modifier, stringFilter, funcParam) {
  _isFunction(end) && (end = end(index || 0, target, targets));
  var currentValue = target[prop],
      parsedStart = start !== "get" ? start : !_isFunction(currentValue) ? currentValue : funcParam ? target[prop.indexOf("set") || !_isFunction(target["get" + prop.substr(3)]) ? prop : "get" + prop.substr(3)](funcParam) : target[prop](),
      setter = !_isFunction(currentValue) ? _setterPlain : funcParam ? _setterFuncWithParam : _setterFunc,
      pt;

  if (_isString(end)) {
    if (~end.indexOf("random(")) {
      end = _replaceRandom(end);
    }

    if (end.charAt(1) === "=") {
      end = parseFloat(parsedStart) + parseFloat(end.substr(2)) * (end.charAt(0) === "-" ? -1 : 1) + (getUnit(parsedStart) || 0);
    }
  }

  if (parsedStart !== end) {
    if (!isNaN(parsedStart * end)) {
      pt = new PropTween(this._pt, target, prop, +parsedStart || 0, end - (parsedStart || 0), typeof currentValue === "boolean" ? _renderBoolean : _renderPlain, 0, setter);
      funcParam && (pt.fp = funcParam);
      modifier && pt.modifier(modifier, this, target);
      return this._pt = pt;
    }

    !currentValue && !(prop in target) && _missingPlugin(prop, end);
    return _addComplexStringPropTween.call(this, target, prop, parsedStart, end, setter, stringFilter || _config.stringFilter, funcParam);
  }
},
    //creates a copy of the vars object and processes any function-based values (putting the resulting values directly into the copy) as well as strings with "random()" in them. It does NOT process relative values.
_processVars = function _processVars(vars, index, target, targets, tween) {
  _isFunction(vars) && (vars = _parseFuncOrString(vars, tween, index, target, targets));

  if (!_isObject(vars) || vars.style && vars.nodeType || _isArray(vars) || _isTypedArray(vars)) {
    return _isString(vars) ? _parseFuncOrString(vars, tween, index, target, targets) : vars;
  }

  var copy = {},
      p;

  for (p in vars) {
    copy[p] = _parseFuncOrString(vars[p], tween, index, target, targets);
  }

  return copy;
},
    _checkPlugin = function _checkPlugin(property, vars, tween, index, target, targets) {
  var plugin, pt, ptLookup, i;

  if (_plugins[property] && (plugin = new _plugins[property]()).init(target, plugin.rawVars ? vars[property] : _processVars(vars[property], index, target, targets, tween), tween, index, targets) !== false) {
    tween._pt = pt = new PropTween(tween._pt, target, property, 0, 1, plugin.render, plugin, 0, plugin.priority);

    if (tween !== _quickTween) {
      ptLookup = tween._ptLookup[tween._targets.indexOf(target)]; //note: we can't use tween._ptLookup[index] because for staggered tweens, the index from the fullTargets array won't match what it is in each individual tween that spawns from the stagger.

      i = plugin._props.length;

      while (i--) {
        ptLookup[plugin._props[i]] = pt;
      }
    }
  }

  return plugin;
},
    _overwritingTween,
    //store a reference temporarily so we can avoid overwriting itself.
_initTween = function _initTween(tween, time) {
  var vars = tween.vars,
      ease = vars.ease,
      startAt = vars.startAt,
      immediateRender = vars.immediateRender,
      lazy = vars.lazy,
      onUpdate = vars.onUpdate,
      onUpdateParams = vars.onUpdateParams,
      callbackScope = vars.callbackScope,
      runBackwards = vars.runBackwards,
      yoyoEase = vars.yoyoEase,
      keyframes = vars.keyframes,
      autoRevert = vars.autoRevert,
      dur = tween._dur,
      prevStartAt = tween._startAt,
      targets = tween._targets,
      parent = tween.parent,
      fullTargets = parent && parent.data === "nested" ? parent.parent._targets : targets,
      autoOverwrite = tween._overwrite === "auto",
      tl = tween.timeline,
      cleanVars,
      i,
      p,
      pt,
      target,
      hasPriority,
      gsData,
      harness,
      plugin,
      ptLookup,
      index,
      harnessVars,
      overwritten;
  tl && (!keyframes || !ease) && (ease = "none");
  tween._ease = _parseEase(ease, _defaults.ease);
  tween._yEase = yoyoEase ? _invertEase(_parseEase(yoyoEase === true ? ease : yoyoEase, _defaults.ease)) : 0;

  if (yoyoEase && tween._yoyo && !tween._repeat) {
    //there must have been a parent timeline with yoyo:true that is currently in its yoyo phase, so flip the eases.
    yoyoEase = tween._yEase;
    tween._yEase = tween._ease;
    tween._ease = yoyoEase;
  }

  if (!tl) {
    //if there's an internal timeline, skip all the parsing because we passed that task down the chain.
    harness = targets[0] ? _getCache(targets[0]).harness : 0;
    harnessVars = harness && vars[harness.prop]; //someone may need to specify CSS-specific values AND non-CSS values, like if the element has an "x" property plus it's a standard DOM element. We allow people to distinguish by wrapping plugin-specific stuff in a css:{} object for example.

    cleanVars = _copyExcluding(vars, _reservedProps);
    prevStartAt && prevStartAt.render(-1, true).kill();

    if (startAt) {
      _removeFromParent(tween._startAt = Tween.set(targets, _setDefaults({
        data: "isStart",
        overwrite: false,
        parent: parent,
        immediateRender: true,
        lazy: _isNotFalse(lazy),
        startAt: null,
        delay: 0,
        onUpdate: onUpdate,
        onUpdateParams: onUpdateParams,
        callbackScope: callbackScope,
        stagger: 0
      }, startAt))); //copy the properties/values into a new object to avoid collisions, like var to = {x:0}, from = {x:500}; timeline.fromTo(e, from, to).fromTo(e, to, from);


      if (immediateRender) {
        if (time > 0) {
          autoRevert || (tween._startAt = 0); //tweens that render immediately (like most from() and fromTo() tweens) shouldn't revert when their parent timeline's playhead goes backward past the startTime because the initial render could have happened anytime and it shouldn't be directly correlated to this tween's startTime. Imagine setting up a complex animation where the beginning states of various objects are rendered immediately but the tween doesn't happen for quite some time - if we revert to the starting values as soon as the playhead goes backward past the tween's startTime, it will throw things off visually. Reversion should only happen in Timeline instances where immediateRender was false or when autoRevert is explicitly set to true.
        } else if (dur && !(time < 0 && prevStartAt)) {
          time && (tween._zTime = time);
          return; //we skip initialization here so that overwriting doesn't occur until the tween actually begins. Otherwise, if you create several immediateRender:true tweens of the same target/properties to drop into a Timeline, the last one created would overwrite the first ones because they didn't get placed into the timeline yet before the first render occurs and kicks in overwriting.
        }
      }
    } else if (runBackwards && dur) {
      //from() tweens must be handled uniquely: their beginning values must be rendered but we don't want overwriting to occur yet (when time is still 0). Wait until the tween actually begins before doing all the routines like overwriting. At that time, we should render at the END of the tween to ensure that things initialize correctly (remember, from() tweens go backwards)
      if (prevStartAt) {
        !autoRevert && (tween._startAt = 0);
      } else {
        time && (immediateRender = false); //in rare cases (like if a from() tween runs and then is invalidate()-ed), immediateRender could be true but the initial forced-render gets skipped, so there's no need to force the render in this context when the _time is greater than 0

        p = _setDefaults({
          overwrite: false,
          data: "isFromStart",
          //we tag the tween with as "isFromStart" so that if [inside a plugin] we need to only do something at the very END of a tween, we have a way of identifying this tween as merely the one that's setting the beginning values for a "from()" tween. For example, clearProps in CSSPlugin should only get applied at the very END of a tween and without this tag, from(...{height:100, clearProps:"height", delay:1}) would wipe the height at the beginning of the tween and after 1 second, it'd kick back in.
          lazy: immediateRender && _isNotFalse(lazy),
          immediateRender: immediateRender,
          //zero-duration tweens render immediately by default, but if we're not specifically instructed to render this tween immediately, we should skip this and merely _init() to record the starting values (rendering them immediately would push them to completion which is wasteful in that case - we'd have to render(-1) immediately after)
          stagger: 0,
          parent: parent //ensures that nested tweens that had a stagger are handled properly, like gsap.from(".class", {y:gsap.utils.wrap([-100,100])})

        }, cleanVars);
        harnessVars && (p[harness.prop] = harnessVars); // in case someone does something like .from(..., {css:{}})

        _removeFromParent(tween._startAt = Tween.set(targets, p));

        if (!immediateRender) {
          _initTween(tween._startAt, _tinyNum); //ensures that the initial values are recorded

        } else if (!time) {
          return;
        }
      }
    }

    tween._pt = 0;
    lazy = dur && _isNotFalse(lazy) || lazy && !dur;

    for (i = 0; i < targets.length; i++) {
      target = targets[i];
      gsData = target._gsap || _harness(targets)[i]._gsap;
      tween._ptLookup[i] = ptLookup = {};
      _lazyLookup[gsData.id] && _lazyTweens.length && _lazyRender(); //if other tweens of the same target have recently initted but haven't rendered yet, we've got to force the render so that the starting values are correct (imagine populating a timeline with a bunch of sequential tweens and then jumping to the end)

      index = fullTargets === targets ? i : fullTargets.indexOf(target);

      if (harness && (plugin = new harness()).init(target, harnessVars || cleanVars, tween, index, fullTargets) !== false) {
        tween._pt = pt = new PropTween(tween._pt, target, plugin.name, 0, 1, plugin.render, plugin, 0, plugin.priority);

        plugin._props.forEach(function (name) {
          ptLookup[name] = pt;
        });

        plugin.priority && (hasPriority = 1);
      }

      if (!harness || harnessVars) {
        for (p in cleanVars) {
          if (_plugins[p] && (plugin = _checkPlugin(p, cleanVars, tween, index, target, fullTargets))) {
            plugin.priority && (hasPriority = 1);
          } else {
            ptLookup[p] = pt = _addPropTween.call(tween, target, p, "get", cleanVars[p], index, fullTargets, 0, vars.stringFilter);
          }
        }
      }

      tween._op && tween._op[i] && tween.kill(target, tween._op[i]);

      if (autoOverwrite && tween._pt) {
        _overwritingTween = tween;

        _globalTimeline.killTweensOf(target, ptLookup, tween.globalTime(0)); //Also make sure the overwriting doesn't overwrite THIS tween!!!


        overwritten = !tween.parent;
        _overwritingTween = 0;
      }

      tween._pt && lazy && (_lazyLookup[gsData.id] = 1);
    }

    hasPriority && _sortPropTweensByPriority(tween);
    tween._onInit && tween._onInit(tween); //plugins like RoundProps must wait until ALL of the PropTweens are instantiated. In the plugin's init() function, it sets the _onInit on the tween instance. May not be pretty/intuitive, but it's fast and keeps file size down.
  }

  tween._from = !tl && !!vars.runBackwards; //nested timelines should never run backwards - the backwards-ness is in the child tweens.

  tween._onUpdate = onUpdate;
  tween._initted = (!tween._op || tween._pt) && !overwritten; // if overwrittenProps resulted in the entire tween being killed, do NOT flag it as initted or else it may render for one tick.
},
    _addAliasesToVars = function _addAliasesToVars(targets, vars) {
  var harness = targets[0] ? _getCache(targets[0]).harness : 0,
      propertyAliases = harness && harness.aliases,
      copy,
      p,
      i,
      aliases;

  if (!propertyAliases) {
    return vars;
  }

  copy = _merge({}, vars);

  for (p in propertyAliases) {
    if (p in copy) {
      aliases = propertyAliases[p].split(",");
      i = aliases.length;

      while (i--) {
        copy[aliases[i]] = copy[p];
      }
    }
  }

  return copy;
},
    _parseFuncOrString = function _parseFuncOrString(value, tween, i, target, targets) {
  return _isFunction(value) ? value.call(tween, i, target, targets) : _isString(value) && ~value.indexOf("random(") ? _replaceRandom(value) : value;
},
    _staggerTweenProps = _callbackNames + "repeat,repeatDelay,yoyo,repeatRefresh,yoyoEase",
    _staggerPropsToSkip = (_staggerTweenProps + ",id,stagger,delay,duration,paused,scrollTrigger").split(",");
/*
 * --------------------------------------------------------------------------------------
 * TWEEN
 * --------------------------------------------------------------------------------------
 */


var Tween = /*#__PURE__*/function (_Animation2) {
  _inheritsLoose(Tween, _Animation2);

  function Tween(targets, vars, time, skipInherit) {
    var _this3;

    if (typeof vars === "number") {
      time.duration = vars;
      vars = time;
      time = null;
    }

    _this3 = _Animation2.call(this, skipInherit ? vars : _inheritDefaults(vars), time) || this;
    var _this3$vars = _this3.vars,
        duration = _this3$vars.duration,
        delay = _this3$vars.delay,
        immediateRender = _this3$vars.immediateRender,
        stagger = _this3$vars.stagger,
        overwrite = _this3$vars.overwrite,
        keyframes = _this3$vars.keyframes,
        defaults = _this3$vars.defaults,
        scrollTrigger = _this3$vars.scrollTrigger,
        yoyoEase = _this3$vars.yoyoEase,
        parent = _this3.parent,
        parsedTargets = (_isArray(targets) || _isTypedArray(targets) ? _isNumber(targets[0]) : "length" in vars) ? [targets] : toArray(targets),
        tl,
        i,
        copy,
        l,
        p,
        curTarget,
        staggerFunc,
        staggerVarsToMerge;
    _this3._targets = parsedTargets.length ? _harness(parsedTargets) : _warn("GSAP target " + targets + " not found. https://greensock.com", !_config.nullTargetWarn) || [];
    _this3._ptLookup = []; //PropTween lookup. An array containing an object for each target, having keys for each tweening property

    _this3._overwrite = overwrite;

    if (keyframes || stagger || _isFuncOrString(duration) || _isFuncOrString(delay)) {
      vars = _this3.vars;
      tl = _this3.timeline = new Timeline({
        data: "nested",
        defaults: defaults || {}
      });
      tl.kill();
      tl.parent = _assertThisInitialized(_this3);

      if (keyframes) {
        _setDefaults(tl.vars.defaults, {
          ease: "none"
        });

        keyframes.forEach(function (frame) {
          return tl.to(parsedTargets, frame, ">");
        });
      } else {
        l = parsedTargets.length;
        staggerFunc = stagger ? distribute(stagger) : _emptyFunc;

        if (_isObject(stagger)) {
          //users can pass in callbacks like onStart/onComplete in the stagger object. These should fire with each individual tween.
          for (p in stagger) {
            if (~_staggerTweenProps.indexOf(p)) {
              staggerVarsToMerge || (staggerVarsToMerge = {});
              staggerVarsToMerge[p] = stagger[p];
            }
          }
        }

        for (i = 0; i < l; i++) {
          copy = {};

          for (p in vars) {
            if (_staggerPropsToSkip.indexOf(p) < 0) {
              copy[p] = vars[p];
            }
          }

          copy.stagger = 0;
          yoyoEase && (copy.yoyoEase = yoyoEase);
          staggerVarsToMerge && _merge(copy, staggerVarsToMerge);
          curTarget = parsedTargets[i]; //don't just copy duration or delay because if they're a string or function, we'd end up in an infinite loop because _isFuncOrString() would evaluate as true in the child tweens, entering this loop, etc. So we parse the value straight from vars and default to 0.

          copy.duration = +_parseFuncOrString(duration, _assertThisInitialized(_this3), i, curTarget, parsedTargets);
          copy.delay = (+_parseFuncOrString(delay, _assertThisInitialized(_this3), i, curTarget, parsedTargets) || 0) - _this3._delay;

          if (!stagger && l === 1 && copy.delay) {
            // if someone does delay:"random(1, 5)", repeat:-1, for example, the delay shouldn't be inside the repeat.
            _this3._delay = delay = copy.delay;
            _this3._start += delay;
            copy.delay = 0;
          }

          tl.to(curTarget, copy, staggerFunc(i, curTarget, parsedTargets));
        }

        tl.duration() ? duration = delay = 0 : _this3.timeline = 0; // if the timeline's duration is 0, we don't need a timeline internally!
      }

      duration || _this3.duration(duration = tl.duration());
    } else {
      _this3.timeline = 0; //speed optimization, faster lookups (no going up the prototype chain)
    }

    if (overwrite === true) {
      _overwritingTween = _assertThisInitialized(_this3);

      _globalTimeline.killTweensOf(parsedTargets);

      _overwritingTween = 0;
    }

    parent && _postAddChecks(parent, _assertThisInitialized(_this3));

    if (immediateRender || !duration && !keyframes && _this3._start === _round(parent._time) && _isNotFalse(immediateRender) && _hasNoPausedAncestors(_assertThisInitialized(_this3)) && parent.data !== "nested") {
      _this3._tTime = -_tinyNum; //forces a render without having to set the render() "force" parameter to true because we want to allow lazying by default (using the "force" parameter always forces an immediate full render)

      _this3.render(Math.max(0, -delay)); //in case delay is negative

    }

    scrollTrigger && _scrollTrigger(_assertThisInitialized(_this3), scrollTrigger);
    return _this3;
  }

  var _proto3 = Tween.prototype;

  _proto3.render = function render(totalTime, suppressEvents, force) {
    var prevTime = this._time,
        tDur = this._tDur,
        dur = this._dur,
        tTime = totalTime > tDur - _tinyNum && totalTime >= 0 ? tDur : totalTime < _tinyNum ? 0 : totalTime,
        time,
        pt,
        iteration,
        cycleDuration,
        prevIteration,
        isYoyo,
        ratio,
        timeline,
        yoyoEase;

    if (!dur) {
      _renderZeroDurationTween(this, totalTime, suppressEvents, force);
    } else if (tTime !== this._tTime || !totalTime || force || this._startAt && this._zTime < 0 !== totalTime < 0) {
      //this senses if we're crossing over the start time, in which case we must record _zTime and force the render, but we do it in this lengthy conditional way for performance reasons (usually we can skip the calculations): this._initted && (this._zTime < 0) !== (totalTime < 0)
      time = tTime;
      timeline = this.timeline;

      if (this._repeat) {
        //adjust the time for repeats and yoyos
        cycleDuration = dur + this._rDelay;
        time = _round(tTime % cycleDuration); //round to avoid floating point errors. (4 % 0.8 should be 0 but some browsers report it as 0.79999999!)

        if (tTime === tDur) {
          // the tDur === tTime is for edge cases where there's a lengthy decimal on the duration and it may reach the very end but the time is rendered as not-quite-there (remember, tDur is rounded to 4 decimals whereas dur isn't)
          iteration = this._repeat;
          time = dur;
        } else {
          iteration = ~~(tTime / cycleDuration);

          if (iteration && iteration === tTime / cycleDuration) {
            time = dur;
            iteration--;
          }

          time > dur && (time = dur);
        }

        isYoyo = this._yoyo && iteration & 1;

        if (isYoyo) {
          yoyoEase = this._yEase;
          time = dur - time;
        }

        prevIteration = _animationCycle(this._tTime, cycleDuration);

        if (time === prevTime && !force && this._initted) {
          //could be during the repeatDelay part. No need to render and fire callbacks.
          return this;
        }

        if (iteration !== prevIteration) {
          timeline && this._yEase && _propagateYoyoEase(timeline, isYoyo); //repeatRefresh functionality

          if (this.vars.repeatRefresh && !isYoyo && !this._lock) {
            this._lock = force = 1; //force, otherwise if lazy is true, the _attemptInitTween() will return and we'll jump out and get caught bouncing on each tick.

            this.render(_round(cycleDuration * iteration), true).invalidate()._lock = 0;
          }
        }
      }

      if (!this._initted) {
        if (_attemptInitTween(this, totalTime < 0 ? totalTime : time, force, suppressEvents)) {
          this._tTime = 0; // in constructor if immediateRender is true, we set _tTime to -_tinyNum to have the playhead cross the starting point but we can't leave _tTime as a negative number.

          return this;
        }

        if (dur !== this._dur) {
          // while initting, a plugin like InertiaPlugin might alter the duration, so rerun from the start to ensure everything renders as it should.
          return this.render(totalTime, suppressEvents, force);
        }
      }

      this._tTime = tTime;
      this._time = time;

      if (!this._act && this._ts) {
        this._act = 1; //as long as it's not paused, force it to be active so that if the user renders independent of the parent timeline, it'll be forced to re-render on the next tick.

        this._lazy = 0;
      }

      this.ratio = ratio = (yoyoEase || this._ease)(time / dur);

      if (this._from) {
        this.ratio = ratio = 1 - ratio;
      }

      time && !prevTime && !suppressEvents && _callback(this, "onStart");
      pt = this._pt;

      while (pt) {
        pt.r(ratio, pt.d);
        pt = pt._next;
      }

      timeline && timeline.render(totalTime < 0 ? totalTime : !time && isYoyo ? -_tinyNum : timeline._dur * ratio, suppressEvents, force) || this._startAt && (this._zTime = totalTime);

      if (this._onUpdate && !suppressEvents) {
        totalTime < 0 && this._startAt && this._startAt.render(totalTime, true, force); //note: for performance reasons, we tuck this conditional logic inside less traveled areas (most tweens don't have an onUpdate). We'd just have it at the end before the onComplete, but the values should be updated before any onUpdate is called, so we ALSO put it here and then if it's not called, we do so later near the onComplete.

        _callback(this, "onUpdate");
      }

      this._repeat && iteration !== prevIteration && this.vars.onRepeat && !suppressEvents && this.parent && _callback(this, "onRepeat");

      if ((tTime === this._tDur || !tTime) && this._tTime === tTime) {
        totalTime < 0 && this._startAt && !this._onUpdate && this._startAt.render(totalTime, true, true);
        (totalTime || !dur) && (tTime === this._tDur && this._ts > 0 || !tTime && this._ts < 0) && _removeFromParent(this, 1); // don't remove if we're rendering at exactly a time of 0, as there could be autoRevert values that should get set on the next tick (if the playhead goes backward beyond the startTime, negative totalTime). Don't remove if the timeline is reversed and the playhead isn't at 0, otherwise tl.progress(1).reverse() won't work. Only remove if the playhead is at the end and timeScale is positive, or if the playhead is at 0 and the timeScale is negative.

        if (!suppressEvents && !(totalTime < 0 && !prevTime) && (tTime || prevTime)) {
          // if prevTime and tTime are zero, we shouldn't fire the onReverseComplete. This could happen if you gsap.to(... {paused:true}).play();
          _callback(this, tTime === tDur ? "onComplete" : "onReverseComplete", true);

          this._prom && !(tTime < tDur && this.timeScale() > 0) && this._prom();
        }
      }
    }

    return this;
  };

  _proto3.targets = function targets() {
    return this._targets;
  };

  _proto3.invalidate = function invalidate() {
    this._pt = this._op = this._startAt = this._onUpdate = this._act = this._lazy = 0;
    this._ptLookup = [];
    this.timeline && this.timeline.invalidate();
    return _Animation2.prototype.invalidate.call(this);
  };

  _proto3.kill = function kill(targets, vars) {
    if (vars === void 0) {
      vars = "all";
    }

    if (!targets && (!vars || vars === "all")) {
      this._lazy = 0;

      if (this.parent) {
        return _interrupt(this);
      }
    }

    if (this.timeline) {
      var tDur = this.timeline.totalDuration();
      this.timeline.killTweensOf(targets, vars, _overwritingTween && _overwritingTween.vars.overwrite !== true)._first || _interrupt(this); // if nothing is left tweenng, interrupt.

      this.parent && tDur !== this.timeline.totalDuration() && _setDuration(this, this._dur * this.timeline._tDur / tDur, 0, 1); // if a nested tween is killed that changes the duration, it should affect this tween's duration. We must use the ratio, though, because sometimes the internal timeline is stretched like for keyframes where they don't all add up to whatever the parent tween's duration was set to.

      return this;
    }

    var parsedTargets = this._targets,
        killingTargets = targets ? toArray(targets) : parsedTargets,
        propTweenLookup = this._ptLookup,
        firstPT = this._pt,
        overwrittenProps,
        curLookup,
        curOverwriteProps,
        props,
        p,
        pt,
        i;

    if ((!vars || vars === "all") && _arraysMatch(parsedTargets, killingTargets)) {
      vars === "all" && (this._pt = 0);
      return _interrupt(this);
    }

    overwrittenProps = this._op = this._op || [];

    if (vars !== "all") {
      //so people can pass in a comma-delimited list of property names
      if (_isString(vars)) {
        p = {};

        _forEachName(vars, function (name) {
          return p[name] = 1;
        });

        vars = p;
      }

      vars = _addAliasesToVars(parsedTargets, vars);
    }

    i = parsedTargets.length;

    while (i--) {
      if (~killingTargets.indexOf(parsedTargets[i])) {
        curLookup = propTweenLookup[i];

        if (vars === "all") {
          overwrittenProps[i] = vars;
          props = curLookup;
          curOverwriteProps = {};
        } else {
          curOverwriteProps = overwrittenProps[i] = overwrittenProps[i] || {};
          props = vars;
        }

        for (p in props) {
          pt = curLookup && curLookup[p];

          if (pt) {
            if (!("kill" in pt.d) || pt.d.kill(p) === true) {
              _removeLinkedListItem(this, pt, "_pt");
            }

            delete curLookup[p];
          }

          if (curOverwriteProps !== "all") {
            curOverwriteProps[p] = 1;
          }
        }
      }
    }

    this._initted && !this._pt && firstPT && _interrupt(this); //if all tweening properties are killed, kill the tween. Without this line, if there's a tween with multiple targets and then you killTweensOf() each target individually, the tween would technically still remain active and fire its onComplete even though there aren't any more properties tweening.

    return this;
  };

  Tween.to = function to(targets, vars) {
    return new Tween(targets, vars, arguments[2]);
  };

  Tween.from = function from(targets, vars) {
    return new Tween(targets, _parseVars(arguments, 1));
  };

  Tween.delayedCall = function delayedCall(delay, callback, params, scope) {
    return new Tween(callback, 0, {
      immediateRender: false,
      lazy: false,
      overwrite: false,
      delay: delay,
      onComplete: callback,
      onReverseComplete: callback,
      onCompleteParams: params,
      onReverseCompleteParams: params,
      callbackScope: scope
    });
  };

  Tween.fromTo = function fromTo(targets, fromVars, toVars) {
    return new Tween(targets, _parseVars(arguments, 2));
  };

  Tween.set = function set(targets, vars) {
    vars.duration = 0;
    vars.repeatDelay || (vars.repeat = 0);
    return new Tween(targets, vars);
  };

  Tween.killTweensOf = function killTweensOf(targets, props, onlyActive) {
    return _globalTimeline.killTweensOf(targets, props, onlyActive);
  };

  return Tween;
}(Animation);

_setDefaults(Tween.prototype, {
  _targets: [],
  _lazy: 0,
  _startAt: 0,
  _op: 0,
  _onInit: 0
}); //add the pertinent timeline methods to Tween instances so that users can chain conveniently and create a timeline automatically. (removed due to concerns that it'd ultimately add to more confusion especially for beginners)
// _forEachName("to,from,fromTo,set,call,add,addLabel,addPause", name => {
// 	Tween.prototype[name] = function() {
// 		let tl = new Timeline();
// 		return _addToTimeline(tl, this)[name].apply(tl, toArray(arguments));
// 	}
// });
//for backward compatibility. Leverage the timeline calls.


_forEachName("staggerTo,staggerFrom,staggerFromTo", function (name) {
  Tween[name] = function () {
    var tl = new Timeline(),
        params = _slice.call(arguments, 0);

    params.splice(name === "staggerFromTo" ? 5 : 4, 0, 0);
    return tl[name].apply(tl, params);
  };
});
/*
 * --------------------------------------------------------------------------------------
 * PROPTWEEN
 * --------------------------------------------------------------------------------------
 */


var _setterPlain = function _setterPlain(target, property, value) {
  return target[property] = value;
},
    _setterFunc = function _setterFunc(target, property, value) {
  return target[property](value);
},
    _setterFuncWithParam = function _setterFuncWithParam(target, property, value, data) {
  return target[property](data.fp, value);
},
    _setterAttribute = function _setterAttribute(target, property, value) {
  return target.setAttribute(property, value);
},
    _getSetter = function _getSetter(target, property) {
  return _isFunction(target[property]) ? _setterFunc : _isUndefined(target[property]) && target.setAttribute ? _setterAttribute : _setterPlain;
},
    _renderPlain = function _renderPlain(ratio, data) {
  return data.set(data.t, data.p, Math.round((data.s + data.c * ratio) * 10000) / 10000, data);
},
    _renderBoolean = function _renderBoolean(ratio, data) {
  return data.set(data.t, data.p, !!(data.s + data.c * ratio), data);
},
    _renderComplexString = function _renderComplexString(ratio, data) {
  var pt = data._pt,
      s = "";

  if (!ratio && data.b) {
    //b = beginning string
    s = data.b;
  } else if (ratio === 1 && data.e) {
    //e = ending string
    s = data.e;
  } else {
    while (pt) {
      s = pt.p + (pt.m ? pt.m(pt.s + pt.c * ratio) : Math.round((pt.s + pt.c * ratio) * 10000) / 10000) + s; //we use the "p" property for the text inbetween (like a suffix). And in the context of a complex string, the modifier (m) is typically just Math.round(), like for RGB colors.

      pt = pt._next;
    }

    s += data.c; //we use the "c" of the PropTween to store the final chunk of non-numeric text.
  }

  data.set(data.t, data.p, s, data);
},
    _renderPropTweens = function _renderPropTweens(ratio, data) {
  var pt = data._pt;

  while (pt) {
    pt.r(ratio, pt.d);
    pt = pt._next;
  }
},
    _addPluginModifier = function _addPluginModifier(modifier, tween, target, property) {
  var pt = this._pt,
      next;

  while (pt) {
    next = pt._next;
    pt.p === property && pt.modifier(modifier, tween, target);
    pt = next;
  }
},
    _killPropTweensOf = function _killPropTweensOf(property) {
  var pt = this._pt,
      hasNonDependentRemaining,
      next;

  while (pt) {
    next = pt._next;

    if (pt.p === property && !pt.op || pt.op === property) {
      _removeLinkedListItem(this, pt, "_pt");
    } else if (!pt.dep) {
      hasNonDependentRemaining = 1;
    }

    pt = next;
  }

  return !hasNonDependentRemaining;
},
    _setterWithModifier = function _setterWithModifier(target, property, value, data) {
  data.mSet(target, property, data.m.call(data.tween, value, data.mt), data);
},
    _sortPropTweensByPriority = function _sortPropTweensByPriority(parent) {
  var pt = parent._pt,
      next,
      pt2,
      first,
      last; //sorts the PropTween linked list in order of priority because some plugins need to do their work after ALL of the PropTweens were created (like RoundPropsPlugin and ModifiersPlugin)

  while (pt) {
    next = pt._next;
    pt2 = first;

    while (pt2 && pt2.pr > pt.pr) {
      pt2 = pt2._next;
    }

    if (pt._prev = pt2 ? pt2._prev : last) {
      pt._prev._next = pt;
    } else {
      first = pt;
    }

    if (pt._next = pt2) {
      pt2._prev = pt;
    } else {
      last = pt;
    }

    pt = next;
  }

  parent._pt = first;
}; //PropTween key: t = target, p = prop, r = renderer, d = data, s = start, c = change, op = overwriteProperty (ONLY populated when it's different than p), pr = priority, _next/_prev for the linked list siblings, set = setter, m = modifier, mSet = modifierSetter (the original setter, before a modifier was added)


var PropTween = /*#__PURE__*/function () {
  function PropTween(next, target, prop, start, change, renderer, data, setter, priority) {
    this.t = target;
    this.s = start;
    this.c = change;
    this.p = prop;
    this.r = renderer || _renderPlain;
    this.d = data || this;
    this.set = setter || _setterPlain;
    this.pr = priority || 0;
    this._next = next;

    if (next) {
      next._prev = this;
    }
  }

  var _proto4 = PropTween.prototype;

  _proto4.modifier = function modifier(func, tween, target) {
    this.mSet = this.mSet || this.set; //in case it was already set (a PropTween can only have one modifier)

    this.set = _setterWithModifier;
    this.m = func;
    this.mt = target; //modifier target

    this.tween = tween;
  };

  return PropTween;
}(); //Initialization tasks

_forEachName(_callbackNames + "parent,duration,ease,delay,overwrite,runBackwards,startAt,yoyo,immediateRender,repeat,repeatDelay,data,paused,reversed,lazy,callbackScope,stringFilter,id,yoyoEase,stagger,inherit,repeatRefresh,keyframes,autoRevert,scrollTrigger", function (name) {
  return _reservedProps[name] = 1;
});

_globals.TweenMax = _globals.TweenLite = Tween;
_globals.TimelineLite = _globals.TimelineMax = Timeline;
_globalTimeline = new Timeline({
  sortChildren: false,
  defaults: _defaults,
  autoRemoveChildren: true,
  id: "root",
  smoothChildTiming: true
});
_config.stringFilter = _colorStringFilter;
/*
 * --------------------------------------------------------------------------------------
 * GSAP
 * --------------------------------------------------------------------------------------
 */

var _gsap = {
  registerPlugin: function registerPlugin() {
    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
      args[_key2] = arguments[_key2];
    }

    args.forEach(function (config) {
      return _createPlugin(config);
    });
  },
  timeline: function timeline(vars) {
    return new Timeline(vars);
  },
  getTweensOf: function getTweensOf(targets, onlyActive) {
    return _globalTimeline.getTweensOf(targets, onlyActive);
  },
  getProperty: function getProperty(target, property, unit, uncache) {
    _isString(target) && (target = toArray(target)[0]); //in case selector text or an array is passed in

    var getter = _getCache(target || {}).get,
        format = unit ? _passThrough : _numericIfPossible;

    unit === "native" && (unit = "");
    return !target ? target : !property ? function (property, unit, uncache) {
      return format((_plugins[property] && _plugins[property].get || getter)(target, property, unit, uncache));
    } : format((_plugins[property] && _plugins[property].get || getter)(target, property, unit, uncache));
  },
  quickSetter: function quickSetter(target, property, unit) {
    target = toArray(target);

    if (target.length > 1) {
      var setters = target.map(function (t) {
        return gsap.quickSetter(t, property, unit);
      }),
          l = setters.length;
      return function (value) {
        var i = l;

        while (i--) {
          setters[i](value);
        }
      };
    }

    target = target[0] || {};

    var Plugin = _plugins[property],
        cache = _getCache(target),
        p = cache.harness && (cache.harness.aliases || {})[property] || property,
        // in case it's an alias, like "rotate" for "rotation".
    setter = Plugin ? function (value) {
      var p = new Plugin();
      _quickTween._pt = 0;
      p.init(target, unit ? value + unit : value, _quickTween, 0, [target]);
      p.render(1, p);
      _quickTween._pt && _renderPropTweens(1, _quickTween);
    } : cache.set(target, p);

    return Plugin ? setter : function (value) {
      return setter(target, p, unit ? value + unit : value, cache, 1);
    };
  },
  isTweening: function isTweening(targets) {
    return _globalTimeline.getTweensOf(targets, true).length > 0;
  },
  defaults: function defaults(value) {
    value && value.ease && (value.ease = _parseEase(value.ease, _defaults.ease));
    return _mergeDeep(_defaults, value || {});
  },
  config: function config(value) {
    return _mergeDeep(_config, value || {});
  },
  registerEffect: function registerEffect(_ref) {
    var name = _ref.name,
        effect = _ref.effect,
        plugins = _ref.plugins,
        defaults = _ref.defaults,
        extendTimeline = _ref.extendTimeline;
    (plugins || "").split(",").forEach(function (pluginName) {
      return pluginName && !_plugins[pluginName] && !_globals[pluginName] && _warn(name + " effect requires " + pluginName + " plugin.");
    });

    _effects[name] = function (targets, vars, tl) {
      return effect(toArray(targets), _setDefaults(vars || {}, defaults), tl);
    };

    if (extendTimeline) {
      Timeline.prototype[name] = function (targets, vars, position) {
        return this.add(_effects[name](targets, _isObject(vars) ? vars : (position = vars) && {}, this), position);
      };
    }
  },
  registerEase: function registerEase(name, ease) {
    _easeMap[name] = _parseEase(ease);
  },
  parseEase: function parseEase(ease, defaultEase) {
    return arguments.length ? _parseEase(ease, defaultEase) : _easeMap;
  },
  getById: function getById(id) {
    return _globalTimeline.getById(id);
  },
  exportRoot: function exportRoot(vars, includeDelayedCalls) {
    if (vars === void 0) {
      vars = {};
    }

    var tl = new Timeline(vars),
        child,
        next;
    tl.smoothChildTiming = _isNotFalse(vars.smoothChildTiming);

    _globalTimeline.remove(tl);

    tl._dp = 0; //otherwise it'll get re-activated when adding children and be re-introduced into _globalTimeline's linked list (then added to itself).

    tl._time = tl._tTime = _globalTimeline._time;
    child = _globalTimeline._first;

    while (child) {
      next = child._next;

      if (includeDelayedCalls || !(!child._dur && child instanceof Tween && child.vars.onComplete === child._targets[0])) {
        _addToTimeline(tl, child, child._start - child._delay);
      }

      child = next;
    }

    _addToTimeline(_globalTimeline, tl, 0);

    return tl;
  },
  utils: {
    wrap: wrap,
    wrapYoyo: wrapYoyo,
    distribute: distribute,
    random: random,
    snap: snap,
    normalize: normalize,
    getUnit: getUnit,
    clamp: clamp,
    splitColor: splitColor,
    toArray: toArray,
    mapRange: mapRange,
    pipe: pipe,
    unitize: unitize,
    interpolate: interpolate,
    shuffle: shuffle
  },
  install: _install,
  effects: _effects,
  ticker: _ticker,
  updateRoot: Timeline.updateRoot,
  plugins: _plugins,
  globalTimeline: _globalTimeline,
  core: {
    PropTween: PropTween,
    globals: _addGlobal,
    Tween: Tween,
    Timeline: Timeline,
    Animation: Animation,
    getCache: _getCache,
    _removeLinkedListItem: _removeLinkedListItem
  }
};

_forEachName("to,from,fromTo,delayedCall,set,killTweensOf", function (name) {
  return _gsap[name] = Tween[name];
});

_ticker.add(Timeline.updateRoot);

_quickTween = _gsap.to({}, {
  duration: 0
}); // ---- EXTRA PLUGINS --------------------------------------------------------

var _getPluginPropTween = function _getPluginPropTween(plugin, prop) {
  var pt = plugin._pt;

  while (pt && pt.p !== prop && pt.op !== prop && pt.fp !== prop) {
    pt = pt._next;
  }

  return pt;
},
    _addModifiers = function _addModifiers(tween, modifiers) {
  var targets = tween._targets,
      p,
      i,
      pt;

  for (p in modifiers) {
    i = targets.length;

    while (i--) {
      pt = tween._ptLookup[i][p];

      if (pt && (pt = pt.d)) {
        if (pt._pt) {
          // is a plugin
          pt = _getPluginPropTween(pt, p);
        }

        pt && pt.modifier && pt.modifier(modifiers[p], tween, targets[i], p);
      }
    }
  }
},
    _buildModifierPlugin = function _buildModifierPlugin(name, modifier) {
  return {
    name: name,
    rawVars: 1,
    //don't pre-process function-based values or "random()" strings.
    init: function init(target, vars, tween) {
      tween._onInit = function (tween) {
        var temp, p;

        if (_isString(vars)) {
          temp = {};

          _forEachName(vars, function (name) {
            return temp[name] = 1;
          }); //if the user passes in a comma-delimited list of property names to roundProps, like "x,y", we round to whole numbers.


          vars = temp;
        }

        if (modifier) {
          temp = {};

          for (p in vars) {
            temp[p] = modifier(vars[p]);
          }

          vars = temp;
        }

        _addModifiers(tween, vars);
      };
    }
  };
}; //register core plugins


var gsap = _gsap.registerPlugin({
  name: "attr",
  init: function init(target, vars, tween, index, targets) {
    var p, pt;

    for (p in vars) {
      pt = this.add(target, "setAttribute", (target.getAttribute(p) || 0) + "", vars[p], index, targets, 0, 0, p);
      pt && (pt.op = p);

      this._props.push(p);
    }
  }
}, {
  name: "endArray",
  init: function init(target, value) {
    var i = value.length;

    while (i--) {
      this.add(target, i, target[i] || 0, value[i]);
    }
  }
}, _buildModifierPlugin("roundProps", _roundModifier), _buildModifierPlugin("modifiers"), _buildModifierPlugin("snap", snap)) || _gsap; //to prevent the core plugins from being dropped via aggressive tree shaking, we must include them in the variable declaration in this way.

Tween.version = Timeline.version = gsap.version = "3.5.1";
_coreReady = 1;

if (_windowExists()) {
  _wake();
}

var Power0 = _easeMap.Power0,
    Power1 = _easeMap.Power1,
    Power2 = _easeMap.Power2,
    Power3 = _easeMap.Power3,
    Power4 = _easeMap.Power4,
    Linear = _easeMap.Linear,
    Quad = _easeMap.Quad,
    Cubic = _easeMap.Cubic,
    Quart = _easeMap.Quart,
    Quint = _easeMap.Quint,
    Strong = _easeMap.Strong,
    Elastic = _easeMap.Elastic,
    Back = _easeMap.Back,
    SteppedEase = _easeMap.SteppedEase,
    Bounce = _easeMap.Bounce,
    Sine = _easeMap.Sine,
    Expo = _easeMap.Expo,
    Circ = _easeMap.Circ;

 //export some internal methods/orojects for use in CSSPlugin so that we can externalize that file and allow custom builds that exclude it.



/***/ }),

/***/ "./node_modules/.pnpm/gsap@3.5.1/node_modules/gsap/index.js":
/*!******************************************************************!*\
  !*** ./node_modules/.pnpm/gsap@3.5.1/node_modules/gsap/index.js ***!
  \******************************************************************/
/*! exports provided: gsap, default, CSSPlugin, TweenMax, TweenLite, TimelineMax, TimelineLite, Power0, Power1, Power2, Power3, Power4, Linear, Quad, Cubic, Quart, Quint, Strong, Elastic, Back, SteppedEase, Bounce, Sine, Expo, Circ */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "gsap", function() { return gsapWithCSS; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return gsapWithCSS; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TweenMax", function() { return TweenMaxWithCSS; });
/* harmony import */ var _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./gsap-core.js */ "./node_modules/.pnpm/gsap@3.5.1/node_modules/gsap/gsap-core.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "TweenLite", function() { return _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__["TweenLite"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "TimelineMax", function() { return _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__["TimelineMax"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "TimelineLite", function() { return _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__["TimelineLite"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Power0", function() { return _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__["Power0"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Power1", function() { return _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__["Power1"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Power2", function() { return _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__["Power2"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Power3", function() { return _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__["Power3"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Power4", function() { return _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__["Power4"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Linear", function() { return _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__["Linear"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Quad", function() { return _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__["Quad"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Cubic", function() { return _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__["Cubic"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Quart", function() { return _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__["Quart"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Quint", function() { return _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__["Quint"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Strong", function() { return _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__["Strong"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Elastic", function() { return _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__["Elastic"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Back", function() { return _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__["Back"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "SteppedEase", function() { return _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__["SteppedEase"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Bounce", function() { return _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__["Bounce"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Sine", function() { return _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__["Sine"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Expo", function() { return _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__["Expo"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Circ", function() { return _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__["Circ"]; });

/* harmony import */ var _CSSPlugin_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./CSSPlugin.js */ "./node_modules/.pnpm/gsap@3.5.1/node_modules/gsap/CSSPlugin.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "CSSPlugin", function() { return _CSSPlugin_js__WEBPACK_IMPORTED_MODULE_1__["CSSPlugin"]; });



var gsapWithCSS = _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__["gsap"].registerPlugin(_CSSPlugin_js__WEBPACK_IMPORTED_MODULE_1__["CSSPlugin"]) || _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__["gsap"],
    // to protect from tree shaking
TweenMaxWithCSS = gsapWithCSS.core.Tween;


/***/ }),

/***/ "./node_modules/.pnpm/imagesloaded@4.1.4/node_modules/imagesloaded/imagesloaded.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/.pnpm/imagesloaded@4.1.4/node_modules/imagesloaded/imagesloaded.js ***!
  \*****************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

/*!
 * imagesLoaded v4.1.4
 * JavaScript is all like "You images are done yet or what?"
 * MIT License
 */
(function (window, factory) {
  'use strict'; // universal module definition

  /*global define: false, module: false, require: false */

  if (true) {
    // AMD
    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! ev-emitter/ev-emitter */ "./node_modules/.pnpm/ev-emitter@1.1.1/node_modules/ev-emitter/ev-emitter.js")], __WEBPACK_AMD_DEFINE_RESULT__ = (function (EvEmitter) {
      return factory(window, EvEmitter);
    }).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
  } else {}
})(typeof window !== 'undefined' ? window : this, // --------------------------  factory -------------------------- //
function factory(window, EvEmitter) {
  'use strict';

  var $ = window.jQuery;
  var console = window.console; // -------------------------- helpers -------------------------- //
  // extend objects

  function extend(a, b) {
    for (var prop in b) {
      a[prop] = b[prop];
    }

    return a;
  }

  var arraySlice = Array.prototype.slice; // turn element or nodeList into an array

  function makeArray(obj) {
    if (Array.isArray(obj)) {
      // use object if already an array
      return obj;
    }

    var isArrayLike = _typeof(obj) == 'object' && typeof obj.length == 'number';

    if (isArrayLike) {
      // convert nodeList to array
      return arraySlice.call(obj);
    } // array of single index


    return [obj];
  } // -------------------------- imagesLoaded -------------------------- //

  /**
   * @param {Array, Element, NodeList, String} elem
   * @param {Object or Function} options - if function, use as callback
   * @param {Function} onAlways - callback function
   */


  function ImagesLoaded(elem, options, onAlways) {
    // coerce ImagesLoaded() without new, to be new ImagesLoaded()
    if (!(this instanceof ImagesLoaded)) {
      return new ImagesLoaded(elem, options, onAlways);
    } // use elem as selector string


    var queryElem = elem;

    if (typeof elem == 'string') {
      queryElem = document.querySelectorAll(elem);
    } // bail if bad element


    if (!queryElem) {
      console.error('Bad element for imagesLoaded ' + (queryElem || elem));
      return;
    }

    this.elements = makeArray(queryElem);
    this.options = extend({}, this.options); // shift arguments if no options set

    if (typeof options == 'function') {
      onAlways = options;
    } else {
      extend(this.options, options);
    }

    if (onAlways) {
      this.on('always', onAlways);
    }

    this.getImages();

    if ($) {
      // add jQuery Deferred object
      this.jqDeferred = new $.Deferred();
    } // HACK check async to allow time to bind listeners


    setTimeout(this.check.bind(this));
  }

  ImagesLoaded.prototype = Object.create(EvEmitter.prototype);
  ImagesLoaded.prototype.options = {};

  ImagesLoaded.prototype.getImages = function () {
    this.images = []; // filter & find items if we have an item selector

    this.elements.forEach(this.addElementImages, this);
  };
  /**
   * @param {Node} element
   */


  ImagesLoaded.prototype.addElementImages = function (elem) {
    // filter siblings
    if (elem.nodeName == 'IMG') {
      this.addImage(elem);
    } // get background image on element


    if (this.options.background === true) {
      this.addElementBackgroundImages(elem);
    } // find children
    // no non-element nodes, #143


    var nodeType = elem.nodeType;

    if (!nodeType || !elementNodeTypes[nodeType]) {
      return;
    }

    var childImgs = elem.querySelectorAll('img'); // concat childElems to filterFound array

    for (var i = 0; i < childImgs.length; i++) {
      var img = childImgs[i];
      this.addImage(img);
    } // get child background images


    if (typeof this.options.background == 'string') {
      var children = elem.querySelectorAll(this.options.background);

      for (i = 0; i < children.length; i++) {
        var child = children[i];
        this.addElementBackgroundImages(child);
      }
    }
  };

  var elementNodeTypes = {
    1: true,
    9: true,
    11: true
  };

  ImagesLoaded.prototype.addElementBackgroundImages = function (elem) {
    var style = getComputedStyle(elem);

    if (!style) {
      // Firefox returns null if in a hidden iframe https://bugzil.la/548397
      return;
    } // get url inside url("...")


    var reURL = /url\((['"])?(.*?)\1\)/gi;
    var matches = reURL.exec(style.backgroundImage);

    while (matches !== null) {
      var url = matches && matches[2];

      if (url) {
        this.addBackground(url, elem);
      }

      matches = reURL.exec(style.backgroundImage);
    }
  };
  /**
   * @param {Image} img
   */


  ImagesLoaded.prototype.addImage = function (img) {
    var loadingImage = new LoadingImage(img);
    this.images.push(loadingImage);
  };

  ImagesLoaded.prototype.addBackground = function (url, elem) {
    var background = new Background(url, elem);
    this.images.push(background);
  };

  ImagesLoaded.prototype.check = function () {
    var _this = this;

    this.progressedCount = 0;
    this.hasAnyBroken = false; // complete if no images

    if (!this.images.length) {
      this.complete();
      return;
    }

    function onProgress(image, elem, message) {
      // HACK - Chrome triggers event before object properties have changed. #83
      setTimeout(function () {
        _this.progress(image, elem, message);
      });
    }

    this.images.forEach(function (loadingImage) {
      loadingImage.once('progress', onProgress);
      loadingImage.check();
    });
  };

  ImagesLoaded.prototype.progress = function (image, elem, message) {
    this.progressedCount++;
    this.hasAnyBroken = this.hasAnyBroken || !image.isLoaded; // progress event

    this.emitEvent('progress', [this, image, elem]);

    if (this.jqDeferred && this.jqDeferred.notify) {
      this.jqDeferred.notify(this, image);
    } // check if completed


    if (this.progressedCount == this.images.length) {
      this.complete();
    }

    if (this.options.debug && console) {
      console.log('progress: ' + message, image, elem);
    }
  };

  ImagesLoaded.prototype.complete = function () {
    var eventName = this.hasAnyBroken ? 'fail' : 'done';
    this.isComplete = true;
    this.emitEvent(eventName, [this]);
    this.emitEvent('always', [this]);

    if (this.jqDeferred) {
      var jqMethod = this.hasAnyBroken ? 'reject' : 'resolve';
      this.jqDeferred[jqMethod](this);
    }
  }; // --------------------------  -------------------------- //


  function LoadingImage(img) {
    this.img = img;
  }

  LoadingImage.prototype = Object.create(EvEmitter.prototype);

  LoadingImage.prototype.check = function () {
    // If complete is true and browser supports natural sizes,
    // try to check for image status manually.
    var isComplete = this.getIsImageComplete();

    if (isComplete) {
      // report based on naturalWidth
      this.confirm(this.img.naturalWidth !== 0, 'naturalWidth');
      return;
    } // If none of the checks above matched, simulate loading on detached element.


    this.proxyImage = new Image();
    this.proxyImage.addEventListener('load', this);
    this.proxyImage.addEventListener('error', this); // bind to image as well for Firefox. #191

    this.img.addEventListener('load', this);
    this.img.addEventListener('error', this);
    this.proxyImage.src = this.img.src;
  };

  LoadingImage.prototype.getIsImageComplete = function () {
    // check for non-zero, non-undefined naturalWidth
    // fixes Safari+InfiniteScroll+Masonry bug infinite-scroll#671
    return this.img.complete && this.img.naturalWidth;
  };

  LoadingImage.prototype.confirm = function (isLoaded, message) {
    this.isLoaded = isLoaded;
    this.emitEvent('progress', [this, this.img, message]);
  }; // ----- events ----- //
  // trigger specified handler for event type


  LoadingImage.prototype.handleEvent = function (event) {
    var method = 'on' + event.type;

    if (this[method]) {
      this[method](event);
    }
  };

  LoadingImage.prototype.onload = function () {
    this.confirm(true, 'onload');
    this.unbindEvents();
  };

  LoadingImage.prototype.onerror = function () {
    this.confirm(false, 'onerror');
    this.unbindEvents();
  };

  LoadingImage.prototype.unbindEvents = function () {
    this.proxyImage.removeEventListener('load', this);
    this.proxyImage.removeEventListener('error', this);
    this.img.removeEventListener('load', this);
    this.img.removeEventListener('error', this);
  }; // -------------------------- Background -------------------------- //


  function Background(url, element) {
    this.url = url;
    this.element = element;
    this.img = new Image();
  } // inherit LoadingImage prototype


  Background.prototype = Object.create(LoadingImage.prototype);

  Background.prototype.check = function () {
    this.img.addEventListener('load', this);
    this.img.addEventListener('error', this);
    this.img.src = this.url; // check if image is already complete

    var isComplete = this.getIsImageComplete();

    if (isComplete) {
      this.confirm(this.img.naturalWidth !== 0, 'naturalWidth');
      this.unbindEvents();
    }
  };

  Background.prototype.unbindEvents = function () {
    this.img.removeEventListener('load', this);
    this.img.removeEventListener('error', this);
  };

  Background.prototype.confirm = function (isLoaded, message) {
    this.isLoaded = isLoaded;
    this.emitEvent('progress', [this, this.element, message]);
  }; // -------------------------- jQuery -------------------------- //


  ImagesLoaded.makeJQueryPlugin = function (jQuery) {
    jQuery = jQuery || window.jQuery;

    if (!jQuery) {
      return;
    } // set local variable


    $ = jQuery; // $().imagesLoaded()

    $.fn.imagesLoaded = function (options, callback) {
      var instance = new ImagesLoaded(this, options, callback);
      return instance.jqDeferred.promise($(this));
    };
  }; // try making plugin


  ImagesLoaded.makeJQueryPlugin(); // --------------------------  -------------------------- //

  return ImagesLoaded;
});

/***/ }),

/***/ "./src/js/bundle.js":
/*!**************************!*\
  !*** ./src/js/bundle.js ***!
  \**************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _components_animations__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./components/animations */ "./src/js/components/animations.js");
/* harmony import */ var _components_barba__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./components/barba */ "./src/js/components/barba.js");
/* harmony import */ var _components_menu__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./components/menu */ "./src/js/components/menu.js");
/* harmony import */ var _components_sticky__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./components/sticky */ "./src/js/components/sticky.js");





/***/ }),

/***/ "./src/js/components/animations.js":
/*!*****************************************!*\
  !*** ./src/js/components/animations.js ***!
  \*****************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
var runScripts = function runScripts() {
  // Smooth Scroll to anchors
  document.querySelectorAll('a[href^="#"]').forEach(function (anchor) {
    anchor.addEventListener('click', function (e) {
      e.preventDefault();
      document.querySelector(this.getAttribute('href')).scrollIntoView({
        behavior: 'smooth'
      });
    });
  }); // All colored-circle with transition delay

  var menuItemsWithChildrens = document.querySelectorAll('.colored-circle-element, .pour-qui-block-image');
  menuItemsWithChildrens.forEach(function (menuItemWithChildrens, index) {
    var subMenuItems = menuItemWithChildrens.querySelectorAll('.colored-circle');
    subMenuItems.forEach(function (subMenuItem) {
      subMenuItem.style.animationDelay = "".concat(500 * index, "ms");
    });
  }); // Fadein when text appears

  var observer = new IntersectionObserver(function (entries) {
    entries.forEach(function (entry) {
      if (entry.intersectionRatio >= 0.1) {
        entry.target.classList.add('in-view');
      } else {
        entry.target.classList.remove('in-view');
      }
    });
  }, {
    threshold: [0, 0.1, 1]
  });
  var slideReveals = document.querySelectorAll('.slide__reveal'); // const pBig = document.querySelectorAll('p.big');

  slideReveals.forEach(function (slide, index) {
    var subMenuItems = slide.querySelectorAll('h1,h2');
    subMenuItems.forEach(function (subMenuItem) {
      subMenuItem.style.transitionDelay = "".concat(300 * index, "ms");
    });
  });
  slideReveals.forEach(function (slide) {
    observer.observe(slide);
  }); // Fading Background-color by sections

  var sections = document.querySelectorAll('section');
  var bodyTag = document.querySelector('body');

  var changeBackground = function changeBackground() {
    var topViewport = window.pageYOffset;
    var midViewport = topViewport + window.innerHeight / 2;
    var stickyNav = document.querySelector('.page-hero-nav');
    var menu = document.querySelector('.nav--desktop');
    sections.forEach(function (section, index) {
      var topSection = section.offsetTop;
      var distanceToSectionTop = midViewport - topSection;

      if (distanceToSectionTop > -100) {
        var dataBackground = section.getAttribute('data-background');
        bodyTag.style.backgroundColor = dataBackground;

        if (stickyNav) {
          stickyNav.style.backgroundColor = dataBackground;
        }

        menu.style.backgroundColor = dataBackground;
      }
    });
  };

  document.addEventListener('scroll', function () {
    changeBackground();
  });
  window.addEventListener('resize', function () {
    changeBackground();
  });
};

/* harmony default export */ __webpack_exports__["default"] = (runScripts);

/***/ }),

/***/ "./src/js/components/barba.js":
/*!************************************!*\
  !*** ./src/js/components/barba.js ***!
  \************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _barba_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @barba/core */ "./node_modules/.pnpm/@barba/core@2.9.7/node_modules/@barba/core/dist/barba.umd.js");
/* harmony import */ var _barba_core__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_barba_core__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var imagesloaded__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! imagesloaded */ "./node_modules/.pnpm/imagesloaded@4.1.4/node_modules/imagesloaded/imagesloaded.js");
/* harmony import */ var imagesloaded__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(imagesloaded__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var gsap__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! gsap */ "./node_modules/.pnpm/gsap@3.5.1/node_modules/gsap/index.js");
/* harmony import */ var _animations__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./animations */ "./src/js/components/animations.js");
/* harmony import */ var _menu__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./menu */ "./src/js/components/menu.js");
/* harmony import */ var _sticky__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./sticky */ "./src/js/components/sticky.js");






Object(_animations__WEBPACK_IMPORTED_MODULE_3__["default"])();
Object(_menu__WEBPACK_IMPORTED_MODULE_4__["default"])();
Object(_sticky__WEBPACK_IMPORTED_MODULE_5__["default"])();

var scroll2top = function scroll2top() {
  window.scrollTo({
    top: 0,
    behavior: 'smooth'
  });
};

_barba_core__WEBPACK_IMPORTED_MODULE_0___default.a.init({
  transitions: [{
    name: 'fadein',
    once: function once(_ref) {
      var current = _ref.current,
          next = _ref.next,
          trigger = _ref.trigger;
      return new Promise(function (resolve) {
        var images = document.querySelectorAll(images);
        imagesloaded__WEBPACK_IMPORTED_MODULE_1___default()(images, function () {
          var timeline = gsap__WEBPACK_IMPORTED_MODULE_2__["default"].timeline({
            onComplete: function onComplete() {
              resolve();
            }
          });
          timeline.set(next.container, {
            opacity: 0
          }).to(next.container, {
            opacity: 1
          });
        });
      });
    },
    leave: function leave(_ref2) {
      var current = _ref2.current,
          next = _ref2.next,
          trigger = _ref2.trigger;
      return new Promise(function (resolve) {
        var timeline = gsap__WEBPACK_IMPORTED_MODULE_2__["default"].timeline({
          onComplete: function onComplete() {
            current.container.remove();
            resolve();
          }
        });
        timeline.to('footer', {
          y: '100%'
        }, 0).to(current.container, {
          opacity: 0
        });
      });
    },
    enter: function enter(_ref3) {
      var current = _ref3.current,
          next = _ref3.next,
          trigger = _ref3.trigger;
      return new Promise(function (resolve) {
        scroll2top();
        var timeline = gsap__WEBPACK_IMPORTED_MODULE_2__["default"].timeline({
          onComplete: function onComplete() {
            Object(_animations__WEBPACK_IMPORTED_MODULE_3__["default"])();
            Object(_menu__WEBPACK_IMPORTED_MODULE_4__["default"])();
            Object(_sticky__WEBPACK_IMPORTED_MODULE_5__["default"])();
            resolve();
          }
        });
        timeline.set(next.container, {
          opacity: 0
        }).set('.bg-hand', {
          opacity: 0
        }).to('footer', {
          y: '0'
        }, 0).to('.bg-hand', {
          opacity: 1
        }).to(next.container, {
          opacity: 1
        });
      });
    }
  }, {
    name: 'homepage',
    to: {
      namespace: 'homepage'
    },
    once: function once(_ref4) {
      var current = _ref4.current,
          next = _ref4.next,
          trigger = _ref4.trigger;
      return new Promise(function (resolve) {
        scroll2top();
        var timeline = gsap__WEBPACK_IMPORTED_MODULE_2__["default"].timeline({
          onComplete: function onComplete() {
            Object(_animations__WEBPACK_IMPORTED_MODULE_3__["default"])();
            resolve();
          }
        });
        timeline.set(next.container, {
          opacity: 0
        }).set('.bg-hand', {
          opacity: 0,
          x: '-50px'
        }).set('.hp-questions li', {
          opacity: 0
        }).to('footer', {
          y: '0'
        }, 0).to(next.container, {
          opacity: 1
        }).to('.bg-hand', {
          opacity: 1,
          x: '0'
        }).to('.hp-questions li', {
          opacity: 1,
          stagger: 0.1
        });
      });
    },
    leave: function leave(_ref5) {
      var current = _ref5.current,
          next = _ref5.next,
          trigger = _ref5.trigger;
      return new Promise(function (resolve) {
        var timeline = gsap__WEBPACK_IMPORTED_MODULE_2__["default"].timeline({
          onComplete: function onComplete() {
            current.container.remove();
            resolve();
          }
        });
        timeline.to('footer', {
          y: '100%'
        }, 0).to(current.container, {
          opacity: 0
        });
      });
    },
    enter: function enter(_ref6) {
      var current = _ref6.current,
          next = _ref6.next,
          trigger = _ref6.trigger;
      return new Promise(function (resolve) {
        scroll2top();
        var timeline = gsap__WEBPACK_IMPORTED_MODULE_2__["default"].timeline({
          onComplete: function onComplete() {
            Object(_animations__WEBPACK_IMPORTED_MODULE_3__["default"])();
            resolve();
          }
        });
        timeline.set(next.container, {
          opacity: 0
        }).set('.bg-hand', {
          opacity: 0,
          x: '-50px'
        }).set('.hp-questions li', {
          opacity: 0
        }).to('footer', {
          y: '0'
        }, 0).to(next.container, {
          opacity: 1
        }).to('.bg-hand', {
          opacity: 1,
          x: '0'
        }).to('.hp-questions li', {
          opacity: 1,
          stagger: 0.1
        });
      });
    }
  }]
});

/***/ }),

/***/ "./src/js/components/menu.js":
/*!***********************************!*\
  !*** ./src/js/components/menu.js ***!
  \***********************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
var menuScripts = function menuScripts() {
  // (Sticky Nav under Sticky Header) + (Header hiding) when scrolling down, except for mobile screens
  var stickyNav = document.querySelector('.page-hero-nav');
  var nav = document.querySelector('header');
  var scrollUp = 'scroll-up';
  var scrollDown = 'scroll-down';
  var body = document.querySelector('body');
  var lastScroll = 0;

  var addHeaderHeightTop = function addHeaderHeightTop(section) {
    var headerHeight = document.querySelector('header').clientHeight;
    var currentPadding = parseFloat(window.getComputedStyle(section, null).getPropertyValue('top'));
    section.style.top = "".concat(headerHeight, "px");
  };

  window.addEventListener('scroll', function () {
    var currentScroll = window.pageYOffset;

    if (currentScroll == 0) {
      body.classList.remove(scrollUp);
      return;
    }

    if (currentScroll > lastScroll && !nav.classList.contains(scrollDown)) {
      // down
      nav.classList.remove(scrollUp);
      nav.classList.add(scrollDown);

      if (stickyNav) {
        stickyNav.style.top = '0';
      }
    } else if (currentScroll < lastScroll && nav.classList.contains(scrollDown)) {
      // up
      nav.classList.remove(scrollDown);
      nav.classList.add(scrollUp);

      if (stickyNav) {
        addHeaderHeightTop(stickyNav);
      }
    }

    lastScroll = currentScroll;
  }); // Add header height as padding-top on first section of each page

  var matchScreenSize = function matchScreenSize(x) {
    if (x.matches) {
      // If media query matches
      var introSectionPadding = document.querySelector('.page-hero');

      if (introSectionPadding) {
        addHeaderHeightAsPadding(introSectionPadding);
      }
    }
  };

  var screenSize = window.matchMedia('(min-width: 576px)');
  document.addEventListener('DOMContentLoaded', function () {
    matchScreenSize(screenSize); // Call listener function at run time

    screenSize.addListener(matchScreenSize); // Attach listener function on state changes
  }); // document.addEventListener('DOMContentLoaded', () => {
  // 	const headerHeight2 = document.querySelector('header').clientHeight;
  // 	console.log('new ' + headerHeight2);
  // });

  var headerHeight = document.querySelector('header').clientHeight;

  var addHeaderHeightAsPadding = function addHeaderHeightAsPadding(section) {
    var headerHeight = document.querySelector('header').clientHeight;
    var currentPadding = parseFloat(window.getComputedStyle(section, null).getPropertyValue('padding-top'));
    section.style.paddingTop = "".concat(currentPadding + headerHeight, "px");
  }; // Closing Notice


  var closingNotice = function closingNotice(menuToCloseClass, closingButtonClass) {
    var menuToClose = document.querySelector(menuToCloseClass);
    var closingButton = document.querySelector(closingButtonClass);

    if (closingButton) {
      closingButton.addEventListener('click', function () {
        menuToClose.classList.add('hidden');
      });
    }
  };

  closingNotice('.notice', '.notice--close'); // Toggling Responsive Menu

  var togglingMenu = function togglingMenu(menuToToggleClass, burgerMenuClass) {
    var bodyTag = document.querySelector('body');
    var menuToToggle = document.querySelector(menuToToggleClass);
    var burgerMenu = document.querySelector(burgerMenuClass);
    burgerMenu.addEventListener('click', function () {
      bodyTag.classList.toggle('opened');
      burgerMenu.classList.toggle('opened');
      menuToToggle.classList.toggle('opened');
    });
  };

  togglingMenu('.nav--mobile__reveal', '.menu--toggle');
};

/* harmony default export */ __webpack_exports__["default"] = (menuScripts);

/***/ }),

/***/ "./src/js/components/sticky.js":
/*!*************************************!*\
  !*** ./src/js/components/sticky.js ***!
  \*************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
var stickyScripts = function stickyScripts() {
  // Fadein when text appears (src: https://css-tricks.com/sticky-smooth-active-nav/)
  var navStickySection = document.querySelector('.page-hero-nav');

  if (navStickySection) {
    var mainNavLinks = navStickySection.querySelectorAll('h5 a');
    var headerHeight = document.querySelector('header').clientHeight;
    var lastId;
    var cur = [];
    window.addEventListener('scroll', function (event) {
      var fromTop = window.scrollY + headerHeight + window.innerHeight / 4;
      mainNavLinks.forEach(function (link) {
        var section = document.querySelector(link.hash);

        if (section.offsetTop <= fromTop && section.offsetTop + section.offsetHeight > fromTop) {
          link.classList.add('current');
        } else {
          link.classList.remove('current');
        }
      });
    });
  }
};

/* harmony default export */ __webpack_exports__["default"] = (stickyScripts);

/***/ }),

/***/ 0:
/*!********************************!*\
  !*** multi ./src/js/bundle.js ***!
  \********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(/*! /Users/vianneybernet/Sites/emma-herve/src/js/bundle.js */"./src/js/bundle.js");


/***/ })

/******/ });
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9iYWJlbC1wbHVnaW4tdHJhbnNmb3JtLWFzeW5jLXRvLXByb21pc2VzL2hlbHBlcnMuanMiLCJ3ZWJwYWNrOi8vLy4uL3NyYy9tb2R1bGVzL0xvZ2dlci50cyIsIndlYnBhY2s6Ly8vLi4vc3JjL2RlZnMvaG9va3MudHMiLCJ3ZWJwYWNrOi8vLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9wYXRoLXRvLXJlZ2V4cC9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi4vc3JjL3NjaGVtYXMvYXR0cmlidXRlLnRzIiwid2VicGFjazovLy8uLi9zcmMvdXRpbHMvZG9tLnRzIiwid2VicGFjazovLy8uLi9zcmMvdXRpbHMvaGlzdG9yeS50cyIsIndlYnBhY2s6Ly8vLi4vc3JjL3V0aWxzL2hlbHBlcnMudHMiLCJ3ZWJwYWNrOi8vLy4uL3NyYy91dGlscy91cmwudHMiLCJ3ZWJwYWNrOi8vLy4uL3NyYy91dGlscy9yZXF1ZXN0LnRzIiwid2VicGFjazovLy8uLi8uLi8uLi9ub2RlX21vZHVsZXMvaXMtcHJvbWlzZS9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi4vc3JjL3V0aWxzL3J1bi1hc3luYy50cyIsIndlYnBhY2s6Ly8vLi4vc3JjL2hvb2tzLnRzIiwid2VicGFjazovLy8uLi9zcmMvbW9kdWxlcy9JZ25vcmUudHMiLCJ3ZWJwYWNrOi8vLy4uL3NyYy9tb2R1bGVzL0NhY2hlLnRzIiwid2VicGFjazovLy8uLi9zcmMvbW9kdWxlcy9QcmV2ZW50LnRzIiwid2VicGFjazovLy8uLi9zcmMvbW9kdWxlcy9FcnJvci50cyIsIndlYnBhY2s6Ly8vLi4vc3JjL21vZHVsZXMvU3RvcmUudHMiLCJ3ZWJwYWNrOi8vLy4uL3NyYy9tb2R1bGVzL1RyYW5zaXRpb25zLnRzIiwid2VicGFjazovLy8uLi9zcmMvbW9kdWxlcy9WaWV3cy50cyIsIndlYnBhY2s6Ly8vLi4vc3JjL3BvbHlmaWxscy9pbmRleC50cyIsIndlYnBhY2s6Ly8vLi4vc3JjL3NjaGVtYXMvcGFnZS50cyIsIndlYnBhY2s6Ly8vLi4vc3JjL2NvcmUudHMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzLy5wbnBtL2V2LWVtaXR0ZXJAMS4xLjEvbm9kZV9tb2R1bGVzL2V2LWVtaXR0ZXIvZXYtZW1pdHRlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvLnBucG0vZ3NhcEAzLjUuMS9ub2RlX21vZHVsZXMvZ3NhcC9DU1NQbHVnaW4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzLy5wbnBtL2dzYXBAMy41LjEvbm9kZV9tb2R1bGVzL2dzYXAvZ3NhcC1jb3JlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy8ucG5wbS9nc2FwQDMuNS4xL25vZGVfbW9kdWxlcy9nc2FwL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy8ucG5wbS9pbWFnZXNsb2FkZWRANC4xLjQvbm9kZV9tb2R1bGVzL2ltYWdlc2xvYWRlZC9pbWFnZXNsb2FkZWQuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2pzL2J1bmRsZS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvanMvY29tcG9uZW50cy9hbmltYXRpb25zLmpzIiwid2VicGFjazovLy8uL3NyYy9qcy9jb21wb25lbnRzL2JhcmJhLmpzIiwid2VicGFjazovLy8uL3NyYy9qcy9jb21wb25lbnRzL21lbnUuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2pzL2NvbXBvbmVudHMvc3RpY2t5LmpzIl0sIm5hbWVzIjpbIl9jYXRjaCIsImJvZHkiLCJyZWNvdmVyIiwicmVzdWx0IiwiZSIsInRoZW4iLCJTeW1ib2wiLCJpdGVyYXRvciIsImFzeW5jSXRlcmF0b3IiLCJMb2dMZXZlbHMiLCJIb29rTWV0aG9kcyIsIl9sZXZlbCIsIm9mZiIsIkxvZ2dlciIsInNvdXJjZSIsInRoaXMiLCJfc291cmNlIiwiZ2V0TGV2ZWwiLCJzZXRMZXZlbCIsIm5hbWUiLCJlcnJvciIsIm9iamVjdHMiLCJfbG9nIiwiY29uc29sZSIsIndhcm4iLCJ3YXJuaW5nIiwiaW5mbyIsImRlYnVnIiwibG9nIiwiZm4iLCJsZXZlbCIsImFwcGx5IiwiY29uY2F0IiwicGF0aFRvUmVnZXhwIiwicmVnZXhwVG9GdW5jdGlvbiIsInBhcnNlIiwidG9rZW5zVG9GdW5jdGlvbiIsInRva2Vuc1RvUmVnRXhwIiwiREVGQVVMVF9ERUxJTUlURVIiLCJQQVRIX1JFR0VYUCIsIlJlZ0V4cCIsImpvaW4iLCJzdHIiLCJvcHRpb25zIiwicmVzIiwidG9rZW5zIiwia2V5IiwiaW5kZXgiLCJwYXRoIiwiZGVmYXVsdERlbGltaXRlciIsImRlbGltaXRlciIsIndoaXRlbGlzdCIsInVuZGVmaW5lZCIsInBhdGhFc2NhcGVkIiwiZXhlYyIsIm0iLCJlc2NhcGVkIiwib2Zmc2V0Iiwic2xpY2UiLCJsZW5ndGgiLCJwcmV2IiwiY2FwdHVyZSIsImdyb3VwIiwibW9kaWZpZXIiLCJrIiwiYyIsImluZGV4T2YiLCJwdXNoIiwicGF0dGVybiIsInByZWZpeCIsIm9wdGlvbmFsIiwicmVwZWF0IiwiZXNjYXBlR3JvdXAiLCJlc2NhcGVTdHJpbmciLCJzdWJzdHIiLCJyZSIsImtleXMiLCJwYXRobmFtZSIsInBhcmFtcyIsImRlY29kZSIsImRlY29kZVVSSUNvbXBvbmVudCIsImkiLCJzcGxpdCIsIm1hcCIsInZhbHVlIiwibWF0Y2hlcyIsIkFycmF5IiwiZmxhZ3MiLCJkYXRhIiwiZW5jb2RlIiwiZW5jb2RlVVJJQ29tcG9uZW50IiwidmFsaWRhdGUiLCJ0b2tlbiIsInNlZ21lbnQiLCJpc0FycmF5IiwiVHlwZUVycm9yIiwiaiIsInRlc3QiLCJTdHJpbmciLCJyZXBsYWNlIiwic2Vuc2l0aXZlIiwic3RyaWN0Iiwic3RhcnQiLCJlbmQiLCJlbmRzV2l0aCIsInJvdXRlIiwiZW5kVG9rZW4iLCJpc0VuZERlbGltaXRlZCIsImdyb3VwcyIsIm1hdGNoIiwicmVnZXhwVG9SZWdleHAiLCJwYXJ0cyIsImFycmF5VG9SZWdleHAiLCJzdHJpbmdUb1JlZ2V4cCIsInNjaGVtYUF0dHJpYnV0ZSIsImNvbnRhaW5lciIsImhpc3RvcnkiLCJuYW1lc3BhY2UiLCJwcmV2ZW50Iiwid3JhcHBlciIsImRvbSIsIkRPTVBhcnNlciIsInRvU3RyaW5nIiwiZWwiLCJvdXRlckhUTUwiLCJ0b0RvY3VtZW50IiwiaHRtbFN0cmluZyIsIl9wYXJzZXIiLCJwYXJzZUZyb21TdHJpbmciLCJ0b0VsZW1lbnQiLCJkaXYiLCJkb2N1bWVudCIsImNyZWF0ZUVsZW1lbnQiLCJpbm5lckhUTUwiLCJnZXRIdG1sIiwiZG9jIiwiZG9jdW1lbnRFbGVtZW50IiwiZ2V0V3JhcHBlciIsInNjb3BlIiwicXVlcnlTZWxlY3RvciIsIl9hdHRyIiwiZ2V0Q29udGFpbmVyIiwicmVtb3ZlQ29udGFpbmVyIiwiY29udGFpbnMiLCJwYXJlbnROb2RlIiwicmVtb3ZlQ2hpbGQiLCJhZGRDb250YWluZXIiLCJleGlzdGluZ0NvbnRhaW5lciIsIl9pbnNlcnRBZnRlciIsImFwcGVuZENoaWxkIiwiZ2V0TmFtZXNwYWNlIiwibnMiLCJnZXRBdHRyaWJ1dGUiLCJnZXRIcmVmIiwidGFnTmFtZSIsInRvTG93ZXJDYXNlIiwiaHJlZiIsInJlc29sdmVVcmwiLCJiYXNlVmFsIiwidXJscyIsIm51bVVybHMiLCJFcnJvciIsImJhc2UiLCJhcmd1bWVudHMiLCJoZWFkIiwiZ2V0RWxlbWVudHNCeVRhZ05hbWUiLCJpbnNlcnRCZWZvcmUiLCJmaXJzdENoaWxkIiwicmVzb2x2ZWQiLCJhIiwibmV3Tm9kZSIsInJlZmVyZW5jZU5vZGUiLCJuZXh0U2libGluZyIsImluaXQiLCJ1cmwiLCJfc2Vzc2lvbiIsInN0YXRlIiwic2Nyb2xsIiwieCIsIndpbmRvdyIsInNjcm9sbFgiLCJ5Iiwic2Nyb2xsWSIsIl9zdGF0ZXMiLCJfcG9pbnRlciIsIml0ZW0iLCJmcm9tIiwic3RhdGVzIiwicmVwbGFjZVN0YXRlIiwiY2hhbmdlIiwidHJpZ2dlciIsIl9nZXREaXJlY3Rpb24iLCJhZGQiLCJzaXplIiwiYWN0aW9uIiwiX2dldEFjdGlvbiIsInB1c2hTdGF0ZSIsInVwZGF0ZSIsImdldCIsInNldCIsInJlbW92ZSIsInNwbGljZSIsInBvcCIsImNsZWFyIiwibmV3U3RhdGVzIiwiYXR0ciIsImhhc0F0dHJpYnV0ZSIsImRpZmYiLCJNYXRoIiwiYWJzIiwicGFnZSIsIm5leHQiLCJodG1sIiwibmV4dERvY3VtZW50IiwidGl0bGUiLCJwdHIiLCJQcm9taXNlIiwicmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwicmVzb2x2ZSIsImdldE9yaWdpbiIsImxvY2F0aW9uIiwib3JpZ2luIiwiZ2V0UG9ydCIsInBvcnQiLCJwb3J0U3RyaW5nIiwic3Vic3RyaW5nIiwicGFyc2VJbnQiLCJoYXNoIiwicXVlcnkiLCJoYXNoSW5kZXgiLCJxdWVyeUluZGV4IiwicGFyc2VRdWVyeSIsInJlZHVjZSIsImFjYyIsImNsZWFuIiwicmVxdWVzdCIsInR0bCIsInJlcXVlc3RFcnJvciIsInJlamVjdCIsInhociIsIlhNTEh0dHBSZXF1ZXN0Iiwib25yZWFkeXN0YXRlY2hhbmdlIiwicmVhZHlTdGF0ZSIsIkRPTkUiLCJzdGF0dXMiLCJyZXNwb25zZVRleHQiLCJzdGF0dXNUZXh0Iiwib250aW1lb3V0IiwiZXJyIiwib25lcnJvciIsIm9wZW4iLCJ0aW1lb3V0Iiwic2V0UmVxdWVzdEhlYWRlciIsInNlbmQiLCJvYmoiLCJydW5Bc3luYyIsImZ1bmMiLCJjdHgiLCJhcmdzIiwiYXN5bmMiLCJwcm9taXNlIiwiYW5zd2VyIiwiaXNQcm9taXNlIiwiaG9va3MiLCJfdGhpcyIsIk1hcCIsInJlZ2lzdGVyZWQiLCJhbGwiLCJmb3JFYWNoIiwiX3RoaXMyIiwiaG9vayIsImhhcyIsIlNldCIsImNoYWluIiwiX3RoaXMzIiwibG9nZ2VyIiwiX3RoaXM0IiwiaGVscCIsIklnbm9yZSIsImlnbm9yZSIsIl9pZ25vcmVBbGwiLCJwYXRocyIsIl9pZ25vcmVSZWdleGVzIiwicCIsImNoZWNrSHJlZiIsInNvbWUiLCJyZWdleCIsIkNhY2hlIiwiX3N0YXRlIiwiZ2V0UmVxdWVzdCIsImdldEFjdGlvbiIsImV4aXN0cyIsIm5ld1RhYiIsImV2ZW50Iiwid2hpY2giLCJtZXRhS2V5IiwiY3RybEtleSIsInNoaWZ0S2V5IiwiYWx0S2V5IiwiYmxhbmsiLCJ0YXJnZXQiLCJjb3JzRG9tYWluIiwicHJvdG9jb2wiLCJob3N0bmFtZSIsImNvcnNQb3J0IiwiZG93bmxvYWQiLCJwcmV2ZW50U2VsZiIsInByZXZlbnRBbGwiLCJCb29sZWFuIiwiY2xvc2VzdCIsInNhbWVVcmwiLCJQcmV2ZW50IiwiY2hlY2siLCJzdWl0ZSIsInRlc3RzIiwicnVuIiwiY2hlY2tMaW5rIiwiQmFyYmFFcnJvciIsImxhYmVsIiwiY2FwdHVyZVN0YWNrVHJhY2UiLCJTdG9yZSIsInRyYW5zaXRpb25zIiwidHlwZSIsIl9ydWxlcyIsInBvc2l0aW9uIiwiZmlsdGVycyIsIm9uY2UiLCJmaWx0ZXIiLCJzZWxmIiwidCIsIm1hdGNoaW5nIiwiYWN0aXZlIiwiZmluZCIsInZhbGlkIiwicmV2ZXJzZSIsIl9jaGVjayIsInJ1bGUiLCJ0byIsImFjdGl2ZU1hdGNoIiwidHJhbnNpdGlvblR5cGUiLCJpbmZvcyIsIk9iamVjdCIsIl9hZGRQcmlvcml0eSIsInNvcnQiLCJiIiwicHJpb3JpdHkiLCJsZWF2ZSIsImVudGVyIiwidHJhbnNpdGlvbiIsImRpcmVjdGlvbiIsImlzVmFsaWQiLCJoYXNNYXRjaCIsInN0clJ1bGUiLCJvYmpSdWxlIiwiZm5OYW1lIiwiY3VycmVudCIsIm5hbWVzIiwiX2NhbGN1bGF0ZVByaW9yaXR5IiwicnVsZU5hbWUiLCJydWxlSW5kZXgiLCJwb3ciLCJUcmFuc2l0aW9ucyIsInN0b3JlIiwiZG9PbmNlIiwiX3J1bm5pbmciLCJfZG9Bc3luY0hvb2siLCJkb1BhZ2UiLCJzeW5jIiwiX2lzVHJhbnNpdGlvbkVycm9yIiwibGVhdmVSZXN1bHQiLCJoZWxwZXJzIiwidmFsdWVzIiwibWVzc2FnZSIsIlZpZXdzIiwidmlld3MiLCJieU5hbWVzcGFjZSIsInZpZXciLCJfY3JlYXRlSG9vayIsIkVsZW1lbnQiLCJwcm90b3R5cGUiLCJtc01hdGNoZXNTZWxlY3RvciIsIndlYmtpdE1hdGNoZXNTZWxlY3RvciIsInMiLCJwYXJlbnRFbGVtZW50Iiwibm9kZVR5cGUiLCJzY2hlbWFQYWdlIiwidmVyc2lvbiIsInVzZSIsInBsdWdpbiIsImluc3RhbGxlZFBsdWdpbnMiLCJwbHVnaW5zIiwiaW5zdGFsbCIsInNjaGVtYSIsImNhY2hlSWdub3JlIiwicHJlZmV0Y2hJZ25vcmUiLCJwcmV2ZW50UnVubmluZyIsInByZXZlbnRDdXN0b20iLCJsb2dMZXZlbCIsIl9yZXF1ZXN0Q3VzdG9tRXJyb3IiLCJfd3JhcHBlciIsInNldEF0dHJpYnV0ZSIsIl9yZXNldERhdGEiLCJjYWNoZSIsIl9vbkxpbmtFbnRlciIsImJpbmQiLCJfb25MaW5rQ2xpY2siLCJfb25TdGF0ZUNoYW5nZSIsIl9iaW5kIiwib25jZURhdGEiLCJkZXN0cm95IiwiX3VuYmluZCIsImZvcmNlIiwiYXNzaWduIiwiZ28iLCJpc1J1bm5pbmciLCJnZXRQYXRoIiwiaGFzU2VsZiIsInN0b3BQcm9wYWdhdGlvbiIsInByZXZlbnREZWZhdWx0IiwicmVhZHlEYXRhIiwiaGFzT25jZSIsIm9uUmVxdWVzdEVycm9yIiwic2hvdWxkV2FpdCIsInJlc3BvbnNlIiwicHJlZmV0Y2giLCJfdGhpczUiLCJhZGRFdmVudExpc3RlbmVyIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsImxpbmsiLCJfZ2V0TGlua0VsZW1lbnQiLCJfdGhpczYiLCJfZGF0YSIsImdsb2JhbCIsImZhY3RvcnkiLCJkZWZpbmUiLCJFdkVtaXR0ZXIiLCJwcm90byIsIm9uIiwiZXZlbnROYW1lIiwibGlzdGVuZXIiLCJldmVudHMiLCJfZXZlbnRzIiwibGlzdGVuZXJzIiwib25jZUV2ZW50cyIsIl9vbmNlRXZlbnRzIiwib25jZUxpc3RlbmVycyIsImVtaXRFdmVudCIsImlzT25jZSIsImFsbE9mZiIsIl93aW4iLCJfZG9jIiwiX2RvY0VsZW1lbnQiLCJfcGx1Z2luSW5pdHRlZCIsIl90ZW1wRGl2IiwiX3RlbXBEaXZTdHlsZXIiLCJfcmVjZW50U2V0dGVyUGx1Z2luIiwiX3dpbmRvd0V4aXN0cyIsIl90cmFuc2Zvcm1Qcm9wcyIsIl9SQUQyREVHIiwiUEkiLCJfREVHMlJBRCIsIl9hdGFuMiIsImF0YW4yIiwiX2JpZ051bSIsIl9jYXBzRXhwIiwiX2hvcml6b250YWxFeHAiLCJfY29tcGxleEV4cCIsIl9wcm9wZXJ0eUFsaWFzZXMiLCJhdXRvQWxwaGEiLCJzY2FsZSIsImFscGhhIiwiX3JlbmRlckNTU1Byb3AiLCJyYXRpbyIsInJvdW5kIiwidSIsIl9yZW5kZXJQcm9wV2l0aEVuZCIsIl9yZW5kZXJDU1NQcm9wV2l0aEJlZ2lubmluZyIsIl9yZW5kZXJSb3VuZGVkQ1NTUHJvcCIsIl9yZW5kZXJOb25Ud2VlbmluZ1ZhbHVlIiwiX3JlbmRlck5vblR3ZWVuaW5nVmFsdWVPbmx5QXRFbmQiLCJfc2V0dGVyQ1NTU3R5bGUiLCJwcm9wZXJ0eSIsInN0eWxlIiwiX3NldHRlckNTU1Byb3AiLCJzZXRQcm9wZXJ0eSIsIl9zZXR0ZXJUcmFuc2Zvcm0iLCJfZ3NhcCIsIl9zZXR0ZXJTY2FsZSIsInNjYWxlWCIsInNjYWxlWSIsIl9zZXR0ZXJTY2FsZVdpdGhSZW5kZXIiLCJyZW5kZXJUcmFuc2Zvcm0iLCJfc2V0dGVyVHJhbnNmb3JtV2l0aFJlbmRlciIsIl90cmFuc2Zvcm1Qcm9wIiwiX3RyYW5zZm9ybU9yaWdpblByb3AiLCJfc3VwcG9ydHMzRCIsIl9jcmVhdGVFbGVtZW50IiwiY3JlYXRlRWxlbWVudE5TIiwiX2dldENvbXB1dGVkUHJvcGVydHkiLCJza2lwUHJlZml4RmFsbGJhY2siLCJjcyIsImdldENvbXB1dGVkU3R5bGUiLCJnZXRQcm9wZXJ0eVZhbHVlIiwiX2NoZWNrUHJvcFByZWZpeCIsIl9wcmVmaXhlcyIsImVsZW1lbnQiLCJwcmVmZXJQcmVmaXgiLCJjaGFyQXQiLCJ0b1VwcGVyQ2FzZSIsIl9pbml0Q29yZSIsImNzc1RleHQiLCJfZ2V0QkJveEhhY2siLCJzd2FwSWZQb3NzaWJsZSIsInN2ZyIsIm93bmVyU1ZHRWxlbWVudCIsIm9sZFBhcmVudCIsIm9sZFNpYmxpbmciLCJvbGRDU1MiLCJiYm94IiwiZGlzcGxheSIsImdldEJCb3giLCJfZ3NhcEJCb3giLCJfZ2V0QXR0cmlidXRlRmFsbGJhY2tzIiwiYXR0cmlidXRlc0FycmF5IiwiX2dldEJCb3giLCJib3VuZHMiLCJjYWxsIiwid2lkdGgiLCJoZWlnaHQiLCJfaXNTVkciLCJnZXRDVE0iLCJfcmVtb3ZlUHJvcGVydHkiLCJyZW1vdmVQcm9wZXJ0eSIsInJlbW92ZUF0dHJpYnV0ZSIsIl9hZGROb25Ud2VlbmluZ1BUIiwiYmVnaW5uaW5nIiwib25seVNldEF0RW5kIiwicHQiLCJQcm9wVHdlZW4iLCJfcHQiLCJfcHJvcHMiLCJfbm9uQ29udmVydGlibGVVbml0cyIsImRlZyIsInJhZCIsInR1cm4iLCJfY29udmVydFRvVW5pdCIsInVuaXQiLCJjdXJWYWx1ZSIsInBhcnNlRmxvYXQiLCJjdXJVbml0IiwidHJpbSIsImhvcml6b250YWwiLCJpc1Jvb3RTVkciLCJtZWFzdXJlUHJvcGVydHkiLCJhbW91bnQiLCJ0b1BpeGVscyIsInRvUGVyY2VudCIsInB4IiwicGFyZW50IiwiaXNTVkciLCJfcm91bmQiLCJ0aW1lIiwiX3RpY2tlciIsIl9nZXRDYWNoZSIsIl9nZXQiLCJ1bmNhY2hlIiwiX3BhcnNlVHJhbnNmb3JtIiwiX2ZpcnN0VHdvT25seSIsInpPcmlnaW4iLCJfc3BlY2lhbFByb3BzIiwiX2dldFByb3BlcnR5IiwiX3R3ZWVuQ29tcGxleENTU1N0cmluZyIsInByb3AiLCJfcmVuZGVyQ29tcGxleFN0cmluZyIsIm1hdGNoSW5kZXgiLCJzdGFydFZhbHVlcyIsInN0YXJ0TnVtIiwiY29sb3IiLCJzdGFydFZhbHVlIiwiZW5kVmFsdWUiLCJlbmROdW0iLCJjaHVuayIsImVuZFVuaXQiLCJzdGFydFVuaXQiLCJyZWxhdGl2ZSIsImVuZFZhbHVlcyIsIl9jb2xvclN0cmluZ0ZpbHRlciIsIl9udW1XaXRoVW5pdEV4cCIsImxhc3RJbmRleCIsIl9jb25maWciLCJ1bml0cyIsIl9uZXh0IiwiciIsIl9yZWxFeHAiLCJfa2V5d29yZFRvUGVyY2VudCIsInRvcCIsImJvdHRvbSIsImxlZnQiLCJyaWdodCIsImNlbnRlciIsIl9jb252ZXJ0S2V5d29yZHNUb1BlcmNlbnRhZ2VzIiwiX3JlbmRlckNsZWFyUHJvcHMiLCJ0d2VlbiIsIl90aW1lIiwiX2R1ciIsInByb3BzIiwiY2xlYXJUcmFuc2Zvcm1zIiwiY2xlYXJQcm9wcyIsInByIiwiX2lkZW50aXR5MkRNYXRyaXgiLCJfcm90YXRpb25hbFByb3BlcnRpZXMiLCJfaXNOdWxsVHJhbnNmb3JtIiwiX2dldENvbXB1dGVkVHJhbnNmb3JtTWF0cml4QXNBcnJheSIsIm1hdHJpeFN0cmluZyIsIl9udW1FeHAiLCJfZ2V0TWF0cml4IiwiZm9yY2UyRCIsIm1hdHJpeCIsInRlbXAiLCJhZGRlZFRvRE9NIiwidHJhbnNmb3JtIiwiY29uc29saWRhdGUiLCJkIiwiZiIsIm9mZnNldFBhcmVudCIsIl9hcHBseVNWR09yaWdpbiIsIm9yaWdpbklzQWJzb2x1dGUiLCJzbW9vdGgiLCJtYXRyaXhBcnJheSIsInBsdWdpblRvQWRkUHJvcFR3ZWVuc1RvIiwieE9yaWdpbk9sZCIsInhPcmlnaW4iLCJ5T3JpZ2luT2xkIiwieU9yaWdpbiIsInhPZmZzZXRPbGQiLCJ4T2Zmc2V0IiwieU9mZnNldE9sZCIsInlPZmZzZXQiLCJ0eCIsInR5Iiwib3JpZ2luU3BsaXQiLCJkZXRlcm1pbmFudCIsIkdTQ2FjaGUiLCJpbnZlcnRlZFNjYWxlWCIsInoiLCJyb3RhdGlvbiIsInJvdGF0aW9uWCIsInJvdGF0aW9uWSIsInNrZXdYIiwic2tld1kiLCJwZXJzcGVjdGl2ZSIsImFuZ2xlIiwiY29zIiwic2luIiwiYTEyIiwiYTIyIiwidDEiLCJ0MiIsInQzIiwiYTEzIiwiYTIzIiwiYTMzIiwiYTQyIiwiYTQzIiwiYTMyIiwic3FydCIsImZvcmNlQ1NTIiwieFBlcmNlbnQiLCJvZmZzZXRXaWR0aCIsInlQZXJjZW50Iiwib2Zmc2V0SGVpZ2h0IiwidHJhbnNmb3JtUGVyc3BlY3RpdmUiLCJmb3JjZTNEIiwiX3JlbmRlclNWR1RyYW5zZm9ybXMiLCJfcmVuZGVyQ1NTVHJhbnNmb3JtcyIsIl9yZW5kZXJOb24zRFRyYW5zZm9ybXMiLCJfYWRkUHhUcmFuc2xhdGUiLCJnZXRVbml0IiwiX3plcm9EZWciLCJfemVyb1B4IiwiX2VuZFBhcmVudGhlc2lzIiwiX3JlZiIsInRyYW5zZm9ybXMiLCJ1c2UzRCIsIl9yZWYyIiwiYTExIiwiYTIxIiwidGFuIiwiX2FkZFJvdGF0aW9uYWxQcm9wVHdlZW4iLCJjYXAiLCJpc1N0cmluZyIsIl9pc1N0cmluZyIsImZpbmFsVmFsdWUiLCJfYWRkUmF3VHJhbnNmb3JtUFRzIiwic3RhcnRDYWNoZSIsImV4Y2x1ZGUiLCJlbmRDYWNoZSIsIl9mb3JFYWNoTmFtZSIsImwiLCJzaWRlIiwidmFycyIsIkNTU1BsdWdpbiIsInJlZ2lzdGVyIiwidGFyZ2V0VGVzdCIsInRhcmdldHMiLCJzcGVjaWFsUHJvcCIsImlzVHJhbnNmb3JtUmVsYXRlZCIsInRyYW5zZm9ybVByb3BUd2VlbiIsImhhc1ByaW9yaXR5IiwiX3BsdWdpbnMiLCJfY2hlY2tQbHVnaW4iLCJfcmVwbGFjZVJhbmRvbSIsInNtb290aE9yaWdpbiIsImRlcCIsImF1dG9Sb3VuZCIsIl9taXNzaW5nUGx1Z2luIiwiX3NvcnRQcm9wVHdlZW5zQnlQcmlvcml0eSIsImFsaWFzZXMiLCJnZXRTZXR0ZXIiLCJfaXNVbmRlZmluZWQiLCJfZ2V0U2V0dGVyIiwiY29yZSIsImdzYXAiLCJ1dGlscyIsImNoZWNrUHJlZml4IiwicG9zaXRpb25BbmRTY2FsZSIsIm90aGVycyIsInJlZ2lzdGVyUGx1Z2luIiwiX2Fzc2VydFRoaXNJbml0aWFsaXplZCIsIlJlZmVyZW5jZUVycm9yIiwiX2luaGVyaXRzTG9vc2UiLCJzdWJDbGFzcyIsInN1cGVyQ2xhc3MiLCJjcmVhdGUiLCJjb25zdHJ1Y3RvciIsIl9fcHJvdG9fXyIsImF1dG9TbGVlcCIsIm51bGxUYXJnZXRXYXJuIiwibGluZUhlaWdodCIsIl9kZWZhdWx0cyIsImR1cmF0aW9uIiwib3ZlcndyaXRlIiwiZGVsYXkiLCJfdGlueU51bSIsIl8yUEkiLCJfSEFMRl9QSSIsIl9nc0lEIiwiX3NxcnQiLCJfY29zIiwiX3NpbiIsIl9pc0Z1bmN0aW9uIiwiX2lzTnVtYmVyIiwiX2lzT2JqZWN0IiwiX2lzTm90RmFsc2UiLCJfaXNGdW5jT3JTdHJpbmciLCJfaXNUeXBlZEFycmF5IiwiQXJyYXlCdWZmZXIiLCJpc1ZpZXciLCJfaXNBcnJheSIsIl9zdHJpY3ROdW1FeHAiLCJfY29tcGxleFN0cmluZ051bUV4cCIsIl9kZWxpbWl0ZWRWYWx1ZUV4cCIsIl9nbG9iYWxUaW1lbGluZSIsIl9jb3JlSW5pdHRlZCIsIl9nbG9iYWxzIiwiX2luc3RhbGxTY29wZSIsIl9jb3JlUmVhZHkiLCJfaW5zdGFsbCIsIl9tZXJnZSIsIl93YXJuIiwic3VwcHJlc3MiLCJfYWRkR2xvYmFsIiwiX2VtcHR5RnVuYyIsIl9yZXNlcnZlZFByb3BzIiwiX2xhenlUd2VlbnMiLCJfbGF6eUxvb2t1cCIsIl9sYXN0UmVuZGVyZWRGcmFtZSIsIl9lZmZlY3RzIiwiX25leHRHQ0ZyYW1lIiwiX2hhcm5lc3NQbHVnaW5zIiwiX2NhbGxiYWNrTmFtZXMiLCJfaGFybmVzcyIsImhhcm5lc3NQbHVnaW4iLCJoYXJuZXNzIiwidG9BcnJheSIsInYiLCJfYXJyYXlDb250YWluc0FueSIsInRvU2VhcmNoIiwidG9GaW5kIiwiX3BhcnNlVmFycyIsImlzTGVnYWN5IiwidmFyc0luZGV4IiwiaXJWYXJzIiwiZGVmYXVsdHMiLCJpbmhlcml0IiwiaW1tZWRpYXRlUmVuZGVyIiwicnVuQmFja3dhcmRzIiwic3RhcnRBdCIsIl9sYXp5UmVuZGVyIiwiX2xhenkiLCJyZW5kZXIiLCJfbGF6eVNhZmVSZW5kZXIiLCJhbmltYXRpb24iLCJzdXBwcmVzc0V2ZW50cyIsIl9udW1lcmljSWZQb3NzaWJsZSIsIm4iLCJfcGFzc1Rocm91Z2giLCJfc2V0RGVmYXVsdHMiLCJfc2V0S2V5ZnJhbWVEZWZhdWx0cyIsInRvTWVyZ2UiLCJfbWVyZ2VEZWVwIiwiX2NvcHlFeGNsdWRpbmciLCJleGNsdWRpbmciLCJjb3B5IiwiX2luaGVyaXREZWZhdWx0cyIsImtleWZyYW1lcyIsIl9kcCIsIl9hcnJheXNNYXRjaCIsImExIiwiYTIiLCJfYWRkTGlua2VkTGlzdEl0ZW0iLCJjaGlsZCIsImZpcnN0UHJvcCIsImxhc3RQcm9wIiwic29ydEJ5IiwiX3ByZXYiLCJfcmVtb3ZlTGlua2VkTGlzdEl0ZW0iLCJfcmVtb3ZlRnJvbVBhcmVudCIsIm9ubHlJZlBhcmVudEhhc0F1dG9SZW1vdmUiLCJhdXRvUmVtb3ZlQ2hpbGRyZW4iLCJfYWN0IiwiX3VuY2FjaGUiLCJfZW5kIiwiX3N0YXJ0IiwiX2RpcnR5IiwiX3JlY2FjaGVBbmNlc3RvcnMiLCJ0b3RhbER1cmF0aW9uIiwiX2hhc05vUGF1c2VkQW5jZXN0b3JzIiwiX3RzIiwiX2VsYXBzZWRDeWNsZUR1cmF0aW9uIiwiX3JlcGVhdCIsIl9hbmltYXRpb25DeWNsZSIsIl90VGltZSIsIl9yRGVsYXkiLCJ0VGltZSIsImN5Y2xlRHVyYXRpb24iLCJfcGFyZW50VG9DaGlsZFRvdGFsVGltZSIsInBhcmVudFRpbWUiLCJfdER1ciIsIl9zZXRFbmQiLCJfcnRzIiwiX2FsaWduUGxheWhlYWQiLCJ0b3RhbFRpbWUiLCJzbW9vdGhDaGlsZFRpbWluZyIsIl9wb3N0QWRkQ2hlY2tzIiwidGltZWxpbmUiLCJfaW5pdHRlZCIsInJhd1RpbWUiLCJfY2xhbXAiLCJfelRpbWUiLCJfYWRkVG9UaW1lbGluZSIsInNraXBDaGVja3MiLCJfZGVsYXkiLCJ0aW1lU2NhbGUiLCJfc29ydCIsIl9yZWNlbnQiLCJfc2Nyb2xsVHJpZ2dlciIsIlNjcm9sbFRyaWdnZXIiLCJfYXR0ZW1wdEluaXRUd2VlbiIsIl9pbml0VHdlZW4iLCJsYXp5IiwiZnJhbWUiLCJfcmVuZGVyWmVyb0R1cmF0aW9uVHdlZW4iLCJwcmV2UmF0aW8iLCJfbG9jayIsInJlcGVhdERlbGF5IiwiaXRlcmF0aW9uIiwicHJldkl0ZXJhdGlvbiIsInJlcGVhdFJlZnJlc2giLCJpbnZhbGlkYXRlIiwiX2Zyb20iLCJfY2FsbGJhY2siLCJfc3RhcnRBdCIsIl9vblVwZGF0ZSIsIl9wcm9tIiwiX2ZpbmROZXh0UGF1c2VUd2VlbiIsInByZXZUaW1lIiwiX2ZpcnN0IiwiX2xhc3QiLCJfc2V0RHVyYXRpb24iLCJza2lwVW5jYWNoZSIsImxlYXZlUGxheWhlYWQiLCJkdXIiLCJ0b3RhbFByb2dyZXNzIiwiX29uVXBkYXRlVG90YWxEdXJhdGlvbiIsIlRpbWVsaW5lIiwiX3plcm9Qb3NpdGlvbiIsImVuZFRpbWUiLCJfcGFyc2VQb3NpdGlvbiIsImxhYmVscyIsInJlY2VudCIsImNsaXBwZWREdXJhdGlvbiIsImlzTmFOIiwiX2NvbmRpdGlvbmFsUmV0dXJuIiwibWluIiwibWF4IiwiY2xhbXAiLCJfc2xpY2UiLCJfaXNBcnJheUxpa2UiLCJub25FbXB0eSIsIl9mbGF0dGVuIiwiYXIiLCJsZWF2ZVN0cmluZ3MiLCJhY2N1bXVsYXRvciIsIl9hY2N1bXVsYXRvciIsIl93YWtlIiwicXVlcnlTZWxlY3RvckFsbCIsInNodWZmbGUiLCJyYW5kb20iLCJkaXN0cmlidXRlIiwiZWFjaCIsImVhc2UiLCJfcGFyc2VFYXNlIiwiaXNEZWNpbWFsIiwicmF0aW9zIiwiYXhpcyIsInJhdGlvWCIsInJhdGlvWSIsImVkZ2VzIiwiZGlzdGFuY2VzIiwib3JpZ2luWCIsIm9yaWdpblkiLCJ3cmFwQXQiLCJncmlkIiwiZ2V0Qm91bmRpbmdDbGllbnRSZWN0IiwiX2ludmVydEVhc2UiLCJfcm91bmRNb2RpZmllciIsInJhdyIsImZsb29yIiwic25hcCIsInNuYXBUbyIsInJhZGl1cyIsImlzMkQiLCJpbmNyZW1lbnQiLCJkeCIsImR5Iiwicm91bmRpbmdJbmNyZW1lbnQiLCJyZXR1cm5GdW5jdGlvbiIsInBpcGUiLCJfbGVuIiwiZnVuY3Rpb25zIiwiX2tleSIsInVuaXRpemUiLCJub3JtYWxpemUiLCJtYXBSYW5nZSIsIl93cmFwQXJyYXkiLCJ3cmFwIiwicmFuZ2UiLCJ3cmFwWW95byIsInRvdGFsIiwibnVtcyIsImluTWluIiwiaW5NYXgiLCJvdXRNaW4iLCJvdXRNYXgiLCJpblJhbmdlIiwib3V0UmFuZ2UiLCJpbnRlcnBvbGF0ZSIsInByb2dyZXNzIiwibXV0YXRlIiwibWFzdGVyIiwiaW50ZXJwb2xhdG9ycyIsImlsIiwiX2FkZFByb3BUd2VlbiIsIl9yZW5kZXJQcm9wVHdlZW5zIiwiX2dldExhYmVsSW5EaXJlY3Rpb24iLCJmcm9tVGltZSIsImJhY2t3YXJkIiwiZGlzdGFuY2UiLCJleGVjdXRlTGF6eUZpcnN0IiwiY2FsbGJhY2siLCJjYWxsYmFja1Njb3BlIiwiX2ludGVycnVwdCIsIl9xdWlja1R3ZWVuIiwiX2NyZWF0ZVBsdWdpbiIsImNvbmZpZyIsImlzRnVuYyIsIlBsdWdpbiIsImluc3RhbmNlRGVmYXVsdHMiLCJraWxsIiwiX2tpbGxQcm9wVHdlZW5zT2YiLCJfYWRkUGx1Z2luTW9kaWZpZXIiLCJyYXdWYXJzIiwic3RhdGljcyIsIl8yNTUiLCJfY29sb3JMb29rdXAiLCJhcXVhIiwibGltZSIsInNpbHZlciIsImJsYWNrIiwibWFyb29uIiwidGVhbCIsImJsdWUiLCJuYXZ5Iiwid2hpdGUiLCJvbGl2ZSIsInllbGxvdyIsIm9yYW5nZSIsImdyYXkiLCJwdXJwbGUiLCJncmVlbiIsInJlZCIsInBpbmsiLCJjeWFuIiwidHJhbnNwYXJlbnQiLCJfaHVlIiwiaCIsIm0xIiwibTIiLCJzcGxpdENvbG9yIiwidG9IU0wiLCJmb3JjZUFscGhhIiwiZyIsIndhc0hTTCIsIk51bWJlciIsIl9jb2xvck9yZGVyRGF0YSIsIl9jb2xvckV4cCIsIl9mb3JtYXRDb2xvcnMiLCJvcmRlck1hdGNoRGF0YSIsImNvbG9ycyIsInNoZWxsIiwic2hpZnQiLCJfaHNsRXhwIiwiY29tYmluZWQiLCJfdGlja2VyQWN0aXZlIiwiX2dldFRpbWUiLCJEYXRlIiwibm93IiwiX2xhZ1RocmVzaG9sZCIsIl9hZGp1c3RlZExhZyIsIl9zdGFydFRpbWUiLCJfbGFzdFVwZGF0ZSIsIl9nYXAiLCJfbmV4dFRpbWUiLCJfbGlzdGVuZXJzIiwiX2lkIiwiX3JlcSIsIl9yYWYiLCJfc2VsZiIsIl9kZWx0YSIsIl9pIiwiX3RpY2siLCJlbGFwc2VkIiwibWFudWFsIiwib3ZlcmxhcCIsImRpc3BhdGNoIiwidGljayIsImRlbHRhUmF0aW8iLCJmcHMiLCJ3YWtlIiwiZ3NhcFZlcnNpb25zIiwiR3JlZW5Tb2NrR2xvYmFscyIsInNsZWVwIiwic2V0VGltZW91dCIsImNhbmNlbEFuaW1hdGlvbkZyYW1lIiwiY2xlYXJUaW1lb3V0IiwibGFnU21vb3RoaW5nIiwidGhyZXNob2xkIiwiYWRqdXN0ZWRMYWciLCJfZnBzIiwiX2Vhc2VNYXAiLCJfY3VzdG9tRWFzZUV4cCIsIl9xdW90ZXNFeHAiLCJfcGFyc2VPYmplY3RJblN0cmluZyIsInZhbCIsInBhcnNlZFZhbCIsImxhc3RJbmRleE9mIiwiX3ZhbHVlSW5QYXJlbnRoZXNlcyIsImNsb3NlIiwibmVzdGVkIiwiX2NvbmZpZ0Vhc2VGcm9tU3RyaW5nIiwiX0NFIiwiX3Byb3BhZ2F0ZVlveW9FYXNlIiwiaXNZb3lvIiwieW95b0Vhc2UiLCJfeW95byIsIl9lYXNlIiwiX3lFYXNlIiwiZGVmYXVsdEVhc2UiLCJfaW5zZXJ0RWFzZSIsImVhc2VJbiIsImVhc2VPdXQiLCJlYXNlSW5PdXQiLCJsb3dlcmNhc2VOYW1lIiwiX2Vhc2VJbk91dEZyb21PdXQiLCJfY29uZmlnRWxhc3RpYyIsImFtcGxpdHVkZSIsInBlcmlvZCIsInAxIiwicDIiLCJwMyIsImFzaW4iLCJfY29uZmlnQmFjayIsIm92ZXJzaG9vdCIsInBvd2VyIiwiTGluZWFyIiwiZWFzZU5vbmUiLCJub25lIiwibjEiLCJuMiIsIm4zIiwiU3RlcHBlZEVhc2UiLCJzdGVwcyIsImltbWVkaWF0ZVN0YXJ0IiwiaWQiLCJBbmltYXRpb24iLCJ5b3lvIiwicmV2ZXJzZWQiLCJwYXVzZWQiLCJfcHJvdG8iLCJzdGFydFRpbWUiLCJfdG90YWxUaW1lIiwiX3B0TG9va3VwIiwiX3BUaW1lIiwiX3BzIiwiaW5jbHVkZVJlcGVhdHMiLCJ3cmFwUmVwZWF0cyIsImdsb2JhbFRpbWUiLCJzZWVrIiwicmVzdGFydCIsImluY2x1ZGVEZWxheSIsInBsYXkiLCJwYXVzZSIsImF0VGltZSIsInJlc3VtZSIsImlzQWN0aXZlIiwiZXZlbnRDYWxsYmFjayIsIm9uRnVsZmlsbGVkIiwiX3Jlc29sdmUiLCJfdGhlbiIsIl9BbmltYXRpb24iLCJzb3J0Q2hpbGRyZW4iLCJzY3JvbGxUcmlnZ2VyIiwiX3Byb3RvMiIsIlR3ZWVuIiwiZnJvbVRvIiwiZnJvbVZhcnMiLCJ0b1ZhcnMiLCJkZWxheWVkQ2FsbCIsInN0YWdnZXJUbyIsInN0YWdnZXIiLCJvbkNvbXBsZXRlQWxsIiwib25Db21wbGV0ZUFsbFBhcmFtcyIsIm9uQ29tcGxldGUiLCJvbkNvbXBsZXRlUGFyYW1zIiwic3RhZ2dlckZyb20iLCJzdGFnZ2VyRnJvbVRvIiwidER1ciIsImNyb3NzaW5nU3RhcnQiLCJwcmV2UGF1c2VkIiwicGF1c2VUd2VlbiIsInByZXZTdGFydCIsInJld2luZGluZyIsImRvZXNXcmFwIiwiX2hhc1BhdXNlIiwiX2ZvcmNpbmciLCJvblVwZGF0ZSIsImFkanVzdGVkVGltZSIsImFkZExhYmVsIiwiZ2V0Q2hpbGRyZW4iLCJ0d2VlbnMiLCJ0aW1lbGluZXMiLCJpZ25vcmVCZWZvcmVUaW1lIiwiZ2V0QnlJZCIsImFuaW1hdGlvbnMiLCJyZW1vdmVMYWJlbCIsImtpbGxUd2VlbnNPZiIsIl90b3RhbFRpbWUyIiwiYWRkUGF1c2UiLCJyZW1vdmVQYXVzZSIsIm9ubHlBY3RpdmUiLCJnZXRUd2VlbnNPZiIsIl9vdmVyd3JpdGluZ1R3ZWVuIiwicGFyc2VkVGFyZ2V0cyIsImlzR2xvYmFsVGltZSIsImNoaWxkcmVuIiwiX3RhcmdldHMiLCJ0d2VlblRvIiwidGwiLCJfdmFycyIsIl9vblN0YXJ0Iiwib25TdGFydCIsIm9uU3RhcnRQYXJhbXMiLCJ0d2VlbkZyb21UbyIsImZyb21Qb3NpdGlvbiIsInRvUG9zaXRpb24iLCJuZXh0TGFiZWwiLCJhZnRlclRpbWUiLCJwcmV2aW91c0xhYmVsIiwiYmVmb3JlVGltZSIsImN1cnJlbnRMYWJlbCIsInNoaWZ0Q2hpbGRyZW4iLCJhZGp1c3RMYWJlbHMiLCJpbmNsdWRlTGFiZWxzIiwidXBkYXRlUm9vdCIsIl9hZGRDb21wbGV4U3RyaW5nUHJvcFR3ZWVuIiwic2V0dGVyIiwic3RyaW5nRmlsdGVyIiwiZnVuY1BhcmFtIiwic3RhcnROdW1zIiwiaGFzUmFuZG9tIiwiZnAiLCJjdXJyZW50VmFsdWUiLCJwYXJzZWRTdGFydCIsIl9zZXR0ZXJQbGFpbiIsIl9zZXR0ZXJGdW5jV2l0aFBhcmFtIiwiX3NldHRlckZ1bmMiLCJfcmVuZGVyQm9vbGVhbiIsIl9yZW5kZXJQbGFpbiIsIl9wcm9jZXNzVmFycyIsIl9wYXJzZUZ1bmNPclN0cmluZyIsInB0TG9va3VwIiwib25VcGRhdGVQYXJhbXMiLCJhdXRvUmV2ZXJ0IiwicHJldlN0YXJ0QXQiLCJmdWxsVGFyZ2V0cyIsImF1dG9PdmVyd3JpdGUiLCJfb3ZlcndyaXRlIiwiY2xlYW5WYXJzIiwiZ3NEYXRhIiwiaGFybmVzc1ZhcnMiLCJvdmVyd3JpdHRlbiIsIl9vcCIsIl9vbkluaXQiLCJfYWRkQWxpYXNlc1RvVmFycyIsInByb3BlcnR5QWxpYXNlcyIsIl9zdGFnZ2VyVHdlZW5Qcm9wcyIsIl9zdGFnZ2VyUHJvcHNUb1NraXAiLCJfQW5pbWF0aW9uMiIsInNraXBJbmhlcml0IiwiX3RoaXMzJHZhcnMiLCJjdXJUYXJnZXQiLCJzdGFnZ2VyRnVuYyIsInN0YWdnZXJWYXJzVG9NZXJnZSIsIl9wcm90bzMiLCJvblJlcGVhdCIsImtpbGxpbmdUYXJnZXRzIiwicHJvcFR3ZWVuTG9va3VwIiwiZmlyc3RQVCIsIm92ZXJ3cml0dGVuUHJvcHMiLCJjdXJMb29rdXAiLCJjdXJPdmVyd3JpdGVQcm9wcyIsIm9uUmV2ZXJzZUNvbXBsZXRlIiwib25SZXZlcnNlQ29tcGxldGVQYXJhbXMiLCJfc2V0dGVyQXR0cmlidXRlIiwiaGFzTm9uRGVwZW5kZW50UmVtYWluaW5nIiwib3AiLCJfc2V0dGVyV2l0aE1vZGlmaWVyIiwibVNldCIsIm10IiwicHQyIiwiZmlyc3QiLCJsYXN0IiwicmVuZGVyZXIiLCJfcHJvdG80IiwiVHdlZW5NYXgiLCJUd2VlbkxpdGUiLCJUaW1lbGluZUxpdGUiLCJUaW1lbGluZU1heCIsIl9sZW4yIiwiX2tleTIiLCJnZXRQcm9wZXJ0eSIsImdldHRlciIsImZvcm1hdCIsInF1aWNrU2V0dGVyIiwic2V0dGVycyIsImlzVHdlZW5pbmciLCJyZWdpc3RlckVmZmVjdCIsImVmZmVjdCIsImV4dGVuZFRpbWVsaW5lIiwicGx1Z2luTmFtZSIsInJlZ2lzdGVyRWFzZSIsInBhcnNlRWFzZSIsImV4cG9ydFJvb3QiLCJpbmNsdWRlRGVsYXllZENhbGxzIiwiZWZmZWN0cyIsInRpY2tlciIsImdsb2JhbFRpbWVsaW5lIiwiZ2xvYmFscyIsImdldENhY2hlIiwiX2dldFBsdWdpblByb3BUd2VlbiIsIl9hZGRNb2RpZmllcnMiLCJtb2RpZmllcnMiLCJfYnVpbGRNb2RpZmllclBsdWdpbiIsIlBvd2VyMCIsIlBvd2VyMSIsIlBvd2VyMiIsIlBvd2VyMyIsIlBvd2VyNCIsIlF1YWQiLCJDdWJpYyIsIlF1YXJ0IiwiUXVpbnQiLCJTdHJvbmciLCJFbGFzdGljIiwiQmFjayIsIkJvdW5jZSIsIlNpbmUiLCJFeHBvIiwiQ2lyYyIsImdzYXBXaXRoQ1NTIiwiVHdlZW5NYXhXaXRoQ1NTIiwiJCIsImpRdWVyeSIsImV4dGVuZCIsImFycmF5U2xpY2UiLCJtYWtlQXJyYXkiLCJpc0FycmF5TGlrZSIsIkltYWdlc0xvYWRlZCIsImVsZW0iLCJvbkFsd2F5cyIsInF1ZXJ5RWxlbSIsImVsZW1lbnRzIiwiZ2V0SW1hZ2VzIiwianFEZWZlcnJlZCIsIkRlZmVycmVkIiwiaW1hZ2VzIiwiYWRkRWxlbWVudEltYWdlcyIsIm5vZGVOYW1lIiwiYWRkSW1hZ2UiLCJiYWNrZ3JvdW5kIiwiYWRkRWxlbWVudEJhY2tncm91bmRJbWFnZXMiLCJlbGVtZW50Tm9kZVR5cGVzIiwiY2hpbGRJbWdzIiwiaW1nIiwicmVVUkwiLCJiYWNrZ3JvdW5kSW1hZ2UiLCJhZGRCYWNrZ3JvdW5kIiwibG9hZGluZ0ltYWdlIiwiTG9hZGluZ0ltYWdlIiwiQmFja2dyb3VuZCIsInByb2dyZXNzZWRDb3VudCIsImhhc0FueUJyb2tlbiIsImNvbXBsZXRlIiwib25Qcm9ncmVzcyIsImltYWdlIiwiaXNMb2FkZWQiLCJub3RpZnkiLCJpc0NvbXBsZXRlIiwianFNZXRob2QiLCJnZXRJc0ltYWdlQ29tcGxldGUiLCJjb25maXJtIiwibmF0dXJhbFdpZHRoIiwicHJveHlJbWFnZSIsIkltYWdlIiwic3JjIiwiaGFuZGxlRXZlbnQiLCJtZXRob2QiLCJvbmxvYWQiLCJ1bmJpbmRFdmVudHMiLCJtYWtlSlF1ZXJ5UGx1Z2luIiwiaW1hZ2VzTG9hZGVkIiwiaW5zdGFuY2UiLCJydW5TY3JpcHRzIiwiYW5jaG9yIiwic2Nyb2xsSW50b1ZpZXciLCJiZWhhdmlvciIsIm1lbnVJdGVtc1dpdGhDaGlsZHJlbnMiLCJtZW51SXRlbVdpdGhDaGlsZHJlbnMiLCJzdWJNZW51SXRlbXMiLCJzdWJNZW51SXRlbSIsImFuaW1hdGlvbkRlbGF5Iiwib2JzZXJ2ZXIiLCJJbnRlcnNlY3Rpb25PYnNlcnZlciIsImVudHJpZXMiLCJlbnRyeSIsImludGVyc2VjdGlvblJhdGlvIiwiY2xhc3NMaXN0Iiwic2xpZGVSZXZlYWxzIiwic2xpZGUiLCJ0cmFuc2l0aW9uRGVsYXkiLCJvYnNlcnZlIiwic2VjdGlvbnMiLCJib2R5VGFnIiwiY2hhbmdlQmFja2dyb3VuZCIsInRvcFZpZXdwb3J0IiwicGFnZVlPZmZzZXQiLCJtaWRWaWV3cG9ydCIsImlubmVySGVpZ2h0Iiwic3RpY2t5TmF2IiwibWVudSIsInNlY3Rpb24iLCJ0b3BTZWN0aW9uIiwib2Zmc2V0VG9wIiwiZGlzdGFuY2VUb1NlY3Rpb25Ub3AiLCJkYXRhQmFja2dyb3VuZCIsImJhY2tncm91bmRDb2xvciIsIm1lbnVTY3JpcHRzIiwic3RpY2t5U2NyaXB0cyIsInNjcm9sbDJ0b3AiLCJzY3JvbGxUbyIsImJhcmJhIiwib3BhY2l0eSIsIm5hdiIsInNjcm9sbFVwIiwic2Nyb2xsRG93biIsImxhc3RTY3JvbGwiLCJhZGRIZWFkZXJIZWlnaHRUb3AiLCJoZWFkZXJIZWlnaHQiLCJjbGllbnRIZWlnaHQiLCJjdXJyZW50UGFkZGluZyIsImN1cnJlbnRTY3JvbGwiLCJtYXRjaFNjcmVlblNpemUiLCJpbnRyb1NlY3Rpb25QYWRkaW5nIiwiYWRkSGVhZGVySGVpZ2h0QXNQYWRkaW5nIiwic2NyZWVuU2l6ZSIsIm1hdGNoTWVkaWEiLCJhZGRMaXN0ZW5lciIsInBhZGRpbmdUb3AiLCJjbG9zaW5nTm90aWNlIiwibWVudVRvQ2xvc2VDbGFzcyIsImNsb3NpbmdCdXR0b25DbGFzcyIsIm1lbnVUb0Nsb3NlIiwiY2xvc2luZ0J1dHRvbiIsInRvZ2dsaW5nTWVudSIsIm1lbnVUb1RvZ2dsZUNsYXNzIiwiYnVyZ2VyTWVudUNsYXNzIiwibWVudVRvVG9nZ2xlIiwiYnVyZ2VyTWVudSIsInRvZ2dsZSIsIm5hdlN0aWNreVNlY3Rpb24iLCJtYWluTmF2TGlua3MiLCJsYXN0SWQiLCJjdXIiLCJmcm9tVG9wIl0sIm1hcHBpbmdzIjoiO1FBQUE7UUFDQTs7UUFFQTtRQUNBOztRQUVBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBOztRQUVBO1FBQ0E7O1FBRUE7UUFDQTs7UUFFQTtRQUNBO1FBQ0E7OztRQUdBO1FBQ0E7O1FBRUE7UUFDQTs7UUFFQTtRQUNBO1FBQ0E7UUFDQSwwQ0FBMEMsZ0NBQWdDO1FBQzFFO1FBQ0E7O1FBRUE7UUFDQTtRQUNBO1FBQ0Esd0RBQXdELGtCQUFrQjtRQUMxRTtRQUNBLGlEQUFpRCxjQUFjO1FBQy9EOztRQUVBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQSx5Q0FBeUMs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QyxHQUFHLEdBQUcsRUFBVjtBQUVBdHVDLFVBQU0sQ0FBQ3VQLGdCQUFQLENBQXdCLFFBQXhCLEVBQWtDLFVBQUFySSxLQUFLLEVBQUk7QUFDMUMsVUFBSXFuQyxPQUFPLEdBQUd2dUMsTUFBTSxDQUFDRyxPQUFQLEdBQWlCMHNDLFlBQWpCLEdBQWdDN3NDLE1BQU0sQ0FBQ3lyQyxXQUFQLEdBQXFCLENBQW5FO0FBRUEyQyxrQkFBWSxDQUFDM29DLE9BQWIsQ0FBcUIsVUFBQWdLLElBQUksRUFBSTtBQUM1QixZQUFJbThCLE9BQU8sR0FBRzV1QyxRQUFRLENBQUNRLGFBQVQsQ0FBdUJpUyxJQUFJLENBQUN6TSxJQUE1QixDQUFkOztBQUVBLFlBQUk0b0MsT0FBTyxDQUFDRSxTQUFSLElBQXFCeUMsT0FBckIsSUFBZ0MzQyxPQUFPLENBQUNFLFNBQVIsR0FBb0JGLE9BQU8sQ0FBQ2p0QixZQUE1QixHQUEyQzR2QixPQUEvRSxFQUF3RjtBQUN2RjkrQixjQUFJLENBQUNxN0IsU0FBTCxDQUFlanFDLEdBQWYsQ0FBbUIsU0FBbkI7QUFDQSxTQUZELE1BRU87QUFDTjRPLGNBQUksQ0FBQ3E3QixTQUFMLENBQWV6cEMsTUFBZixDQUFzQixTQUF0QjtBQUNBO0FBQ0QsT0FSRDtBQVNBLEtBWkQ7QUFhQTtBQUNELENBekJEOztBQTJCZThxQyw0RUFBZixFIiwiZmlsZSI6ImJ1bmRsZS5qcyIsInNvdXJjZXNDb250ZW50IjpbIiBcdC8vIFRoZSBtb2R1bGUgY2FjaGVcbiBcdHZhciBpbnN0YWxsZWRNb2R1bGVzID0ge307XG5cbiBcdC8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG4gXHRmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cbiBcdFx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG4gXHRcdGlmKGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdKSB7XG4gXHRcdFx0cmV0dXJuIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmV4cG9ydHM7XG4gXHRcdH1cbiBcdFx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcbiBcdFx0dmFyIG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdID0ge1xuIFx0XHRcdGk6IG1vZHVsZUlkLFxuIFx0XHRcdGw6IGZhbHNlLFxuIFx0XHRcdGV4cG9ydHM6IHt9XG4gXHRcdH07XG5cbiBcdFx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG4gXHRcdG1vZHVsZXNbbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG4gXHRcdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcbiBcdFx0bW9kdWxlLmwgPSB0cnVlO1xuXG4gXHRcdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG4gXHRcdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbiBcdH1cblxuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tID0gbW9kdWxlcztcblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGUgY2FjaGVcbiBcdF9fd2VicGFja19yZXF1aXJlX18uYyA9IGluc3RhbGxlZE1vZHVsZXM7XG5cbiBcdC8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb24gZm9yIGhhcm1vbnkgZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kID0gZnVuY3Rpb24oZXhwb3J0cywgbmFtZSwgZ2V0dGVyKSB7XG4gXHRcdGlmKCFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywgbmFtZSkpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgbmFtZSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGdldHRlciB9KTtcbiBcdFx0fVxuIFx0fTtcblxuIFx0Ly8gZGVmaW5lIF9fZXNNb2R1bGUgb24gZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yID0gZnVuY3Rpb24oZXhwb3J0cykge1xuIFx0XHRpZih0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBTeW1ib2wudG9TdHJpbmdUYWcpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcbiBcdFx0fVxuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuIFx0fTtcblxuIFx0Ly8gY3JlYXRlIGEgZmFrZSBuYW1lc3BhY2Ugb2JqZWN0XG4gXHQvLyBtb2RlICYgMTogdmFsdWUgaXMgYSBtb2R1bGUgaWQsIHJlcXVpcmUgaXRcbiBcdC8vIG1vZGUgJiAyOiBtZXJnZSBhbGwgcHJvcGVydGllcyBvZiB2YWx1ZSBpbnRvIHRoZSBuc1xuIFx0Ly8gbW9kZSAmIDQ6IHJldHVybiB2YWx1ZSB3aGVuIGFscmVhZHkgbnMgb2JqZWN0XG4gXHQvLyBtb2RlICYgOHwxOiBiZWhhdmUgbGlrZSByZXF1aXJlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnQgPSBmdW5jdGlvbih2YWx1ZSwgbW9kZSkge1xuIFx0XHRpZihtb2RlICYgMSkgdmFsdWUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKHZhbHVlKTtcbiBcdFx0aWYobW9kZSAmIDgpIHJldHVybiB2YWx1ZTtcbiBcdFx0aWYoKG1vZGUgJiA0KSAmJiB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnICYmIHZhbHVlICYmIHZhbHVlLl9fZXNNb2R1bGUpIHJldHVybiB2YWx1ZTtcbiBcdFx0dmFyIG5zID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yKG5zKTtcbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG5zLCAnZGVmYXVsdCcsIHsgZW51bWVyYWJsZTogdHJ1ZSwgdmFsdWU6IHZhbHVlIH0pO1xuIFx0XHRpZihtb2RlICYgMiAmJiB0eXBlb2YgdmFsdWUgIT0gJ3N0cmluZycpIGZvcih2YXIga2V5IGluIHZhbHVlKSBfX3dlYnBhY2tfcmVxdWlyZV9fLmQobnMsIGtleSwgZnVuY3Rpb24oa2V5KSB7IHJldHVybiB2YWx1ZVtrZXldOyB9LmJpbmQobnVsbCwga2V5KSk7XG4gXHRcdHJldHVybiBucztcbiBcdH07XG5cbiBcdC8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSBmdW5jdGlvbihtb2R1bGUpIHtcbiBcdFx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0RGVmYXVsdCgpIHsgcmV0dXJuIG1vZHVsZVsnZGVmYXVsdCddOyB9IDpcbiBcdFx0XHRmdW5jdGlvbiBnZXRNb2R1bGVFeHBvcnRzKCkgeyByZXR1cm4gbW9kdWxlOyB9O1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCAnYScsIGdldHRlcik7XG4gXHRcdHJldHVybiBnZXR0ZXI7XG4gXHR9O1xuXG4gXHQvLyBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGxcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubyA9IGZ1bmN0aW9uKG9iamVjdCwgcHJvcGVydHkpIHsgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIHByb3BlcnR5KTsgfTtcblxuIFx0Ly8gX193ZWJwYWNrX3B1YmxpY19wYXRoX19cbiBcdF9fd2VicGFja19yZXF1aXJlX18ucCA9IFwiXCI7XG5cblxuIFx0Ly8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG4gXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXyhfX3dlYnBhY2tfcmVxdWlyZV9fLnMgPSAwKTtcbiIsIi8vIEEgdHlwZSBvZiBwcm9taXNlLWxpa2UgdGhhdCByZXNvbHZlcyBzeW5jaHJvbm91c2x5IGFuZCBzdXBwb3J0cyBvbmx5IG9uZSBvYnNlcnZlclxuZXhwb3J0IGNvbnN0IF9QYWN0ID0gLyojX19QVVJFX18qLyhmdW5jdGlvbigpIHtcblx0ZnVuY3Rpb24gX1BhY3QoKSB7fVxuXHRfUGFjdC5wcm90b3R5cGUudGhlbiA9IGZ1bmN0aW9uKG9uRnVsZmlsbGVkLCBvblJlamVjdGVkKSB7XG5cdFx0Y29uc3QgcmVzdWx0ID0gbmV3IF9QYWN0KCk7XG5cdFx0Y29uc3Qgc3RhdGUgPSB0aGlzLnM7XG5cdFx0aWYgKHN0YXRlKSB7XG5cdFx0XHRjb25zdCBjYWxsYmFjayA9IHN0YXRlICYgMSA/IG9uRnVsZmlsbGVkIDogb25SZWplY3RlZDtcblx0XHRcdGlmIChjYWxsYmFjaykge1xuXHRcdFx0XHR0cnkge1xuXHRcdFx0XHRcdF9zZXR0bGUocmVzdWx0LCAxLCBjYWxsYmFjayh0aGlzLnYpKTtcblx0XHRcdFx0fSBjYXRjaCAoZSkge1xuXHRcdFx0XHRcdF9zZXR0bGUocmVzdWx0LCAyLCBlKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gcmVzdWx0O1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdHRoaXMubyA9IGZ1bmN0aW9uKF90aGlzKSB7XG5cdFx0XHR0cnkge1xuXHRcdFx0XHRjb25zdCB2YWx1ZSA9IF90aGlzLnY7XG5cdFx0XHRcdGlmIChfdGhpcy5zICYgMSkge1xuXHRcdFx0XHRcdF9zZXR0bGUocmVzdWx0LCAxLCBvbkZ1bGZpbGxlZCA/IG9uRnVsZmlsbGVkKHZhbHVlKSA6IHZhbHVlKTtcblx0XHRcdFx0fSBlbHNlIGlmIChvblJlamVjdGVkKSB7XG5cdFx0XHRcdFx0X3NldHRsZShyZXN1bHQsIDEsIG9uUmVqZWN0ZWQodmFsdWUpKTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRfc2V0dGxlKHJlc3VsdCwgMiwgdmFsdWUpO1xuXHRcdFx0XHR9XG5cdFx0XHR9IGNhdGNoIChlKSB7XG5cdFx0XHRcdF9zZXR0bGUocmVzdWx0LCAyLCBlKTtcblx0XHRcdH1cblx0XHR9O1xuXHRcdHJldHVybiByZXN1bHQ7XG5cdH1cblx0cmV0dXJuIF9QYWN0O1xufSkoKTtcblxuLy8gU2V0dGxlcyBhIHBhY3Qgc3luY2hyb25vdXNseVxuZXhwb3J0IGZ1bmN0aW9uIF9zZXR0bGUocGFjdCwgc3RhdGUsIHZhbHVlKSB7XG5cdGlmICghcGFjdC5zKSB7XG5cdFx0aWYgKHZhbHVlIGluc3RhbmNlb2YgX1BhY3QpIHtcblx0XHRcdGlmICh2YWx1ZS5zKSB7XG5cdFx0XHRcdGlmIChzdGF0ZSAmIDEpIHtcblx0XHRcdFx0XHRzdGF0ZSA9IHZhbHVlLnM7XG5cdFx0XHRcdH1cblx0XHRcdFx0dmFsdWUgPSB2YWx1ZS52O1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0dmFsdWUubyA9IF9zZXR0bGUuYmluZChudWxsLCBwYWN0LCBzdGF0ZSk7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblx0XHR9XG5cdFx0aWYgKHZhbHVlICYmIHZhbHVlLnRoZW4pIHtcblx0XHRcdHZhbHVlLnRoZW4oX3NldHRsZS5iaW5kKG51bGwsIHBhY3QsIHN0YXRlKSwgX3NldHRsZS5iaW5kKG51bGwsIHBhY3QsIDIpKTtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cdFx0cGFjdC5zID0gc3RhdGU7XG5cdFx0cGFjdC52ID0gdmFsdWU7XG5cdFx0Y29uc3Qgb2JzZXJ2ZXIgPSBwYWN0Lm87XG5cdFx0aWYgKG9ic2VydmVyKSB7XG5cdFx0XHRvYnNlcnZlcihwYWN0KTtcblx0XHR9XG5cdH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIF9pc1NldHRsZWRQYWN0KHRoZW5hYmxlKSB7XG5cdHJldHVybiB0aGVuYWJsZSBpbnN0YW5jZW9mIF9QYWN0ICYmIHRoZW5hYmxlLnMgJiAxO1xufVxuXG4vLyBDb252ZXJ0cyBhcmd1bWVudCB0byBhIGZ1bmN0aW9uIHRoYXQgYWx3YXlzIHJldHVybnMgYSBQcm9taXNlXG5leHBvcnQgZnVuY3Rpb24gX2FzeW5jKGYpIHtcblx0cmV0dXJuIGZ1bmN0aW9uKCkge1xuXHRcdGZvciAodmFyIGFyZ3MgPSBbXSwgaSA9IDA7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcblx0XHRcdGFyZ3NbaV0gPSBhcmd1bWVudHNbaV07XG5cdFx0fVxuXHRcdHRyeSB7XG5cdFx0XHRyZXR1cm4gUHJvbWlzZS5yZXNvbHZlKGYuYXBwbHkodGhpcywgYXJncykpO1xuXHRcdH0gY2F0Y2goZSkge1xuXHRcdFx0cmV0dXJuIFByb21pc2UucmVqZWN0KGUpO1xuXHRcdH1cblx0fVxufVxuXG4vLyBBd2FpdHMgb24gYSB2YWx1ZSB0aGF0IG1heSBvciBtYXkgbm90IGJlIGEgUHJvbWlzZSAoZXF1aXZhbGVudCB0byB0aGUgYXdhaXQga2V5d29yZCBpbiBFUzIwMTUsIHdpdGggY29udGludWF0aW9ucyBwYXNzZWQgZXhwbGljaXRseSlcbmV4cG9ydCBmdW5jdGlvbiBfYXdhaXQodmFsdWUsIHRoZW4sIGRpcmVjdCkge1xuXHRpZiAoZGlyZWN0KSB7XG5cdFx0cmV0dXJuIHRoZW4gPyB0aGVuKHZhbHVlKSA6IHZhbHVlO1xuXHR9XG5cdGlmICghdmFsdWUgfHwgIXZhbHVlLnRoZW4pIHtcblx0XHR2YWx1ZSA9IFByb21pc2UucmVzb2x2ZSh2YWx1ZSk7XG5cdH1cblx0cmV0dXJuIHRoZW4gPyB2YWx1ZS50aGVuKHRoZW4pIDogdmFsdWU7XG59XG5cbi8vIEF3YWl0cyBvbiBhIHZhbHVlIHRoYXQgbWF5IG9yIG1heSBub3QgYmUgYSBQcm9taXNlLCB0aGVuIGlnbm9yZXMgaXRcbmV4cG9ydCBmdW5jdGlvbiBfYXdhaXRJZ25vcmVkKHZhbHVlLCBkaXJlY3QpIHtcblx0aWYgKCFkaXJlY3QpIHtcblx0XHRyZXR1cm4gdmFsdWUgJiYgdmFsdWUudGhlbiA/IHZhbHVlLnRoZW4oX2VtcHR5KSA6IFByb21pc2UucmVzb2x2ZSgpO1xuXHR9XG59XG5cbi8vIFByb2NlZWRzIGFmdGVyIGEgdmFsdWUgaGFzIHJlc29sdmVkLCBvciBwcm9jZWVkcyBpbW1lZGlhdGVseSBpZiB0aGUgdmFsdWUgaXMgbm90IHRoZW5hYmxlXG5leHBvcnQgZnVuY3Rpb24gX2NvbnRpbnVlKHZhbHVlLCB0aGVuKSB7XG5cdHJldHVybiB2YWx1ZSAmJiB2YWx1ZS50aGVuID8gdmFsdWUudGhlbih0aGVuKSA6IHRoZW4odmFsdWUpO1xufVxuXG4vLyBQcm9jZWVkcyBhZnRlciBhIHZhbHVlIGhhcyByZXNvbHZlZCwgb3IgcHJvY2VlZHMgaW1tZWRpYXRlbHkgaWYgdGhlIHZhbHVlIGlzIG5vdCB0aGVuYWJsZVxuZXhwb3J0IGZ1bmN0aW9uIF9jb250aW51ZUlnbm9yZWQodmFsdWUpIHtcblx0aWYgKHZhbHVlICYmIHZhbHVlLnRoZW4pIHtcblx0XHRyZXR1cm4gdmFsdWUudGhlbihfZW1wdHkpO1xuXHR9XG59XG5cbi8vIEFzeW5jaHJvbm91c2x5IGl0ZXJhdGUgdGhyb3VnaCBhbiBvYmplY3QgdGhhdCBoYXMgYSBsZW5ndGggcHJvcGVydHksIHBhc3NpbmcgdGhlIGluZGV4IGFzIHRoZSBmaXJzdCBhcmd1bWVudCB0byB0aGUgY2FsbGJhY2sgKGV2ZW4gYXMgdGhlIGxlbmd0aCBwcm9wZXJ0eSBjaGFuZ2VzKVxuZXhwb3J0IGZ1bmN0aW9uIF9mb3JUbyhhcnJheSwgYm9keSwgY2hlY2spIHtcblx0dmFyIGkgPSAtMSwgcGFjdCwgcmVqZWN0O1xuXHRmdW5jdGlvbiBfY3ljbGUocmVzdWx0KSB7XG5cdFx0dHJ5IHtcblx0XHRcdHdoaWxlICgrK2kgPCBhcnJheS5sZW5ndGggJiYgKCFjaGVjayB8fCAhY2hlY2soKSkpIHtcblx0XHRcdFx0cmVzdWx0ID0gYm9keShpKTtcblx0XHRcdFx0aWYgKHJlc3VsdCAmJiByZXN1bHQudGhlbikge1xuXHRcdFx0XHRcdGlmIChfaXNTZXR0bGVkUGFjdChyZXN1bHQpKSB7XG5cdFx0XHRcdFx0XHRyZXN1bHQgPSByZXN1bHQudjtcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0cmVzdWx0LnRoZW4oX2N5Y2xlLCByZWplY3QgfHwgKHJlamVjdCA9IF9zZXR0bGUuYmluZChudWxsLCBwYWN0ID0gbmV3IF9QYWN0KCksIDIpKSk7XG5cdFx0XHRcdFx0XHRyZXR1cm47XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRpZiAocGFjdCkge1xuXHRcdFx0XHRfc2V0dGxlKHBhY3QsIDEsIHJlc3VsdCk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRwYWN0ID0gcmVzdWx0O1xuXHRcdFx0fVxuXHRcdH0gY2F0Y2ggKGUpIHtcblx0XHRcdF9zZXR0bGUocGFjdCB8fCAocGFjdCA9IG5ldyBfUGFjdCgpKSwgMiwgZSk7XG5cdFx0fVxuXHR9XG5cdF9jeWNsZSgpO1xuXHRyZXR1cm4gcGFjdDtcbn1cblxuLy8gQXN5bmNocm9ub3VzbHkgaXRlcmF0ZSB0aHJvdWdoIGFuIG9iamVjdCdzIHByb3BlcnRpZXMgKGluY2x1ZGluZyBwcm9wZXJ0aWVzIGluaGVyaXRlZCBmcm9tIHRoZSBwcm90b3R5cGUpXG4vLyBVc2VzIGEgc25hcHNob3Qgb2YgdGhlIG9iamVjdCdzIHByb3BlcnRpZXNcbmV4cG9ydCBmdW5jdGlvbiBfZm9ySW4odGFyZ2V0LCBib2R5LCBjaGVjaykge1xuXHR2YXIga2V5cyA9IFtdO1xuXHRmb3IgKHZhciBrZXkgaW4gdGFyZ2V0KSB7XG5cdFx0a2V5cy5wdXNoKGtleSk7XG5cdH1cblx0cmV0dXJuIF9mb3JUbyhrZXlzLCBmdW5jdGlvbihpKSB7IHJldHVybiBib2R5KGtleXNbaV0pOyB9LCBjaGVjayk7XG59XG5cbi8vIEFzeW5jaHJvbm91c2x5IGl0ZXJhdGUgdGhyb3VnaCBhbiBvYmplY3QncyBvd24gcHJvcGVydGllcyAoZXhjbHVkaW5nIHByb3BlcnRpZXMgaW5oZXJpdGVkIGZyb20gdGhlIHByb3RvdHlwZSlcbi8vIFVzZXMgYSBzbmFwc2hvdCBvZiB0aGUgb2JqZWN0J3MgcHJvcGVydGllc1xuZXhwb3J0IGZ1bmN0aW9uIF9mb3JPd24odGFyZ2V0LCBib2R5LCBjaGVjaykge1xuXHR2YXIga2V5cyA9IFtdO1xuXHRmb3IgKHZhciBrZXkgaW4gdGFyZ2V0KSB7XG5cdFx0aWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbCh0YXJnZXQsIGtleSkpIHtcblx0XHRcdGtleXMucHVzaChrZXkpO1xuXHRcdH1cblx0fVxuXHRyZXR1cm4gX2ZvclRvKGtleXMsIGZ1bmN0aW9uKGkpIHsgcmV0dXJuIGJvZHkoa2V5c1tpXSk7IH0sIGNoZWNrKTtcbn1cblxuZXhwb3J0IGNvbnN0IF9pdGVyYXRvclN5bWJvbCA9IC8qI19fUFVSRV9fKi8gdHlwZW9mIFN5bWJvbCAhPT0gXCJ1bmRlZmluZWRcIiA/IChTeW1ib2wuaXRlcmF0b3IgfHwgKFN5bWJvbC5pdGVyYXRvciA9IFN5bWJvbChcIlN5bWJvbC5pdGVyYXRvclwiKSkpIDogXCJAQGl0ZXJhdG9yXCI7XG5cbi8vIEFzeW5jaHJvbm91c2x5IGl0ZXJhdGUgdGhyb3VnaCBhbiBvYmplY3QncyB2YWx1ZXNcbi8vIFVzZXMgZm9yLi4ub2YgaWYgdGhlIHJ1bnRpbWUgc3VwcG9ydHMgaXQsIG90aGVyd2lzZSBpdGVyYXRlcyB1bnRpbCBsZW5ndGggb24gYSBjb3B5XG5leHBvcnQgZnVuY3Rpb24gX2Zvck9mKHRhcmdldCwgYm9keSwgY2hlY2spIHtcblx0aWYgKHR5cGVvZiB0YXJnZXRbX2l0ZXJhdG9yU3ltYm9sXSA9PT0gXCJmdW5jdGlvblwiKSB7XG5cdFx0dmFyIGl0ZXJhdG9yID0gdGFyZ2V0W19pdGVyYXRvclN5bWJvbF0oKSwgc3RlcCwgcGFjdCwgcmVqZWN0O1xuXHRcdGZ1bmN0aW9uIF9jeWNsZShyZXN1bHQpIHtcblx0XHRcdHRyeSB7XG5cdFx0XHRcdHdoaWxlICghKHN0ZXAgPSBpdGVyYXRvci5uZXh0KCkpLmRvbmUgJiYgKCFjaGVjayB8fCAhY2hlY2soKSkpIHtcblx0XHRcdFx0XHRyZXN1bHQgPSBib2R5KHN0ZXAudmFsdWUpO1xuXHRcdFx0XHRcdGlmIChyZXN1bHQgJiYgcmVzdWx0LnRoZW4pIHtcblx0XHRcdFx0XHRcdGlmIChfaXNTZXR0bGVkUGFjdChyZXN1bHQpKSB7XG5cdFx0XHRcdFx0XHRcdHJlc3VsdCA9IHJlc3VsdC52O1xuXHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0cmVzdWx0LnRoZW4oX2N5Y2xlLCByZWplY3QgfHwgKHJlamVjdCA9IF9zZXR0bGUuYmluZChudWxsLCBwYWN0ID0gbmV3IF9QYWN0KCksIDIpKSk7XG5cdFx0XHRcdFx0XHRcdHJldHVybjtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYgKHBhY3QpIHtcblx0XHRcdFx0XHRfc2V0dGxlKHBhY3QsIDEsIHJlc3VsdCk7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0cGFjdCA9IHJlc3VsdDtcblx0XHRcdFx0fVxuXHRcdFx0fSBjYXRjaCAoZSkge1xuXHRcdFx0XHRfc2V0dGxlKHBhY3QgfHwgKHBhY3QgPSBuZXcgX1BhY3QoKSksIDIsIGUpO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRfY3ljbGUoKTtcblx0XHRpZiAoaXRlcmF0b3IucmV0dXJuKSB7XG5cdFx0XHR2YXIgX2ZpeHVwID0gZnVuY3Rpb24odmFsdWUpIHtcblx0XHRcdFx0dHJ5IHtcblx0XHRcdFx0XHRpZiAoIXN0ZXAuZG9uZSkge1xuXHRcdFx0XHRcdFx0aXRlcmF0b3IucmV0dXJuKCk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9IGNhdGNoKGUpIHtcblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gdmFsdWU7XG5cdFx0XHR9XG5cdFx0XHRpZiAocGFjdCAmJiBwYWN0LnRoZW4pIHtcblx0XHRcdFx0cmV0dXJuIHBhY3QudGhlbihfZml4dXAsIGZ1bmN0aW9uKGUpIHtcblx0XHRcdFx0XHR0aHJvdyBfZml4dXAoZSk7XG5cdFx0XHRcdH0pO1xuXHRcdFx0fVxuXHRcdFx0X2ZpeHVwKCk7XG5cdFx0fVxuXHRcdHJldHVybiBwYWN0O1xuXHR9XG5cdC8vIE5vIHN1cHBvcnQgZm9yIFN5bWJvbC5pdGVyYXRvclxuXHRpZiAoIShcImxlbmd0aFwiIGluIHRhcmdldCkpIHtcblx0XHR0aHJvdyBuZXcgVHlwZUVycm9yKFwiT2JqZWN0IGlzIG5vdCBpdGVyYWJsZVwiKTtcblx0fVxuXHQvLyBIYW5kbGUgbGl2ZSBjb2xsZWN0aW9ucyBwcm9wZXJseVxuXHR2YXIgdmFsdWVzID0gW107XG5cdGZvciAodmFyIGkgPSAwOyBpIDwgdGFyZ2V0Lmxlbmd0aDsgaSsrKSB7XG5cdFx0dmFsdWVzLnB1c2godGFyZ2V0W2ldKTtcblx0fVxuXHRyZXR1cm4gX2ZvclRvKHZhbHVlcywgZnVuY3Rpb24oaSkgeyByZXR1cm4gYm9keSh2YWx1ZXNbaV0pOyB9LCBjaGVjayk7XG59XG5cbmV4cG9ydCBjb25zdCBfYXN5bmNJdGVyYXRvclN5bWJvbCA9IC8qI19fUFVSRV9fKi8gdHlwZW9mIFN5bWJvbCAhPT0gXCJ1bmRlZmluZWRcIiA/IChTeW1ib2wuYXN5bmNJdGVyYXRvciB8fCAoU3ltYm9sLmFzeW5jSXRlcmF0b3IgPSBTeW1ib2woXCJTeW1ib2wuYXN5bmNJdGVyYXRvclwiKSkpIDogXCJAQGFzeW5jSXRlcmF0b3JcIjtcblxuLy8gQXN5bmNocm9ub3VzbHkgaXRlcmF0ZSBvbiBhIHZhbHVlIHVzaW5nIGl0J3MgYXN5bmMgaXRlcmF0b3IgaWYgcHJlc2VudCwgb3IgaXRzIHN5bmNocm9ub3VzIGl0ZXJhdG9yIGlmIG1pc3NpbmdcbmV4cG9ydCBmdW5jdGlvbiBfZm9yQXdhaXRPZih0YXJnZXQsIGJvZHksIGNoZWNrKSB7XG5cdGlmICh0eXBlb2YgdGFyZ2V0W19hc3luY0l0ZXJhdG9yU3ltYm9sXSA9PT0gXCJmdW5jdGlvblwiKSB7XG5cdFx0dmFyIHBhY3QgPSBuZXcgX1BhY3QoKTtcblx0XHR2YXIgaXRlcmF0b3IgPSB0YXJnZXRbX2FzeW5jSXRlcmF0b3JTeW1ib2xdKCk7XG5cdFx0aXRlcmF0b3IubmV4dCgpLnRoZW4oX3Jlc3VtZUFmdGVyTmV4dCkudGhlbih2b2lkIDAsIF9yZWplY3QpO1xuXHRcdHJldHVybiBwYWN0O1xuXHRcdGZ1bmN0aW9uIF9yZXN1bWVBZnRlckJvZHkocmVzdWx0KSB7XG5cdFx0XHRpZiAoY2hlY2sgJiYgY2hlY2soKSkge1xuXHRcdFx0XHRyZXR1cm4gX3NldHRsZShwYWN0LCAxLCBpdGVyYXRvci5yZXR1cm4gPyBpdGVyYXRvci5yZXR1cm4oKS50aGVuKGZ1bmN0aW9uKCkgeyByZXR1cm4gcmVzdWx0OyB9KSA6IHJlc3VsdCk7XG5cdFx0XHR9XG5cdFx0XHRpdGVyYXRvci5uZXh0KCkudGhlbihfcmVzdW1lQWZ0ZXJOZXh0KS50aGVuKHZvaWQgMCwgX3JlamVjdCk7XG5cdFx0fVxuXHRcdGZ1bmN0aW9uIF9yZXN1bWVBZnRlck5leHQoc3RlcCkge1xuXHRcdFx0aWYgKHN0ZXAuZG9uZSkge1xuXHRcdFx0XHRfc2V0dGxlKHBhY3QsIDEpO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0UHJvbWlzZS5yZXNvbHZlKGJvZHkoc3RlcC52YWx1ZSkpLnRoZW4oX3Jlc3VtZUFmdGVyQm9keSkudGhlbih2b2lkIDAsIF9yZWplY3QpO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRmdW5jdGlvbiBfcmVqZWN0KGVycm9yKSB7XG5cdFx0XHRfc2V0dGxlKHBhY3QsIDIsIGl0ZXJhdG9yLnJldHVybiA/IGl0ZXJhdG9yLnJldHVybigpLnRoZW4oZnVuY3Rpb24oKSB7IHJldHVybiBlcnJvcjsgfSkgOiBlcnJvcik7XG5cdFx0fVxuXHR9XG5cdHJldHVybiBQcm9taXNlLnJlc29sdmUoX2Zvck9mKHRhcmdldCwgZnVuY3Rpb24odmFsdWUpIHsgcmV0dXJuIFByb21pc2UucmVzb2x2ZSh2YWx1ZSkudGhlbihib2R5KTsgfSwgY2hlY2spKTtcbn1cblxuLy8gQXN5bmNocm9ub3VzbHkgaW1wbGVtZW50IGEgZ2VuZXJpYyBmb3IgbG9vcFxuZXhwb3J0IGZ1bmN0aW9uIF9mb3IodGVzdCwgdXBkYXRlLCBib2R5KSB7XG5cdHZhciBzdGFnZTtcblx0Zm9yICg7Oykge1xuXHRcdHZhciBzaG91bGRDb250aW51ZSA9IHRlc3QoKTtcblx0XHRpZiAoX2lzU2V0dGxlZFBhY3Qoc2hvdWxkQ29udGludWUpKSB7XG5cdFx0XHRzaG91bGRDb250aW51ZSA9IHNob3VsZENvbnRpbnVlLnY7XG5cdFx0fVxuXHRcdGlmICghc2hvdWxkQ29udGludWUpIHtcblx0XHRcdHJldHVybiByZXN1bHQ7XG5cdFx0fVxuXHRcdGlmIChzaG91bGRDb250aW51ZS50aGVuKSB7XG5cdFx0XHRzdGFnZSA9IDA7XG5cdFx0XHRicmVhaztcblx0XHR9XG5cdFx0dmFyIHJlc3VsdCA9IGJvZHkoKTtcblx0XHRpZiAocmVzdWx0ICYmIHJlc3VsdC50aGVuKSB7XG5cdFx0XHRpZiAoX2lzU2V0dGxlZFBhY3QocmVzdWx0KSkge1xuXHRcdFx0XHRyZXN1bHQgPSByZXN1bHQucztcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHN0YWdlID0gMTtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdGlmICh1cGRhdGUpIHtcblx0XHRcdHZhciB1cGRhdGVWYWx1ZSA9IHVwZGF0ZSgpO1xuXHRcdFx0aWYgKHVwZGF0ZVZhbHVlICYmIHVwZGF0ZVZhbHVlLnRoZW4gJiYgIV9pc1NldHRsZWRQYWN0KHVwZGF0ZVZhbHVlKSkge1xuXHRcdFx0XHRzdGFnZSA9IDI7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXHR2YXIgcGFjdCA9IG5ldyBfUGFjdCgpO1xuXHR2YXIgcmVqZWN0ID0gX3NldHRsZS5iaW5kKG51bGwsIHBhY3QsIDIpO1xuXHQoc3RhZ2UgPT09IDAgPyBzaG91bGRDb250aW51ZS50aGVuKF9yZXN1bWVBZnRlclRlc3QpIDogc3RhZ2UgPT09IDEgPyByZXN1bHQudGhlbihfcmVzdW1lQWZ0ZXJCb2R5KSA6IHVwZGF0ZVZhbHVlLnRoZW4oX3Jlc3VtZUFmdGVyVXBkYXRlKSkudGhlbih2b2lkIDAsIHJlamVjdCk7XG5cdHJldHVybiBwYWN0O1xuXHRmdW5jdGlvbiBfcmVzdW1lQWZ0ZXJCb2R5KHZhbHVlKSB7XG5cdFx0cmVzdWx0ID0gdmFsdWU7XG5cdFx0ZG8ge1xuXHRcdFx0aWYgKHVwZGF0ZSkge1xuXHRcdFx0XHR1cGRhdGVWYWx1ZSA9IHVwZGF0ZSgpO1xuXHRcdFx0XHRpZiAodXBkYXRlVmFsdWUgJiYgdXBkYXRlVmFsdWUudGhlbiAmJiAhX2lzU2V0dGxlZFBhY3QodXBkYXRlVmFsdWUpKSB7XG5cdFx0XHRcdFx0dXBkYXRlVmFsdWUudGhlbihfcmVzdW1lQWZ0ZXJVcGRhdGUpLnRoZW4odm9pZCAwLCByZWplY3QpO1xuXHRcdFx0XHRcdHJldHVybjtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0c2hvdWxkQ29udGludWUgPSB0ZXN0KCk7XG5cdFx0XHRpZiAoIXNob3VsZENvbnRpbnVlIHx8IChfaXNTZXR0bGVkUGFjdChzaG91bGRDb250aW51ZSkgJiYgIXNob3VsZENvbnRpbnVlLnYpKSB7XG5cdFx0XHRcdF9zZXR0bGUocGFjdCwgMSwgcmVzdWx0KTtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXHRcdFx0aWYgKHNob3VsZENvbnRpbnVlLnRoZW4pIHtcblx0XHRcdFx0c2hvdWxkQ29udGludWUudGhlbihfcmVzdW1lQWZ0ZXJUZXN0KS50aGVuKHZvaWQgMCwgcmVqZWN0KTtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXHRcdFx0cmVzdWx0ID0gYm9keSgpO1xuXHRcdFx0aWYgKF9pc1NldHRsZWRQYWN0KHJlc3VsdCkpIHtcblx0XHRcdFx0cmVzdWx0ID0gcmVzdWx0LnY7XG5cdFx0XHR9XG5cdFx0fSB3aGlsZSAoIXJlc3VsdCB8fCAhcmVzdWx0LnRoZW4pO1xuXHRcdHJlc3VsdC50aGVuKF9yZXN1bWVBZnRlckJvZHkpLnRoZW4odm9pZCAwLCByZWplY3QpO1xuXHR9XG5cdGZ1bmN0aW9uIF9yZXN1bWVBZnRlclRlc3Qoc2hvdWxkQ29udGludWUpIHtcblx0XHRpZiAoc2hvdWxkQ29udGludWUpIHtcblx0XHRcdHJlc3VsdCA9IGJvZHkoKTtcblx0XHRcdGlmIChyZXN1bHQgJiYgcmVzdWx0LnRoZW4pIHtcblx0XHRcdFx0cmVzdWx0LnRoZW4oX3Jlc3VtZUFmdGVyQm9keSkudGhlbih2b2lkIDAsIHJlamVjdCk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRfcmVzdW1lQWZ0ZXJCb2R5KHJlc3VsdCk7XG5cdFx0XHR9XG5cdFx0fSBlbHNlIHtcblx0XHRcdF9zZXR0bGUocGFjdCwgMSwgcmVzdWx0KTtcblx0XHR9XG5cdH1cblx0ZnVuY3Rpb24gX3Jlc3VtZUFmdGVyVXBkYXRlKCkge1xuXHRcdGlmIChzaG91bGRDb250aW51ZSA9IHRlc3QoKSkge1xuXHRcdFx0aWYgKHNob3VsZENvbnRpbnVlLnRoZW4pIHtcblx0XHRcdFx0c2hvdWxkQ29udGludWUudGhlbihfcmVzdW1lQWZ0ZXJUZXN0KS50aGVuKHZvaWQgMCwgcmVqZWN0KTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdF9yZXN1bWVBZnRlclRlc3Qoc2hvdWxkQ29udGludWUpO1xuXHRcdFx0fVxuXHRcdH0gZWxzZSB7XG5cdFx0XHRfc2V0dGxlKHBhY3QsIDEsIHJlc3VsdCk7XG5cdFx0fVxuXHR9XG59XG5cbi8vIEFzeW5jaHJvbm91c2x5IGltcGxlbWVudCBhIGRvIC4uLiB3aGlsZSBsb29wXG5leHBvcnQgZnVuY3Rpb24gX2RvKGJvZHksIHRlc3QpIHtcblx0dmFyIGF3YWl0Qm9keTtcblx0ZG8ge1xuXHRcdHZhciByZXN1bHQgPSBib2R5KCk7XG5cdFx0aWYgKHJlc3VsdCAmJiByZXN1bHQudGhlbikge1xuXHRcdFx0aWYgKF9pc1NldHRsZWRQYWN0KHJlc3VsdCkpIHtcblx0XHRcdFx0cmVzdWx0ID0gcmVzdWx0LnY7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRhd2FpdEJvZHkgPSB0cnVlO1xuXHRcdFx0XHRicmVhaztcblx0XHRcdH1cblx0XHR9XG5cdFx0dmFyIHNob3VsZENvbnRpbnVlID0gdGVzdCgpO1xuXHRcdGlmIChfaXNTZXR0bGVkUGFjdChzaG91bGRDb250aW51ZSkpIHtcblx0XHRcdHNob3VsZENvbnRpbnVlID0gc2hvdWxkQ29udGludWUudjtcblx0XHR9XG5cdFx0aWYgKCFzaG91bGRDb250aW51ZSkge1xuXHRcdFx0cmV0dXJuIHJlc3VsdDtcblx0XHR9XG5cdH0gd2hpbGUgKCFzaG91bGRDb250aW51ZS50aGVuKTtcblx0Y29uc3QgcGFjdCA9IG5ldyBfUGFjdCgpO1xuXHRjb25zdCByZWplY3QgPSBfc2V0dGxlLmJpbmQobnVsbCwgcGFjdCwgMik7XG5cdChhd2FpdEJvZHkgPyByZXN1bHQudGhlbihfcmVzdW1lQWZ0ZXJCb2R5KSA6IHNob3VsZENvbnRpbnVlLnRoZW4oX3Jlc3VtZUFmdGVyVGVzdCkpLnRoZW4odm9pZCAwLCByZWplY3QpO1xuXHRyZXR1cm4gcGFjdDtcblx0ZnVuY3Rpb24gX3Jlc3VtZUFmdGVyQm9keSh2YWx1ZSkge1xuXHRcdHJlc3VsdCA9IHZhbHVlO1xuXHRcdGZvciAoOzspIHtcblx0XHRcdHNob3VsZENvbnRpbnVlID0gdGVzdCgpO1xuXHRcdFx0aWYgKF9pc1NldHRsZWRQYWN0KHNob3VsZENvbnRpbnVlKSkge1xuXHRcdFx0XHRzaG91bGRDb250aW51ZSA9IHNob3VsZENvbnRpbnVlLnY7XG5cdFx0XHR9XG5cdFx0XHRpZiAoIXNob3VsZENvbnRpbnVlKSB7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0fVxuXHRcdFx0aWYgKHNob3VsZENvbnRpbnVlLnRoZW4pIHtcblx0XHRcdFx0c2hvdWxkQ29udGludWUudGhlbihfcmVzdW1lQWZ0ZXJUZXN0KS50aGVuKHZvaWQgMCwgcmVqZWN0KTtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXHRcdFx0cmVzdWx0ID0gYm9keSgpO1xuXHRcdFx0aWYgKHJlc3VsdCAmJiByZXN1bHQudGhlbikge1xuXHRcdFx0XHRpZiAoX2lzU2V0dGxlZFBhY3QocmVzdWx0KSkge1xuXHRcdFx0XHRcdHJlc3VsdCA9IHJlc3VsdC52O1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdHJlc3VsdC50aGVuKF9yZXN1bWVBZnRlckJvZHkpLnRoZW4odm9pZCAwLCByZWplY3QpO1xuXHRcdFx0XHRcdHJldHVybjtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0XHRfc2V0dGxlKHBhY3QsIDEsIHJlc3VsdCk7XG5cdH1cblx0ZnVuY3Rpb24gX3Jlc3VtZUFmdGVyVGVzdChzaG91bGRDb250aW51ZSkge1xuXHRcdGlmIChzaG91bGRDb250aW51ZSkge1xuXHRcdFx0ZG8ge1xuXHRcdFx0XHRyZXN1bHQgPSBib2R5KCk7XG5cdFx0XHRcdGlmIChyZXN1bHQgJiYgcmVzdWx0LnRoZW4pIHtcblx0XHRcdFx0XHRpZiAoX2lzU2V0dGxlZFBhY3QocmVzdWx0KSkge1xuXHRcdFx0XHRcdFx0cmVzdWx0ID0gcmVzdWx0LnY7XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdHJlc3VsdC50aGVuKF9yZXN1bWVBZnRlckJvZHkpLnRoZW4odm9pZCAwLCByZWplY3QpO1xuXHRcdFx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0XHRzaG91bGRDb250aW51ZSA9IHRlc3QoKTtcblx0XHRcdFx0aWYgKF9pc1NldHRsZWRQYWN0KHNob3VsZENvbnRpbnVlKSkge1xuXHRcdFx0XHRcdHNob3VsZENvbnRpbnVlID0gc2hvdWxkQ29udGludWUudjtcblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAoIXNob3VsZENvbnRpbnVlKSB7XG5cdFx0XHRcdFx0X3NldHRsZShwYWN0LCAxLCByZXN1bHQpO1xuXHRcdFx0XHRcdHJldHVybjtcblx0XHRcdFx0fVxuXHRcdFx0fSB3aGlsZSAoIXNob3VsZENvbnRpbnVlLnRoZW4pO1xuXHRcdFx0c2hvdWxkQ29udGludWUudGhlbihfcmVzdW1lQWZ0ZXJUZXN0KS50aGVuKHZvaWQgMCwgcmVqZWN0KTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0X3NldHRsZShwYWN0LCAxLCByZXN1bHQpO1xuXHRcdH1cblx0fVxufVxuXG4vLyBBc3luY2hyb25vdXNseSBpbXBsZW1lbnQgYSBzd2l0Y2ggc3RhdGVtZW50XG5leHBvcnQgZnVuY3Rpb24gX3N3aXRjaChkaXNjcmltaW5hbnQsIGNhc2VzKSB7XG5cdHZhciBkaXNwYXRjaEluZGV4ID0gLTE7XG5cdHZhciBhd2FpdEJvZHk7XG5cdG91dGVyOiB7XG5cdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBjYXNlcy5sZW5ndGg7IGkrKykge1xuXHRcdFx0dmFyIHRlc3QgPSBjYXNlc1tpXVswXTtcblx0XHRcdGlmICh0ZXN0KSB7XG5cdFx0XHRcdHZhciB0ZXN0VmFsdWUgPSB0ZXN0KCk7XG5cdFx0XHRcdGlmICh0ZXN0VmFsdWUgJiYgdGVzdFZhbHVlLnRoZW4pIHtcblx0XHRcdFx0XHRicmVhayBvdXRlcjtcblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAodGVzdFZhbHVlID09PSBkaXNjcmltaW5hbnQpIHtcblx0XHRcdFx0XHRkaXNwYXRjaEluZGV4ID0gaTtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0Ly8gRm91bmQgdGhlIGRlZmF1bHQgY2FzZSwgc2V0IGl0IGFzIHRoZSBwZW5kaW5nIGRpc3BhdGNoIGNhc2Vcblx0XHRcdFx0ZGlzcGF0Y2hJbmRleCA9IGk7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdGlmIChkaXNwYXRjaEluZGV4ICE9PSAtMSkge1xuXHRcdFx0ZG8ge1xuXHRcdFx0XHR2YXIgYm9keSA9IGNhc2VzW2Rpc3BhdGNoSW5kZXhdWzFdO1xuXHRcdFx0XHR3aGlsZSAoIWJvZHkpIHtcblx0XHRcdFx0XHRkaXNwYXRjaEluZGV4Kys7XG5cdFx0XHRcdFx0Ym9keSA9IGNhc2VzW2Rpc3BhdGNoSW5kZXhdWzFdO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHZhciByZXN1bHQgPSBib2R5KCk7XG5cdFx0XHRcdGlmIChyZXN1bHQgJiYgcmVzdWx0LnRoZW4pIHtcblx0XHRcdFx0XHRhd2FpdEJvZHkgPSB0cnVlO1xuXHRcdFx0XHRcdGJyZWFrIG91dGVyO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHZhciBmYWxsdGhyb3VnaENoZWNrID0gY2FzZXNbZGlzcGF0Y2hJbmRleF1bMl07XG5cdFx0XHRcdGRpc3BhdGNoSW5kZXgrKztcblx0XHRcdH0gd2hpbGUgKGZhbGx0aHJvdWdoQ2hlY2sgJiYgIWZhbGx0aHJvdWdoQ2hlY2soKSk7XG5cdFx0XHRyZXR1cm4gcmVzdWx0O1xuXHRcdH1cblx0fVxuXHRjb25zdCBwYWN0ID0gbmV3IF9QYWN0KCk7XG5cdGNvbnN0IHJlamVjdCA9IF9zZXR0bGUuYmluZChudWxsLCBwYWN0LCAyKTtcblx0KGF3YWl0Qm9keSA/IHJlc3VsdC50aGVuKF9yZXN1bWVBZnRlckJvZHkpIDogdGVzdFZhbHVlLnRoZW4oX3Jlc3VtZUFmdGVyVGVzdCkpLnRoZW4odm9pZCAwLCByZWplY3QpO1xuXHRyZXR1cm4gcGFjdDtcblx0ZnVuY3Rpb24gX3Jlc3VtZUFmdGVyVGVzdCh2YWx1ZSkge1xuXHRcdGZvciAoOzspIHtcblx0XHRcdGlmICh2YWx1ZSA9PT0gZGlzY3JpbWluYW50KSB7XG5cdFx0XHRcdGRpc3BhdGNoSW5kZXggPSBpO1xuXHRcdFx0XHRicmVhaztcblx0XHRcdH1cblx0XHRcdGlmICgrK2kgPT09IGNhc2VzLmxlbmd0aCkge1xuXHRcdFx0XHRpZiAoZGlzcGF0Y2hJbmRleCAhPT0gLTEpIHtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRfc2V0dGxlKHBhY3QsIDEsIHJlc3VsdCk7XG5cdFx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHR0ZXN0ID0gY2FzZXNbaV1bMF07XG5cdFx0XHRpZiAodGVzdCkge1xuXHRcdFx0XHR2YWx1ZSA9IHRlc3QoKTtcblx0XHRcdFx0aWYgKHZhbHVlICYmIHZhbHVlLnRoZW4pIHtcblx0XHRcdFx0XHR2YWx1ZS50aGVuKF9yZXN1bWVBZnRlclRlc3QpLnRoZW4odm9pZCAwLCByZWplY3QpO1xuXHRcdFx0XHRcdHJldHVybjtcblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0ZGlzcGF0Y2hJbmRleCA9IGk7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdGRvIHtcblx0XHRcdHZhciBib2R5ID0gY2FzZXNbZGlzcGF0Y2hJbmRleF1bMV07XG5cdFx0XHR3aGlsZSAoIWJvZHkpIHtcblx0XHRcdFx0ZGlzcGF0Y2hJbmRleCsrO1xuXHRcdFx0XHRib2R5ID0gY2FzZXNbZGlzcGF0Y2hJbmRleF1bMV07XG5cdFx0XHR9XG5cdFx0XHR2YXIgcmVzdWx0ID0gYm9keSgpO1xuXHRcdFx0aWYgKHJlc3VsdCAmJiByZXN1bHQudGhlbikge1xuXHRcdFx0XHRyZXN1bHQudGhlbihfcmVzdW1lQWZ0ZXJCb2R5KS50aGVuKHZvaWQgMCwgcmVqZWN0KTtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXHRcdFx0dmFyIGZhbGx0aHJvdWdoQ2hlY2sgPSBjYXNlc1tkaXNwYXRjaEluZGV4XVsyXTtcblx0XHRcdGRpc3BhdGNoSW5kZXgrKztcblx0XHR9IHdoaWxlIChmYWxsdGhyb3VnaENoZWNrICYmICFmYWxsdGhyb3VnaENoZWNrKCkpO1xuXHRcdF9zZXR0bGUocGFjdCwgMSwgcmVzdWx0KTtcblx0fVxuXHRmdW5jdGlvbiBfcmVzdW1lQWZ0ZXJCb2R5KHJlc3VsdCkge1xuXHRcdGZvciAoOzspIHtcblx0XHRcdHZhciBmYWxsdGhyb3VnaENoZWNrID0gY2FzZXNbZGlzcGF0Y2hJbmRleF1bMl07XG5cdFx0XHRpZiAoIWZhbGx0aHJvdWdoQ2hlY2sgfHwgZmFsbHRocm91Z2hDaGVjaygpKSB7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0fVxuXHRcdFx0ZGlzcGF0Y2hJbmRleCsrO1xuXHRcdFx0dmFyIGJvZHkgPSBjYXNlc1tkaXNwYXRjaEluZGV4XVsxXTtcblx0XHRcdHdoaWxlICghYm9keSkge1xuXHRcdFx0XHRkaXNwYXRjaEluZGV4Kys7XG5cdFx0XHRcdGJvZHkgPSBjYXNlc1tkaXNwYXRjaEluZGV4XVsxXTtcblx0XHRcdH1cblx0XHRcdHJlc3VsdCA9IGJvZHkoKTtcblx0XHRcdGlmIChyZXN1bHQgJiYgcmVzdWx0LnRoZW4pIHtcblx0XHRcdFx0cmVzdWx0LnRoZW4oX3Jlc3VtZUFmdGVyQm9keSkudGhlbih2b2lkIDAsIHJlamVjdCk7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblx0XHR9XG5cdFx0X3NldHRsZShwYWN0LCAxLCByZXN1bHQpO1xuXHR9XG59XG5cbi8vIEFzeW5jaHJvbm91c2x5IGNhbGwgYSBmdW5jdGlvbiBhbmQgcGFzcyB0aGUgcmVzdWx0IHRvIGV4cGxpY2l0bHkgcGFzc2VkIGNvbnRpbnVhdGlvbnNcbmV4cG9ydCBmdW5jdGlvbiBfY2FsbChib2R5LCB0aGVuLCBkaXJlY3QpIHtcblx0aWYgKGRpcmVjdCkge1xuXHRcdHJldHVybiB0aGVuID8gdGhlbihib2R5KCkpIDogYm9keSgpO1xuXHR9XG5cdHRyeSB7XG5cdFx0dmFyIHJlc3VsdCA9IFByb21pc2UucmVzb2x2ZShib2R5KCkpO1xuXHRcdHJldHVybiB0aGVuID8gcmVzdWx0LnRoZW4odGhlbikgOiByZXN1bHQ7XG5cdH0gY2F0Y2ggKGUpIHtcblx0XHRyZXR1cm4gUHJvbWlzZS5yZWplY3QoZSk7XG5cdH1cbn1cblxuLy8gQXN5bmNocm9ub3VzbHkgY2FsbCBhIGZ1bmN0aW9uIGFuZCBzd2FsbG93IHRoZSByZXN1bHRcbmV4cG9ydCBmdW5jdGlvbiBfY2FsbElnbm9yZWQoYm9keSwgZGlyZWN0KSB7XG5cdHJldHVybiBfY2FsbChib2R5LCBfZW1wdHksIGRpcmVjdCk7XG59XG5cbi8vIEFzeW5jaHJvbm91c2x5IGNhbGwgYSBmdW5jdGlvbiBhbmQgcGFzcyB0aGUgcmVzdWx0IHRvIGV4cGxpY2l0bHkgcGFzc2VkIGNvbnRpbnVhdGlvbnNcbmV4cG9ydCBmdW5jdGlvbiBfaW52b2tlKGJvZHksIHRoZW4pIHtcblx0dmFyIHJlc3VsdCA9IGJvZHkoKTtcblx0aWYgKHJlc3VsdCAmJiByZXN1bHQudGhlbikge1xuXHRcdHJldHVybiByZXN1bHQudGhlbih0aGVuKTtcblx0fVxuXHRyZXR1cm4gdGhlbihyZXN1bHQpO1xufVxuXG4vLyBBc3luY2hyb25vdXNseSBjYWxsIGEgZnVuY3Rpb24gYW5kIHN3YWxsb3cgdGhlIHJlc3VsdFxuZXhwb3J0IGZ1bmN0aW9uIF9pbnZva2VJZ25vcmVkKGJvZHkpIHtcblx0dmFyIHJlc3VsdCA9IGJvZHkoKTtcblx0aWYgKHJlc3VsdCAmJiByZXN1bHQudGhlbikge1xuXHRcdHJldHVybiByZXN1bHQudGhlbihfZW1wdHkpO1xuXHR9XG59XG5cbi8vIEFzeW5jaHJvbm91c2x5IGNhbGwgYSBmdW5jdGlvbiBhbmQgc2VuZCBlcnJvcnMgdG8gcmVjb3ZlcnkgY29udGludWF0aW9uXG5leHBvcnQgZnVuY3Rpb24gX2NhdGNoKGJvZHksIHJlY292ZXIpIHtcblx0dHJ5IHtcblx0XHR2YXIgcmVzdWx0ID0gYm9keSgpO1xuXHR9IGNhdGNoKGUpIHtcblx0XHRyZXR1cm4gcmVjb3ZlcihlKTtcblx0fVxuXHRpZiAocmVzdWx0ICYmIHJlc3VsdC50aGVuKSB7XG5cdFx0cmV0dXJuIHJlc3VsdC50aGVuKHZvaWQgMCwgcmVjb3Zlcik7XG5cdH1cblx0cmV0dXJuIHJlc3VsdDtcbn1cblxuLy8gQXN5bmNocm9ub3VzbHkgYXdhaXQgYSBwcm9taXNlIGFuZCBwYXNzIHRoZSByZXN1bHQgdG8gYSBmaW5hbGx5IGNvbnRpbnVhdGlvblxuZXhwb3J0IGZ1bmN0aW9uIF9maW5hbGx5UmV0aHJvd3MoYm9keSwgZmluYWxpemVyKSB7XG5cdHRyeSB7XG5cdFx0dmFyIHJlc3VsdCA9IGJvZHkoKTtcblx0fSBjYXRjaCAoZSkge1xuXHRcdHJldHVybiBmaW5hbGl6ZXIodHJ1ZSwgZSk7XG5cdH1cblx0aWYgKHJlc3VsdCAmJiByZXN1bHQudGhlbikge1xuXHRcdHJldHVybiByZXN1bHQudGhlbihmaW5hbGl6ZXIuYmluZChudWxsLCBmYWxzZSksIGZpbmFsaXplci5iaW5kKG51bGwsIHRydWUpKTtcblx0fVxuXHRyZXR1cm4gZmluYWxpemVyKGZhbHNlLCByZXN1bHQpO1xufVxuXG4vLyBBc3luY2hyb25vdXNseSBhd2FpdCBhIHByb21pc2UgYW5kIGludm9rZSBhIGZpbmFsbHkgY29udGludWF0aW9uIHRoYXQgYWx3YXlzIG92ZXJyaWRlcyB0aGUgcmVzdWx0XG5leHBvcnQgZnVuY3Rpb24gX2ZpbmFsbHkoYm9keSwgZmluYWxpemVyKSB7XG5cdHRyeSB7XG5cdFx0dmFyIHJlc3VsdCA9IGJvZHkoKTtcblx0fSBjYXRjaCAoZSkge1xuXHRcdHJldHVybiBmaW5hbGl6ZXIoKTtcblx0fVxuXHRpZiAocmVzdWx0ICYmIHJlc3VsdC50aGVuKSB7XG5cdFx0cmV0dXJuIHJlc3VsdC50aGVuKGZpbmFsaXplciwgZmluYWxpemVyKTtcblx0fVxuXHRyZXR1cm4gZmluYWxpemVyKCk7XG59XG5cbi8vIFJldGhyb3cgb3IgcmV0dXJuIGEgdmFsdWUgZnJvbSBhIGZpbmFsbHkgY29udGludWF0aW9uXG5leHBvcnQgZnVuY3Rpb24gX3JldGhyb3codGhyb3duLCB2YWx1ZSkge1xuXHRpZiAodGhyb3duKVxuXHRcdHRocm93IHZhbHVlO1xuXHRyZXR1cm4gdmFsdWU7XG59XG5cbi8vIEVtcHR5IGZ1bmN0aW9uIHRvIGltcGxlbWVudCBicmVhayBhbmQgb3RoZXIgY29udHJvbCBmbG93IHRoYXQgaWdub3JlcyBhc3luY2hyb25vdXMgcmVzdWx0c1xuZXhwb3J0IGZ1bmN0aW9uIF9lbXB0eSgpIHtcbn1cblxuLy8gU2VudGluZWwgdmFsdWUgZm9yIGVhcmx5IHJldHVybnMgaW4gZ2VuZXJhdG9ycyBcbmV4cG9ydCBjb25zdCBfZWFybHlSZXR1cm4gPSAvKiNfX1BVUkVfXyovIHt9O1xuXG4vLyBBc3luY2hyb25vdXNseSBjYWxsIGEgZnVuY3Rpb24gYW5kIHNlbmQgZXJyb3JzIHRvIHJlY292ZXJ5IGNvbnRpbnVhdGlvbiwgc2tpcHBpbmcgZWFybHkgcmV0dXJuc1xuZXhwb3J0IGZ1bmN0aW9uIF9jYXRjaEluR2VuZXJhdG9yKGJvZHksIHJlY292ZXIpIHtcblx0cmV0dXJuIF9jYXRjaChib2R5LCBmdW5jdGlvbihlKSB7XG5cdFx0aWYgKGUgPT09IF9lYXJseVJldHVybikge1xuXHRcdFx0dGhyb3cgZTtcblx0XHR9XG5cdFx0cmV0dXJuIHJlY292ZXIoZSk7XG5cdH0pO1xufVxuXG4vLyBBc3luY2hyb25vdXMgZ2VuZXJhdG9yIGNsYXNzOyBhY2NlcHRzIHRoZSBlbnRyeXBvaW50IG9mIHRoZSBnZW5lcmF0b3IsIHRvIHdoaWNoIGl0IHBhc3NlcyBpdHNlbGYgd2hlbiB0aGUgZ2VuZXJhdG9yIHNob3VsZCBzdGFydFxuZXhwb3J0IGNvbnN0IF9Bc3luY0dlbmVyYXRvciA9IC8qI19fUFVSRV9fKi8oZnVuY3Rpb24oKSB7XG5cdGZ1bmN0aW9uIF9Bc3luY0dlbmVyYXRvcihlbnRyeSkge1xuXHRcdHRoaXMuX2VudHJ5ID0gZW50cnk7XG5cdFx0dGhpcy5fcGFjdCA9IG51bGw7XG5cdFx0dGhpcy5fcmVzb2x2ZSA9IG51bGw7XG5cdFx0dGhpcy5fcmV0dXJuID0gbnVsbDtcblx0XHR0aGlzLl9wcm9taXNlID0gbnVsbDtcblx0fVxuXG5cdGZ1bmN0aW9uIF93cmFwUmV0dXJuZWRWYWx1ZSh2YWx1ZSkge1xuXHRcdHJldHVybiB7IHZhbHVlOiB2YWx1ZSwgZG9uZTogdHJ1ZSB9O1xuXHR9XG5cdGZ1bmN0aW9uIF93cmFwWWllbGRlZFZhbHVlKHZhbHVlKSB7XG5cdFx0cmV0dXJuIHsgdmFsdWU6IHZhbHVlLCBkb25lOiBmYWxzZSB9O1xuXHR9XG5cblx0X0FzeW5jR2VuZXJhdG9yLnByb3RvdHlwZS5feWllbGQgPSBmdW5jdGlvbih2YWx1ZSkge1xuXHRcdC8vIFlpZWxkIHRoZSB2YWx1ZSB0byB0aGUgcGVuZGluZyBuZXh0IGNhbGxcblx0XHR0aGlzLl9yZXNvbHZlKHZhbHVlICYmIHZhbHVlLnRoZW4gPyB2YWx1ZS50aGVuKF93cmFwWWllbGRlZFZhbHVlKSA6IF93cmFwWWllbGRlZFZhbHVlKHZhbHVlKSk7XG5cdFx0Ly8gUmV0dXJuIGEgcGFjdCBmb3IgYW4gdXBjb21pbmcgbmV4dC9yZXR1cm4vdGhyb3cgY2FsbFxuXHRcdHJldHVybiB0aGlzLl9wYWN0ID0gbmV3IF9QYWN0KCk7XG5cdH07XG5cdF9Bc3luY0dlbmVyYXRvci5wcm90b3R5cGUubmV4dCA9IGZ1bmN0aW9uKHZhbHVlKSB7XG5cdFx0Ly8gQWR2YW5jZSB0aGUgZ2VuZXJhdG9yLCBzdGFydGluZyBpdCBpZiBpdCBoYXMgeWV0IHRvIGJlIHN0YXJ0ZWRcblx0XHRjb25zdCBfdGhpcyA9IHRoaXM7XG5cdFx0cmV0dXJuIF90aGlzLl9wcm9taXNlID0gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUpIHtcblx0XHRcdGNvbnN0IF9wYWN0ID0gX3RoaXMuX3BhY3Q7XG5cdFx0XHRpZiAoX3BhY3QgPT09IG51bGwpIHtcblx0XHRcdFx0Y29uc3QgX2VudHJ5ID0gX3RoaXMuX2VudHJ5O1xuXHRcdFx0XHRpZiAoX2VudHJ5ID09PSBudWxsKSB7XG5cdFx0XHRcdFx0Ly8gR2VuZXJhdG9yIGlzIHN0YXJ0ZWQsIGJ1dCBub3QgYXdhaXRpbmcgYSB5aWVsZCBleHByZXNzaW9uXG5cdFx0XHRcdFx0Ly8gQWJhbmRvbiB0aGUgbmV4dCBjYWxsIVxuXHRcdFx0XHRcdHJldHVybiByZXNvbHZlKF90aGlzLl9wcm9taXNlKTtcblx0XHRcdFx0fVxuXHRcdFx0XHQvLyBTdGFydCB0aGUgZ2VuZXJhdG9yXG5cdFx0XHRcdF90aGlzLl9lbnRyeSA9IG51bGw7XG5cdFx0XHRcdF90aGlzLl9yZXNvbHZlID0gcmVzb2x2ZTtcblx0XHRcdFx0ZnVuY3Rpb24gcmV0dXJuVmFsdWUodmFsdWUpIHtcblx0XHRcdFx0XHRfdGhpcy5fcmVzb2x2ZSh2YWx1ZSAmJiB2YWx1ZS50aGVuID8gdmFsdWUudGhlbihfd3JhcFJldHVybmVkVmFsdWUpIDogX3dyYXBSZXR1cm5lZFZhbHVlKHZhbHVlKSk7XG5cdFx0XHRcdFx0X3RoaXMuX3BhY3QgPSBudWxsO1xuXHRcdFx0XHRcdF90aGlzLl9yZXNvbHZlID0gbnVsbDtcblx0XHRcdFx0fVxuXHRcdFx0XHR2YXIgcmVzdWx0ID0gX2VudHJ5KF90aGlzKTtcblx0XHRcdFx0aWYgKHJlc3VsdCAmJiByZXN1bHQudGhlbikge1xuXHRcdFx0XHRcdHJlc3VsdC50aGVuKHJldHVyblZhbHVlLCBmdW5jdGlvbihlcnJvcikge1xuXHRcdFx0XHRcdFx0aWYgKGVycm9yID09PSBfZWFybHlSZXR1cm4pIHtcblx0XHRcdFx0XHRcdFx0cmV0dXJuVmFsdWUoX3RoaXMuX3JldHVybik7XG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRjb25zdCBwYWN0ID0gbmV3IF9QYWN0KCk7XG5cdFx0XHRcdFx0XHRcdF90aGlzLl9yZXNvbHZlKHBhY3QpO1xuXHRcdFx0XHRcdFx0XHRfdGhpcy5fcGFjdCA9IG51bGw7XG5cdFx0XHRcdFx0XHRcdF90aGlzLl9yZXNvbHZlID0gbnVsbDtcblx0XHRcdFx0XHRcdFx0X3Jlc29sdmUocGFjdCwgMiwgZXJyb3IpO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH0pO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdHJldHVyblZhbHVlKHJlc3VsdCk7XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdC8vIEdlbmVyYXRvciBpcyBzdGFydGVkIGFuZCBhIHlpZWxkIGV4cHJlc3Npb24gaXMgcGVuZGluZywgc2V0dGxlIGl0XG5cdFx0XHRcdF90aGlzLl9wYWN0ID0gbnVsbDtcblx0XHRcdFx0X3RoaXMuX3Jlc29sdmUgPSByZXNvbHZlO1xuXHRcdFx0XHRfc2V0dGxlKF9wYWN0LCAxLCB2YWx1ZSk7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdH07XG5cdF9Bc3luY0dlbmVyYXRvci5wcm90b3R5cGUucmV0dXJuID0gZnVuY3Rpb24odmFsdWUpIHtcblx0XHQvLyBFYXJseSByZXR1cm4gZnJvbSB0aGUgZ2VuZXJhdG9yIGlmIHN0YXJ0ZWQsIG90aGVyd2lzZSBhYmFuZG9ucyB0aGUgZ2VuZXJhdG9yXG5cdFx0Y29uc3QgX3RoaXMgPSB0aGlzO1xuXHRcdHJldHVybiBfdGhpcy5fcHJvbWlzZSA9IG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlKSB7XG5cdFx0XHRjb25zdCBfcGFjdCA9IF90aGlzLl9wYWN0O1xuXHRcdFx0aWYgKF9wYWN0ID09PSBudWxsKSB7XG5cdFx0XHRcdGlmIChfdGhpcy5fZW50cnkgPT09IG51bGwpIHtcblx0XHRcdFx0XHQvLyBHZW5lcmF0b3IgaXMgc3RhcnRlZCwgYnV0IG5vdCBhd2FpdGluZyBhIHlpZWxkIGV4cHJlc3Npb25cblx0XHRcdFx0XHQvLyBBYmFuZG9uIHRoZSByZXR1cm4gY2FsbCFcblx0XHRcdFx0XHRyZXR1cm4gcmVzb2x2ZShfdGhpcy5fcHJvbWlzZSk7XG5cdFx0XHRcdH1cblx0XHRcdFx0Ly8gR2VuZXJhdG9yIGlzIG5vdCBzdGFydGVkLCBhYmFuZG9uIGl0IGFuZCByZXR1cm4gdGhlIHNwZWNpZmllZCB2YWx1ZVxuXHRcdFx0XHRfdGhpcy5fZW50cnkgPSBudWxsO1xuXHRcdFx0XHRyZXR1cm4gcmVzb2x2ZSh2YWx1ZSAmJiB2YWx1ZS50aGVuID8gdmFsdWUudGhlbihfd3JhcFJldHVybmVkVmFsdWUpIDogX3dyYXBSZXR1cm5lZFZhbHVlKHZhbHVlKSk7XG5cdFx0XHR9XG5cdFx0XHQvLyBTZXR0bGUgdGhlIHlpZWxkIGV4cHJlc3Npb24gd2l0aCBhIHJlamVjdGVkIFwiZWFybHkgcmV0dXJuXCIgdmFsdWVcblx0XHRcdF90aGlzLl9yZXR1cm4gPSB2YWx1ZTtcblx0XHRcdF90aGlzLl9yZXNvbHZlID0gcmVzb2x2ZTtcblx0XHRcdF90aGlzLl9wYWN0ID0gbnVsbDtcblx0XHRcdF9zZXR0bGUoX3BhY3QsIDIsIF9lYXJseVJldHVybik7XG5cdFx0fSk7XG5cdH07XG5cdF9Bc3luY0dlbmVyYXRvci5wcm90b3R5cGUudGhyb3cgPSBmdW5jdGlvbihlcnJvcikge1xuXHRcdC8vIEluamVjdCBhbiBleGNlcHRpb24gaW50byB0aGUgcGVuZGluZyB5aWVsZCBleHByZXNzaW9uXG5cdFx0Y29uc3QgX3RoaXMgPSB0aGlzO1xuXHRcdHJldHVybiBfdGhpcy5fcHJvbWlzZSA9IG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcblx0XHRcdGNvbnN0IF9wYWN0ID0gX3RoaXMuX3BhY3Q7XG5cdFx0XHRpZiAoX3BhY3QgPT09IG51bGwpIHtcblx0XHRcdFx0aWYgKF90aGlzLl9lbnRyeSA9PT0gbnVsbCkge1xuXHRcdFx0XHRcdC8vIEdlbmVyYXRvciBpcyBzdGFydGVkLCBidXQgbm90IGF3YWl0aW5nIGEgeWllbGQgZXhwcmVzc2lvblxuXHRcdFx0XHRcdC8vIEFiYW5kb24gdGhlIHRocm93IGNhbGwhXG5cdFx0XHRcdFx0cmV0dXJuIHJlc29sdmUoX3RoaXMuX3Byb21pc2UpO1xuXHRcdFx0XHR9XG5cdFx0XHRcdC8vIEdlbmVyYXRvciBpcyBub3Qgc3RhcnRlZCwgYWJhbmRvbiBpdCBhbmQgcmV0dXJuIGEgcmVqZWN0ZWQgUHJvbWlzZSBjb250YWluaW5nIHRoZSBlcnJvclxuXHRcdFx0XHRfdGhpcy5fZW50cnkgPSBudWxsO1xuXHRcdFx0XHRyZXR1cm4gcmVqZWN0KGVycm9yKTtcblx0XHRcdH1cblx0XHRcdC8vIFNldHRsZSB0aGUgeWllbGQgZXhwcmVzc2lvbiB3aXRoIHRoZSB2YWx1ZSBhcyBhIHJlamVjdGlvblxuXHRcdFx0X3RoaXMuX3Jlc29sdmUgPSByZXNvbHZlO1xuXHRcdFx0X3RoaXMuX3BhY3QgPSBudWxsO1xuXHRcdFx0X3NldHRsZShfcGFjdCwgMiwgZXJyb3IpO1xuXHRcdH0pO1xuXHR9O1xuXG5cdF9Bc3luY0dlbmVyYXRvci5wcm90b3R5cGVbX2FzeW5jSXRlcmF0b3JTeW1ib2xdID0gZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHRoaXM7XG5cdH07XG5cdFxuXHRyZXR1cm4gX0FzeW5jR2VuZXJhdG9yO1xufSkoKTtcbiIsIi8qKlxuICogQGJhcmJhL2NvcmUvbW9kdWxlcy9Mb2dnZXJcbiAqIDxicj48YnI+XG4gKiAjIyBMb2dnZXIuXG4gKlxuICogLSBEaXNwbGF5IGluZm9ybWF0aW9ucyB2aWEgdGhlIGNvbnNvbGVcbiAqXG4gKiBAbW9kdWxlIGNvcmUvbW9kdWxlcy9Mb2dnZXJcbiAqIEBwcmVmZXJyZWRcbiAqL1xuXG4vKioqL1xuXG4vKipcbiAqIExvZyBsZXZlbHMsIGFsbCBsb3dlciBsZXZlbCBtZXNzYWdlcyBhcmUgcHJpbnRlZFxuICpcbiAqIDAuIG11dGVcbiAqIDEuIGVycm9yID0gYGNvbnNvbGUuZXJyb3IoKWBcbiAqIDIuIHdhcm5pbmc9IGBjb25zb2xlLndhcm4oKWBcbiAqIDMuIGluZm8gPSBgY29uc29sZS5pbmZvKClgXG4gKiA0LiBkZWJ1ZyA9IGBjb25zb2xlLmxvZygpYFxuICovXG5leHBvcnQgZW51bSBMb2dMZXZlbHMge1xuICBvZmYgPSAwLFxuICBlcnJvciA9IDEsXG4gIHdhcm5pbmcgPSAyLFxuICBpbmZvID0gMyxcbiAgZGVidWcgPSA0LFxufVxuXG4vKipcbiAqIEdsb2JhbCBsb2cgbGV2ZWxcbiAqL1xubGV0IF9sZXZlbDogbnVtYmVyID0gTG9nTGV2ZWxzLm9mZjtcblxuZXhwb3J0IGNsYXNzIExvZ2dlciB7XG4gIC8qKlxuICAgKiBHZXQgZ2xvYmFsIGxvZyBsZXZlbC5cbiAgICovXG4gIHB1YmxpYyBzdGF0aWMgZ2V0TGV2ZWwoKTogbnVtYmVyIHtcbiAgICByZXR1cm4gX2xldmVsO1xuICB9XG5cbiAgLyoqXG4gICAqIFNldCBnbG9iYWwgbG9nIGxldmVsLlxuICAgKi9cbiAgcHVibGljIHN0YXRpYyBzZXRMZXZlbChuYW1lOiBrZXlvZiB0eXBlb2YgTG9nTGV2ZWxzKTogbnVtYmVyIHtcbiAgICBfbGV2ZWwgPSBMb2dMZXZlbHNbbmFtZV07XG5cbiAgICByZXR1cm4gX2xldmVsO1xuICB9XG5cbiAgLyoqXG4gICAqIExvZyBcInByZWZpeFwiLlxuICAgKi9cbiAgcHJpdmF0ZSBfc291cmNlOiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIENyZWF0ZXMgYW4gaW5zdGFuY2Ugb2YgTG9nZ2VyLlxuICAgKi9cbiAgY29uc3RydWN0b3Ioc291cmNlOiBzdHJpbmcpIHtcbiAgICB0aGlzLl9zb3VyY2UgPSBzb3VyY2U7XG4gIH1cblxuICAvKipcbiAgICogUGVybWFuZW50LCB1bnJlbW92YWJsZSBsb2cuXG4gICAqL1xuICAvLyBwdWJsaWMgcHJpbnQoLi4ub2JqZWN0czogYW55W10pOiB2b2lkIHtcbiAgLy8gICB0aGlzLl9sb2coY29uc29sZS5pbmZvLCBMb2dMZXZlbHMub2ZmLCBvYmplY3RzKTtcbiAgLy8gfVxuXG4gIC8qKlxuICAgKiBFcnJvciBsb2cuXG4gICAqL1xuICBwdWJsaWMgZXJyb3IoLi4ub2JqZWN0czogYW55W10pOiB2b2lkIHtcbiAgICB0aGlzLl9sb2coY29uc29sZS5lcnJvciwgTG9nTGV2ZWxzLmVycm9yLCBvYmplY3RzKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBXYXJuIGxvZy5cbiAgICovXG4gIHB1YmxpYyB3YXJuKC4uLm9iamVjdHM6IGFueVtdKTogdm9pZCB7XG4gICAgdGhpcy5fbG9nKGNvbnNvbGUud2FybiwgTG9nTGV2ZWxzLndhcm5pbmcsIG9iamVjdHMpO1xuICB9XG5cbiAgLyoqXG4gICAqIEluZm8gbG9nLlxuICAgKi9cbiAgcHVibGljIGluZm8oLi4ub2JqZWN0czogYW55W10pOiB2b2lkIHtcbiAgICB0aGlzLl9sb2coY29uc29sZS5pbmZvLCBMb2dMZXZlbHMuaW5mbywgb2JqZWN0cyk7XG4gIH1cblxuICAvKipcbiAgICogRGVidWcgbG9nLlxuICAgKi9cbiAgcHVibGljIGRlYnVnKC4uLm9iamVjdHM6IGFueVtdKTogdm9pZCB7XG4gICAgdGhpcy5fbG9nKGNvbnNvbGUubG9nLCBMb2dMZXZlbHMuZGVidWcsIG9iamVjdHMpO1xuICB9XG5cbiAgLyoqXG4gICAqIEludGVybmFsIGxvZ2dlci5cbiAgICovXG4gIHByaXZhdGUgX2xvZyhmbjogKCkgPT4gdm9pZCwgbGV2ZWw6IG51bWJlciwgb2JqZWN0czogYW55W10pOiB2b2lkIHtcbiAgICBpZiAobGV2ZWwgPD0gTG9nZ2VyLmdldExldmVsKCkpIHtcbiAgICAgIGZuLmFwcGx5KGNvbnNvbGUsIChbYFske3RoaXMuX3NvdXJjZX1dIGBdLmNvbmNhdChvYmplY3RzKSBhcyB1bmtub3duKSBhcyBbXG5cbiAgICAgIF0pO1xuICAgIH1cbiAgfVxufVxuIiwiLyoqXG4gKiBAbW9kdWxlIHR5cGluZ3MvY29yZVxuICovXG5pbXBvcnQgeyBJVHJhbnNpdGlvbkRhdGEsIElUcmFuc2l0aW9uUGFnZSwgSVZpZXdEYXRhIH0gZnJvbSAnLi9pbmRleCc7XG5cbmV4cG9ydCB0eXBlIEhvb2tzQmFyYmEgPVxuICB8ICdyZWFkeSdcbiAgfCAncGFnZSdcbiAgfCAncmVzZXQnXG4gIHwgJ2N1cnJlbnRBZGRlZCdcbiAgfCAnY3VycmVudFJlbW92ZWQnXG4gIHwgJ25leHRBZGRlZCdcbiAgfCAnbmV4dFJlbW92ZWQnO1xuXG5leHBvcnQgdHlwZSBIb29rc09uY2UgPSAnYmVmb3JlT25jZScgfCAnb25jZScgfCAnYWZ0ZXJPbmNlJztcblxuZXhwb3J0IHR5cGUgSG9va3NQYWdlID1cbiAgfCAnYmVmb3JlJ1xuICB8ICdiZWZvcmVMZWF2ZSdcbiAgfCAnbGVhdmUnXG4gIHwgJ2FmdGVyTGVhdmUnXG4gIHwgJ2JlZm9yZUVudGVyJ1xuICB8ICdlbnRlcidcbiAgfCAnYWZ0ZXJFbnRlcidcbiAgfCAnYWZ0ZXInO1xuXG5leHBvcnQgdHlwZSBIb29rc0JlZm9yZSA9ICdiZWZvcmVPbmNlJyB8ICdiZWZvcmVMZWF2ZScgfCAnYmVmb3JlRW50ZXInO1xuZXhwb3J0IHR5cGUgSG9va3NBZnRlciA9ICdhZnRlck9uY2UnIHwgJ2FmdGVyTGVhdmUnIHwgJ2FmdGVyRW50ZXInO1xuXG5leHBvcnQgdHlwZSBIb29rc1RyYW5zaXRpb24gPSBIb29rc09uY2UgfCBIb29rc1BhZ2U7XG5leHBvcnQgdHlwZSBIb29rc1ZpZXcgPSBIb29rc0JlZm9yZSB8IEhvb2tzQWZ0ZXI7XG5leHBvcnQgdHlwZSBIb29rc0FsbCA9IEhvb2tzQmFyYmEgfCBIb29rc1RyYW5zaXRpb247XG5cbi8vIEFsbG93IG9wdGlvbmFsIFwiZHluYW1pY2FsbHkgY3JlYXRlZFwiIGhvb2tzXG5leHBvcnQgdHlwZSBIb29rc1RyYW5zaXRpb25NYXAgPSB7IFtrZXkgaW4gSG9va3NUcmFuc2l0aW9uXT86IGFueSB9O1xuXG5leHBvcnQgdHlwZSBIb29rRnVuY3Rpb24gPSAoXG4gIGRhdGE/OiBJVHJhbnNpdGlvbkRhdGEgfCBJVmlld0RhdGEsXG4gIHQ/OiBJVHJhbnNpdGlvblBhZ2VcbikgPT4gUHJvbWlzZTx2b2lkPiB8IHZvaWQ7XG5cbmV4cG9ydCBjbGFzcyBIb29rTWV0aG9kcyB7XG4gIHB1YmxpYyBiZWZvcmU6IChmbjogSG9va0Z1bmN0aW9uLCBjdHg/OiBhbnkpID0+IHZvaWQ7XG4gIHB1YmxpYyBiZWZvcmVMZWF2ZTogKGZuOiBIb29rRnVuY3Rpb24sIGN0eD86IGFueSkgPT4gdm9pZDtcbiAgcHVibGljIGxlYXZlOiAoZm46IEhvb2tGdW5jdGlvbiwgY3R4PzogYW55KSA9PiB2b2lkO1xuICBwdWJsaWMgYWZ0ZXJMZWF2ZTogKGZuOiBIb29rRnVuY3Rpb24sIGN0eD86IGFueSkgPT4gdm9pZDtcbiAgcHVibGljIGJlZm9yZUVudGVyOiAoZm46IEhvb2tGdW5jdGlvbiwgY3R4PzogYW55KSA9PiB2b2lkO1xuICBwdWJsaWMgZW50ZXI6IChmbjogSG9va0Z1bmN0aW9uLCBjdHg/OiBhbnkpID0+IHZvaWQ7XG4gIHB1YmxpYyBhZnRlckVudGVyOiAoZm46IEhvb2tGdW5jdGlvbiwgY3R4PzogYW55KSA9PiB2b2lkO1xuICBwdWJsaWMgYWZ0ZXI6IChmbjogSG9va0Z1bmN0aW9uLCBjdHg/OiBhbnkpID0+IHZvaWQ7XG59XG4iLCIvKipcbiAqIEV4cG9zZSBgcGF0aFRvUmVnZXhwYC5cbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBwYXRoVG9SZWdleHBcbm1vZHVsZS5leHBvcnRzLm1hdGNoID0gbWF0Y2hcbm1vZHVsZS5leHBvcnRzLnJlZ2V4cFRvRnVuY3Rpb24gPSByZWdleHBUb0Z1bmN0aW9uXG5tb2R1bGUuZXhwb3J0cy5wYXJzZSA9IHBhcnNlXG5tb2R1bGUuZXhwb3J0cy5jb21waWxlID0gY29tcGlsZVxubW9kdWxlLmV4cG9ydHMudG9rZW5zVG9GdW5jdGlvbiA9IHRva2Vuc1RvRnVuY3Rpb25cbm1vZHVsZS5leHBvcnRzLnRva2Vuc1RvUmVnRXhwID0gdG9rZW5zVG9SZWdFeHBcblxuLyoqXG4gKiBEZWZhdWx0IGNvbmZpZ3MuXG4gKi9cbnZhciBERUZBVUxUX0RFTElNSVRFUiA9ICcvJ1xuXG4vKipcbiAqIFRoZSBtYWluIHBhdGggbWF0Y2hpbmcgcmVnZXhwIHV0aWxpdHkuXG4gKlxuICogQHR5cGUge1JlZ0V4cH1cbiAqL1xudmFyIFBBVEhfUkVHRVhQID0gbmV3IFJlZ0V4cChbXG4gIC8vIE1hdGNoIGVzY2FwZWQgY2hhcmFjdGVycyB0aGF0IHdvdWxkIG90aGVyd2lzZSBhcHBlYXIgaW4gZnV0dXJlIG1hdGNoZXMuXG4gIC8vIFRoaXMgYWxsb3dzIHRoZSB1c2VyIHRvIGVzY2FwZSBzcGVjaWFsIGNoYXJhY3RlcnMgdGhhdCB3b24ndCB0cmFuc2Zvcm0uXG4gICcoXFxcXFxcXFwuKScsXG4gIC8vIE1hdGNoIEV4cHJlc3Mtc3R5bGUgcGFyYW1ldGVycyBhbmQgdW4tbmFtZWQgcGFyYW1ldGVycyB3aXRoIGEgcHJlZml4XG4gIC8vIGFuZCBvcHRpb25hbCBzdWZmaXhlcy4gTWF0Y2hlcyBhcHBlYXIgYXM6XG4gIC8vXG4gIC8vIFwiOnRlc3QoXFxcXGQrKT9cIiA9PiBbXCJ0ZXN0XCIsIFwiXFxkK1wiLCB1bmRlZmluZWQsIFwiP1wiXVxuICAvLyBcIihcXFxcZCspXCIgID0+IFt1bmRlZmluZWQsIHVuZGVmaW5lZCwgXCJcXGQrXCIsIHVuZGVmaW5lZF1cbiAgJyg/OlxcXFw6KFxcXFx3KykoPzpcXFxcKCgoPzpcXFxcXFxcXC58W15cXFxcXFxcXCgpXSkrKVxcXFwpKT98XFxcXCgoKD86XFxcXFxcXFwufFteXFxcXFxcXFwoKV0pKylcXFxcKSkoWysqP10pPydcbl0uam9pbignfCcpLCAnZycpXG5cbi8qKlxuICogUGFyc2UgYSBzdHJpbmcgZm9yIHRoZSByYXcgdG9rZW5zLlxuICpcbiAqIEBwYXJhbSAge3N0cmluZ30gIHN0clxuICogQHBhcmFtICB7T2JqZWN0PX0gb3B0aW9uc1xuICogQHJldHVybiB7IUFycmF5fVxuICovXG5mdW5jdGlvbiBwYXJzZSAoc3RyLCBvcHRpb25zKSB7XG4gIHZhciB0b2tlbnMgPSBbXVxuICB2YXIga2V5ID0gMFxuICB2YXIgaW5kZXggPSAwXG4gIHZhciBwYXRoID0gJydcbiAgdmFyIGRlZmF1bHREZWxpbWl0ZXIgPSAob3B0aW9ucyAmJiBvcHRpb25zLmRlbGltaXRlcikgfHwgREVGQVVMVF9ERUxJTUlURVJcbiAgdmFyIHdoaXRlbGlzdCA9IChvcHRpb25zICYmIG9wdGlvbnMud2hpdGVsaXN0KSB8fCB1bmRlZmluZWRcbiAgdmFyIHBhdGhFc2NhcGVkID0gZmFsc2VcbiAgdmFyIHJlc1xuXG4gIHdoaWxlICgocmVzID0gUEFUSF9SRUdFWFAuZXhlYyhzdHIpKSAhPT0gbnVsbCkge1xuICAgIHZhciBtID0gcmVzWzBdXG4gICAgdmFyIGVzY2FwZWQgPSByZXNbMV1cbiAgICB2YXIgb2Zmc2V0ID0gcmVzLmluZGV4XG4gICAgcGF0aCArPSBzdHIuc2xpY2UoaW5kZXgsIG9mZnNldClcbiAgICBpbmRleCA9IG9mZnNldCArIG0ubGVuZ3RoXG5cbiAgICAvLyBJZ25vcmUgYWxyZWFkeSBlc2NhcGVkIHNlcXVlbmNlcy5cbiAgICBpZiAoZXNjYXBlZCkge1xuICAgICAgcGF0aCArPSBlc2NhcGVkWzFdXG4gICAgICBwYXRoRXNjYXBlZCA9IHRydWVcbiAgICAgIGNvbnRpbnVlXG4gICAgfVxuXG4gICAgdmFyIHByZXYgPSAnJ1xuICAgIHZhciBuYW1lID0gcmVzWzJdXG4gICAgdmFyIGNhcHR1cmUgPSByZXNbM11cbiAgICB2YXIgZ3JvdXAgPSByZXNbNF1cbiAgICB2YXIgbW9kaWZpZXIgPSByZXNbNV1cblxuICAgIGlmICghcGF0aEVzY2FwZWQgJiYgcGF0aC5sZW5ndGgpIHtcbiAgICAgIHZhciBrID0gcGF0aC5sZW5ndGggLSAxXG4gICAgICB2YXIgYyA9IHBhdGhba11cbiAgICAgIHZhciBtYXRjaGVzID0gd2hpdGVsaXN0ID8gd2hpdGVsaXN0LmluZGV4T2YoYykgPiAtMSA6IHRydWVcblxuICAgICAgaWYgKG1hdGNoZXMpIHtcbiAgICAgICAgcHJldiA9IGNcbiAgICAgICAgcGF0aCA9IHBhdGguc2xpY2UoMCwgaylcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBQdXNoIHRoZSBjdXJyZW50IHBhdGggb250byB0aGUgdG9rZW5zLlxuICAgIGlmIChwYXRoKSB7XG4gICAgICB0b2tlbnMucHVzaChwYXRoKVxuICAgICAgcGF0aCA9ICcnXG4gICAgICBwYXRoRXNjYXBlZCA9IGZhbHNlXG4gICAgfVxuXG4gICAgdmFyIHJlcGVhdCA9IG1vZGlmaWVyID09PSAnKycgfHwgbW9kaWZpZXIgPT09ICcqJ1xuICAgIHZhciBvcHRpb25hbCA9IG1vZGlmaWVyID09PSAnPycgfHwgbW9kaWZpZXIgPT09ICcqJ1xuICAgIHZhciBwYXR0ZXJuID0gY2FwdHVyZSB8fCBncm91cFxuICAgIHZhciBkZWxpbWl0ZXIgPSBwcmV2IHx8IGRlZmF1bHREZWxpbWl0ZXJcblxuICAgIHRva2Vucy5wdXNoKHtcbiAgICAgIG5hbWU6IG5hbWUgfHwga2V5KyssXG4gICAgICBwcmVmaXg6IHByZXYsXG4gICAgICBkZWxpbWl0ZXI6IGRlbGltaXRlcixcbiAgICAgIG9wdGlvbmFsOiBvcHRpb25hbCxcbiAgICAgIHJlcGVhdDogcmVwZWF0LFxuICAgICAgcGF0dGVybjogcGF0dGVyblxuICAgICAgICA/IGVzY2FwZUdyb3VwKHBhdHRlcm4pXG4gICAgICAgIDogJ1teJyArIGVzY2FwZVN0cmluZyhkZWxpbWl0ZXIgPT09IGRlZmF1bHREZWxpbWl0ZXIgPyBkZWxpbWl0ZXIgOiAoZGVsaW1pdGVyICsgZGVmYXVsdERlbGltaXRlcikpICsgJ10rPydcbiAgICB9KVxuICB9XG5cbiAgLy8gUHVzaCBhbnkgcmVtYWluaW5nIGNoYXJhY3RlcnMuXG4gIGlmIChwYXRoIHx8IGluZGV4IDwgc3RyLmxlbmd0aCkge1xuICAgIHRva2Vucy5wdXNoKHBhdGggKyBzdHIuc3Vic3RyKGluZGV4KSlcbiAgfVxuXG4gIHJldHVybiB0b2tlbnNcbn1cblxuLyoqXG4gKiBDb21waWxlIGEgc3RyaW5nIHRvIGEgdGVtcGxhdGUgZnVuY3Rpb24gZm9yIHRoZSBwYXRoLlxuICpcbiAqIEBwYXJhbSAge3N0cmluZ30gICAgICAgICAgICAgc3RyXG4gKiBAcGFyYW0gIHtPYmplY3Q9fSAgICAgICAgICAgIG9wdGlvbnNcbiAqIEByZXR1cm4geyFmdW5jdGlvbihPYmplY3Q9LCBPYmplY3Q9KX1cbiAqL1xuZnVuY3Rpb24gY29tcGlsZSAoc3RyLCBvcHRpb25zKSB7XG4gIHJldHVybiB0b2tlbnNUb0Z1bmN0aW9uKHBhcnNlKHN0ciwgb3B0aW9ucyksIG9wdGlvbnMpXG59XG5cbi8qKlxuICogQ3JlYXRlIHBhdGggbWF0Y2ggZnVuY3Rpb24gZnJvbSBgcGF0aC10by1yZWdleHBgIHNwZWMuXG4gKi9cbmZ1bmN0aW9uIG1hdGNoIChzdHIsIG9wdGlvbnMpIHtcbiAgdmFyIGtleXMgPSBbXVxuICB2YXIgcmUgPSBwYXRoVG9SZWdleHAoc3RyLCBrZXlzLCBvcHRpb25zKVxuICByZXR1cm4gcmVnZXhwVG9GdW5jdGlvbihyZSwga2V5cylcbn1cblxuLyoqXG4gKiBDcmVhdGUgYSBwYXRoIG1hdGNoIGZ1bmN0aW9uIGZyb20gYHBhdGgtdG8tcmVnZXhwYCBvdXRwdXQuXG4gKi9cbmZ1bmN0aW9uIHJlZ2V4cFRvRnVuY3Rpb24gKHJlLCBrZXlzKSB7XG4gIHJldHVybiBmdW5jdGlvbiAocGF0aG5hbWUsIG9wdGlvbnMpIHtcbiAgICB2YXIgbSA9IHJlLmV4ZWMocGF0aG5hbWUpXG4gICAgaWYgKCFtKSByZXR1cm4gZmFsc2VcblxuICAgIHZhciBwYXRoID0gbVswXVxuICAgIHZhciBpbmRleCA9IG0uaW5kZXhcbiAgICB2YXIgcGFyYW1zID0ge31cbiAgICB2YXIgZGVjb2RlID0gKG9wdGlvbnMgJiYgb3B0aW9ucy5kZWNvZGUpIHx8IGRlY29kZVVSSUNvbXBvbmVudFxuXG4gICAgZm9yICh2YXIgaSA9IDE7IGkgPCBtLmxlbmd0aDsgaSsrKSB7XG4gICAgICBpZiAobVtpXSA9PT0gdW5kZWZpbmVkKSBjb250aW51ZVxuXG4gICAgICB2YXIga2V5ID0ga2V5c1tpIC0gMV1cblxuICAgICAgaWYgKGtleS5yZXBlYXQpIHtcbiAgICAgICAgcGFyYW1zW2tleS5uYW1lXSA9IG1baV0uc3BsaXQoa2V5LmRlbGltaXRlcikubWFwKGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgIHJldHVybiBkZWNvZGUodmFsdWUsIGtleSlcbiAgICAgICAgfSlcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHBhcmFtc1trZXkubmFtZV0gPSBkZWNvZGUobVtpXSwga2V5KVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB7IHBhdGg6IHBhdGgsIGluZGV4OiBpbmRleCwgcGFyYW1zOiBwYXJhbXMgfVxuICB9XG59XG5cbi8qKlxuICogRXhwb3NlIGEgbWV0aG9kIGZvciB0cmFuc2Zvcm1pbmcgdG9rZW5zIGludG8gdGhlIHBhdGggZnVuY3Rpb24uXG4gKi9cbmZ1bmN0aW9uIHRva2Vuc1RvRnVuY3Rpb24gKHRva2Vucywgb3B0aW9ucykge1xuICAvLyBDb21waWxlIGFsbCB0aGUgdG9rZW5zIGludG8gcmVnZXhwcy5cbiAgdmFyIG1hdGNoZXMgPSBuZXcgQXJyYXkodG9rZW5zLmxlbmd0aClcblxuICAvLyBDb21waWxlIGFsbCB0aGUgcGF0dGVybnMgYmVmb3JlIGNvbXBpbGF0aW9uLlxuICBmb3IgKHZhciBpID0gMDsgaSA8IHRva2Vucy5sZW5ndGg7IGkrKykge1xuICAgIGlmICh0eXBlb2YgdG9rZW5zW2ldID09PSAnb2JqZWN0Jykge1xuICAgICAgbWF0Y2hlc1tpXSA9IG5ldyBSZWdFeHAoJ14oPzonICsgdG9rZW5zW2ldLnBhdHRlcm4gKyAnKSQnLCBmbGFncyhvcHRpb25zKSlcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZnVuY3Rpb24gKGRhdGEsIG9wdGlvbnMpIHtcbiAgICB2YXIgcGF0aCA9ICcnXG4gICAgdmFyIGVuY29kZSA9IChvcHRpb25zICYmIG9wdGlvbnMuZW5jb2RlKSB8fCBlbmNvZGVVUklDb21wb25lbnRcbiAgICB2YXIgdmFsaWRhdGUgPSBvcHRpb25zID8gb3B0aW9ucy52YWxpZGF0ZSAhPT0gZmFsc2UgOiB0cnVlXG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRva2Vucy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIHRva2VuID0gdG9rZW5zW2ldXG5cbiAgICAgIGlmICh0eXBlb2YgdG9rZW4gPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHBhdGggKz0gdG9rZW5cbiAgICAgICAgY29udGludWVcbiAgICAgIH1cblxuICAgICAgdmFyIHZhbHVlID0gZGF0YSA/IGRhdGFbdG9rZW4ubmFtZV0gOiB1bmRlZmluZWRcbiAgICAgIHZhciBzZWdtZW50XG5cbiAgICAgIGlmIChBcnJheS5pc0FycmF5KHZhbHVlKSkge1xuICAgICAgICBpZiAoIXRva2VuLnJlcGVhdCkge1xuICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0V4cGVjdGVkIFwiJyArIHRva2VuLm5hbWUgKyAnXCIgdG8gbm90IHJlcGVhdCwgYnV0IGdvdCBhcnJheScpXG4gICAgICAgIH1cblxuICAgICAgICBpZiAodmFsdWUubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgaWYgKHRva2VuLm9wdGlvbmFsKSBjb250aW51ZVxuXG4gICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignRXhwZWN0ZWQgXCInICsgdG9rZW4ubmFtZSArICdcIiB0byBub3QgYmUgZW1wdHknKVxuICAgICAgICB9XG5cbiAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCB2YWx1ZS5sZW5ndGg7IGorKykge1xuICAgICAgICAgIHNlZ21lbnQgPSBlbmNvZGUodmFsdWVbal0sIHRva2VuKVxuXG4gICAgICAgICAgaWYgKHZhbGlkYXRlICYmICFtYXRjaGVzW2ldLnRlc3Qoc2VnbWVudCkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0V4cGVjdGVkIGFsbCBcIicgKyB0b2tlbi5uYW1lICsgJ1wiIHRvIG1hdGNoIFwiJyArIHRva2VuLnBhdHRlcm4gKyAnXCInKVxuICAgICAgICAgIH1cblxuICAgICAgICAgIHBhdGggKz0gKGogPT09IDAgPyB0b2tlbi5wcmVmaXggOiB0b2tlbi5kZWxpbWl0ZXIpICsgc2VnbWVudFxuICAgICAgICB9XG5cbiAgICAgICAgY29udGludWVcbiAgICAgIH1cblxuICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycgfHwgdHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJyB8fCB0eXBlb2YgdmFsdWUgPT09ICdib29sZWFuJykge1xuICAgICAgICBzZWdtZW50ID0gZW5jb2RlKFN0cmluZyh2YWx1ZSksIHRva2VuKVxuXG4gICAgICAgIGlmICh2YWxpZGF0ZSAmJiAhbWF0Y2hlc1tpXS50ZXN0KHNlZ21lbnQpKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignRXhwZWN0ZWQgXCInICsgdG9rZW4ubmFtZSArICdcIiB0byBtYXRjaCBcIicgKyB0b2tlbi5wYXR0ZXJuICsgJ1wiLCBidXQgZ290IFwiJyArIHNlZ21lbnQgKyAnXCInKVxuICAgICAgICB9XG5cbiAgICAgICAgcGF0aCArPSB0b2tlbi5wcmVmaXggKyBzZWdtZW50XG4gICAgICAgIGNvbnRpbnVlXG4gICAgICB9XG5cbiAgICAgIGlmICh0b2tlbi5vcHRpb25hbCkgY29udGludWVcblxuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignRXhwZWN0ZWQgXCInICsgdG9rZW4ubmFtZSArICdcIiB0byBiZSAnICsgKHRva2VuLnJlcGVhdCA/ICdhbiBhcnJheScgOiAnYSBzdHJpbmcnKSlcbiAgICB9XG5cbiAgICByZXR1cm4gcGF0aFxuICB9XG59XG5cbi8qKlxuICogRXNjYXBlIGEgcmVndWxhciBleHByZXNzaW9uIHN0cmluZy5cbiAqXG4gKiBAcGFyYW0gIHtzdHJpbmd9IHN0clxuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5mdW5jdGlvbiBlc2NhcGVTdHJpbmcgKHN0cikge1xuICByZXR1cm4gc3RyLnJlcGxhY2UoLyhbLisqPz1eIToke30oKVtcXF18L1xcXFxdKS9nLCAnXFxcXCQxJylcbn1cblxuLyoqXG4gKiBFc2NhcGUgdGhlIGNhcHR1cmluZyBncm91cCBieSBlc2NhcGluZyBzcGVjaWFsIGNoYXJhY3RlcnMgYW5kIG1lYW5pbmcuXG4gKlxuICogQHBhcmFtICB7c3RyaW5nfSBncm91cFxuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5mdW5jdGlvbiBlc2NhcGVHcm91cCAoZ3JvdXApIHtcbiAgcmV0dXJuIGdyb3VwLnJlcGxhY2UoLyhbPSE6JC8oKV0pL2csICdcXFxcJDEnKVxufVxuXG4vKipcbiAqIEdldCB0aGUgZmxhZ3MgZm9yIGEgcmVnZXhwIGZyb20gdGhlIG9wdGlvbnMuXG4gKlxuICogQHBhcmFtICB7T2JqZWN0fSBvcHRpb25zXG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cbmZ1bmN0aW9uIGZsYWdzIChvcHRpb25zKSB7XG4gIHJldHVybiBvcHRpb25zICYmIG9wdGlvbnMuc2Vuc2l0aXZlID8gJycgOiAnaSdcbn1cblxuLyoqXG4gKiBQdWxsIG91dCBrZXlzIGZyb20gYSByZWdleHAuXG4gKlxuICogQHBhcmFtICB7IVJlZ0V4cH0gcGF0aFxuICogQHBhcmFtICB7QXJyYXk9fSAga2V5c1xuICogQHJldHVybiB7IVJlZ0V4cH1cbiAqL1xuZnVuY3Rpb24gcmVnZXhwVG9SZWdleHAgKHBhdGgsIGtleXMpIHtcbiAgaWYgKCFrZXlzKSByZXR1cm4gcGF0aFxuXG4gIC8vIFVzZSBhIG5lZ2F0aXZlIGxvb2thaGVhZCB0byBtYXRjaCBvbmx5IGNhcHR1cmluZyBncm91cHMuXG4gIHZhciBncm91cHMgPSBwYXRoLnNvdXJjZS5tYXRjaCgvXFwoKD8hXFw/KS9nKVxuXG4gIGlmIChncm91cHMpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGdyb3Vwcy5sZW5ndGg7IGkrKykge1xuICAgICAga2V5cy5wdXNoKHtcbiAgICAgICAgbmFtZTogaSxcbiAgICAgICAgcHJlZml4OiBudWxsLFxuICAgICAgICBkZWxpbWl0ZXI6IG51bGwsXG4gICAgICAgIG9wdGlvbmFsOiBmYWxzZSxcbiAgICAgICAgcmVwZWF0OiBmYWxzZSxcbiAgICAgICAgcGF0dGVybjogbnVsbFxuICAgICAgfSlcbiAgICB9XG4gIH1cblxuICByZXR1cm4gcGF0aFxufVxuXG4vKipcbiAqIFRyYW5zZm9ybSBhbiBhcnJheSBpbnRvIGEgcmVnZXhwLlxuICpcbiAqIEBwYXJhbSAgeyFBcnJheX0gIHBhdGhcbiAqIEBwYXJhbSAge0FycmF5PX0gIGtleXNcbiAqIEBwYXJhbSAge09iamVjdD19IG9wdGlvbnNcbiAqIEByZXR1cm4geyFSZWdFeHB9XG4gKi9cbmZ1bmN0aW9uIGFycmF5VG9SZWdleHAgKHBhdGgsIGtleXMsIG9wdGlvbnMpIHtcbiAgdmFyIHBhcnRzID0gW11cblxuICBmb3IgKHZhciBpID0gMDsgaSA8IHBhdGgubGVuZ3RoOyBpKyspIHtcbiAgICBwYXJ0cy5wdXNoKHBhdGhUb1JlZ2V4cChwYXRoW2ldLCBrZXlzLCBvcHRpb25zKS5zb3VyY2UpXG4gIH1cblxuICByZXR1cm4gbmV3IFJlZ0V4cCgnKD86JyArIHBhcnRzLmpvaW4oJ3wnKSArICcpJywgZmxhZ3Mob3B0aW9ucykpXG59XG5cbi8qKlxuICogQ3JlYXRlIGEgcGF0aCByZWdleHAgZnJvbSBzdHJpbmcgaW5wdXQuXG4gKlxuICogQHBhcmFtICB7c3RyaW5nfSAgcGF0aFxuICogQHBhcmFtICB7QXJyYXk9fSAga2V5c1xuICogQHBhcmFtICB7T2JqZWN0PX0gb3B0aW9uc1xuICogQHJldHVybiB7IVJlZ0V4cH1cbiAqL1xuZnVuY3Rpb24gc3RyaW5nVG9SZWdleHAgKHBhdGgsIGtleXMsIG9wdGlvbnMpIHtcbiAgcmV0dXJuIHRva2Vuc1RvUmVnRXhwKHBhcnNlKHBhdGgsIG9wdGlvbnMpLCBrZXlzLCBvcHRpb25zKVxufVxuXG4vKipcbiAqIEV4cG9zZSBhIGZ1bmN0aW9uIGZvciB0YWtpbmcgdG9rZW5zIGFuZCByZXR1cm5pbmcgYSBSZWdFeHAuXG4gKlxuICogQHBhcmFtICB7IUFycmF5fSAgdG9rZW5zXG4gKiBAcGFyYW0gIHtBcnJheT19ICBrZXlzXG4gKiBAcGFyYW0gIHtPYmplY3Q9fSBvcHRpb25zXG4gKiBAcmV0dXJuIHshUmVnRXhwfVxuICovXG5mdW5jdGlvbiB0b2tlbnNUb1JlZ0V4cCAodG9rZW5zLCBrZXlzLCBvcHRpb25zKSB7XG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9XG5cbiAgdmFyIHN0cmljdCA9IG9wdGlvbnMuc3RyaWN0XG4gIHZhciBzdGFydCA9IG9wdGlvbnMuc3RhcnQgIT09IGZhbHNlXG4gIHZhciBlbmQgPSBvcHRpb25zLmVuZCAhPT0gZmFsc2VcbiAgdmFyIGRlbGltaXRlciA9IG9wdGlvbnMuZGVsaW1pdGVyIHx8IERFRkFVTFRfREVMSU1JVEVSXG4gIHZhciBlbmRzV2l0aCA9IFtdLmNvbmNhdChvcHRpb25zLmVuZHNXaXRoIHx8IFtdKS5tYXAoZXNjYXBlU3RyaW5nKS5jb25jYXQoJyQnKS5qb2luKCd8JylcbiAgdmFyIHJvdXRlID0gc3RhcnQgPyAnXicgOiAnJ1xuXG4gIC8vIEl0ZXJhdGUgb3ZlciB0aGUgdG9rZW5zIGFuZCBjcmVhdGUgb3VyIHJlZ2V4cCBzdHJpbmcuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgdG9rZW5zLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIHRva2VuID0gdG9rZW5zW2ldXG5cbiAgICBpZiAodHlwZW9mIHRva2VuID09PSAnc3RyaW5nJykge1xuICAgICAgcm91dGUgKz0gZXNjYXBlU3RyaW5nKHRva2VuKVxuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgY2FwdHVyZSA9IHRva2VuLnJlcGVhdFxuICAgICAgICA/ICcoPzonICsgdG9rZW4ucGF0dGVybiArICcpKD86JyArIGVzY2FwZVN0cmluZyh0b2tlbi5kZWxpbWl0ZXIpICsgJyg/OicgKyB0b2tlbi5wYXR0ZXJuICsgJykpKidcbiAgICAgICAgOiB0b2tlbi5wYXR0ZXJuXG5cbiAgICAgIGlmIChrZXlzKSBrZXlzLnB1c2godG9rZW4pXG5cbiAgICAgIGlmICh0b2tlbi5vcHRpb25hbCkge1xuICAgICAgICBpZiAoIXRva2VuLnByZWZpeCkge1xuICAgICAgICAgIHJvdXRlICs9ICcoJyArIGNhcHR1cmUgKyAnKT8nXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcm91dGUgKz0gJyg/OicgKyBlc2NhcGVTdHJpbmcodG9rZW4ucHJlZml4KSArICcoJyArIGNhcHR1cmUgKyAnKSk/J1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByb3V0ZSArPSBlc2NhcGVTdHJpbmcodG9rZW4ucHJlZml4KSArICcoJyArIGNhcHR1cmUgKyAnKSdcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBpZiAoZW5kKSB7XG4gICAgaWYgKCFzdHJpY3QpIHJvdXRlICs9ICcoPzonICsgZXNjYXBlU3RyaW5nKGRlbGltaXRlcikgKyAnKT8nXG5cbiAgICByb3V0ZSArPSBlbmRzV2l0aCA9PT0gJyQnID8gJyQnIDogJyg/PScgKyBlbmRzV2l0aCArICcpJ1xuICB9IGVsc2Uge1xuICAgIHZhciBlbmRUb2tlbiA9IHRva2Vuc1t0b2tlbnMubGVuZ3RoIC0gMV1cbiAgICB2YXIgaXNFbmREZWxpbWl0ZWQgPSB0eXBlb2YgZW5kVG9rZW4gPT09ICdzdHJpbmcnXG4gICAgICA/IGVuZFRva2VuW2VuZFRva2VuLmxlbmd0aCAtIDFdID09PSBkZWxpbWl0ZXJcbiAgICAgIDogZW5kVG9rZW4gPT09IHVuZGVmaW5lZFxuXG4gICAgaWYgKCFzdHJpY3QpIHJvdXRlICs9ICcoPzonICsgZXNjYXBlU3RyaW5nKGRlbGltaXRlcikgKyAnKD89JyArIGVuZHNXaXRoICsgJykpPydcbiAgICBpZiAoIWlzRW5kRGVsaW1pdGVkKSByb3V0ZSArPSAnKD89JyArIGVzY2FwZVN0cmluZyhkZWxpbWl0ZXIpICsgJ3wnICsgZW5kc1dpdGggKyAnKSdcbiAgfVxuXG4gIHJldHVybiBuZXcgUmVnRXhwKHJvdXRlLCBmbGFncyhvcHRpb25zKSlcbn1cblxuLyoqXG4gKiBOb3JtYWxpemUgdGhlIGdpdmVuIHBhdGggc3RyaW5nLCByZXR1cm5pbmcgYSByZWd1bGFyIGV4cHJlc3Npb24uXG4gKlxuICogQW4gZW1wdHkgYXJyYXkgY2FuIGJlIHBhc3NlZCBpbiBmb3IgdGhlIGtleXMsIHdoaWNoIHdpbGwgaG9sZCB0aGVcbiAqIHBsYWNlaG9sZGVyIGtleSBkZXNjcmlwdGlvbnMuIEZvciBleGFtcGxlLCB1c2luZyBgL3VzZXIvOmlkYCwgYGtleXNgIHdpbGxcbiAqIGNvbnRhaW4gYFt7IG5hbWU6ICdpZCcsIGRlbGltaXRlcjogJy8nLCBvcHRpb25hbDogZmFsc2UsIHJlcGVhdDogZmFsc2UgfV1gLlxuICpcbiAqIEBwYXJhbSAgeyhzdHJpbmd8UmVnRXhwfEFycmF5KX0gcGF0aFxuICogQHBhcmFtICB7QXJyYXk9fSAgICAgICAgICAgICAgICBrZXlzXG4gKiBAcGFyYW0gIHtPYmplY3Q9fSAgICAgICAgICAgICAgIG9wdGlvbnNcbiAqIEByZXR1cm4geyFSZWdFeHB9XG4gKi9cbmZ1bmN0aW9uIHBhdGhUb1JlZ2V4cCAocGF0aCwga2V5cywgb3B0aW9ucykge1xuICBpZiAocGF0aCBpbnN0YW5jZW9mIFJlZ0V4cCkge1xuICAgIHJldHVybiByZWdleHBUb1JlZ2V4cChwYXRoLCBrZXlzKVxuICB9XG5cbiAgaWYgKEFycmF5LmlzQXJyYXkocGF0aCkpIHtcbiAgICByZXR1cm4gYXJyYXlUb1JlZ2V4cCgvKiogQHR5cGUgeyFBcnJheX0gKi8gKHBhdGgpLCBrZXlzLCBvcHRpb25zKVxuICB9XG5cbiAgcmV0dXJuIHN0cmluZ1RvUmVnZXhwKC8qKiBAdHlwZSB7c3RyaW5nfSAqLyAocGF0aCksIGtleXMsIG9wdGlvbnMpXG59XG4iLCIvKipcbiAqIEBiYXJiYS9jb3JlL3NjaGVtYXNcbiAqIDxicj48YnI+XG4gKiAjIyBTY2hlbWFzIGRlc2NyaXB0aW9uLlxuICpcbiAqIEBtb2R1bGUgY29yZS9zY2hlbWFzXG4gKiBAcHJlZmVycmVkXG4gKi9cblxuLyoqKi9cblxuLy8gRGVmaW5pdGlvbnNcbmltcG9ydCB7IElTY2hlbWFBdHRyaWJ1dGUgfSBmcm9tICcuLi9kZWZzJztcblxuLyoqXG4gKiBTZWUgW1tJU2NoZW1hQXR0cmlidXRlXV1cbiAqL1xuZXhwb3J0IGNvbnN0IHNjaGVtYUF0dHJpYnV0ZTogSVNjaGVtYUF0dHJpYnV0ZSA9IHtcbiAgY29udGFpbmVyOiAnY29udGFpbmVyJyxcbiAgaGlzdG9yeTogJ2hpc3RvcnknLFxuICBuYW1lc3BhY2U6ICduYW1lc3BhY2UnLFxuICBwcmVmaXg6ICdkYXRhLWJhcmJhJyxcbiAgcHJldmVudDogJ3ByZXZlbnQnLFxuICB3cmFwcGVyOiAnd3JhcHBlcicsXG59O1xuIiwiLyoqXG4gKiBAYmFyYmEvY29yZS91dGlscy9kb21cbiAqIDxicj48YnI+XG4gKiAjIyBEb20gdXRpbHNcbiAqXG4gKiAtIEFjY2VzcyBET00gY29udGVudHNcbiAqIC0gRE9NIHZzIHN0cmluZyBjb252ZXJzaW9uc1xuICpcbiAqIEBtb2R1bGUgY29yZS91dGlscy9kb21cbiAqIEBwcmVmZXJyZWRcbiAqL1xuXG4vKioqL1xuXG5pbXBvcnQgcGF0aCBmcm9tICdwYXRoJztcblxuLy8gRGVmaW5pdGlvbnNcbmltcG9ydCB7IElTY2hlbWFBdHRyaWJ1dGUsIExpbmssIFNjb3BlLCBXcmFwcGVyIH0gZnJvbSAnLi4vZGVmcyc7XG4vLyBTY2hlbWFzXG5pbXBvcnQgeyBzY2hlbWFBdHRyaWJ1dGUgfSBmcm9tICcuLi9zY2hlbWFzL2F0dHJpYnV0ZSc7XG5cbmV4cG9ydCBjbGFzcyBEb20ge1xuICBwcml2YXRlIF9hdHRyOiBJU2NoZW1hQXR0cmlidXRlID0gc2NoZW1hQXR0cmlidXRlO1xuICBwcml2YXRlIF9wYXJzZXI6IERPTVBhcnNlciA9IG5ldyBET01QYXJzZXIoKTtcblxuICAvKipcbiAgICogQ29udmVydCBIVE1MRG9jdW1lbnQgdG8gc3RyaW5nLlxuICAgKi9cbiAgcHVibGljIHRvU3RyaW5nKGVsOiBIVE1MRWxlbWVudCk6IHN0cmluZyB7XG4gICAgcmV0dXJuIGVsLm91dGVySFRNTDtcbiAgfVxuXG4gIC8qKlxuICAgKiBQYXJzZSBIVE1MIHN0cmluZyB0byBIVE1MRG9jdW1lbnQuXG4gICAqL1xuICAvLyBzZWUgaHR0cHM6Ly9naXRodWIuY29tL2JhcmJhanMvYmFyYmEvaXNzdWVzLzM2MlxuICAvLyBTZWVtcyB0aGF0IHVzaW5nIERPTVBhcnNlci5wYXJzZUZyb21TdHJpbmcgY2F1c2VzIHRoaXMgaXNzdWUuXG4gIHB1YmxpYyB0b0RvY3VtZW50KGh0bWxTdHJpbmc6IHN0cmluZyk6IEhUTUxEb2N1bWVudCB7XG4gICAgcmV0dXJuIHRoaXMuX3BhcnNlci5wYXJzZUZyb21TdHJpbmcoaHRtbFN0cmluZywgJ3RleHQvaHRtbCcpO1xuICB9XG5cbiAgLyoqXG4gICAqIFBhcnNlIEhUTUwgc3RyaW5nIHRvIERJVkVsZW1lbnQuXG4gICAqXG4gICAqIERPTVBhcnNlci5wYXJzZUZyb21TdHJpbmcgZmFpbHMgd2l0aCBpbWdbc3Jjc2V0XSBvbiBpT1MuXG4gICAqIHNlZSBodHRwczovL2dpdGh1Yi5jb20vYmFyYmFqcy9iYXJiYS9pc3N1ZXMvMzYyXG4gICAqL1xuICBwdWJsaWMgdG9FbGVtZW50KGh0bWxTdHJpbmc6IHN0cmluZyk6IEhUTUxEaXZFbGVtZW50IHtcbiAgICBjb25zdCBkaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcblxuICAgIGRpdi5pbm5lckhUTUwgPSBodG1sU3RyaW5nO1xuICAgIHJldHVybiBkaXY7XG4gIH1cblxuICAvKipcbiAgICogR2V0IEhUTUwgY29udGVudC5cbiAgICovXG4gIHB1YmxpYyBnZXRIdG1sKGRvYzogSFRNTERvY3VtZW50ID0gZG9jdW1lbnQpOiBzdHJpbmcge1xuICAgIHJldHVybiB0aGlzLnRvU3RyaW5nKGRvYy5kb2N1bWVudEVsZW1lbnQpO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldCBmdWxsIGRvY3VtZW50IGNvbnRlbnQuXG4gICAqL1xuICAvLyBnZXREb2N1bWVudChlbCA9IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudCkge1xuICAvLyAgIHJldHVybiB0aGlzLnRvU3RyKGVsKTtcbiAgLy8gfSxcblxuICAvKipcbiAgICogR2V0IGBbZGF0YS1iYXJiYT1cIndyYXBwZXJcIl1gLlxuICAgKi9cbiAgcHVibGljIGdldFdyYXBwZXIoc2NvcGU6IFNjb3BlID0gZG9jdW1lbnQpOiBXcmFwcGVyIHtcbiAgICByZXR1cm4gc2NvcGUucXVlcnlTZWxlY3RvcihcbiAgICAgIGBbJHt0aGlzLl9hdHRyLnByZWZpeH09XCIke3RoaXMuX2F0dHIud3JhcHBlcn1cIl1gXG4gICAgKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgYFtkYXRhLWJhcmJhPVwiY29udGFpbmVyXCJdYC5cbiAgICovXG4gIHB1YmxpYyBnZXRDb250YWluZXIoc2NvcGU6IFNjb3BlID0gZG9jdW1lbnQpOiBIVE1MRWxlbWVudCB8IG51bGwge1xuICAgIHJldHVybiBzY29wZS5xdWVyeVNlbGVjdG9yKFxuICAgICAgYFske3RoaXMuX2F0dHIucHJlZml4fT1cIiR7dGhpcy5fYXR0ci5jb250YWluZXJ9XCJdYFxuICAgICk7XG4gIH1cblxuICAvKipcbiAgICogUmVtb3ZlIGNvbnRhaW5lciBhbmQgc3RvcmUgbmV4dCBzaWJsaW5nIChpZiBhcHBsaWNhYmxlKS5cbiAgICovXG4gIHB1YmxpYyByZW1vdmVDb250YWluZXIoY29udGFpbmVyOiBIVE1MRWxlbWVudCkge1xuICAgIGlmIChkb2N1bWVudC5ib2R5LmNvbnRhaW5zKGNvbnRhaW5lcikpIHtcbiAgICAgIGNvbnRhaW5lci5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKGNvbnRhaW5lcik7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEFkZCBjb250YWluZXIgYmVmb3JlIG5leHQgc2libGluZyBvciBhdCB0aGUgZW5kIG9mIHRoZSB3cmFwcGVyLlxuICAgKi9cbiAgcHVibGljIGFkZENvbnRhaW5lcihjb250YWluZXI6IEhUTUxFbGVtZW50LCB3cmFwcGVyOiBIVE1MRWxlbWVudCkge1xuICAgIGNvbnN0IGV4aXN0aW5nQ29udGFpbmVyID0gdGhpcy5nZXRDb250YWluZXIoKTtcblxuICAgIGlmIChleGlzdGluZ0NvbnRhaW5lcikge1xuICAgICAgdGhpcy5faW5zZXJ0QWZ0ZXIoY29udGFpbmVyLCBleGlzdGluZ0NvbnRhaW5lcik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHdyYXBwZXIuYXBwZW5kQ2hpbGQoY29udGFpbmVyKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogR2V0IGBbZGF0YS1iYXJiYS1uYW1lc3BhY2VdYC5cbiAgICovXG4gIHB1YmxpYyBnZXROYW1lc3BhY2Uoc2NvcGU6IFNjb3BlID0gZG9jdW1lbnQpOiBzdHJpbmcgfCBudWxsIHtcbiAgICBjb25zdCBucyA9IHNjb3BlLnF1ZXJ5U2VsZWN0b3IoXG4gICAgICBgWyR7dGhpcy5fYXR0ci5wcmVmaXh9LSR7dGhpcy5fYXR0ci5uYW1lc3BhY2V9XWBcbiAgICApO1xuXG4gICAgcmV0dXJuIG5zXG4gICAgICA/IG5zLmdldEF0dHJpYnV0ZShgJHt0aGlzLl9hdHRyLnByZWZpeH0tJHt0aGlzLl9hdHRyLm5hbWVzcGFjZX1gKVxuICAgICAgOiBudWxsO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldCBVUkwgZnJvbSBgaHJlZmAgdmFsdWUuXG4gICAqL1xuICBwdWJsaWMgZ2V0SHJlZihlbDogTGluayk6IHN0cmluZyB8IG51bGwge1xuICAgIC8vIEhUTUwgdGFnTmFtZSBpcyBVUFBFUkNBU0UsIHhodG1sIHRhZ05hbWUga2VlcHMgZXhpc3RpbmcgY2FzZS5cbiAgICBpZiAoZWwudGFnTmFtZSAmJiBlbC50YWdOYW1lLnRvTG93ZXJDYXNlKCkgPT09ICdhJykge1xuICAgICAgLy8gSFRNTEFuY2hvckVsZW1lbnQsIGZ1bGwgVVJMIGF2YWlsYWJsZVxuICAgICAgaWYgKHR5cGVvZiBlbC5ocmVmID09PSAnc3RyaW5nJykge1xuICAgICAgICByZXR1cm4gZWwuaHJlZjtcbiAgICAgIH1cblxuICAgICAgLy8gUHJvYmFibHkgYSBTVkdBRWxlbWVudOKAplxuICAgICAgY29uc3QgaHJlZiA9IGVsLmdldEF0dHJpYnV0ZSgnaHJlZicpIHx8IGVsLmdldEF0dHJpYnV0ZSgneGxpbms6aHJlZicpO1xuXG4gICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgZWxzZSAqL1xuICAgICAgaWYgKGhyZWYpIHtcbiAgICAgICAgLy8gV2hlbiBsaW5rIGNvbWVzIGZyb20gU1ZHLCBgaHJlZmAgcmV0dXJucyBhbiBvYmplY3QsIG5vdCBhIHN0cmluZy5cbiAgICAgICAgY29uc3QgYXR0cjogc3RyaW5nID1cbiAgICAgICAgICAoKGhyZWYgYXMgdW5rbm93bikgYXMgU1ZHQW5pbWF0ZWRTdHJpbmcpLmJhc2VWYWwgfHwgaHJlZjtcblxuICAgICAgICByZXR1cm4gdGhpcy5yZXNvbHZlVXJsKGF0dHIpO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIC8vIENvcHlyaWdodCAyMDE0IFNpbW9uIEx5ZGVsbFxuICAvLyBYMTEgKOKAnE1JVOKAnSkgTGljZW5zZWQuIChTZWUgTElDRU5TRVxuICAvLyBodHRwczovL2dpdGh1Yi5jb20vbHlkZWxsL3Jlc29sdmUtdXJsL2Jsb2IvbWFzdGVyL3Jlc29sdmUtdXJsLmpzXG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gIHB1YmxpYyByZXNvbHZlVXJsKC4uLnVybHM6IHN0cmluZ1tdKSB7XG4gICAgY29uc3QgbnVtVXJscyA9IHVybHMubGVuZ3RoO1xuXG4gICAgaWYgKG51bVVybHMgPT09IDApIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcigncmVzb2x2ZVVybCByZXF1aXJlcyBhdCBsZWFzdCBvbmUgYXJndW1lbnQ7IGdvdCBub25lLicpO1xuICAgIH1cblxuICAgIGNvbnN0IGJhc2UgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdiYXNlJyk7XG4gICAgYmFzZS5ocmVmID0gYXJndW1lbnRzWzBdO1xuXG4gICAgaWYgKG51bVVybHMgPT09IDEpIHtcbiAgICAgIHJldHVybiBiYXNlLmhyZWY7XG4gICAgfVxuXG4gICAgY29uc3QgaGVhZCA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKCdoZWFkJylbMF07XG4gICAgaGVhZC5pbnNlcnRCZWZvcmUoYmFzZSwgaGVhZC5maXJzdENoaWxkKTtcblxuICAgIGNvbnN0IGEgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdhJyk7XG4gICAgbGV0IHJlc29sdmVkO1xuXG4gICAgZm9yIChsZXQgaW5kZXggPSAxOyBpbmRleCA8IG51bVVybHM7IGluZGV4KyspIHtcbiAgICAgIGEuaHJlZiA9IGFyZ3VtZW50c1tpbmRleF07XG4gICAgICByZXNvbHZlZCA9IGEuaHJlZjtcbiAgICAgIGJhc2UuaHJlZiA9IHJlc29sdmVkO1xuICAgIH1cblxuICAgIGhlYWQucmVtb3ZlQ2hpbGQoYmFzZSk7XG5cbiAgICByZXR1cm4gcmVzb2x2ZWQ7XG4gIH1cblxuICAvKipcbiAgICogSW5zZXJ0IG5vZGUgYWZ0ZXIgYW5vdGhlciBub2RlLlxuICAgKi9cbiAgcHJpdmF0ZSBfaW5zZXJ0QWZ0ZXIobmV3Tm9kZTogTm9kZSwgcmVmZXJlbmNlTm9kZTogTm9kZSkge1xuICAgIHJlZmVyZW5jZU5vZGUucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUobmV3Tm9kZSwgcmVmZXJlbmNlTm9kZS5uZXh0U2libGluZyk7XG4gIH1cbn1cblxuY29uc3QgZG9tID0gbmV3IERvbSgpO1xuXG5leHBvcnQgeyBkb20gfTtcbiIsImltcG9ydCB7IEhpc3RvcnlBY3Rpb24sIExpbmtFdmVudCwgVHJpZ2dlciB9IGZyb20gJy4uL2RlZnMnO1xuLy8gU2NoZW1hc1xuaW1wb3J0IHsgc2NoZW1hQXR0cmlidXRlIH0gZnJvbSAnLi4vc2NoZW1hcy9hdHRyaWJ1dGUnO1xuXG4vKipcbiAqIEBiYXJiYS9jb3JlL3V0aWxzL2hpc3RvcnlcbiAqIDxicj48YnI+XG4gKiAjIyBIaXN0b3J5IG1hbmFnZXIuXG4gKlxuICogLSBLZWVwIHRyYWNrIG9mIHRoZSBuYXZpZ2F0aW9uIGhpc3RvcnlcbiAqXG4gKiBAbW9kdWxlIGNvcmUvdXRpbHMvaGlzdG9yeVxuICogQHByZWZlcnJlZFxuICovXG5cbi8qKlxuICogU3RhdGUgaXRlbS5cbiAqXG4gKiBAcHJvcGVydHkgZnJvbVxuICogQHByb3BlcnR5IGluZGV4XG4gKi9cbmludGVyZmFjZSBJSGlzdG9yeUl0ZW0ge1xuICAvKiogb3JpZ2luICovXG4gIGZyb206IHN0cmluZztcbiAgLyoqIGluZGV4ICovXG4gIGluZGV4OiBudW1iZXI7XG4gIC8qKiBzdGF0ZXMgKi9cbiAgc3RhdGVzOiBJU3RhdGVJdGVtW107XG59XG5cbi8qKiovXG5pbnRlcmZhY2UgSUNvb3JkcyB7XG4gIHg6IG51bWJlcjtcbiAgeTogbnVtYmVyO1xufVxuXG4vKipcbiAqIEhpc3RvcnkgaXRlbS5cbiAqXG4gKiBAcHJvcGVydHkgbmFtZXNwYWNlXG4gKiBAcHJvcGVydHkgc2Nyb2xsXG4gKiBAcHJvcGVydHkgVVJMXG4gKi9cbmludGVyZmFjZSBJU3RhdGVJdGVtIHtcbiAgLyoqIG5hbWVzcGFjZSAqL1xuICBuczogc3RyaW5nIHwgdW5kZWZpbmVkO1xuICAvKiogU2Nyb2xsIHBvc2l0aW9uICovXG4gIHNjcm9sbDogSUNvb3JkcztcbiAgLyoqIFVSTCAqL1xuICB1cmw6IHN0cmluZztcbn1cblxuZXhwb3J0IGNsYXNzIEhpc3Rvcnkge1xuICBwcml2YXRlIF9zZXNzaW9uOiBzdHJpbmc7XG4gIHByaXZhdGUgX3N0YXRlczogSVN0YXRlSXRlbVtdID0gW107XG4gIHByaXZhdGUgX3BvaW50ZXIgPSAtMTtcblxuICAvKipcbiAgICogSW5pdCB3aXRoIGZpcnN0IHN0YXRlLlxuICAgKi9cbiAgcHVibGljIGluaXQodXJsOiBzdHJpbmcsIG5zOiBzdHJpbmcpOiB2b2lkIHtcbiAgICB0aGlzLl9zZXNzaW9uID0gJ2JhcmJhJztcbiAgICBjb25zdCBpbmRleCA9IDA7XG5cbiAgICBjb25zdCBzdGF0ZTogSVN0YXRlSXRlbSA9IHtcbiAgICAgIG5zLFxuICAgICAgc2Nyb2xsOiB7XG4gICAgICAgIHg6IHdpbmRvdy5zY3JvbGxYLFxuICAgICAgICB5OiB3aW5kb3cuc2Nyb2xsWSxcbiAgICAgIH0sXG4gICAgICB1cmwsXG4gICAgfTtcblxuICAgIHRoaXMuX3N0YXRlcy5wdXNoKHN0YXRlKTtcbiAgICB0aGlzLl9wb2ludGVyID0gaW5kZXg7XG5cbiAgICBjb25zdCBpdGVtOiBJSGlzdG9yeUl0ZW0gPSB7XG4gICAgICBmcm9tOiB0aGlzLl9zZXNzaW9uLFxuICAgICAgaW5kZXgsXG4gICAgICBzdGF0ZXM6IFsuLi50aGlzLl9zdGF0ZXNdLFxuICAgIH07XG5cbiAgICB3aW5kb3cuaGlzdG9yeSAmJiB3aW5kb3cuaGlzdG9yeS5yZXBsYWNlU3RhdGUoaXRlbSwgJycsIHVybCk7XG4gIH1cblxuICBwdWJsaWMgY2hhbmdlKFxuICAgIHVybDogc3RyaW5nLFxuICAgIHRyaWdnZXI6IFRyaWdnZXIsXG4gICAgZT86IExpbmtFdmVudCB8IFBvcFN0YXRlRXZlbnRcbiAgKTogVHJpZ2dlciB7XG4gICAgaWYgKGUgJiYgKGUgYXMgUG9wU3RhdGVFdmVudCkuc3RhdGUpIHtcbiAgICAgIC8vIElmIHBvcHN0YXRlLCBtb3ZlIHRvIGV4aXN0aW5nIHN0YXRlXG4gICAgICAvLyBhbmQgZ2V0IGJhY2svZm9yd2FyZCBkaXJlY3Rpb24uXG4gICAgICBjb25zdCB7IHN0YXRlIH06IHsgc3RhdGU6IElIaXN0b3J5SXRlbSB9ID0gZSBhcyBQb3BTdGF0ZUV2ZW50O1xuICAgICAgY29uc3QgeyBpbmRleCB9ID0gc3RhdGU7XG4gICAgICBjb25zdCBkaWZmID0gdGhpcy5fcG9pbnRlciAtIGluZGV4O1xuXG4gICAgICB0cmlnZ2VyID0gdGhpcy5fZ2V0RGlyZWN0aW9uKGRpZmYpO1xuXG4gICAgICAvLyBXb3JrIHdpdGggcHJldmlvdXMgc3RhdGVzXG4gICAgICB0aGlzLnJlcGxhY2Uoc3RhdGUuc3RhdGVzKTtcbiAgICAgIHRoaXMuX3BvaW50ZXIgPSBpbmRleDtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gQWRkIG5ldyBzdGF0ZVxuICAgICAgdGhpcy5hZGQodXJsLCB0cmlnZ2VyKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdHJpZ2dlcjtcbiAgfVxuXG4gIC8qKlxuICAgKiBBZGQgYSBuZXcgc3RhdGUuXG4gICAqL1xuICBwdWJsaWMgYWRkKHVybDogc3RyaW5nLCB0cmlnZ2VyOiBUcmlnZ2VyKTogdm9pZCB7XG4gICAgLy8gSWYgbm8gc3RhdGUsIGl0IHdpbGwgYmUgdXBkYXRlZCBsYXRlci5cbiAgICBjb25zdCBucyA9ICd0bXAnO1xuICAgIGNvbnN0IGluZGV4ID0gdGhpcy5zaXplO1xuICAgIGNvbnN0IGFjdGlvbiA9IHRoaXMuX2dldEFjdGlvbih0cmlnZ2VyKTtcbiAgICBjb25zdCBzdGF0ZTogSVN0YXRlSXRlbSA9IHtcbiAgICAgIG5zLFxuICAgICAgc2Nyb2xsOiB7XG4gICAgICAgIHg6IHdpbmRvdy5zY3JvbGxYLFxuICAgICAgICB5OiB3aW5kb3cuc2Nyb2xsWSxcbiAgICAgIH0sXG4gICAgICB1cmwsXG4gICAgfTtcblxuICAgIHRoaXMuX3N0YXRlcy5wdXNoKHN0YXRlKTtcbiAgICB0aGlzLl9wb2ludGVyID0gaW5kZXg7XG5cbiAgICBjb25zdCBpdGVtOiBJSGlzdG9yeUl0ZW0gPSB7XG4gICAgICBmcm9tOiB0aGlzLl9zZXNzaW9uLFxuICAgICAgaW5kZXgsXG4gICAgICBzdGF0ZXM6IFsuLi50aGlzLl9zdGF0ZXNdLFxuICAgIH07XG5cbiAgICBzd2l0Y2ggKGFjdGlvbikge1xuICAgICAgY2FzZSAncHVzaCc6XG4gICAgICAgIHdpbmRvdy5oaXN0b3J5ICYmIHdpbmRvdy5oaXN0b3J5LnB1c2hTdGF0ZShpdGVtLCAnJywgdXJsKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICdyZXBsYWNlJzpcbiAgICAgICAgd2luZG93Lmhpc3RvcnkgJiYgd2luZG93Lmhpc3RvcnkucmVwbGFjZVN0YXRlKGl0ZW0sICcnLCB1cmwpO1xuICAgICAgICBicmVhaztcbiAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gICAgICBkZWZhdWx0OlxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBVcGRhdGUgc3RhdGUuXG4gICAqL1xuICBwdWJsaWMgdXBkYXRlKGRhdGE6IGFueSwgaT86IG51bWJlcik6IHZvaWQge1xuICAgIGNvbnN0IGluZGV4ID0gaSB8fCB0aGlzLl9wb2ludGVyO1xuICAgIGNvbnN0IGV4aXN0aW5nID0gdGhpcy5nZXQoaW5kZXgpO1xuICAgIGNvbnN0IHN0YXRlOiBJU3RhdGVJdGVtID0ge1xuICAgICAgLi4uZXhpc3RpbmcsXG4gICAgICAuLi5kYXRhLFxuICAgIH07XG5cbiAgICB0aGlzLnNldChpbmRleCwgc3RhdGUpO1xuICB9XG5cbiAgLyoqXG4gICAqIFJlbW92ZSBsYXN0IHN0YXRlLlxuICAgKi9cbiAgcHVibGljIHJlbW92ZShpPzogbnVtYmVyKTogdm9pZCB7XG4gICAgaWYgKGkpIHtcbiAgICAgIHRoaXMuX3N0YXRlcy5zcGxpY2UoaSwgMSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuX3N0YXRlcy5wb3AoKTtcbiAgICB9XG5cbiAgICB0aGlzLl9wb2ludGVyLS07XG4gIH1cblxuICAvKipcbiAgICogRGVsZXRlIGFsbCBzdGF0ZXMuXG4gICAqL1xuICBwdWJsaWMgY2xlYXIoKTogdm9pZCB7XG4gICAgdGhpcy5fc3RhdGVzID0gW107XG4gICAgdGhpcy5fcG9pbnRlciA9IC0xO1xuICB9XG5cbiAgLyoqXG4gICAqIFJlcGxhY2UgYWxsIHN0YXRlcy5cbiAgICovXG4gIHB1YmxpYyByZXBsYWNlKG5ld1N0YXRlczogSVN0YXRlSXRlbVtdKTogdm9pZCB7XG4gICAgdGhpcy5fc3RhdGVzID0gbmV3U3RhdGVzO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldCBzdGF0ZSBieSBpbmRleC5cbiAgICovXG4gIHB1YmxpYyBnZXQoaW5kZXg6IG51bWJlcikge1xuICAgIHJldHVybiB0aGlzLl9zdGF0ZXNbaW5kZXhdO1xuICB9XG5cbiAgLyoqXG4gICAqIFNldCBzdGF0ZSBieSBpbmRleC5cbiAgICovXG4gIHB1YmxpYyBzZXQoaTogbnVtYmVyLCBzdGF0ZTogSVN0YXRlSXRlbSkge1xuICAgIHJldHVybiAodGhpcy5fc3RhdGVzW2ldID0gc3RhdGUpO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldCB0aGUgY3VycmVudCBzdGF0ZS5cbiAgICovXG4gIGdldCBjdXJyZW50KCk6IElTdGF0ZUl0ZW0ge1xuICAgIHJldHVybiB0aGlzLl9zdGF0ZXNbdGhpcy5fcG9pbnRlcl07XG4gIH1cblxuICAvKipcbiAgICogR2V0IHRoZSBsYXN0IHN0YXRlICh0b3Agb2YgdGhlIGhpc3Rvcnkgc3RhY2spLlxuICAgKi9cbiAgZ2V0IHN0YXRlKCk6IElTdGF0ZUl0ZW0ge1xuICAgIHJldHVybiB0aGlzLl9zdGF0ZXNbdGhpcy5fc3RhdGVzLmxlbmd0aCAtIDFdO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldCB0aGUgcHJldmlvdXMgc3RhdGUuXG4gICAqL1xuICBnZXQgcHJldmlvdXMoKTogSVN0YXRlSXRlbSB8IG51bGwge1xuICAgIHJldHVybiB0aGlzLl9wb2ludGVyIDwgMSA/IG51bGwgOiB0aGlzLl9zdGF0ZXNbdGhpcy5fcG9pbnRlciAtIDFdO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldCB0aGUgc3RhdGUgc2l6ZS5cbiAgICovXG4gIGdldCBzaXplKCk6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMuX3N0YXRlcy5sZW5ndGg7XG4gIH1cblxuICAvKipcbiAgICogR2V0IHRoZSBoaXN0b3J5IGFjdGlvbjogcHVzaCB2cyByZXBsYWNlXG4gICAqL1xuICBwcml2YXRlIF9nZXRBY3Rpb24odHJpZ2dlcjogVHJpZ2dlcik6IEhpc3RvcnlBY3Rpb24ge1xuICAgIGxldCBhY3Rpb246IEhpc3RvcnlBY3Rpb24gPSAncHVzaCc7XG5cbiAgICAvLyBNYW5hZ2UgYGRhdGEtYmFyYmEtaGlzdG9yeWAgYXR0cmlidXRlXG4gICAgLy8gdG8gZ2V0IHRoZSByaWdodCBhY3Rpb24gKHB1c2ggdnMgcmVwbGFjZSkuXG4gICAgY29uc3QgZWwgPSB0cmlnZ2VyIGFzIEhUTUxBbmNob3JFbGVtZW50O1xuICAgIGNvbnN0IGF0dHIgPSBgJHtzY2hlbWFBdHRyaWJ1dGUucHJlZml4fS0ke3NjaGVtYUF0dHJpYnV0ZS5oaXN0b3J5fWA7XG5cbiAgICBpZiAoZWwuaGFzQXR0cmlidXRlICYmIGVsLmhhc0F0dHJpYnV0ZShhdHRyKSkge1xuICAgICAgYWN0aW9uID0gZWwuZ2V0QXR0cmlidXRlKGF0dHIpIGFzIEhpc3RvcnlBY3Rpb247XG4gICAgfVxuXG4gICAgcmV0dXJuIGFjdGlvbjtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgdGhlIGRpcmVjdGlvbiBvZiBwb3BzdGF0ZSBjaGFuZ2VcbiAgICovXG4gIHByaXZhdGUgX2dldERpcmVjdGlvbihkaWZmOiBudW1iZXIpOiBUcmlnZ2VyIHtcbiAgICAvLyBDaGVjayBpZiBcInNlc3Npb24gc3dpdGNoXCJcbiAgICBpZiAoTWF0aC5hYnMoZGlmZikgPiAxKSB7XG4gICAgICAvLyBFeCA2LTAgPiAwIC0+IGZvcndhcmQsIDAtNiA8IDAgLT4gYmFja1xuICAgICAgcmV0dXJuIGRpZmYgPiAwID8gJ2ZvcndhcmQnIDogJ2JhY2snO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoZGlmZiA9PT0gMCkge1xuICAgICAgICByZXR1cm4gJ3BvcHN0YXRlJztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIEV4IDYtNSA+IDAgLT4gYmFjaywgNS02IDwgMCAtPiBmb3J3YXJkXG4gICAgICAgIHJldHVybiBkaWZmID4gMCA/ICdiYWNrJyA6ICdmb3J3YXJkJztcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuY29uc3QgaGlzdG9yeSA9IG5ldyBIaXN0b3J5KCk7XG5cbmV4cG9ydCB7IGhpc3RvcnkgfTtcbiIsIi8qKlxuICogQGJhcmJhL2NvcmUvdXRpbHMvaGVscGVyc1xuICogPGJyPjxicj5cbiAqICMjIEhlbHBlcnNcbiAqXG4gKiAtIFVwZGF0ZSBuZXh0IHBhZ2UgZGF0YVxuICpcbiAqIEBtb2R1bGUgY29yZS91dGlscy9oZWxwZXJzXG4gKiBAcHJlZmVycmVkXG4gKi9cblxuLyoqKi9cblxuLy8gVGhpcmQtcGFydHlcbmltcG9ydCBwdHIgZnJvbSAncGF0aC10by1yZWdleHAnO1xuLy8gRGVmaW5pdGlvbnNcbmltcG9ydCB7IElUcmFuc2l0aW9uRGF0YSB9IGZyb20gJy4uL2RlZnMnO1xuLy8gVXRpbHNcbmltcG9ydCB7IGRvbSB9IGZyb20gJy4vZG9tJztcbmltcG9ydCB7IGhpc3RvcnkgfSBmcm9tICcuL2hpc3RvcnknO1xuXG4vKipcbiAqIFVwZGF0ZSBgZGF0YS5uZXh0YCwgdGhlIHRpdGxlIGFuZCB0aGUgaGlzdG9yeVxuICovXG5leHBvcnQgY29uc3QgdXBkYXRlID0gYXN5bmMgKFxuICBwYWdlOiBQcm9taXNlPHN0cmluZyB8IHZvaWQ+LFxuICBkYXRhOiBJVHJhbnNpdGlvbkRhdGFcbik6IFByb21pc2U8dm9pZD4gPT4ge1xuICAvLyBJZiBub3QgYWxyZWFkeSB1cGRhdGVkXG4gIGlmICghZGF0YS5uZXh0Lmh0bWwpIHtcbiAgICBjb25zdCBodG1sID0gYXdhaXQgcGFnZTtcbiAgICBjb25zdCB7IG5leHQgfSA9IGRhdGE7XG5cbiAgICBpZiAoaHRtbCkge1xuICAgICAgLy8gc2VlOiBodHRwczovL2dpdGh1Yi5jb20vYmFyYmFqcy9iYXJiYS9pc3N1ZXMvMzYyXG4gICAgICAvLyBjb25zdCBuZXh0RG9jdW1lbnQgPSBkb20udG9Eb2N1bWVudChodG1sKTtcbiAgICAgIGNvbnN0IG5leHREb2N1bWVudCA9IGRvbS50b0VsZW1lbnQoaHRtbCk7XG5cbiAgICAgIG5leHQubmFtZXNwYWNlID0gZG9tLmdldE5hbWVzcGFjZShuZXh0RG9jdW1lbnQpO1xuICAgICAgbmV4dC5jb250YWluZXIgPSBkb20uZ2V0Q29udGFpbmVyKG5leHREb2N1bWVudCk7XG4gICAgICAvLyBzZWUgaHR0cHM6Ly9naXRodWIuY29tL2JhcmJhanMvYmFyYmEvaXNzdWVzLzM2MlxuICAgICAgLy8gbmV4dC5odG1sID0gZG9tLmdldEh0bWwobmV4dERvY3VtZW50KTtcbiAgICAgIC8vIG5leHQuaHRtbCA9IG5leHREb2N1bWVudC5pbm5lckhUTUw7XG4gICAgICBuZXh0Lmh0bWwgPSBodG1sO1xuXG4gICAgICAvLyBVcGRhdGUgaGlzdG9yeSBuYW1lc3BhY2UgKG5vdCBhdmFpbGFibGUgd2hlbiBpbml0aWFsbHkgc2V0KVxuICAgICAgaGlzdG9yeS51cGRhdGUoeyBuczogbmV4dC5uYW1lc3BhY2UgfSk7XG5cbiAgICAgIC8vIFVwZGF0ZSB0aXRsZS5cbiAgICAgIGNvbnN0IHsgdGl0bGUgfSA9IGRvbS50b0RvY3VtZW50KGh0bWwpO1xuXG4gICAgICBkb2N1bWVudC50aXRsZSA9IHRpdGxlO1xuICAgIH1cbiAgfVxufTtcblxuLyoqXG4gKiBOZXh0IHRpY2tcbiAqL1xuZXhwb3J0IGNvbnN0IG5leHRUaWNrID0gKCkgPT5cbiAgbmV3IFByb21pc2UocmVzb2x2ZSA9PiB7XG4gICAgd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZShyZXNvbHZlKTtcbiAgICAvLyBERVY6IHNhbWUgcmVzdWx0P1xuICAgIC8vIHNldFRpbWVvdXQocmVzb2x2ZSwgMCk7XG4gIH0pO1xuXG4vKipcbiAqIFR1cm4gYSByb3V0ZSBzdHJpbmcgc3VjaCBhcyBgL3VzZXIvOm5hbWVgIGludG8gYSByZWd1bGFyIGV4cHJlc3Npb24uXG4gKlxuICogVXNlZCBmb3I6XG4gKlxuICogLSByb3V0ZXMgdG8gaWdub3JlXG4gKiAtIHJvdXRlIHRyYW5zaXRpb24gcmVzb2x1dGlvblxuICpcbiAqIEBzZWUgaHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvcGF0aC10by1yZWdleHBcbiAqL1xuY29uc3QgcGF0aFRvUmVnZXhwID0gcHRyO1xuXG5leHBvcnQgeyBwYXRoVG9SZWdleHAgfTtcbiIsIi8qKlxuICogQGJhcmJhL2NvcmUvdXRpbHMvdXJsXG4gKiA8YnI+PGJyPlxuICogIyMgVVJMIHV0aWxzLlxuICpcbiAqIC0gQ29sbGVjdCBhbmQgc3RydWN0dXJlIGluZm9ybWF0aW9ucyBmcm9tIFVSTHNcbiAqXG4gKiBAbW9kdWxlIGNvcmUvdXRpbHMvdXJsXG4gKi9cblxuLyoqKi9cblxuLy8gRGVmaW5pdGlvbnNcbmltcG9ydCB7IElHZW5lcmljT2JqZWN0LCBJVXJsQmFzZSB9IGZyb20gJy4uL2RlZnMnO1xuXG4vKipcbiAqIEdldCBsb2NhdGlvbiBocmVmLlxuICovXG5leHBvcnQgY29uc3QgZ2V0SHJlZiA9ICgpID0+IHdpbmRvdy5sb2NhdGlvbi5ocmVmO1xuXG4vKipcbiAqIEdldCBsb2NhdGlvbiBvcmlnaW4uXG4gKi9cbmV4cG9ydCBjb25zdCBnZXRPcmlnaW4gPSAoKSA9PiB3aW5kb3cubG9jYXRpb24ub3JpZ2luO1xuXG4vKipcbiAqIEdldCBwb3J0IGJhc2VkIG9uIFVSTCBvciBsb2NhdGlvbi5cbiAqL1xuZXhwb3J0IGNvbnN0IGdldFBvcnQgPSAodXJsOiBzdHJpbmcgPSB3aW5kb3cubG9jYXRpb24uaHJlZikgPT4gcGFyc2UodXJsKS5wb3J0O1xuXG4vKipcbiAqIEdldCBwYXRoIGZyb20gVVJMLlxuICovXG5leHBvcnQgY29uc3QgZ2V0UGF0aCA9ICh1cmw6IHN0cmluZyA9IHdpbmRvdy5sb2NhdGlvbi5ocmVmKSA9PiBwYXJzZSh1cmwpLnBhdGg7XG5cbi8qKlxuICogR2V0IHF1ZXJ5IG9iamVjdCBmcm9tIFVSTC5cbiAqL1xuLy8gZXhwb3J0IGNvbnN0IGdldFF1ZXJ5ID0gKHVybDogc3RyaW5nKTogSUdlbmVyaWNPYmplY3QgPT4gcGFyc2UodXJsKS5xdWVyeTtcblxuLyoqXG4gKiBHZXQgaGFzaCBmcm9tIFVSTC5cbiAqL1xuLy8gZXhwb3J0IGNvbnN0IGdldEhhc2ggPSAodXJsOiBzdHJpbmcpOiBzdHJpbmcgPT4gcGFyc2UodXJsKS5oYXNoO1xuXG4vKipcbiAqIFBhcnNlIFVSTCBmb3IgcGF0aCwgcXVlcnkgYW5kIGhhc2ggYW5kIG1vcmUuXG4gKi9cbmV4cG9ydCBjb25zdCBwYXJzZSA9ICh1cmw6IHN0cmluZyk6IElVcmxCYXNlID0+IHtcbiAgLy8gUG9ydFxuICBsZXQgcG9ydDtcbiAgY29uc3QgbWF0Y2hlcyA9IHVybC5tYXRjaCgvOlxcZCsvKTtcblxuICBpZiAobWF0Y2hlcyA9PT0gbnVsbCkge1xuICAgIGlmICgvXmh0dHAvLnRlc3QodXJsKSkge1xuICAgICAgcG9ydCA9IDgwO1xuICAgIH1cblxuICAgIGlmICgvXmh0dHBzLy50ZXN0KHVybCkpIHtcbiAgICAgIHBvcnQgPSA0NDM7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGNvbnN0IHBvcnRTdHJpbmcgPSBtYXRjaGVzWzBdLnN1YnN0cmluZygxKTtcblxuICAgIHBvcnQgPSBwYXJzZUludChwb3J0U3RyaW5nLCAxMCk7XG4gIH1cblxuICAvLyBQYXRoXG4gIGxldCBwYXRoID0gdXJsLnJlcGxhY2UoZ2V0T3JpZ2luKCksICcnKTtcbiAgbGV0IGhhc2g7XG4gIGxldCBxdWVyeSA9IHt9O1xuXG4gIC8vIEhhc2hcbiAgY29uc3QgaGFzaEluZGV4ID0gcGF0aC5pbmRleE9mKCcjJyk7XG5cbiAgaWYgKGhhc2hJbmRleCA+PSAwKSB7XG4gICAgaGFzaCA9IHBhdGguc2xpY2UoaGFzaEluZGV4ICsgMSk7XG4gICAgcGF0aCA9IHBhdGguc2xpY2UoMCwgaGFzaEluZGV4KTtcbiAgfVxuXG4gIC8vIFF1ZXJ5XG4gIGNvbnN0IHF1ZXJ5SW5kZXggPSBwYXRoLmluZGV4T2YoJz8nKTtcblxuICBpZiAocXVlcnlJbmRleCA+PSAwKSB7XG4gICAgcXVlcnkgPSBwYXJzZVF1ZXJ5KHBhdGguc2xpY2UocXVlcnlJbmRleCArIDEpKTtcbiAgICBwYXRoID0gcGF0aC5zbGljZSgwLCBxdWVyeUluZGV4KTtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgaGFzaCxcbiAgICBwYXRoLFxuICAgIHBvcnQsXG4gICAgcXVlcnksXG4gIH07XG59O1xuXG4vKipcbiAqIFBhcnNlIGEgcXVlcnkgc3RyaW5nIHRvIG9iamVjdC5cbiAqL1xuZXhwb3J0IGNvbnN0IHBhcnNlUXVlcnkgPSAoc3RyOiBzdHJpbmcpID0+XG4gIHN0ci5zcGxpdCgnJicpLnJlZHVjZSgoYWNjOiBJR2VuZXJpY09iamVjdCwgZWw6IHN0cmluZykgPT4ge1xuICAgIGNvbnN0IFtrZXksIHZhbHVlXSA9IGVsLnNwbGl0KCc9Jyk7XG5cbiAgICBhY2Nba2V5XSA9IHZhbHVlO1xuXG4gICAgcmV0dXJuIGFjYztcbiAgfSwge30pO1xuXG4vKipcbiAqIENsZWFuIFVSTCwgcmVtb3ZlIFwiaGFzaFwiIGFuZC9vciBcInRyYWlsaW5nIHNsYXNoXCIuXG4gKi9cbmV4cG9ydCBjb25zdCBjbGVhbiA9ICh1cmw6IHN0cmluZyA9IHdpbmRvdy5sb2NhdGlvbi5ocmVmKSA9PlxuICB1cmwucmVwbGFjZSgvKFxcLyMuKnxcXC98Iy4qKSQvLCAnJyk7XG4iLCIvKipcbiAqIEBiYXJiYS9jb3JlL3V0aWxzL3JlcXVlc3RcbiAqIDxicj48YnI+XG4gKiAjIyBGZXRjaCBwYWdlcyBmb3IgdHJhbnNpdGlvbnMuXG4gKlxuICogLSBJbmNsdWRlcyB0aW1lb3V0XG4gKiAtIFVzZXMgRmV0Y2ggQVBJXG4gKiAtIEhhbmRsZXMgZXJyb3JzXG4gKlxuICogQG1vZHVsZSBjb3JlL3V0aWxzL3JlcXVlc3RcbiAqIEBwcmVmZXJyZWRcbiAqL1xuXG4vKioqL1xuXG4vLyBEZWZpbml0aW9uc1xuaW1wb3J0IHsgUmVxdWVzdEVycm9yIH0gZnJvbSAnLi4vZGVmcyc7XG5cbi8qKlxuICogSW5pdCBhIHBhZ2UgcmVxdWVzdC5cbiAqIEZldGNoIHRoZSBwYWdlIGFuZCByZXR1cm5zIGEgcHJvbWlzZSB3aXRoIHRoZSB0ZXh0IGNvbnRlbnQuXG4gKi9cbmZ1bmN0aW9uIHJlcXVlc3QoXG4gIHVybDogc3RyaW5nLFxuICB0dGw6IG51bWJlciA9IDJlMyxcbiAgcmVxdWVzdEVycm9yOiBSZXF1ZXN0RXJyb3Jcbik6IFByb21pc2U8c3RyaW5nPiB7XG4gIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgY29uc3QgeGhyID0gbmV3IFhNTEh0dHBSZXF1ZXN0KCk7XG5cbiAgICB4aHIub25yZWFkeXN0YXRlY2hhbmdlID0gKCkgPT4ge1xuICAgICAgaWYgKHhoci5yZWFkeVN0YXRlID09PSBYTUxIdHRwUmVxdWVzdC5ET05FKSB7XG4gICAgICAgIGlmICh4aHIuc3RhdHVzID09PSAyMDApIHtcbiAgICAgICAgICByZXNvbHZlKHhoci5yZXNwb25zZVRleHQpO1xuICAgICAgICB9IGVsc2UgaWYgKHhoci5zdGF0dXMpIHtcbiAgICAgICAgICAvLyBIVFRQIGNvZGUgaXMgbm90IDIwMCwgcmVqZWN0IHdpdGggcmVzcG9uc2UuXG4gICAgICAgICAgY29uc3QgcmVzID0ge1xuICAgICAgICAgICAgc3RhdHVzOiB4aHIuc3RhdHVzLFxuICAgICAgICAgICAgc3RhdHVzVGV4dDogeGhyLnN0YXR1c1RleHQsXG4gICAgICAgICAgfTtcbiAgICAgICAgICByZXF1ZXN0RXJyb3IodXJsLCByZXMpO1xuICAgICAgICAgIHJlamVjdChyZXMpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcbiAgICB4aHIub250aW1lb3V0ID0gKCkgPT4ge1xuICAgICAgY29uc3QgZXJyID0gbmV3IEVycm9yKGBUaW1lb3V0IGVycm9yIFske3R0bH1dYCk7XG4gICAgICByZXF1ZXN0RXJyb3IodXJsLCBlcnIpO1xuICAgICAgcmVqZWN0KGVycik7XG4gICAgfTtcbiAgICB4aHIub25lcnJvciA9ICgpID0+IHtcbiAgICAgIGNvbnN0IGVyciA9IG5ldyBFcnJvcihgRmV0Y2ggZXJyb3JgKTtcbiAgICAgIHJlcXVlc3RFcnJvcih1cmwsIGVycik7XG4gICAgICByZWplY3QoZXJyKTtcbiAgICB9O1xuXG4gICAgeGhyLm9wZW4oJ0dFVCcsIHVybCk7XG4gICAgeGhyLnRpbWVvdXQgPSB0dGw7XG4gICAgeGhyLnNldFJlcXVlc3RIZWFkZXIoXG4gICAgICAnQWNjZXB0JyxcbiAgICAgICd0ZXh0L2h0bWwsYXBwbGljYXRpb24veGh0bWwreG1sLGFwcGxpY2F0aW9uL3htbCdcbiAgICApO1xuICAgIHhoci5zZXRSZXF1ZXN0SGVhZGVyKCd4LWJhcmJhJywgJ3llcycpO1xuICAgIHhoci5zZW5kKCk7XG4gIH0pO1xufVxuXG5leHBvcnQgeyByZXF1ZXN0IH07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGlzUHJvbWlzZTtcblxuZnVuY3Rpb24gaXNQcm9taXNlKG9iaikge1xuICByZXR1cm4gISFvYmogJiYgKHR5cGVvZiBvYmogPT09ICdvYmplY3QnIHx8IHR5cGVvZiBvYmogPT09ICdmdW5jdGlvbicpICYmIHR5cGVvZiBvYmoudGhlbiA9PT0gJ2Z1bmN0aW9uJztcbn1cbiIsImltcG9ydCBpc1Byb21pc2UgZnJvbSAnaXMtcHJvbWlzZSc7XG5cbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9TQm91ZHJpYXMvcnVuLWFzeW5jXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuZXhwb3J0IGZ1bmN0aW9uIHJ1bkFzeW5jKFxuICBmdW5jOiAoLi4uYXJnczogYW55W10pID0+IHZvaWQgfCBQcm9taXNlPGFueT4sXG4gIGN0eDogYW55ID0ge31cbik6ICguLi5hcmdzOiBhbnlbXSkgPT4gUHJvbWlzZTxhbnk+IHtcbiAgcmV0dXJuICguLi5hcmdzOiBhbnlbXSkgPT4ge1xuICAgIGxldCBhc3luYyA9IGZhbHNlO1xuXG4gICAgY29uc3QgcHJvbWlzZSA9IG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgIC8vIEFkZCBhc3luYyB0byBjb250ZXh0XG4gICAgICBjdHguYXN5bmMgPSAoKSA9PiB7XG4gICAgICAgIGFzeW5jID0gdHJ1ZTtcblxuICAgICAgICByZXR1cm4gKGVycjogYW55LCB2YWx1ZTogYW55KSA9PiB7XG4gICAgICAgICAgaWYgKGVycikge1xuICAgICAgICAgICAgcmVqZWN0KGVycik7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJlc29sdmUodmFsdWUpO1xuICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgIH07XG5cbiAgICAgIGNvbnN0IGFuc3dlciA9IGZ1bmMuYXBwbHkoY3R4LCBhcmdzIGFzIFtdKTtcblxuICAgICAgaWYgKCFhc3luYykge1xuICAgICAgICBpZiAoaXNQcm9taXNlKGFuc3dlcikpIHtcbiAgICAgICAgICAoYW5zd2VyIGFzIFByb21pc2U8YW55PikudGhlbihyZXNvbHZlLCByZWplY3QpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJlc29sdmUoYW5zd2VyKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuXG4gICAgcmV0dXJuIHByb21pc2U7XG4gIH07XG59XG4iLCIvKipcbiAqIEBiYXJiYS9jb3JlL21vZHVsZXMvaG9va3NcbiAqIDxicj48YnI+XG4gKiAjIyBIb29rcyBtYW5hZ2VyLlxuICpcbiAqIC0gUmVnaXN0ZXIgYW5kIHRyaWdnZXIgaG9va3NcbiAqXG4gKiBIb29rcyBjYW4gYmUgZWFzaWx5IHJlZ2lzdGVyZWQ6XG4gKlxuICogYGBganNcbiAqIGhvb2tzLmxlYXZlKGNhbGxiYWNrLCBjb250ZXh0KTtcbiAqIGBgYFxuICpcbiAqIEBtb2R1bGUgY29yZS9tb2R1bGVzL2hvb2tzXG4gKiBAcHJlZmVycmVkXG4gKi9cblxuLyoqKi9cblxuLy8gRGVmaW5pdGlvbnNcbmltcG9ydCB7IEhvb2tGdW5jdGlvbiwgSG9va01ldGhvZHMsIEhvb2tzQWxsIH0gZnJvbSAnLi9kZWZzJztcbi8vIE1vZHVsZXNcbmltcG9ydCB7IExvZ2dlciB9IGZyb20gJy4vbW9kdWxlcy9Mb2dnZXInO1xuLy8gVXRpbHNcbmltcG9ydCB7IHJ1bkFzeW5jIH0gZnJvbSAnLi91dGlscyc7XG4vLyBUeXBlc1xuaW50ZXJmYWNlIElIb29rSW5mb3Mge1xuICBjdHg6IGFueTtcbiAgZm46IEhvb2tGdW5jdGlvbjtcbn1cblxuZXhwb3J0IGNsYXNzIEhvb2tzIGV4dGVuZHMgSG9va01ldGhvZHMge1xuICAvKipcbiAgICogQWxsb3cgdGhlIHVzZSBvZiBgaG9va3NbbmFtZV0oY2IsIGN0eClgLlxuICAgKi9cbiAgW2tleTogc3RyaW5nXTogYW55O1xuICAvLyBba2V5IGluIEhvb2tzQWxsXT86IGFueTtcbiAgcHVibGljIGxvZ2dlcjogTG9nZ2VyID0gbmV3IExvZ2dlcignQGJhcmJhL2NvcmUnKTtcbiAgLyoqXG4gICAqIEFsbCBhdmFpbGFibGUgaG9va3MuXG4gICAqXG4gICAqIFNlZSBbW0hvb2tzQWxsXV1cbiAgICovXG4gIC8vIFRPRE86IGdldCBob29rcyBmcm9tIGRlZnMgKERSWSk/XG4gIHB1YmxpYyBhbGw6IEhvb2tzQWxsW10gPSBbXG4gICAgJ3JlYWR5JyxcbiAgICAncGFnZScsXG4gICAgJ3Jlc2V0JyxcbiAgICAnY3VycmVudEFkZGVkJyxcbiAgICAnY3VycmVudFJlbW92ZWQnLFxuICAgICduZXh0QWRkZWQnLFxuICAgICduZXh0UmVtb3ZlZCcsXG4gICAgJ2JlZm9yZU9uY2UnLFxuICAgICdvbmNlJyxcbiAgICAnYWZ0ZXJPbmNlJyxcbiAgICAnYmVmb3JlJyxcbiAgICAnYmVmb3JlTGVhdmUnLFxuICAgICdsZWF2ZScsXG4gICAgJ2FmdGVyTGVhdmUnLFxuICAgICdiZWZvcmVFbnRlcicsXG4gICAgJ2VudGVyJyxcbiAgICAnYWZ0ZXJFbnRlcicsXG4gICAgJ2FmdGVyJyxcbiAgXTtcbiAgLyoqXG4gICAqIFJlZ2lzdGVyZWQgaG9va3MuXG4gICAqXG4gICAqIC0gVW5pcXVlIGhvb2sgbmFtZVxuICAgKiAtIEFzc29jaWF0ZWQgZGF0YSBzZXQocykgKGNhbGxiYWNrICsgY29udGV4dClcbiAgICovXG4gIHB1YmxpYyByZWdpc3RlcmVkOiBNYXA8SG9va3NBbGwsIFNldDxJSG9va0luZm9zPj4gPSBuZXcgTWFwKCk7XG5cbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoKTtcbiAgICB0aGlzLmluaXQoKTtcbiAgfVxuXG4gIHB1YmxpYyBpbml0KCkge1xuICAgIHRoaXMucmVnaXN0ZXJlZC5jbGVhcigpO1xuICAgIHRoaXMuYWxsLmZvckVhY2goaG9vayA9PiB7XG4gICAgICBpZiAoIXRoaXNbaG9va10pIHtcbiAgICAgICAgdGhpc1tob29rXSA9IChmbjogSG9va0Z1bmN0aW9uLCBjdHg/OiBhbnkpID0+IHtcbiAgICAgICAgICBpZiAoIXRoaXMucmVnaXN0ZXJlZC5oYXMoaG9vaykpIHtcbiAgICAgICAgICAgIHRoaXMucmVnaXN0ZXJlZC5zZXQoaG9vaywgbmV3IFNldCgpKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgY29uc3Qgc2V0ID0gdGhpcy5yZWdpc3RlcmVkLmdldChob29rKTtcblxuICAgICAgICAgIHNldC5hZGQoe1xuICAgICAgICAgICAgY3R4OiBjdHggfHwge30sXG4gICAgICAgICAgICBmbixcbiAgICAgICAgICB9KTtcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBEbyBob29rLlxuICAgKlxuICAgKiBUcmlnZ2VyIHJlZ2lzdGVyZWQgaG9va3MuXG4gICAqL1xuICBwdWJsaWMgZG8obmFtZTogSG9va3NBbGwsIC4uLmFyZ3M6IGFueSk6IFByb21pc2U8YW55PiB7XG4gICAgaWYgKHRoaXMucmVnaXN0ZXJlZC5oYXMobmFtZSkpIHtcbiAgICAgIC8vIExldCdzIHN0YXJ0IGEgY2hhaW4gb2YgcHJvbWlzZXNcbiAgICAgIGxldCBjaGFpbiA9IFByb21pc2UucmVzb2x2ZSgpO1xuXG4gICAgICB0aGlzLnJlZ2lzdGVyZWQuZ2V0KG5hbWUpLmZvckVhY2goaG9vayA9PiB7XG4gICAgICAgIC8vIENoYWluIGFzeW5jIGhvb2tzIHByb21pc2lmaWVkXG4gICAgICAgIGNoYWluID0gY2hhaW4udGhlbigoKSA9PiBydW5Bc3luYyhob29rLmZuLCBob29rLmN0eCkoLi4uYXJncykpO1xuICAgICAgfSk7XG5cbiAgICAgIHJldHVybiBjaGFpbi5jYXRjaChlcnJvciA9PiB7XG4gICAgICAgIHRoaXMubG9nZ2VyLmRlYnVnKGBIb29rIGVycm9yIFske25hbWV9XWApO1xuICAgICAgICB0aGlzLmxvZ2dlci5lcnJvcihlcnJvcik7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCk7XG4gIH1cblxuICBwdWJsaWMgY2xlYXIoKTogdm9pZCB7XG4gICAgdGhpcy5hbGwuZm9yRWFjaChob29rID0+IHtcbiAgICAgIGRlbGV0ZSB0aGlzW2hvb2tdO1xuICAgIH0pO1xuXG4gICAgdGhpcy5pbml0KCk7XG4gIH1cblxuICAvKipcbiAgICogSGVscCwgcHJpbnQgYXZhaWxhYmxlIGFuZCByZWdpc3RlcmVkIGhvb2tzLlxuICAgKi9cbiAgcHVibGljIGhlbHAoKTogdm9pZCB7XG4gICAgdGhpcy5sb2dnZXIuaW5mbyhgQXZhaWxhYmxlIGhvb2tzOiAke3RoaXMuYWxsLmpvaW4oJywnKX1gKTtcbiAgICBjb25zdCByZWdpc3RlcmVkOiBzdHJpbmdbXSA9IFtdO1xuICAgIHRoaXMucmVnaXN0ZXJlZC5mb3JFYWNoKCh2YWx1ZSwga2V5KSA9PiByZWdpc3RlcmVkLnB1c2goa2V5KSk7XG4gICAgdGhpcy5sb2dnZXIuaW5mbyhgUmVnaXN0ZXJlZCBob29rczogJHtyZWdpc3RlcmVkLmpvaW4oJywnKX1gKTtcbiAgfVxufVxuXG5jb25zdCBob29rcyA9IG5ldyBIb29rcygpO1xuXG5leHBvcnQgeyBob29rcyB9O1xuIiwiLyoqXG4gKiBAYmFyYmEvY29yZS9tb2R1bGVzL2lnbm9yZVxuICogPGJyPjxicj5cbiAqICMjIE1hbmFnZSBpZ25vcmUgb3B0aW9ucy5cbiAqXG4gKiAtIGNhY2hlXG4gKiAtIHByZWZldGNoXG4gKlxuICogQG1vZHVsZSBjb3JlL21vZHVsZXMvaWdub3JlXG4gKiBAcHJlZmVycmVkXG4gKi9cblxuLyoqKi9cblxuLy8gRGVmaW5pdGlvbnNcbmltcG9ydCB7IElnbm9yZU9wdGlvbiB9IGZyb20gJy4uL2RlZnMnO1xuLy8gVXRpbHNcbmltcG9ydCB7IHBhdGhUb1JlZ2V4cCB9IGZyb20gJy4uL3V0aWxzL2hlbHBlcnMnO1xuaW1wb3J0IHsgcGFyc2UgfSBmcm9tICcuLi91dGlscy91cmwnO1xuXG5leHBvcnQgY2xhc3MgSWdub3JlIHtcbiAgcHJpdmF0ZSBfaWdub3JlQWxsOiBib29sZWFuO1xuICBwcml2YXRlIF9pZ25vcmVSZWdleGVzOiBSZWdFeHBbXSA9IFtdO1xuXG4gIGNvbnN0cnVjdG9yKGlnbm9yZTogSWdub3JlT3B0aW9uKSB7XG4gICAgaWYgKHR5cGVvZiBpZ25vcmUgPT09ICdib29sZWFuJykge1xuICAgICAgdGhpcy5faWdub3JlQWxsID0gaWdub3JlO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb25zdCBwYXRocyA9IEFycmF5LmlzQXJyYXkoaWdub3JlKSA/IGlnbm9yZSA6IFtpZ25vcmVdO1xuXG4gICAgICB0aGlzLl9pZ25vcmVSZWdleGVzID0gcGF0aHMubWFwKHAgPT4gcGF0aFRvUmVnZXhwKHApKTtcbiAgICB9XG4gIH1cblxuICBwdWJsaWMgY2hlY2tIcmVmKGhyZWY6IHN0cmluZyk6IGJvb2xlYW4ge1xuICAgIGlmICh0eXBlb2YgdGhpcy5faWdub3JlQWxsID09PSAnYm9vbGVhbicpIHtcbiAgICAgIHJldHVybiB0aGlzLl9pZ25vcmVBbGw7XG4gICAgfVxuXG4gICAgY29uc3QgeyBwYXRoIH0gPSBwYXJzZShocmVmKTtcblxuICAgIHJldHVybiB0aGlzLl9pZ25vcmVSZWdleGVzLnNvbWUocmVnZXggPT4gcmVnZXguZXhlYyhwYXRoKSAhPT0gbnVsbCk7XG4gIH1cbn1cbiIsIi8qKlxuICogQGJhcmJhL2NvcmUvbW9kdWxlcy9jYWNoZVxuICogPGJyPjxicj5cbiAqICMjIENhY2hlIGZvciBzdG9yaW5nIFVSTCAvIEhUTUwuXG4gKlxuICogQG1vZHVsZSBjb3JlL21vZHVsZXMvY2FjaGVcbiAqIEBwcmVmZXJyZWRcbiAqL1xuXG4vKioqL1xuXG4vLyBEZWZpbml0aW9uc1xuaW1wb3J0IHsgQ2FjaGVBY3Rpb24sIENhY2hlUmVxdWVzdCwgSUNhY2hlRGF0YSwgSWdub3JlT3B0aW9uIH0gZnJvbSAnLi4vZGVmcyc7XG4vLyBNb2R1bGVzXG5pbXBvcnQgeyBJZ25vcmUgfSBmcm9tICcuL0lnbm9yZSc7XG5cbmV4cG9ydCBjbGFzcyBDYWNoZSBleHRlbmRzIElnbm9yZSB7XG4gIHByaXZhdGUgX3N0YXRlOiBNYXA8c3RyaW5nLCBJQ2FjaGVEYXRhPiA9IG5ldyBNYXAoKTtcblxuICBjb25zdHJ1Y3RvcihpZ25vcmU6IElnbm9yZU9wdGlvbikge1xuICAgIHN1cGVyKGlnbm9yZSk7XG4gIH1cblxuICAvKipcbiAgICogU2V0IHZhbHVlIHRvIGNhY2hlXG4gICAqL1xuICBwdWJsaWMgc2V0KFxuICAgIGhyZWY6IHN0cmluZyxcbiAgICByZXF1ZXN0OiBDYWNoZVJlcXVlc3QsXG4gICAgYWN0aW9uOiBDYWNoZUFjdGlvblxuICApOiBJQ2FjaGVEYXRhIHtcbiAgICB0aGlzLl9zdGF0ZS5zZXQoaHJlZiwge1xuICAgICAgYWN0aW9uLFxuICAgICAgcmVxdWVzdCxcbiAgICB9KTtcblxuICAgIHJldHVybiB7XG4gICAgICBhY3Rpb24sXG4gICAgICByZXF1ZXN0LFxuICAgIH07XG4gIH1cblxuICAvKipcbiAgICogR2V0IGRhdGEgZnJvbSBjYWNoZVxuICAgKi9cbiAgcHVibGljIGdldChocmVmOiBzdHJpbmcpOiBJQ2FjaGVEYXRhIHtcbiAgICByZXR1cm4gdGhpcy5fc3RhdGUuZ2V0KGhyZWYpO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldCByZXF1ZXN0IGZyb20gY2FjaGVcbiAgICovXG4gIHB1YmxpYyBnZXRSZXF1ZXN0KGhyZWY6IHN0cmluZyk6IENhY2hlUmVxdWVzdCB7XG4gICAgcmV0dXJuIHRoaXMuX3N0YXRlLmdldChocmVmKS5yZXF1ZXN0O1xuICB9XG5cbiAgLyoqXG4gICAqIEdldCBhY3Rpb24gZnJvbSBjYWNoZVxuICAgKi9cbiAgcHVibGljIGdldEFjdGlvbihocmVmOiBzdHJpbmcpOiBDYWNoZUFjdGlvbiB7XG4gICAgcmV0dXJuIHRoaXMuX3N0YXRlLmdldChocmVmKS5hY3Rpb247XG4gIH1cblxuICAvKipcbiAgICogQ2hlY2sgaWYgdmFsdWUgZXhpc3RzIGludG8gY2FjaGVcbiAgICovXG4gIHB1YmxpYyBoYXMoaHJlZjogc3RyaW5nKTogYm9vbGVhbiB7XG4gICAgLyogaXN0YW5idWwgaWdub3JlIGVsc2UgKi9cbiAgICBpZiAodGhpcy5jaGVja0hyZWYoaHJlZikpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuX3N0YXRlLmhhcyhocmVmKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBEZWxldGUgdmFsdWUgZnJvbSBjYWNoZVxuICAgKi9cbiAgcHVibGljIGRlbGV0ZShocmVmOiBzdHJpbmcpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5fc3RhdGUuZGVsZXRlKGhyZWYpO1xuICB9XG5cbiAgLyoqXG4gICAqIFVwZGF0ZSBjYWNoZSB2YWx1ZVxuICAgKi9cbiAgcHVibGljIHVwZGF0ZShocmVmOiBzdHJpbmcsIGRhdGE6IElDYWNoZURhdGEpOiBJQ2FjaGVEYXRhIHtcbiAgICBjb25zdCBzdGF0ZSA9IHtcbiAgICAgIC4uLnRoaXMuX3N0YXRlLmdldChocmVmKSxcbiAgICAgIC4uLmRhdGEsXG4gICAgfTtcbiAgICB0aGlzLl9zdGF0ZS5zZXQoaHJlZiwgc3RhdGUpO1xuXG4gICAgcmV0dXJuIHN0YXRlO1xuICB9XG59XG4iLCIvKipcbiAqIEBiYXJiYS9jb3JlL21vZHVsZXMvcHJldmVudFxuICogPGJyPjxicj5cbiAqICMjIFByZXZlbnQgY2hlY2tzLlxuICpcbiAqIC0gR2F0aGVycyBhbGwgdGhlIHRlc3RzIHRoYXQgYWxsb3cgQmFyYmEgdG8gd29yayBhbmQgcGxheSB0cmFuc2l0aW9uc1xuICpcbiAqIEBtb2R1bGUgY29yZS9tb2R1bGVzL3ByZXZlbnRcbiAqIEBwcmVmZXJyZWRcbiAqL1xuXG4vKioqL1xuXG4vLyBEZWZpbml0aW9uc1xuaW1wb3J0IHsgSWdub3JlT3B0aW9uLCBMaW5rLCBQcmV2ZW50Q2hlY2sgfSBmcm9tICcuLi9kZWZzJztcbi8vIFNjaGVtYXNcbmltcG9ydCB7IHNjaGVtYUF0dHJpYnV0ZSB9IGZyb20gJy4uL3NjaGVtYXMvYXR0cmlidXRlJztcbi8vIFV0aWxzXG5pbXBvcnQgeyB1cmwgfSBmcm9tICcuLi91dGlscyc7XG4vLyBNb2R1bGVzXG5pbXBvcnQgeyBJZ25vcmUgfSBmcm9tICcuL0lnbm9yZSc7XG5cbi8qKlxuICogTWFrZSBzdXJlIHRoZSBicm93c2VyIHN1cHBvcnRzIGBoaXN0b3J5LnB1c2hTdGF0ZWAuXG4gKi9cbmNvbnN0IHB1c2hTdGF0ZTogUHJldmVudENoZWNrID0gKCkgPT4gIXdpbmRvdy5oaXN0b3J5LnB1c2hTdGF0ZTtcblxuLyoqXG4gKiBNYWtlIHN1cmUgdGhlcmUgaXMgYW4gYGVsYCBhbmQgYGhyZWZgLlxuICovXG5jb25zdCBleGlzdHM6IFByZXZlbnRDaGVjayA9ICh7IGVsLCBocmVmIH0pID0+ICFlbCB8fCAhaHJlZjtcblxuLyoqXG4gKiBJZiB0aGUgdXNlciBpcyBwcmVzc2luZyBjdHJsICsgY2xpY2ssIHRoZSBicm93c2VyIHdpbGwgb3BlbiBhIG5ldyB0YWIuXG4gKi9cbmNvbnN0IG5ld1RhYjogUHJldmVudENoZWNrID0gKHsgZXZlbnQgfSkgPT5cbiAgKGV2ZW50IGFzIEtleWJvYXJkRXZlbnQpLndoaWNoID4gMSB8fFxuICAoZXZlbnQgYXMgS2V5Ym9hcmRFdmVudCkubWV0YUtleSB8fFxuICAoZXZlbnQgYXMgS2V5Ym9hcmRFdmVudCkuY3RybEtleSB8fFxuICAoZXZlbnQgYXMgS2V5Ym9hcmRFdmVudCkuc2hpZnRLZXkgfHxcbiAgKGV2ZW50IGFzIEtleWJvYXJkRXZlbnQpLmFsdEtleTtcblxuLyoqXG4gKiBJZiB0aGUgbGluayBoYXMgYF9ibGFua2AgdGFyZ2V0LlxuICovXG5jb25zdCBibGFuazogUHJldmVudENoZWNrID0gKHsgZWwgfSkgPT5cbiAgZWwuaGFzQXR0cmlidXRlKCd0YXJnZXQnKSAmJiAoZWwgYXMgTGluaykudGFyZ2V0ID09PSAnX2JsYW5rJztcblxuLyoqXG4gKiBJZiB0aGUgZG9tYWluIGlzIHRoZSBzYW1lIChpbiBvcmRlciB0byBhdm9pZCBwdXNoU3RhdGUgY3Jvc3Mgb3JpZ2luIHNlY3VyaXR5IHByb2JsZW0pLlxuICogTm90ZTogU1ZHQUVsZW1lbnQgZG8gbm90IGhhdmUgYHByb3RvY29sYCBuZWl0aGVyIGBob3N0bmFtZWAgcHJvcGVydGllcy5cbiAqL1xuY29uc3QgY29yc0RvbWFpbjogUHJldmVudENoZWNrID0gKHsgZWwgfSkgPT5cbiAgKChlbCBhcyBIVE1MQW5jaG9yRWxlbWVudCkucHJvdG9jb2wgIT09IHVuZGVmaW5lZCAmJlxuICAgIHdpbmRvdy5sb2NhdGlvbi5wcm90b2NvbCAhPT0gKGVsIGFzIEhUTUxBbmNob3JFbGVtZW50KS5wcm90b2NvbCkgfHxcbiAgKChlbCBhcyBIVE1MQW5jaG9yRWxlbWVudCkuaG9zdG5hbWUgIT09IHVuZGVmaW5lZCAmJlxuICAgIHdpbmRvdy5sb2NhdGlvbi5ob3N0bmFtZSAhPT0gKGVsIGFzIEhUTUxBbmNob3JFbGVtZW50KS5ob3N0bmFtZSk7XG5cbi8qKlxuICogSWYgdGhlIHBvcnQgaXMgdGhlIHNhbWUuXG4gKiBOb3RlOiBTVkdBRWxlbWVudCBkbyBub3QgaGF2ZSBgcG9ydGAgcHJvcGVydHkuXG4gKi9cbmNvbnN0IGNvcnNQb3J0OiBQcmV2ZW50Q2hlY2sgPSAoeyBlbCB9KSA9PlxuICAoZWwgYXMgSFRNTEFuY2hvckVsZW1lbnQpLnBvcnQgIT09IHVuZGVmaW5lZCAmJlxuICB1cmwuZ2V0UG9ydCgpICE9PSB1cmwuZ2V0UG9ydCgoZWwgYXMgSFRNTEFuY2hvckVsZW1lbnQpLmhyZWYpO1xuXG4vKipcbiAqIElmIHRoZSBsaW5rIGhhcyBkb3dubG9hZCBhdHRyaWJ1dGUuXG4gKi9cbmNvbnN0IGRvd25sb2FkOiBQcmV2ZW50Q2hlY2sgPSAoeyBlbCB9KSA9PlxuICBlbC5nZXRBdHRyaWJ1dGUgJiYgdHlwZW9mIGVsLmdldEF0dHJpYnV0ZSgnZG93bmxvYWQnKSA9PT0gJ3N0cmluZyc7XG5cbi8qKlxuICogSWYgdGhlIGxpbmtzIGNvbnRhaW5zIFtkYXRhLWJhcmJhLXByZXZlbnRdIG9yIFtkYXRhLWJhcmJhLXByZXZlbnQ9XCJzZWxmXCJdLlxuICovXG5jb25zdCBwcmV2ZW50U2VsZjogUHJldmVudENoZWNrID0gKHsgZWwgfSkgPT5cbiAgZWwuaGFzQXR0cmlidXRlKGAke3NjaGVtYUF0dHJpYnV0ZS5wcmVmaXh9LSR7c2NoZW1hQXR0cmlidXRlLnByZXZlbnR9YCk7XG5cbi8qKlxuICogSWYgc29tZSBsaW5rIGFuY2VzdG9yIGNvbnRhaW5zIFtkYXRhLWJhcmJhLXByZXZlbnQ9XCJhbGxcIl0uXG4gKi9cbmNvbnN0IHByZXZlbnRBbGw6IFByZXZlbnRDaGVjayA9ICh7IGVsIH0pID0+XG4gIEJvb2xlYW4oXG4gICAgZWwuY2xvc2VzdChgWyR7c2NoZW1hQXR0cmlidXRlLnByZWZpeH0tJHtzY2hlbWFBdHRyaWJ1dGUucHJldmVudH09XCJhbGxcIl1gKVxuICApO1xuXG4vKipcbiAqIElmIHRoZSBsaW5rIGlzIHRoZSBjdXJyZW50IFVSTC5cbiAqXG4gKiA+IE5vdCBpbiB0aGUgdGVzdCBzdWl0ZS5cbiAqL1xuY29uc3Qgc2FtZVVybDogUHJldmVudENoZWNrID0gKHsgaHJlZiB9KSA9PlxuICB1cmwuY2xlYW4oaHJlZikgPT09IHVybC5jbGVhbigpICYmIHVybC5nZXRQb3J0KGhyZWYpID09PSB1cmwuZ2V0UG9ydCgpO1xuXG5leHBvcnQgY2xhc3MgUHJldmVudCBleHRlbmRzIElnbm9yZSB7XG4gIHB1YmxpYyBzdWl0ZTogc3RyaW5nW10gPSBbXTtcbiAgcHVibGljIHRlc3RzOiBNYXA8c3RyaW5nLCBQcmV2ZW50Q2hlY2s+ID0gbmV3IE1hcCgpO1xuXG4gIGNvbnN0cnVjdG9yKGlnbm9yZTogSWdub3JlT3B0aW9uKSB7XG4gICAgc3VwZXIoaWdub3JlKTtcbiAgICB0aGlzLmluaXQoKTtcbiAgfVxuXG4gIHB1YmxpYyBpbml0KCk6IHZvaWQge1xuICAgIC8vIEFkZCBkZWZhdWx0c1xuICAgIHRoaXMuYWRkKCdwdXNoU3RhdGUnLCBwdXNoU3RhdGUpO1xuICAgIHRoaXMuYWRkKCdleGlzdHMnLCBleGlzdHMpO1xuICAgIHRoaXMuYWRkKCduZXdUYWInLCBuZXdUYWIpO1xuICAgIHRoaXMuYWRkKCdibGFuaycsIGJsYW5rKTtcbiAgICB0aGlzLmFkZCgnY29yc0RvbWFpbicsIGNvcnNEb21haW4pO1xuICAgIHRoaXMuYWRkKCdjb3JzUG9ydCcsIGNvcnNQb3J0KTtcbiAgICB0aGlzLmFkZCgnZG93bmxvYWQnLCBkb3dubG9hZCk7XG4gICAgdGhpcy5hZGQoJ3ByZXZlbnRTZWxmJywgcHJldmVudFNlbGYpO1xuICAgIHRoaXMuYWRkKCdwcmV2ZW50QWxsJywgcHJldmVudEFsbCk7XG5cbiAgICAvLyBPdXRzaWRlIG9mIHRoZSB0ZXN0IHN1aXRlXG4gICAgdGhpcy5hZGQoJ3NhbWVVcmwnLCBzYW1lVXJsLCBmYWxzZSk7XG4gIH1cblxuICBwdWJsaWMgYWRkKG5hbWU6IHN0cmluZywgY2hlY2s6IFByZXZlbnRDaGVjaywgc3VpdGU6IGJvb2xlYW4gPSB0cnVlKTogdm9pZCB7XG4gICAgdGhpcy50ZXN0cy5zZXQobmFtZSwgY2hlY2spO1xuICAgIHN1aXRlICYmIHRoaXMuc3VpdGUucHVzaChuYW1lKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSdW4gaW5kaXZpZHVhbCB0ZXN0XG4gICAqL1xuICBwdWJsaWMgcnVuKG5hbWU6IHN0cmluZywgZWw6IExpbmssIGV2ZW50OiBFdmVudCwgaHJlZjogc3RyaW5nKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMudGVzdHMuZ2V0KG5hbWUpKHtcbiAgICAgIGVsLFxuICAgICAgZXZlbnQsXG4gICAgICBocmVmLFxuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIFJ1biB0ZXN0IHN1aXRlXG4gICAqL1xuICBwdWJsaWMgY2hlY2tMaW5rKGVsOiBMaW5rLCBldmVudDogRXZlbnQsIGhyZWY6IHN0cmluZyk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0aGlzLnN1aXRlLnNvbWUobmFtZSA9PiB0aGlzLnJ1bihuYW1lLCBlbCwgZXZlbnQsIGhyZWYpKTtcbiAgfVxufVxuIiwiLy8gaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvRXJyb3JcbmV4cG9ydCBjbGFzcyBCYXJiYUVycm9yIGV4dGVuZHMgRXJyb3Ige1xuICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICBjb25zdHJ1Y3RvcihcbiAgICBwdWJsaWMgZXJyb3I6IEVycm9yLFxuICAgIHB1YmxpYyBsYWJlbCA9ICdCYXJiYSBlcnJvcicsXG4gICAgLi4ucGFyYW1zOiBhbnlbXVxuICApIHtcbiAgICAvLyBQYXNzIHJlbWFpbmluZyBhcmd1bWVudHMgKGluY2x1ZGluZyB2ZW5kb3Igc3BlY2lmaWMgb25lcykgdG8gcGFyZW50IGNvbnN0cnVjdG9yXG4gICAgc3VwZXIoLi4ucGFyYW1zKTtcblxuICAgIC8vIE1haW50YWlucyBwcm9wZXIgc3RhY2sgdHJhY2UgZm9yIHdoZXJlIG91ciBlcnJvciB3YXMgdGhyb3duIChvbmx5IGF2YWlsYWJsZSBvbiBWOClcbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgZWxzZSAqL1xuICAgIGlmIChFcnJvci5jYXB0dXJlU3RhY2tUcmFjZSkge1xuICAgICAgRXJyb3IuY2FwdHVyZVN0YWNrVHJhY2UodGhpcywgQmFyYmFFcnJvcik7XG4gICAgfVxuXG4gICAgdGhpcy5uYW1lID0gJ0JhcmJhRXJyb3InO1xuICB9XG59XG4iLCIvKipcbiAqIEBiYXJiYS9jb3JlL21vZHVsZXMvc3RvcmVcbiAqIDxicj48YnI+XG4gKiAjIyBUcmFuc2l0aW9ucyBzdG9yZS5cbiAqXG4gKiAtIFJlc29sdmUgdHJhbnNpdGlvblxuICogLSBNYW5hZ2UgcnVsZXNcbiAqXG4gKiBAbW9kdWxlIGNvcmUvbW9kdWxlcy9zdG9yZVxuICogQHByZWZlcnJlZFxuICovXG5cbi8qKiovXG5cbi8vIERlZmluaXRpb25zXG5pbXBvcnQge1xuICBJUnVsZSxcbiAgSVJ1bGVzLFxuICBJVHJhbnNpdGlvbkRhdGEsXG4gIElUcmFuc2l0aW9uRmlsdGVycyxcbiAgSVRyYW5zaXRpb25PbmNlLFxuICBJVHJhbnNpdGlvblBhZ2UsXG4gIFJ1bGVOYW1lLFxufSBmcm9tICcuLi9kZWZzJztcblxuLy8gTW9kdWxlc1xuaW1wb3J0IHsgTG9nZ2VyIH0gZnJvbSAnLi9Mb2dnZXInO1xuXG5leHBvcnQgY2xhc3MgU3RvcmUge1xuICBwdWJsaWMgbG9nZ2VyOiBMb2dnZXIgPSBuZXcgTG9nZ2VyKCdAYmFyYmEvY29yZScpO1xuICAvKipcbiAgICogQWxsIHJlZ2lzdGVyZWQgdHJhbnNpdGlvbnMuXG4gICAqL1xuICBwdWJsaWMgYWxsOiBJVHJhbnNpdGlvblBhZ2VbXSA9IFtdO1xuICAvKipcbiAgICogXCJQYWdlIG9ubHlcIiByZWdpc3RlcmVkIHRyYW5zaXRpb25zLlxuICAgKi9cbiAgcHVibGljIHBhZ2U6IElUcmFuc2l0aW9uUGFnZVtdID0gW107XG4gIC8qKlxuICAgKiBcIk9uY2Ugb25seVwiIHJlZ2lzdGVyZWQgdHJhbnNpdGlvbnMuXG4gICAqL1xuICBwdWJsaWMgb25jZTogSVRyYW5zaXRpb25PbmNlW10gPSBbXTtcbiAgLyoqXG4gICAqIFJ1bGVzIGZvciB0cmFuc2l0aW9uIHJlc29sdXRpb24uXG4gICAqXG4gICAqIERlZmF1bHRzOlxuICAgKlxuICAgKiAtIG5hbWVzcGFjZVxuICAgKiAtIGN1c3RvbVxuICAgKi9cbiAgcHJpdmF0ZSBfcnVsZXM6IElSdWxlW10gPSBbXG4gICAge1xuICAgICAgbmFtZTogJ25hbWVzcGFjZScsXG4gICAgICB0eXBlOiAnc3RyaW5ncycsXG4gICAgfSxcbiAgICB7XG4gICAgICBuYW1lOiAnY3VzdG9tJyxcbiAgICAgIHR5cGU6ICdmdW5jdGlvbicsXG4gICAgfSxcbiAgXTtcblxuICAvKipcbiAgICogSW5pdCBzdG9yZS5cbiAgICovXG4gIGNvbnN0cnVjdG9yKHRyYW5zaXRpb25zOiBJVHJhbnNpdGlvblBhZ2VbXSA9IFtdKSB7XG4gICAgLyogaXN0YW5idWwgaWdub3JlIGVsc2UgKi9cbiAgICBpZiAodHJhbnNpdGlvbnMpIHtcbiAgICAgIC8vIFRPRE86IGFkZCBjaGVjayBmb3IgdmFsaWQgdHJhbnNpdGlvbnM/IGNyaXRlcmlhPyAob25jZSB8fCBlbnRlciAmJiBsZWF2ZSlcbiAgICAgIHRoaXMuYWxsID0gdGhpcy5hbGwuY29uY2F0KHRyYW5zaXRpb25zKTtcbiAgICB9XG4gICAgdGhpcy51cGRhdGUoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBBZGQgcnVsZSBvciB0cmFuc2l0aW9uLlxuICAgKi9cbiAgcHVibGljIGFkZCh0eXBlOiAncnVsZScgfCAndHJhbnNpdGlvbicsIGRhdGE6IGFueSk6IHZvaWQge1xuICAgIHN3aXRjaCAodHlwZSkge1xuICAgICAgY2FzZSAncnVsZSc6XG4gICAgICAgIC8vIFRPRE86IGNoZWNrIGZvciB2YWxpZCBydWxlXG4gICAgICAgIHRoaXMuX3J1bGVzLnNwbGljZShkYXRhLnBvc2l0aW9uIHx8IDAsIDAsIGRhdGEudmFsdWUpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJ3RyYW5zaXRpb24nOlxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgLy8gVE9ETzogY2hlY2sgZm9yIHZhbGlkIHRyYW5zaXRpb25cbiAgICAgICAgdGhpcy5hbGwucHVzaChkYXRhKTtcbiAgICAgICAgYnJlYWs7XG4gICAgfVxuXG4gICAgdGhpcy51cGRhdGUoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXNvbHZlIHRyYW5zaXRpb24uXG4gICAqL1xuICBwdWJsaWMgcmVzb2x2ZShcbiAgICBkYXRhOiBJVHJhbnNpdGlvbkRhdGEsXG4gICAgZmlsdGVyczogSVRyYW5zaXRpb25GaWx0ZXJzID0ge31cbiAgKTogSVRyYW5zaXRpb25PbmNlIHwgSVRyYW5zaXRpb25QYWdlIHtcbiAgICAvLyBGaWx0ZXIgb24gXCJvbmNlXCJcbiAgICBsZXQgdHJhbnNpdGlvbnMgPSBmaWx0ZXJzLm9uY2UgPyB0aGlzLm9uY2UgOiB0aGlzLnBhZ2U7XG5cbiAgICAvLyBGaWx0ZXIgb24gXCJzZWxmXCJcbiAgICBpZiAoZmlsdGVycy5zZWxmKSB7XG4gICAgICB0cmFuc2l0aW9ucyA9IHRyYW5zaXRpb25zLmZpbHRlcih0ID0+IHQubmFtZSAmJiB0Lm5hbWUgPT09ICdzZWxmJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRyYW5zaXRpb25zID0gdHJhbnNpdGlvbnMuZmlsdGVyKHQgPT4gIXQubmFtZSB8fCB0Lm5hbWUgIT09ICdzZWxmJyk7XG4gICAgfVxuXG4gICAgLy8gQWxsIG1hdGNoaW5nIHRyYW5zaXRpb24gaW5mb3NcbiAgICBjb25zdCBtYXRjaGluZyA9IG5ldyBNYXAoKTtcblxuICAgIC8vIEFjdGl2ZSA9IGZpcnN0IG9mIHZhbGlkIHRyYW5zaXRpb25zXG4gICAgLy8gc29ydGVkIGJ5IGRpcmVjdGlvbnMgKGZyb20vdG8sIGZyb20gfHwgdG8sIOKApilcbiAgICBjb25zdCBhY3RpdmUgPSB0cmFuc2l0aW9ucy5maW5kKHQgPT4ge1xuICAgICAgbGV0IHZhbGlkID0gdHJ1ZTtcbiAgICAgIGNvbnN0IG1hdGNoID0ge307XG5cbiAgICAgIGlmIChmaWx0ZXJzLnNlbGYgJiYgdC5uYW1lID09PSAnc2VsZicpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG5cbiAgICAgIC8vIENoZWNrIHJ1bGVzXG4gICAgICB0aGlzLl9ydWxlcy5yZXZlcnNlKCkuZm9yRWFjaChydWxlID0+IHtcbiAgICAgICAgaWYgKHZhbGlkKSB7XG4gICAgICAgICAgdmFsaWQgPSB0aGlzLl9jaGVjayh0LCBydWxlLCBkYXRhLCBtYXRjaCk7XG4gICAgICAgICAgLy8gRnJvbS90byBjaGVja1xuICAgICAgICAgIGlmICh0LmZyb20gJiYgdC50bykge1xuICAgICAgICAgICAgdmFsaWQgPVxuICAgICAgICAgICAgICB0aGlzLl9jaGVjayh0LCBydWxlLCBkYXRhLCBtYXRjaCwgJ2Zyb20nKSAmJlxuICAgICAgICAgICAgICB0aGlzLl9jaGVjayh0LCBydWxlLCBkYXRhLCBtYXRjaCwgJ3RvJyk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmICh0LmZyb20gJiYgIXQudG8pIHtcbiAgICAgICAgICAgIHZhbGlkID0gdGhpcy5fY2hlY2sodCwgcnVsZSwgZGF0YSwgbWF0Y2gsICdmcm9tJyk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmICghdC5mcm9tICYmIHQudG8pIHtcbiAgICAgICAgICAgIHZhbGlkID0gdGhpcy5fY2hlY2sodCwgcnVsZSwgZGF0YSwgbWF0Y2gsICd0bycpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSk7XG5cbiAgICAgIG1hdGNoaW5nLnNldCh0LCBtYXRjaCk7XG5cbiAgICAgIHJldHVybiB2YWxpZDtcbiAgICB9KTtcblxuICAgIGNvbnN0IGFjdGl2ZU1hdGNoID0gbWF0Y2hpbmcuZ2V0KGFjdGl2ZSk7XG4gICAgY29uc3QgdHJhbnNpdGlvblR5cGUgPSBbXTtcbiAgICBpZiAoZmlsdGVycy5vbmNlKSB7XG4gICAgICB0cmFuc2l0aW9uVHlwZS5wdXNoKCdvbmNlJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRyYW5zaXRpb25UeXBlLnB1c2goJ3BhZ2UnKTtcbiAgICB9XG4gICAgaWYgKGZpbHRlcnMuc2VsZikge1xuICAgICAgdHJhbnNpdGlvblR5cGUucHVzaCgnc2VsZicpO1xuICAgIH1cblxuICAgIGlmIChhY3RpdmVNYXRjaCkge1xuICAgICAgLy8gTG9nIHJlc29sdmVkIHRyYW5zaXRpb25cbiAgICAgIGNvbnN0IGluZm9zOiBhbnlbXSA9IFthY3RpdmVdO1xuICAgICAgLy8gTG9nIGlmIG1hdGNoaW5nIGNyaXRlcmlhXG4gICAgICBPYmplY3Qua2V5cyhhY3RpdmVNYXRjaCkubGVuZ3RoID4gMCAmJiBpbmZvcy5wdXNoKGFjdGl2ZU1hdGNoKTtcblxuICAgICAgdGhpcy5sb2dnZXIuaW5mbyhcbiAgICAgICAgYFRyYW5zaXRpb24gZm91bmQgWyR7dHJhbnNpdGlvblR5cGUuam9pbignLCcpfV1gLFxuICAgICAgICAuLi5pbmZvc1xuICAgICAgKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5sb2dnZXIuaW5mbyhgTm8gdHJhbnNpdGlvbiBmb3VuZCBbJHt0cmFuc2l0aW9uVHlwZS5qb2luKCcsJyl9XWApO1xuICAgIH1cblxuICAgIHJldHVybiBhY3RpdmU7XG4gIH1cblxuICAvKipcbiAgICogIyMjIFVwZGF0ZSBzdG9yZS5cbiAgICpcbiAgICogLSBSZW9yZGVyIHRyYW5zaXRpb24gYnkgcHJpb3JpdGllc1xuICAgKiAtIEdldCB3YWl0IGluZGljYXRvclxuICAgKiAtIEdldCBvbmNlIHRyYW5zaXRpb25zXG4gICAqL1xuICBwdWJsaWMgdXBkYXRlKCk6IHZvaWQge1xuICAgIC8vIFJlb3JkZXIgYnkgcHJpb3JpdGllc1xuICAgIHRoaXMuYWxsID0gdGhpcy5hbGxcbiAgICAgIC5tYXAodCA9PiB0aGlzLl9hZGRQcmlvcml0eSh0KSlcbiAgICAgIC5zb3J0KChhLCBiKSA9PiBhLnByaW9yaXR5IC0gYi5wcmlvcml0eSlcbiAgICAgIC5yZXZlcnNlKClcbiAgICAgIC5tYXAodCA9PiB7XG4gICAgICAgIGRlbGV0ZSB0LnByaW9yaXR5O1xuXG4gICAgICAgIHJldHVybiB0O1xuICAgICAgfSk7XG4gICAgdGhpcy5wYWdlID0gdGhpcy5hbGwuZmlsdGVyKFxuICAgICAgdCA9PiB0LmxlYXZlICE9PSB1bmRlZmluZWQgfHwgdC5lbnRlciAhPT0gdW5kZWZpbmVkXG4gICAgKSBhcyBJVHJhbnNpdGlvblBhZ2VbXTtcbiAgICB0aGlzLm9uY2UgPSB0aGlzLmFsbC5maWx0ZXIodCA9PiB0Lm9uY2UgIT09IHVuZGVmaW5lZCkgYXMgSVRyYW5zaXRpb25PbmNlW107XG4gIH1cblxuICAvKipcbiAgICogIyMjIENoZWNrIGlmIHRyYW5zaXRpb24gYXBwbHkuXG4gICAqXG4gICAqIEJhc2VkIG9uIHJ1bGUsIHBhZ2UgZGF0YSBhbmQgb3B0aW9uYWwgZGlyZWN0aW9uOlxuICAgKlxuICAgKiAxLiB0cmFuc2l0aW9uIGhhcyBubyBydWxlIFwicHJvcGVydHlcIjpcbiAgICogICAgLSBhbHdheXMgcmV0dXJucyB0cnVlXG4gICAqIDIuIHRyYW5zaXRpb24gaGFzIHJ1bGUgXCJwcm9wZXJ0eVwiOlxuICAgKiAgICAgLSBcInN0cmluZ3NcIiBzaG91bGQgYmUgcHJlc2VudCBvbiBib3RoIHNpZGUgKHRyYW5zaXRpb24gKyBwYWdlKSBhbmQgbWF0Y2hcbiAgICogICAgIC0gXCJmdW5jdGlvblwiIHNob3VsZCByZXR1cm4gdHJ1ZVxuICAgKi9cbiAgcHJpdmF0ZSBfY2hlY2soXG4gICAgdHJhbnNpdGlvbjogSVRyYW5zaXRpb25QYWdlLFxuICAgIHJ1bGU6IElSdWxlLFxuICAgIGRhdGE6IElUcmFuc2l0aW9uRGF0YSxcbiAgICBtYXRjaDogYW55LFxuICAgIGRpcmVjdGlvbj86ICdmcm9tJyB8ICd0bydcbiAgKTogYm9vbGVhbiB7XG4gICAgbGV0IGlzVmFsaWQgPSB0cnVlO1xuICAgIGxldCBoYXNNYXRjaCA9IGZhbHNlO1xuICAgIGNvbnN0IHQgPSB0cmFuc2l0aW9uO1xuICAgIGNvbnN0IHsgbmFtZSwgdHlwZSB9ID0gcnVsZTtcbiAgICBjb25zdCBzdHJSdWxlID0gbmFtZSBhcyBJUnVsZXNbJ3N0cmluZ3MnXTtcbiAgICBjb25zdCBvYmpSdWxlID0gbmFtZSBhcyBJUnVsZXNbJ29iamVjdCddO1xuICAgIGNvbnN0IGZuTmFtZSA9IG5hbWUgYXMgSVJ1bGVzWydmdW5jdGlvbiddO1xuICAgIGNvbnN0IGJhc2UgPSBkaXJlY3Rpb24gPyB0W2RpcmVjdGlvbl0gOiB0OyAvLyA9IHQgfHwgdC5mcm9tIHx8IHQudG9cbiAgICBjb25zdCBwYWdlID0gZGlyZWN0aW9uID09PSAndG8nID8gZGF0YS5uZXh0IDogZGF0YS5jdXJyZW50OyAvLyA9IGN1cnJlbnQgfHwgbmV4dFxuICAgIGNvbnN0IGV4aXN0ID0gZGlyZWN0aW9uID8gYmFzZSAmJiBiYXNlW25hbWVdIDogYmFzZVtuYW1lXTtcblxuICAgIC8vIElmIHRyYW5zaXRpb24gcnVsZSBleGlzdHNcbiAgICBpZiAoZXhpc3QpIHtcbiAgICAgIHN3aXRjaCAodHlwZSkge1xuICAgICAgICBjYXNlICdzdHJpbmdzJzpcbiAgICAgICAgZGVmYXVsdDoge1xuICAgICAgICAgIC8vIEFycmF5IHN1cHBvcnRcbiAgICAgICAgICBjb25zdCBuYW1lczogc3RyaW5nW10gPSBBcnJheS5pc0FycmF5KGJhc2Vbc3RyUnVsZV0pXG4gICAgICAgICAgICA/IChiYXNlW3N0clJ1bGVdIGFzIHN0cmluZ1tdKVxuICAgICAgICAgICAgOiBbYmFzZVtzdHJSdWxlXSBhcyBzdHJpbmddO1xuXG4gICAgICAgICAgLy8gRm9yIG1hdGNoaW5nLCBwcm9wIHNob3VsZCBiZSBwcmVzZW50IG9uIGJvdGggc2lkZXMgYW5kIG1hdGNoXG4gICAgICAgICAgaWYgKHBhZ2Vbc3RyUnVsZV0gJiYgbmFtZXMuaW5kZXhPZihwYWdlW3N0clJ1bGVdKSAhPT0gLTEpIHtcbiAgICAgICAgICAgIGhhc01hdGNoID0gdHJ1ZTtcbiAgICAgICAgICB9XG4gICAgICAgICAgLy8gSWYgdHJhbnNpdGlvbiBwcm9wIGlzIGRpZmZlcmVudCBmcm9tIGN1cnJlbnQsIG5vdCB2YWxpZFxuICAgICAgICAgIGlmIChuYW1lcy5pbmRleE9mKHBhZ2Vbc3RyUnVsZV0pID09PSAtMSkge1xuICAgICAgICAgICAgaXNWYWxpZCA9IGZhbHNlO1xuICAgICAgICAgIH1cbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuXG4gICAgICAgIGNhc2UgJ29iamVjdCc6IHtcbiAgICAgICAgICAvLyBBcnJheSBzdXBwb3J0XG4gICAgICAgICAgY29uc3QgbmFtZXM6IHN0cmluZ1tdID0gQXJyYXkuaXNBcnJheShiYXNlW29ialJ1bGVdKVxuICAgICAgICAgICAgPyAoYmFzZVtvYmpSdWxlXSBhcyBzdHJpbmdbXSlcbiAgICAgICAgICAgIDogW2Jhc2Vbb2JqUnVsZV0gYXMgc3RyaW5nXTtcblxuICAgICAgICAgIC8vIEZvciBtYXRjaGluZywgcHJvcCBzaG91bGQgYmUgcHJlc2VudCBvbiBib3RoIHNpZGVzIGFuZCBtYXRjaFxuICAgICAgICAgIGlmIChwYWdlW29ialJ1bGVdKSB7XG4gICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgIHBhZ2Vbb2JqUnVsZV0ubmFtZSAmJlxuICAgICAgICAgICAgICBuYW1lcy5pbmRleE9mKHBhZ2Vbb2JqUnVsZV0ubmFtZSkgIT09IC0xXG4gICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgaGFzTWF0Y2ggPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gSWYgdHJhbnNpdGlvbiBwcm9wIGlzIGRpZmZlcmVudCBmcm9tIGN1cnJlbnQsIG5vdCB2YWxpZFxuICAgICAgICAgICAgaWYgKG5hbWVzLmluZGV4T2YocGFnZVtvYmpSdWxlXS5uYW1lKSA9PT0gLTEpIHtcbiAgICAgICAgICAgICAgaXNWYWxpZCA9IGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpc1ZhbGlkID0gZmFsc2U7XG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG5cbiAgICAgICAgY2FzZSAnZnVuY3Rpb24nOlxuICAgICAgICAgIGlmIChiYXNlW2ZuTmFtZV0oZGF0YSkpIHtcbiAgICAgICAgICAgIGhhc01hdGNoID0gdHJ1ZTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaXNWYWxpZCA9IGZhbHNlO1xuICAgICAgICAgIH1cbiAgICAgICAgICBicmVhaztcbiAgICAgIH1cblxuICAgICAgaWYgKGhhc01hdGNoKSB7XG4gICAgICAgIGlmIChkaXJlY3Rpb24pIHtcbiAgICAgICAgICBtYXRjaFtkaXJlY3Rpb25dID0gbWF0Y2hbZGlyZWN0aW9uXSB8fCB7fTtcbiAgICAgICAgICBtYXRjaFtkaXJlY3Rpb25dW25hbWVdID0gdFtkaXJlY3Rpb25dW25hbWVdO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIG1hdGNoW25hbWVdID0gdFtuYW1lXTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBpc1ZhbGlkO1xuICB9XG5cbiAgLyoqXG4gICAqICMjIyBDYWxjdWxhdGUgdHJhbnNpdGlvbiBwcmlvcml0eS5cbiAgICpcbiAgICogQmFzZWQgb246XG4gICAqXG4gICAqIC0gcnVsZSBcInBvc2l0aW9uXCIgKGluZGV4KSBnaXZlIHRlbnMsIGh1bmRyZWRzLCB0aG91c2FuZHMsIOKAplxuICAgKiAtIGZyb20vdG8gcHJvcGVydGllcyBnaXZlIHVuaXRzICgwLCAxIG9yIDIpXG4gICAqL1xuICBwcml2YXRlIF9jYWxjdWxhdGVQcmlvcml0eShcbiAgICB0OiBJVHJhbnNpdGlvblBhZ2UsXG4gICAgcnVsZU5hbWU6IFJ1bGVOYW1lLFxuICAgIHJ1bGVJbmRleDogbnVtYmVyXG4gICk6IG51bWJlciB7XG4gICAgbGV0IHByaW9yaXR5ID0gMDtcblxuICAgIGlmIChcbiAgICAgIHRbcnVsZU5hbWVdIHx8XG4gICAgICAodC5mcm9tICYmIHQuZnJvbVtydWxlTmFtZV0pIHx8XG4gICAgICAodC50byAmJiB0LnRvW3J1bGVOYW1lXSlcbiAgICApIHtcbiAgICAgIHByaW9yaXR5ICs9IE1hdGgucG93KDEwLCBydWxlSW5kZXgpO1xuXG4gICAgICBpZiAodC5mcm9tICYmIHQuZnJvbVtydWxlTmFtZV0pIHtcbiAgICAgICAgcHJpb3JpdHkgKz0gMTtcbiAgICAgIH1cbiAgICAgIGlmICh0LnRvICYmIHQudG9bcnVsZU5hbWVdKSB7XG4gICAgICAgIHByaW9yaXR5ICs9IDI7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHByaW9yaXR5O1xuICB9XG5cbiAgcHJpdmF0ZSBfYWRkUHJpb3JpdHkodDogSVRyYW5zaXRpb25QYWdlKTogSVRyYW5zaXRpb25QYWdlIHtcbiAgICB0LnByaW9yaXR5ID0gMDtcbiAgICBsZXQgcHJpb3JpdHkgPSAwO1xuXG4gICAgdGhpcy5fcnVsZXMuZm9yRWFjaCgocnVsZSwgaSkgPT4ge1xuICAgICAgY29uc3QgeyBuYW1lIH0gPSBydWxlO1xuICAgICAgY29uc3QgaW5kZXggPSBpICsgMTtcblxuICAgICAgcHJpb3JpdHkgKz0gdGhpcy5fY2FsY3VsYXRlUHJpb3JpdHkodCwgbmFtZSwgaW5kZXgpO1xuICAgIH0pO1xuXG4gICAgdC5wcmlvcml0eSA9IHByaW9yaXR5O1xuXG4gICAgcmV0dXJuIHQ7XG4gIH1cbn1cbiIsIi8qKlxuICogQGJhcmJhL2NvcmUvbW9kdWxlcy90cmFuc2l0aW9uc1xuICogPGJyPjxicj5cbiAqICMjIFRyYW5zaXRpb25zIG1hbmFnZXIuXG4gKlxuICogLSBIYW5kbGUgaG9va3MgYW5kIHRyYW5zaXRpb24gbGlmZWN5Y2xlXG4gKlxuICogQG1vZHVsZSBjb3JlL21vZHVsZXMvdHJhbnNpdGlvbnNcbiAqIEBwcmVmZXJyZWRcbiAqL1xuXG4vKioqL1xuXG4vLyBEZWZpbml0aW9uc1xuaW1wb3J0IHtcbiAgSG9va3NUcmFuc2l0aW9uLFxuICBIb29rc1RyYW5zaXRpb25NYXAsXG4gIElUcmFuc2l0aW9uRGF0YSxcbiAgSVRyYW5zaXRpb25GaWx0ZXJzLFxuICBJVHJhbnNpdGlvbk9uY2UsXG4gIElUcmFuc2l0aW9uUGFnZSxcbiAgV3JhcHBlcixcbn0gZnJvbSAnLi4vZGVmcyc7XG4vLyBIb29rc1xuaW1wb3J0IHsgaG9va3MgfSBmcm9tICcuLi9ob29rcyc7XG4vLyBVdGlsc1xuaW1wb3J0IHsgZG9tLCBoZWxwZXJzLCBydW5Bc3luYyB9IGZyb20gJy4uL3V0aWxzJztcbi8vIE1vZHVsZXNcbmltcG9ydCB7IEJhcmJhRXJyb3IgfSBmcm9tICcuL0Vycm9yJztcbmltcG9ydCB7IExvZ2dlciB9IGZyb20gJy4vTG9nZ2VyJztcbmltcG9ydCB7IFN0b3JlIH0gZnJvbSAnLi9TdG9yZSc7XG5cbmV4cG9ydCBjbGFzcyBUcmFuc2l0aW9ucyB7XG4gIHB1YmxpYyBsb2dnZXI6IExvZ2dlciA9IG5ldyBMb2dnZXIoJ0BiYXJiYS9jb3JlJyk7XG4gIHB1YmxpYyBzdG9yZTogU3RvcmU7XG4gIHByaXZhdGUgX3J1bm5pbmc6IGJvb2xlYW4gPSBmYWxzZTtcblxuICBjb25zdHJ1Y3Rvcih0cmFuc2l0aW9uczogSVRyYW5zaXRpb25QYWdlW10gPSBbXSkge1xuICAgIHRoaXMuc3RvcmUgPSBuZXcgU3RvcmUodHJhbnNpdGlvbnMpO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldCByZXNvbHZlZCB0cmFuc2l0aW9uXG4gICAqXG4gICAqIC0gYmFzZWQgb24gZGF0YVxuICAgKi9cbiAgcHVibGljIGdldChcbiAgICBkYXRhOiBJVHJhbnNpdGlvbkRhdGEsXG4gICAgZmlsdGVycz86IElUcmFuc2l0aW9uRmlsdGVyc1xuICApOiBJVHJhbnNpdGlvbk9uY2UgfCBJVHJhbnNpdGlvblBhZ2Uge1xuICAgIHJldHVybiB0aGlzLnN0b3JlLnJlc29sdmUoZGF0YSwgZmlsdGVycyk7XG4gIH1cblxuICAvKipcbiAgICogQW5pbWF0aW9uIHJ1bm5pbmcgc3RhdHVzLlxuICAgKi9cbiAgZ2V0IGlzUnVubmluZygpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5fcnVubmluZztcbiAgfVxuICBzZXQgaXNSdW5uaW5nKHN0YXR1czogYm9vbGVhbikge1xuICAgIHRoaXMuX3J1bm5pbmcgPSBzdGF0dXM7XG4gIH1cblxuICAvKipcbiAgICogQ2hlY2sgZm9yIHJlZ2lzdGVyZWQgb25jZSB0cmFuc2l0aW9uKHMpLlxuICAgKi9cbiAgZ2V0IGhhc09uY2UoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMuc3RvcmUub25jZS5sZW5ndGggPiAwO1xuICB9XG5cbiAgLyoqXG4gICAqIENoZWNrIGZvciByZWdpc3RlcmVkIHNlbGYgdHJhbnNpdGlvbi5cbiAgICovXG4gIGdldCBoYXNTZWxmKCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0aGlzLnN0b3JlLmFsbC5zb21lKHQgPT4gdC5uYW1lID09PSAnc2VsZicpO1xuICB9XG5cbiAgLyoqXG4gICAqICMjIyBXYWl0IGluZGljYXRvci5cbiAgICpcbiAgICogVGVsbHMgQmFyYmEgdG8gZ2V0IG5leHQgcGFnZSBkYXRhPGJyPlxuICAgKiBiZWZvcmUgc3RhcnRpbmcgdGhlIHJlc29sdXRpb248YnI+XG4gICAqIGJlY2F1c2Ugc29tZSByZWdpc3RlcmVkIHRyYW5zaXRpb25zIG5lZWQ8YnI+XG4gICAqIG5leHQgcGFnZSBkYXRhIHRvIGJlIHJlc29sdmVkIChlZzogYHN5bmM6IHRydWVgLCBgdG86IHsgbmFtZXNwYWNlIH1gLCDigKYpXG4gICAqL1xuICBnZXQgc2hvdWxkV2FpdCgpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5zdG9yZS5hbGwuc29tZSh0ID0+ICh0LnRvICYmICF0LnRvLnJvdXRlKSB8fCB0LnN5bmMpO1xuICB9XG5cbiAgLyoqXG4gICAqICMjIyBEbyBcIm9uY2VcIiB0cmFuc2l0aW9uLlxuICAgKlxuICAgKiBIb29rczogc2VlIFtbSG9va3NPbmNlXV0uXG4gICAqL1xuICBwdWJsaWMgYXN5bmMgZG9PbmNlKHtcbiAgICBkYXRhLFxuICAgIHRyYW5zaXRpb24sXG4gIH06IHtcbiAgICBkYXRhOiBJVHJhbnNpdGlvbkRhdGE7XG4gICAgdHJhbnNpdGlvbjogSVRyYW5zaXRpb25PbmNlO1xuICB9KSB7XG4gICAgY29uc3QgdCA9IHRyYW5zaXRpb24gfHwge307XG4gICAgdGhpcy5fcnVubmluZyA9IHRydWU7XG5cbiAgICB0cnkge1xuICAgICAgYXdhaXQgdGhpcy5fZG9Bc3luY0hvb2soJ2JlZm9yZU9uY2UnLCBkYXRhLCB0KTtcbiAgICAgIGF3YWl0IHRoaXMub25jZShkYXRhLCB0KTtcbiAgICAgIGF3YWl0IHRoaXMuX2RvQXN5bmNIb29rKCdhZnRlck9uY2UnLCBkYXRhLCB0KTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgdGhpcy5fcnVubmluZyA9IGZhbHNlO1xuXG4gICAgICB0aGlzLmxvZ2dlci5kZWJ1ZygnVHJhbnNpdGlvbiBlcnJvciBbYmVmb3JlL2FmdGVyL29uY2VdJyk7XG4gICAgICB0aGlzLmxvZ2dlci5lcnJvcihlcnJvcik7XG4gICAgfVxuXG4gICAgdGhpcy5fcnVubmluZyA9IGZhbHNlO1xuICB9XG5cbiAgLyoqXG4gICAqICMjIyBEbyBcInBhZ2VcIiB0cmFuc2l0aW9uLlxuICAgKlxuICAgKiBIb29rczogc2VlIFtbSG9va3NQYWdlXV0uXG4gICAqXG4gICAqIGBzeW5jOiBmYWxzZWAgKGRlZmF1bHQpIG9yZGVyOlxuICAgKlxuICAgKiAxLiBiZWZvcmVcbiAgICogMi4gYmVmb3JlTGVhdmVcbiAgICogMy4gbGVhdmVcbiAgICogNC4gYWZ0ZXJMZWF2ZVxuICAgKiA1LiBiZWZvcmVFbnRlclxuICAgKiA2LiBlbnRlclxuICAgKiA3LiBhZnRlckVudGVyXG4gICAqIDguIGFmdGVyXG4gICAqXG4gICAqIGBzeW5jOiB0cnVlYCBvcmRlcjpcbiAgICpcbiAgICogMS4gYmVmb3JlXG4gICAqIDIuIGJlZm9yZUxlYXZlXG4gICAqIDMuIGJlZm9yZUVudGVyXG4gICAqIDQuIGxlYXZlICYgZW50ZXJcbiAgICogNS4gYWZ0ZXJMZWF2ZVxuICAgKiA2LiBhZnRlckVudGVyXG4gICAqIDcuIGFmdGVyXG4gICAqL1xuICBwdWJsaWMgYXN5bmMgZG9QYWdlKHtcbiAgICBkYXRhLFxuICAgIHRyYW5zaXRpb24sXG4gICAgcGFnZSxcbiAgICB3cmFwcGVyLFxuICB9OiB7XG4gICAgZGF0YTogSVRyYW5zaXRpb25EYXRhO1xuICAgIHRyYW5zaXRpb246IElUcmFuc2l0aW9uUGFnZTtcbiAgICBwYWdlOiBQcm9taXNlPHN0cmluZyB8IHZvaWQ+O1xuICAgIHdyYXBwZXI6IFdyYXBwZXI7XG4gIH0pIHtcbiAgICBjb25zdCB0ID0gdHJhbnNpdGlvbiB8fCB7fTtcbiAgICBjb25zdCBzeW5jID0gdC5zeW5jID09PSB0cnVlIHx8IGZhbHNlO1xuXG4gICAgdGhpcy5fcnVubmluZyA9IHRydWU7XG5cbiAgICB0cnkge1xuICAgICAgLy8gQ2hlY2sgc3luYyBtb2RlLCB3YWl0IGZvciBuZXh0IGNvbnRlbnRcbiAgICAgIGlmIChzeW5jKSB7XG4gICAgICAgIGF3YWl0IGhlbHBlcnMudXBkYXRlKHBhZ2UsIGRhdGEpO1xuICAgICAgfVxuXG4gICAgICBhd2FpdCB0aGlzLl9kb0FzeW5jSG9vaygnYmVmb3JlJywgZGF0YSwgdCk7XG5cbiAgICAgIGlmIChzeW5jKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgYXdhaXQgdGhpcy5hZGQoZGF0YSwgd3JhcHBlcik7XG4gICAgICAgICAgLy8gQmVmb3JlIGFjdGlvbnNcbiAgICAgICAgICBhd2FpdCB0aGlzLl9kb0FzeW5jSG9vaygnYmVmb3JlTGVhdmUnLCBkYXRhLCB0KTtcbiAgICAgICAgICBhd2FpdCB0aGlzLl9kb0FzeW5jSG9vaygnYmVmb3JlRW50ZXInLCBkYXRhLCB0KTtcblxuICAgICAgICAgIC8vIEFjdGlvbnNcbiAgICAgICAgICBhd2FpdCBQcm9taXNlLmFsbChbdGhpcy5sZWF2ZShkYXRhLCB0KSwgdGhpcy5lbnRlcihkYXRhLCB0KV0pO1xuXG4gICAgICAgICAgLy8gQWZ0ZXIgYWN0aW9uc1xuICAgICAgICAgIGF3YWl0IHRoaXMuX2RvQXN5bmNIb29rKCdhZnRlckxlYXZlJywgZGF0YSwgdCk7XG4gICAgICAgICAgYXdhaXQgdGhpcy5fZG9Bc3luY0hvb2soJ2FmdGVyRW50ZXInLCBkYXRhLCB0KTtcbiAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAvLyB0aGlzLmxvZ2dlci5kZWJ1ZygnVHJhbnNpdGlvbiBlcnJvciBbc3luY10nKTtcbiAgICAgICAgICAvLyB0aGlzLmxvZ2dlci5lcnJvcihlcnJvcik7XG4gICAgICAgICAgaWYgKHRoaXMuX2lzVHJhbnNpdGlvbkVycm9yKGVycm9yKSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEJhcmJhRXJyb3IoZXJyb3IsICdUcmFuc2l0aW9uIGVycm9yIFtzeW5jXScpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbGV0IGxlYXZlUmVzdWx0OiBhbnkgPSBmYWxzZTtcblxuICAgICAgICB0cnkge1xuICAgICAgICAgIC8vIExlYXZlXG4gICAgICAgICAgYXdhaXQgdGhpcy5fZG9Bc3luY0hvb2soJ2JlZm9yZUxlYXZlJywgZGF0YSwgdCk7XG5cbiAgICAgICAgICBsZWF2ZVJlc3VsdCA9IGF3YWl0IFByb21pc2UuYWxsKFtcbiAgICAgICAgICAgIHRoaXMubGVhdmUoZGF0YSwgdCksXG4gICAgICAgICAgICBoZWxwZXJzLnVwZGF0ZShwYWdlLCBkYXRhKSxcbiAgICAgICAgICBdKS50aGVuKHZhbHVlcyA9PiB2YWx1ZXNbMF0pO1xuXG4gICAgICAgICAgYXdhaXQgdGhpcy5fZG9Bc3luY0hvb2soJ2FmdGVyTGVhdmUnLCBkYXRhLCB0KTtcblxuICAgICAgICAgIC8vIFRPRE86IGNoZWNrIGhlcmUgXCJ2YWxpZFwiIHBhZ2UgcmVzdWx0XG4gICAgICAgICAgLy8gYmVmb3JlIGdvaW5nIGZ1cnRoZXJcbiAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAvLyB0aGlzLmxvZ2dlci5kZWJ1ZygnVHJhbnNpdGlvbiBlcnJvciBbYmVmb3JlL2FmdGVyL2xlYXZlXScpO1xuICAgICAgICAgIC8vIHRoaXMubG9nZ2VyLmVycm9yKGVycm9yKTtcbiAgICAgICAgICBpZiAodGhpcy5faXNUcmFuc2l0aW9uRXJyb3IoZXJyb3IpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgQmFyYmFFcnJvcihcbiAgICAgICAgICAgICAgZXJyb3IsXG4gICAgICAgICAgICAgICdUcmFuc2l0aW9uIGVycm9yIFtiZWZvcmUvYWZ0ZXIvbGVhdmVdJ1xuICAgICAgICAgICAgKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICB0cnkge1xuICAgICAgICAgIC8vIEVudGVyXG4gICAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIGVsc2UgKi9cbiAgICAgICAgICBpZiAobGVhdmVSZXN1bHQgIT09IGZhbHNlKSB7XG4gICAgICAgICAgICBhd2FpdCB0aGlzLmFkZChkYXRhLCB3cmFwcGVyKTtcblxuICAgICAgICAgICAgYXdhaXQgdGhpcy5fZG9Bc3luY0hvb2soJ2JlZm9yZUVudGVyJywgZGF0YSwgdCk7XG4gICAgICAgICAgICBhd2FpdCB0aGlzLmVudGVyKGRhdGEsIHQsIGxlYXZlUmVzdWx0KTtcbiAgICAgICAgICAgIGF3YWl0IHRoaXMuX2RvQXN5bmNIb29rKCdhZnRlckVudGVyJywgZGF0YSwgdCk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgIC8vIHRoaXMubG9nZ2VyLmRlYnVnKCdUcmFuc2l0aW9uIGVycm9yIFtiZWZvcmUvYWZ0ZXIvZW50ZXJdJyk7XG4gICAgICAgICAgLy8gdGhpcy5sb2dnZXIuZXJyb3IoZXJyb3IpO1xuICAgICAgICAgIGlmICh0aGlzLl9pc1RyYW5zaXRpb25FcnJvcihlcnJvcikpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBCYXJiYUVycm9yKFxuICAgICAgICAgICAgICBlcnJvcixcbiAgICAgICAgICAgICAgJ1RyYW5zaXRpb24gZXJyb3IgW2JlZm9yZS9hZnRlci9lbnRlcl0nXG4gICAgICAgICAgICApO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyBSZW1vdmUgY3VycmVudCBjb250YWllbnJcbiAgICAgIGF3YWl0IHRoaXMucmVtb3ZlKGRhdGEpO1xuXG4gICAgICBhd2FpdCB0aGlzLl9kb0FzeW5jSG9vaygnYWZ0ZXInLCBkYXRhLCB0KTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgdGhpcy5fcnVubmluZyA9IGZhbHNlO1xuXG4gICAgICAvLyBJZiBcImN1c3RvbS9zcGVjaWZpY1wiIGJhcmJhIGVycm9yLlxuICAgICAgLyogaXN0YW5idWwgaWdub3JlIGVsc2UgKi9cbiAgICAgIGlmIChlcnJvci5uYW1lICYmIGVycm9yLm5hbWUgPT09ICdCYXJiYUVycm9yJykge1xuICAgICAgICB0aGlzLmxvZ2dlci5kZWJ1ZyhlcnJvci5sYWJlbCk7XG4gICAgICAgIHRoaXMubG9nZ2VyLmVycm9yKGVycm9yLmVycm9yKTtcblxuICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICAgIH1cblxuICAgICAgdGhpcy5sb2dnZXIuZGVidWcoJ1RyYW5zaXRpb24gZXJyb3IgW3BhZ2VdJyk7XG4gICAgICB0aGlzLmxvZ2dlci5lcnJvcihlcnJvcik7XG5cbiAgICAgIHRocm93IGVycm9yO1xuICAgIH1cblxuICAgIHRoaXMuX3J1bm5pbmcgPSBmYWxzZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBPbmNlIGhvb2sgKyBhc3luYyBcIm9uY2VcIiB0cmFuc2l0aW9uLlxuICAgKi9cbiAgcHVibGljIGFzeW5jIG9uY2UoZGF0YTogSVRyYW5zaXRpb25EYXRhLCB0OiBJVHJhbnNpdGlvbk9uY2UpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICBhd2FpdCBob29rcy5kbygnb25jZScsIGRhdGEsIHQpO1xuXG4gICAgcmV0dXJuIHQub25jZSA/IHJ1bkFzeW5jKHQub25jZSwgdCkoZGF0YSkgOiBQcm9taXNlLnJlc29sdmUoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBMZWF2ZSBob29rICsgYXN5bmMgXCJsZWF2ZVwiIHRyYW5zaXRpb24uXG4gICAqL1xuICBwdWJsaWMgYXN5bmMgbGVhdmUoZGF0YTogSVRyYW5zaXRpb25EYXRhLCB0OiBJVHJhbnNpdGlvblBhZ2UpOiBQcm9taXNlPGFueT4ge1xuICAgIGF3YWl0IGhvb2tzLmRvKCdsZWF2ZScsIGRhdGEsIHQpO1xuXG4gICAgcmV0dXJuIHQubGVhdmUgPyBydW5Bc3luYyh0LmxlYXZlLCB0KShkYXRhKSA6IFByb21pc2UucmVzb2x2ZSgpO1xuICB9XG5cbiAgLyoqXG4gICAqIEVudGVyIGhvb2sgKyBhc3luYyBcImVudGVyXCIgdHJhbnNpdGlvbi5cbiAgICovXG4gIHB1YmxpYyBhc3luYyBlbnRlcihcbiAgICBkYXRhOiBJVHJhbnNpdGlvbkRhdGEsXG4gICAgdDogSVRyYW5zaXRpb25QYWdlLFxuICAgIGxlYXZlUmVzdWx0PzogYW55XG4gICk6IFByb21pc2U8dm9pZD4ge1xuICAgIGF3YWl0IGhvb2tzLmRvKCdlbnRlcicsIGRhdGEsIHQpO1xuXG4gICAgcmV0dXJuIHQuZW50ZXJcbiAgICAgID8gcnVuQXN5bmModC5lbnRlciwgdCkoZGF0YSwgbGVhdmVSZXN1bHQpXG4gICAgICA6IFByb21pc2UucmVzb2x2ZSgpO1xuICB9XG5cbiAgLyoqXG4gICAqIEFkZCBuZXh0IGNvbnRhaW5lci5cbiAgICovXG4gIHB1YmxpYyBhc3luYyBhZGQoZGF0YTogSVRyYW5zaXRpb25EYXRhLCB3cmFwcGVyOiBXcmFwcGVyKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgZG9tLmFkZENvbnRhaW5lcihkYXRhLm5leHQuY29udGFpbmVyLCB3cmFwcGVyKTtcbiAgICBob29rcy5kbygnbmV4dEFkZGVkJywgZGF0YSk7XG4gIH1cblxuICAvKipcbiAgICogUmVtb3ZlIGN1cnJlbnQgY29udGFpbmVyLlxuICAgKi9cbiAgcHVibGljIGFzeW5jIHJlbW92ZShkYXRhOiBJVHJhbnNpdGlvbkRhdGEpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICBkb20ucmVtb3ZlQ29udGFpbmVyKGRhdGEuY3VycmVudC5jb250YWluZXIpO1xuICAgIGhvb2tzLmRvKCdjdXJyZW50UmVtb3ZlZCcsIGRhdGEpO1xuICB9XG5cbiAgcHJpdmF0ZSBfaXNUcmFuc2l0aW9uRXJyb3IoZXJyb3I6IGFueSkge1xuICAgIGlmIChlcnJvci5tZXNzYWdlKSB7XG4gICAgICAvLyBFcnJvcnMgZnJvbSByZXF1ZXN0XG4gICAgICByZXR1cm4gIS9UaW1lb3V0IGVycm9yfEZldGNoIGVycm9yLy50ZXN0KGVycm9yLm1lc3NhZ2UpO1xuICAgIH1cblxuICAgIGlmIChlcnJvci5zdGF0dXMpIHtcbiAgICAgIC8vIEVycm9ycyBmcm9tIHJlcXVlc3RcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBEbyBob29rcyArIGFzeW5jIHRyYW5zaXRpb24gbWV0aG9kcy5cbiAgICovXG4gIHByaXZhdGUgYXN5bmMgX2RvQXN5bmNIb29rKFxuICAgIGhvb2s6IEhvb2tzVHJhbnNpdGlvbixcbiAgICBkYXRhOiBJVHJhbnNpdGlvbkRhdGEsXG4gICAgdDogSG9va3NUcmFuc2l0aW9uTWFwXG4gICk6IFByb21pc2U8dm9pZD4ge1xuICAgIGF3YWl0IGhvb2tzLmRvKGhvb2ssIGRhdGEsIHQpO1xuXG4gICAgcmV0dXJuIHRbaG9va10gPyBydW5Bc3luYyh0W2hvb2tdLCB0KShkYXRhKSA6IFByb21pc2UucmVzb2x2ZSgpO1xuICB9XG59XG4iLCIvKipcbiAqIEBiYXJiYS9jb3JlL21vZHVsZXMvdmlld3NcbiAqIDxicj48YnI+XG4gKiAjIyBWaWV3cyBtYW5hZ2VyLlxuICpcbiAqIEBtb2R1bGUgY29yZS9tb2R1bGVzL3ZpZXdzXG4gKiBAcHJlZmVycmVkXG4gKi9cblxuLyoqKi9cblxuLy8gRGVmaW5pdGlvbnNcbmltcG9ydCB7IEhvb2tzVmlldywgSVZpZXcsIElWaWV3RGF0YSB9IGZyb20gJy4uL2RlZnMnO1xuLy8gSG9va3NcbmltcG9ydCB7IGhvb2tzIH0gZnJvbSAnLi4vaG9va3MnO1xuLy8gVXRpbHNcbmltcG9ydCB7IHJ1bkFzeW5jIH0gZnJvbSAnLi4vdXRpbHMnO1xuLy8gVHlwZXNcbnR5cGUgSG9vayA9IChkYXRhOiBJVmlld0RhdGEpID0+IFByb21pc2U8dm9pZD47XG5cbmV4cG9ydCBjbGFzcyBWaWV3cyB7XG4gIC8qKlxuICAgKiBBdmFpbGFibGUgaG9vayBuYW1lcyBmb3Igdmlld3MuXG4gICAqL1xuICBwdWJsaWMgbmFtZXM6IEhvb2tzVmlld1tdID0gW1xuICAgICdiZWZvcmVMZWF2ZScsXG4gICAgJ2FmdGVyTGVhdmUnLFxuICAgICdiZWZvcmVFbnRlcicsXG4gICAgJ2FmdGVyRW50ZXInLFxuICBdO1xuICAvKipcbiAgICogUmVnaXN0ZXJlZCB2aWV3cyBieSBuYW1lc3BhY2UuXG4gICAqL1xuICBwdWJsaWMgYnlOYW1lc3BhY2U6IE1hcDxzdHJpbmcsIElWaWV3PiA9IG5ldyBNYXAoKTtcblxuICAvKipcbiAgICogSW5pdCB2aWV3cy5cbiAgICovXG4gIGNvbnN0cnVjdG9yKHZpZXdzOiBJVmlld1tdKSB7XG4gICAgaWYgKHZpZXdzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIC8vIFRPRE86IGFkZCBjaGVja1xuICAgIC8vIGZvciB2YWxpZCB2aWV3cz8gY3JpdGVyaWE/IChuYW1lc3BhY2UgcHJvcGVydHksIHN0cmluZyA/KVxuICAgIC8vIG9yIGR1cGxpY2F0ZVxuICAgIHZpZXdzLmZvckVhY2godmlldyA9PiB7XG4gICAgICB0aGlzLmJ5TmFtZXNwYWNlLnNldCh2aWV3Lm5hbWVzcGFjZSwgdmlldyk7XG4gICAgfSk7XG5cbiAgICB0aGlzLm5hbWVzLmZvckVhY2gobmFtZSA9PiB7XG4gICAgICBob29rc1tuYW1lXSh0aGlzLl9jcmVhdGVIb29rKG5hbWUpKTtcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDcmVhdGUgdGhlIGhvb2sgbWV0aG9kLlxuICAgKlxuICAgKiAtIGdldCB2aWV3IGJhc2VkIG9uIG5hbWVzcGFjZVxuICAgKiAtIGV4ZWN1dGUgY2FsbGJhY2sgd2l0aCB0cmFuc2l0aW9uIGRhdGFcbiAgICovXG4gIHByaXZhdGUgX2NyZWF0ZUhvb2sobmFtZTogSG9va3NWaWV3KTogSG9vayB7XG4gICAgcmV0dXJuIGRhdGEgPT4ge1xuICAgICAgY29uc3QgeyBuYW1lc3BhY2UgfSA9IG5hbWUubWF0Y2goL2VudGVyL2kpID8gZGF0YS5uZXh0IDogZGF0YS5jdXJyZW50O1xuICAgICAgY29uc3QgdmlldyA9IHRoaXMuYnlOYW1lc3BhY2UuZ2V0KG5hbWVzcGFjZSk7XG5cbiAgICAgIC8vIFRPRE86IG1hbmFnZSBzZWxm4oCmXG4gICAgICAvLyBpZiAodmlldyAmJiBkYXRhLnRyaWdnZXIgIT09ICdzZWxmJykge1xuICAgICAgaWYgKHZpZXcgJiYgdmlld1tuYW1lXSkge1xuICAgICAgICByZXR1cm4gcnVuQXN5bmModmlld1tuYW1lXSwgdmlldykoZGF0YSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoKTtcbiAgICB9O1xuICB9XG59XG4iLCIvLyBFbGVtZW50LnByb3RvdHlwZS5tYXRjaGVzIHBvbHlmaWxsXG4vLyBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvRWxlbWVudC9tYXRjaGVzI1BvbHlmaWxsXG5pZiAoIUVsZW1lbnQucHJvdG90eXBlLm1hdGNoZXMpIHtcbiAgRWxlbWVudC5wcm90b3R5cGUubWF0Y2hlcyA9XG4gICAgKEVsZW1lbnQgYXMgYW55KS5wcm90b3R5cGUubXNNYXRjaGVzU2VsZWN0b3IgfHxcbiAgICBFbGVtZW50LnByb3RvdHlwZS53ZWJraXRNYXRjaGVzU2VsZWN0b3I7XG59XG5cbi8vIEVsZW1lbnQucHJvdG90eXBlLmNsb3Nlc3QgcG9seWZpbGxcbi8vIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0FQSS9FbGVtZW50L2Nsb3Nlc3QjUG9seWZpbGxcbmlmICghRWxlbWVudC5wcm90b3R5cGUuY2xvc2VzdCkge1xuICBFbGVtZW50LnByb3RvdHlwZS5jbG9zZXN0ID0gZnVuY3Rpb24gY2xvc2VzdChzOiBzdHJpbmcpIHtcbiAgICBsZXQgZWwgPSB0aGlzO1xuXG4gICAgZG8ge1xuICAgICAgaWYgKGVsLm1hdGNoZXMocykpIHtcbiAgICAgICAgcmV0dXJuIGVsO1xuICAgICAgfVxuXG4gICAgICBlbCA9IChlbC5wYXJlbnRFbGVtZW50IHx8IGVsLnBhcmVudE5vZGUpIGFzIEVsZW1lbnQ7XG4gICAgfSB3aGlsZSAoZWwgIT09IG51bGwgJiYgZWwubm9kZVR5cGUgPT09IDEpO1xuXG4gICAgcmV0dXJuIG51bGw7XG4gIH07XG59XG4iLCIvKipcbiAqIEBtb2R1bGUgY29yZS9zY2hlbWFzXG4gKi9cblxuLy8gRGVmaW5pdGlvbnNcbmltcG9ydCB7IElTY2hlbWFQYWdlIH0gZnJvbSAnLi4vZGVmcyc7XG5cbi8qKlxuICogU2VlIFtbSVNjaGVtYVBhZ2VdXVxuICovXG5leHBvcnQgY29uc3Qgc2NoZW1hUGFnZTogSVNjaGVtYVBhZ2UgPSB7XG4gIGNvbnRhaW5lcjogbnVsbCxcbiAgaHRtbDogJycsXG4gIG5hbWVzcGFjZTogJycsXG4gIHVybDoge1xuICAgIGhhc2g6ICcnLFxuICAgIGhyZWY6ICcnLFxuICAgIHBhdGg6ICcnLFxuICAgIHBvcnQ6IG51bGwsXG4gICAgcXVlcnk6IHt9LFxuICB9LFxufTtcbiIsIi8qKlxuICogQGJhcmJhL2NvcmVcbiAqIDxicj48YnI+XG4gKiAjIyBCYXJiYSBjb3JlIG9iamVjdFxuICpcbiAqIE1haW4gbWV0aG9kczpcbiAqXG4gKiAtIGAuaW5pdCgpYCBmb3IgaW5pdGlhbGl6YXRpb24gd2l0aCBvcHRpb25zXG4gKiAtIGAudXNlKClgIGZvciBwbHVnaW5zXG4gKlxuICogQG1vZHVsZSBjb3JlXG4gKi9cblxuLyoqKi9cblxuaW1wb3J0IHsgdmVyc2lvbiB9IGZyb20gJy4uL3BhY2thZ2UuanNvbic7XG4vLyBEZWZpbml0aW9uc1xuaW1wb3J0IHtcbiAgSUJhcmJhT3B0aW9ucyxcbiAgSUJhcmJhUGx1Z2luLFxuICBJZ25vcmVPcHRpb24sXG4gIElTY2hlbWFQYWdlLFxuICBJVHJhbnNpdGlvbkRhdGEsXG4gIElUcmFuc2l0aW9uT25jZSxcbiAgSVRyYW5zaXRpb25QYWdlLFxuICBMaW5rLFxuICBMaW5rRXZlbnQsXG4gIFJlcXVlc3RDdXN0b21FcnJvcixcbiAgUmVxdWVzdEVycm9yT3JSZXNwb25zZSxcbiAgU2NoZW1hQXR0cmlidXRlVmFsdWVzLFxuICBUcmlnZ2VyLFxuICBXcmFwcGVyLFxufSBmcm9tICcuL2RlZnMnO1xuLy8gSG9va3NcbmltcG9ydCB7IGhvb2tzIH0gZnJvbSAnLi9ob29rcyc7XG4vLyBNb2R1bGVzXG5pbXBvcnQgeyBDYWNoZSB9IGZyb20gJy4vbW9kdWxlcy9DYWNoZSc7XG5pbXBvcnQgeyBMb2dnZXIgfSBmcm9tICcuL21vZHVsZXMvTG9nZ2VyJztcbmltcG9ydCB7IFByZXZlbnQgfSBmcm9tICcuL21vZHVsZXMvUHJldmVudCc7XG5pbXBvcnQgeyBUcmFuc2l0aW9ucyB9IGZyb20gJy4vbW9kdWxlcy9UcmFuc2l0aW9ucyc7XG5pbXBvcnQgeyBWaWV3cyB9IGZyb20gJy4vbW9kdWxlcy9WaWV3cyc7XG4vLyBQb2x5ZmlsbHNcbmltcG9ydCAnLi9wb2x5ZmlsbHMnO1xuLy8gU2NoZW1hc1xuaW1wb3J0IHsgc2NoZW1hQXR0cmlidXRlIH0gZnJvbSAnLi9zY2hlbWFzL2F0dHJpYnV0ZSc7XG5pbXBvcnQgeyBzY2hlbWFQYWdlIH0gZnJvbSAnLi9zY2hlbWFzL3BhZ2UnO1xuLy8gVXRpbHNcbmltcG9ydCB7IGRvbSwgaGVscGVycywgaGlzdG9yeSwgcmVxdWVzdCwgdXJsIH0gZnJvbSAnLi91dGlscyc7XG5cbmV4cG9ydCBjbGFzcyBDb3JlIHtcbiAgLyoqXG4gICAqIFZlcnNpb24uXG4gICAqL1xuICBwdWJsaWMgdmVyc2lvbjogc3RyaW5nID0gdmVyc2lvbjtcbiAgLyoqXG4gICAqIFNjaGVtYXMuXG4gICAqL1xuICBwdWJsaWMgc2NoZW1hUGFnZTogSVNjaGVtYVBhZ2UgPSBzY2hlbWFQYWdlO1xuICAvKipcbiAgICogTG9nZ2VyIGNsYXNzLCBhbGxvd3MgcGx1Z2lucyB0byBjcmVhdGUgTG9nZ2VyLlxuICAgKi9cbiAgcHVibGljIExvZ2dlcjogdHlwZW9mIExvZ2dlciA9IExvZ2dlcjtcbiAgLyoqXG4gICAqIEJhcmJhIGxvZ2dlci5cbiAgICovXG4gIHB1YmxpYyBsb2dnZXI6IExvZ2dlciA9IG5ldyBMb2dnZXIoJ0BiYXJiYS9jb3JlJyk7XG4gIC8qKlxuICAgKiBQbHVnaW5zLlxuICAgKi9cbiAgcHVibGljIHBsdWdpbnM6IEFycmF5PElCYXJiYVBsdWdpbjxhbnk+PiA9IFtdO1xuICAvKipcbiAgICogT3B0aW9uc1xuICAgKi9cbiAgcHVibGljIHRpbWVvdXQ6IG51bWJlcjtcbiAgcHVibGljIGNhY2hlSWdub3JlOiBJZ25vcmVPcHRpb247XG4gIHB1YmxpYyBwcmVmZXRjaElnbm9yZTogSWdub3JlT3B0aW9uO1xuICBwdWJsaWMgcHJldmVudFJ1bm5pbmc6IGJvb2xlYW47XG4gIC8qKlxuICAgKiBIb29rc1xuICAgKi9cbiAgcHVibGljIGhvb2tzID0gaG9va3M7XG4gIC8qKlxuICAgKiBNb2R1bGVzLlxuICAgKi9cbiAgLy8gcHVibGljIGhpc3Rvcnk6IEhpc3Rvcnk7XG4gIHB1YmxpYyBjYWNoZTogQ2FjaGU7XG4gIHB1YmxpYyBwcmV2ZW50OiBQcmV2ZW50O1xuICBwdWJsaWMgdHJhbnNpdGlvbnM6IFRyYW5zaXRpb25zO1xuICBwdWJsaWMgdmlld3M6IFZpZXdzO1xuICAvKipcbiAgICogVXRpbHMuXG4gICAqL1xuICBwdWJsaWMgZG9tID0gZG9tO1xuICBwdWJsaWMgaGVscGVycyA9IGhlbHBlcnM7XG4gIHB1YmxpYyBoaXN0b3J5ID0gaGlzdG9yeTtcbiAgcHVibGljIHJlcXVlc3QgPSByZXF1ZXN0O1xuICBwdWJsaWMgdXJsID0gdXJsO1xuXG4gIHByaXZhdGUgX2RhdGE6IElUcmFuc2l0aW9uRGF0YTtcbiAgcHJpdmF0ZSBfcmVxdWVzdEN1c3RvbUVycm9yOiBSZXF1ZXN0Q3VzdG9tRXJyb3I7XG4gIHByaXZhdGUgX3dyYXBwZXI6IFdyYXBwZXI7XG5cbiAgLyoqXG4gICAqICMjIyBJbml0IHBsdWdpbiB3aXRoIG9wdGlvbnMuXG4gICAqXG4gICAqIFNlZSBbW0lCYXJiYVBsdWdpbl1dIGZvciBtb3JlIGRldGFpbHMuXG4gICAqL1xuICBwdWJsaWMgdXNlPFQ+KHBsdWdpbjogSUJhcmJhUGx1Z2luPFQ+LCBvcHRpb25zPzogVCk6IHZvaWQge1xuICAgIGNvbnN0IGluc3RhbGxlZFBsdWdpbnMgPSB0aGlzLnBsdWdpbnM7XG5cbiAgICAvLyBQbHVnaW4gaW5zdGFsbGF0aW9uXG4gICAgaWYgKGluc3RhbGxlZFBsdWdpbnMuaW5kZXhPZihwbHVnaW4pID4gLTEpIHtcbiAgICAgIHRoaXMubG9nZ2VyLndhcm4oYFBsdWdpbiBbJHtwbHVnaW4ubmFtZX1dIGFscmVhZHkgaW5zdGFsbGVkLmApO1xuXG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiBwbHVnaW4uaW5zdGFsbCAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgdGhpcy5sb2dnZXIud2FybihgUGx1Z2luIFske3BsdWdpbi5uYW1lfV0gaGFzIG5vIFwiaW5zdGFsbFwiIG1ldGhvZC5gKTtcblxuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHBsdWdpbi5pbnN0YWxsKHRoaXMsIG9wdGlvbnMpO1xuICAgIGluc3RhbGxlZFBsdWdpbnMucHVzaChwbHVnaW4pO1xuICB9XG5cbiAgLyoqXG4gICAqICMjIyBJbml0IGJhcmJhIHdpdGggb3B0aW9ucy5cbiAgICpcbiAgICogU2VlIFtbSUJhcmJhT3B0aW9uc11dIGZvciBtb3JlIGRldGFpbHMuXG4gICAqXG4gICAqIERlZmF1bHQgdmFsdWVzIGFyZTpcbiAgICpcbiAgICogLSB0cmFuc2l0aW9uczogYFtdYFxuICAgKiAtIHZpZXdzOiBgW11gXG4gICAqIC0gc2NoZW1hOiBbW1NjaGVtYUF0dHJpYnV0ZV1dXG4gICAqIC0gdGltZW91dDogYDJlM2BcbiAgICogLSBjYWNoZUlnbm9yZTogYGZhbHNlYFxuICAgKiAtIHByZWZldGNoSWdub3JlOiBgZmFsc2VgXG4gICAqIC0gcHJldmVudFJ1bm5pbmc6IGBmYWxzZWBcbiAgICogLSBwcmV2ZW50OiBgbnVsbGAsXG4gICAqIC0gZGVidWc6IGBmYWxzZWBcbiAgICogLSBsb2dMZXZlbDogYCdkZWJ1ZydgXG4gICAqL1xuICBwdWJsaWMgaW5pdChcbiAgICAvKiogQGlnbm9yZSAqLyB7XG4gICAgICB0cmFuc2l0aW9ucyA9IFtdLFxuICAgICAgdmlld3MgPSBbXSxcbiAgICAgIHNjaGVtYSA9IHNjaGVtYUF0dHJpYnV0ZSxcbiAgICAgIHJlcXVlc3RFcnJvcixcbiAgICAgIHRpbWVvdXQgPSAyZTMsXG4gICAgICBjYWNoZUlnbm9yZSA9IGZhbHNlLFxuICAgICAgcHJlZmV0Y2hJZ25vcmUgPSBmYWxzZSxcbiAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gICAgICBwcmV2ZW50UnVubmluZyA9IGZhbHNlLFxuICAgICAgcHJldmVudDogcHJldmVudEN1c3RvbSA9IG51bGwsXG4gICAgICBkZWJ1ZyA9IGZhbHNlLFxuICAgICAgbG9nTGV2ZWwgPSAnb2ZmJyxcbiAgICB9OiBJQmFyYmFPcHRpb25zID0ge31cbiAgKSB7XG4gICAgLy8gMC4gU2V0IGxvZ2dlciBsZXZlbCBhbmQgcHJpbnQgdmVyc2lvblxuICAgIExvZ2dlci5zZXRMZXZlbChkZWJ1ZyA9PT0gdHJ1ZSA/ICdkZWJ1ZycgOiBsb2dMZXZlbCk7XG4gICAgdGhpcy5sb2dnZXIuaW5mbyh0aGlzLnZlcnNpb24pO1xuXG4gICAgLy8gMS4gTWFuYWdlIG9wdGlvbnNcbiAgICBPYmplY3Qua2V5cyhzY2hlbWEpLmZvckVhY2goayA9PiB7XG4gICAgICBjb25zdCBhdHRyID0gayBhcyBTY2hlbWFBdHRyaWJ1dGVWYWx1ZXM7XG5cbiAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBlbHNlICovXG4gICAgICBpZiAoc2NoZW1hQXR0cmlidXRlW2F0dHJdKSB7XG4gICAgICAgIHNjaGVtYUF0dHJpYnV0ZVthdHRyXSA9IHNjaGVtYVthdHRyXTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICB0aGlzLl9yZXF1ZXN0Q3VzdG9tRXJyb3IgPSByZXF1ZXN0RXJyb3I7XG4gICAgdGhpcy50aW1lb3V0ID0gdGltZW91dDtcbiAgICB0aGlzLmNhY2hlSWdub3JlID0gY2FjaGVJZ25vcmU7XG4gICAgdGhpcy5wcmVmZXRjaElnbm9yZSA9IHByZWZldGNoSWdub3JlO1xuICAgIHRoaXMucHJldmVudFJ1bm5pbmcgPSBwcmV2ZW50UnVubmluZztcblxuICAgIC8vIDIuIEdldCBhbmQgY2hlY2sgd3JhcHBlclxuICAgIHRoaXMuX3dyYXBwZXIgPSB0aGlzLmRvbS5nZXRXcmFwcGVyKCk7XG4gICAgaWYgKCF0aGlzLl93cmFwcGVyKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1tAYmFyYmEvY29yZV0gTm8gQmFyYmEgd3JhcHBlciBmb3VuZCcpO1xuICAgIH1cbiAgICB0aGlzLl93cmFwcGVyLnNldEF0dHJpYnV0ZSgnYXJpYS1saXZlJywgJ3BvbGl0ZScpOyAvLyBBMTF5XG5cbiAgICAvLyAzLiBJbml0IHBhZ2VzIChnZXQgXCJjdXJyZW50XCIgZGF0YSlcbiAgICB0aGlzLl9yZXNldERhdGEoKTtcblxuICAgIGNvbnN0IHsgY3VycmVudCB9ID0gdGhpcy5kYXRhO1xuXG4gICAgaWYgKCFjdXJyZW50LmNvbnRhaW5lcikge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdbQGJhcmJhL2NvcmVdIE5vIEJhcmJhIGNvbnRhaW5lciBmb3VuZCcpO1xuICAgIH1cblxuICAgIC8vIDQuIEluaXQgb3RoZXIgbW9kdWxlc1xuICAgIHRoaXMuY2FjaGUgPSBuZXcgQ2FjaGUoY2FjaGVJZ25vcmUpO1xuICAgIHRoaXMucHJldmVudCA9IG5ldyBQcmV2ZW50KHByZWZldGNoSWdub3JlKTtcbiAgICB0aGlzLnRyYW5zaXRpb25zID0gbmV3IFRyYW5zaXRpb25zKHRyYW5zaXRpb25zKTtcbiAgICB0aGlzLnZpZXdzID0gbmV3IFZpZXdzKHZpZXdzKTtcblxuICAgIC8vIEFkZCBwcmV2ZW50IGN1c3RvbVxuICAgIGlmIChwcmV2ZW50Q3VzdG9tICE9PSBudWxsKSB7XG4gICAgICBpZiAodHlwZW9mIHByZXZlbnRDdXN0b20gIT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdbQGJhcmJhL2NvcmVdIFByZXZlbnQgc2hvdWxkIGJlIGEgZnVuY3Rpb24nKTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5wcmV2ZW50LmFkZCgncHJldmVudEN1c3RvbScsIHByZXZlbnRDdXN0b20pO1xuICAgIH1cblxuICAgIC8vIDUuIFVzZSBcImN1cnJlbnRcIiBkYXRhXG4gICAgLy8gSW5pdCBoaXN0b3J5XG4gICAgdGhpcy5oaXN0b3J5LmluaXQoY3VycmVudC51cmwuaHJlZiwgY3VycmVudC5uYW1lc3BhY2UpO1xuICAgIC8vIEFkZCB0byBjYWNoZVxuICAgIC8vIFRPRE86IGRvIG5vdCBjYWNoZSByZW5kZXJlciBIVE1MLCBvbmx5IHJlcXVlc3QgcmVzdWx0c+KAplxuICAgIC8vIHRoaXMuY2FjaGUuc2V0KGN1cnJlbnQudXJsLmhyZWYsIFByb21pc2UucmVzb2x2ZShjdXJyZW50Lmh0bWwpLCAnaW5pdCcpO1xuXG4gICAgLy8gNi4gQmluZCBjb250ZXh0XG4gICAgdGhpcy5fb25MaW5rRW50ZXIgPSB0aGlzLl9vbkxpbmtFbnRlci5iaW5kKHRoaXMpO1xuICAgIHRoaXMuX29uTGlua0NsaWNrID0gdGhpcy5fb25MaW5rQ2xpY2suYmluZCh0aGlzKTtcbiAgICB0aGlzLl9vblN0YXRlQ2hhbmdlID0gdGhpcy5fb25TdGF0ZUNoYW5nZS5iaW5kKHRoaXMpO1xuICAgIHRoaXMuX2JpbmQoKTtcblxuICAgIC8vIDcuIEluaXQgcGx1Z2luc1xuICAgIHRoaXMucGx1Z2lucy5mb3JFYWNoKHBsdWdpbiA9PiBwbHVnaW4uaW5pdCgpKTtcblxuICAgIC8vIDguIEJhcmJhIHJlYWR5XG4gICAgLy8gU2V0IG5leHQgKyB0cmlnZ2VyIGZvciBvbmNlIGFuZCBgYmVmb3JlRW50ZXJgL2BhZnRlckVudGVyYCB2aWV3IG9uIHBhZ2UgbG9hZC5cbiAgICBjb25zdCBvbmNlRGF0YSA9IHRoaXMuZGF0YTtcblxuICAgIG9uY2VEYXRhLnRyaWdnZXIgPSAnYmFyYmEnO1xuICAgIG9uY2VEYXRhLm5leHQgPSBvbmNlRGF0YS5jdXJyZW50O1xuICAgIG9uY2VEYXRhLmN1cnJlbnQgPSB7IC4uLnRoaXMuc2NoZW1hUGFnZSB9O1xuICAgIHRoaXMuaG9va3MuZG8oJ3JlYWR5Jywgb25jZURhdGEpO1xuXG4gICAgLy8gOS4gRmluYWxseSwgZG8gb25jZeKAplxuICAgIHRoaXMub25jZShvbmNlRGF0YSk7XG5cbiAgICAvLyBDbGVhbiBkYXRhIGZvciBmaXJzdCBiYXJiYSB0cmFuc2l0aW9u4oCmXG4gICAgdGhpcy5fcmVzZXREYXRhKCk7XG4gIH1cblxuICBwdWJsaWMgZGVzdHJveSgpOiB2b2lkIHtcbiAgICB0aGlzLl9yZXNldERhdGEoKTtcbiAgICB0aGlzLl91bmJpbmQoKTtcbiAgICB0aGlzLmhpc3RvcnkuY2xlYXIoKTtcbiAgICB0aGlzLmhvb2tzLmNsZWFyKCk7XG4gICAgdGhpcy5wbHVnaW5zID0gW107XG4gIH1cblxuICBnZXQgZGF0YSgpOiBJVHJhbnNpdGlvbkRhdGEge1xuICAgIHJldHVybiB0aGlzLl9kYXRhO1xuICB9XG5cbiAgZ2V0IHdyYXBwZXIoKTogSFRNTEVsZW1lbnQge1xuICAgIHJldHVybiB0aGlzLl93cmFwcGVyO1xuICB9XG5cbiAgLyoqXG4gICAqICMjIyBGb3JjZSBhIHBhZ2UgY2hhbmdlIHdpdGhvdXQgQmFyYmEgdHJhbnNpdGlvbi5cbiAgICovXG4gIHB1YmxpYyBmb3JjZShocmVmOiBzdHJpbmcpOiB2b2lkIHtcbiAgICAvLyBERVZcbiAgICAvLyBDYW4gYmUgdXNlZCB3YWl0aW5nIGFuaW1hdGlvbiBjYW5jZWxsYXRpb24gbWFuYWdlbWVudOKAplxuICAgIHdpbmRvdy5sb2NhdGlvbi5hc3NpZ24oaHJlZik7XG4gIH1cblxuICAvKipcbiAgICogIyMjIEdvIGZvciBhIEJhcmJhIHRyYW5zaXRpb24uXG4gICAqXG4gICAqIE1hbmFnZSBcInNlbGYgcGFnZVwiIGhyZWY6XG4gICAqXG4gICAqIC0gaWYgc2FtZSB1cmwgYW5kIG5vIHNlbGYgdHJhbnNpdGlvbiwga2VlcCBkZWZhdWx0IGJlaGF2aW9yXG4gICAqICAgLSBsaW5rOiByZWxvYWQgdGhlIHBhZ2VcbiAgICogICAtIGFuY2hvcjogc2Nyb2xsIHRvXG4gICAqIC0gaWYgc2FtZSB1cmwgd2l0aCBzZWxmIHRyYW5zaXRpb24sIHVzZSBpdFxuICAgKiAtIHRoZW4gc3RhcnQgYSBwYWdlIHRyYW5zaXRpb24uXG4gICAqL1xuICBwdWJsaWMgZ28oXG4gICAgaHJlZjogc3RyaW5nLFxuICAgIHRyaWdnZXI6IFRyaWdnZXIgPSAnYmFyYmEnLFxuICAgIGU/OiBMaW5rRXZlbnQgfCBQb3BTdGF0ZUV2ZW50XG4gICk6IFByb21pc2U8dm9pZD4ge1xuICAgIC8vIElmIGFuaW1hdGlvbiBydW5uaW5nLCBmb3JjZSByZWxvYWRcbiAgICBpZiAodGhpcy50cmFuc2l0aW9ucy5pc1J1bm5pbmcpIHtcbiAgICAgIHRoaXMuZm9yY2UoaHJlZik7XG5cbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBsZXQgc2VsZiA9IGZhbHNlO1xuXG4gICAgLy8gQ2hlY2sgcHJldmVudCBzYW1lVVJMIGFnYWluc3QgY3VycmVudCBoaXN0b3J5XG4gICAgLy8gKyBzdGF0ZSBjaGVja1xuICAgIC8vICsgdXBkYXRlIHRyaWdnZXIgd2l0aCBkaXJlY3Rpb25cbiAgICBpZiAodHJpZ2dlciA9PT0gJ3BvcHN0YXRlJykge1xuICAgICAgc2VsZiA9XG4gICAgICAgIHRoaXMuaGlzdG9yeS5jdXJyZW50ICYmXG4gICAgICAgIHRoaXMudXJsLmdldFBhdGgodGhpcy5oaXN0b3J5LmN1cnJlbnQudXJsKSA9PT0gdGhpcy51cmwuZ2V0UGF0aChocmVmKTtcbiAgICB9IGVsc2Uge1xuICAgICAgc2VsZiA9IHRoaXMucHJldmVudC5ydW4oJ3NhbWVVcmwnLCBudWxsLCBudWxsLCBocmVmKTtcbiAgICB9XG5cbiAgICBpZiAoc2VsZiAmJiAhdGhpcy50cmFuc2l0aW9ucy5oYXNTZWxmKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdHJpZ2dlciA9IHRoaXMuaGlzdG9yeS5jaGFuZ2UoaHJlZiwgdHJpZ2dlciwgZSk7XG5cbiAgICBpZiAoZSkge1xuICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5wYWdlKGhyZWYsIHRyaWdnZXIsIHNlbGYpO1xuICB9XG5cbiAgLyoqXG4gICAqICMjIyBTdGFydCBhbiBcIm9uY2VcIiB0cmFuc2l0aW9uLlxuICAgKlxuICAgKiBJZiBzb21lIHJlZ2lzdGVyZWQgXCJvbmNlXCIgdHJhbnNpdGlvbixcbiAgICogZ2V0IHRoZSBcInJlc29sdmVkXCIgdHJhbnNpdGlvbiBmcm9tIHRoZSBzdG9yZSBhbmQgc3RhcnQgaXQuXG4gICAqL1xuICBwdWJsaWMgYXN5bmMgb25jZShyZWFkeURhdGE6IElUcmFuc2l0aW9uRGF0YSk6IFByb21pc2U8dm9pZD4ge1xuICAgIGF3YWl0IHRoaXMuaG9va3MuZG8oJ2JlZm9yZUVudGVyJywgcmVhZHlEYXRhKTtcblxuICAgIC8vIENoZWNrIGlmIG9uY2UgdHJhbnNpdGlvblxuICAgIGlmICh0aGlzLnRyYW5zaXRpb25zLmhhc09uY2UpIHtcbiAgICAgIGNvbnN0IHRyYW5zaXRpb24gPSB0aGlzLnRyYW5zaXRpb25zLmdldChyZWFkeURhdGEsIHtcbiAgICAgICAgb25jZTogdHJ1ZSxcbiAgICAgIH0pIGFzIElUcmFuc2l0aW9uT25jZTtcblxuICAgICAgYXdhaXQgdGhpcy50cmFuc2l0aW9ucy5kb09uY2UoeyB0cmFuc2l0aW9uLCBkYXRhOiByZWFkeURhdGEgfSk7XG4gICAgfVxuXG4gICAgYXdhaXQgdGhpcy5ob29rcy5kbygnYWZ0ZXJFbnRlcicsIHJlYWR5RGF0YSk7XG4gIH1cblxuICAvKipcbiAgICogIyMjIFN0YXJ0IGEgXCJwYWdlXCIgdHJhbnNpdGlvbi5cbiAgICpcbiAgICogMS4gSWYgbm8gcnVubmluZyB0cmFuc2l0aW9uLCB1cGRhdGVzIGRhdGEgd2l0aCBmdWxsIFVSTCBwcm9wZXJ0aWVzIGFuZCB0cmlnZ2VyLlxuICAgKiAyLiBHZXQgcGFnZSBmcm9tIGNhY2hlIG9yIGluaXQgcmVxdWVzdC5cbiAgICogMy4gV2FpdCBpZiBzb21lIHRyYW5zaXRpb25zIG5lZWQgXCJuZXh0XCIgZGF0YSAoYHN5bmM6IHRydWVgLCBgdG86IOKApmApLlxuICAgKiA0LiBNYW5hZ2UgdGhlIGhpc3RvcnksIGRlcGVuZGluZyBvbiB0cmlnZ2VyLlxuICAgKiA1LiBHZXQgXCJkYXRhXCIgYW5kIHRyaWdnZXIgXCJnb1wiIGhvb2suXG4gICAqIDYuIEdldCB0aGUgXCJyZXNvbHZlZFwiIHRyYW5zaXRpb24gZnJvbSB0aGUgc3RvcmUgYW5kIHN0YXJ0IGl0LlxuICAgKiA3LiBVcGRhdGUgdGl0bGUgYW5kIHJlc2V0IGRhdGEgKGN1cnJlbnQsIG5leHQgPSB1bmRlZmluZWQpLlxuICAgKlxuICAgKiA+IElmIFwic2VsZlwiLCB1c2UgdGhlIFwic2VsZlwiIHRyYW5zaXRpb25cbiAgICovXG4gIHB1YmxpYyBhc3luYyBwYWdlKFxuICAgIGhyZWY6IHN0cmluZyxcbiAgICB0cmlnZ2VyOiBUcmlnZ2VyLFxuICAgIHNlbGY6IGJvb2xlYW5cbiAgKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgdGhpcy5kYXRhLm5leHQudXJsID0ge1xuICAgICAgaHJlZixcbiAgICAgIC4uLnRoaXMudXJsLnBhcnNlKGhyZWYpLFxuICAgIH07XG4gICAgdGhpcy5kYXRhLnRyaWdnZXIgPSB0cmlnZ2VyO1xuXG4gICAgY29uc3QgcGFnZSA9IHRoaXMuY2FjaGUuaGFzKGhyZWYpXG4gICAgICA/IHRoaXMuY2FjaGUudXBkYXRlKGhyZWYsIHsgYWN0aW9uOiAnY2xpY2snIH0pLnJlcXVlc3RcbiAgICAgIDogdGhpcy5jYWNoZS5zZXQoXG4gICAgICAgICAgaHJlZixcbiAgICAgICAgICB0aGlzLnJlcXVlc3QoXG4gICAgICAgICAgICBocmVmLFxuICAgICAgICAgICAgdGhpcy50aW1lb3V0LFxuICAgICAgICAgICAgdGhpcy5vblJlcXVlc3RFcnJvci5iaW5kKHRoaXMsIHRyaWdnZXIpXG4gICAgICAgICAgKSxcbiAgICAgICAgICAnY2xpY2snXG4gICAgICAgICkucmVxdWVzdDtcblxuICAgIC8vIE5lZWQgdG8gd2FpdCBiZWZvcmUgZ2V0dGluZyB0aGUgcmlnaHQgdHJhbnNpdGlvblxuICAgIGlmICh0aGlzLnRyYW5zaXRpb25zLnNob3VsZFdhaXQpIHtcbiAgICAgIGF3YWl0IGhlbHBlcnMudXBkYXRlKHBhZ2UsIHRoaXMuZGF0YSk7XG4gICAgfVxuXG4gICAgY29uc3QgZGF0YSA9IHRoaXMuZGF0YTtcblxuICAgIC8vIEhvb2s6IGJldHdlZW4gdHJpZ2dlciBhbmQgdHJhbnNpdGlvblxuICAgIC8vIENhbiBiZSB1c2VkIHRvIHJlc29sdmUgXCJyb3V0ZVwi4oCmXG4gICAgYXdhaXQgdGhpcy5ob29rcy5kbygncGFnZScsIGRhdGEpO1xuXG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IHRyYW5zaXRpb24gPSB0aGlzLnRyYW5zaXRpb25zLmdldChkYXRhLCB7XG4gICAgICAgIG9uY2U6IGZhbHNlLFxuICAgICAgICBzZWxmLFxuICAgICAgfSkgYXMgSVRyYW5zaXRpb25QYWdlO1xuXG4gICAgICBhd2FpdCB0aGlzLnRyYW5zaXRpb25zLmRvUGFnZSh7XG4gICAgICAgIGRhdGEsXG4gICAgICAgIHBhZ2UsXG4gICAgICAgIHRyYW5zaXRpb24sXG4gICAgICAgIHdyYXBwZXI6IHRoaXMuX3dyYXBwZXIsXG4gICAgICB9KTtcblxuICAgICAgdGhpcy5fcmVzZXREYXRhKCk7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIC8vIFNvbWV0aGluZyB3ZW50IHdyb25nIChyZWplY3RlZCBwcm9taXNlLCBlcnJvciwgNDA0LCA1MDUsIG90aGVy4oCmKVxuICAgICAgLy8gVE9ETzogbWFuYWdlIC8gdXNlIGNhc2VzIGZvciBjYW5jZWxsYXRpb25cbiAgICAgIC8vIHRoaXMubG9nZ2VyLmRlYnVnKCdUcmFuc2l0aW9uIGNhbmNlbGxlZCcpO1xuXG4gICAgICAvLyBJZiB0cmFuc2l0aW9uIGVycm9yIGFuZCBubyBkZWJ1ZyBtb2RlLCBmb3JjZSByZWxvYWQgcGFnZS5cbiAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBlbHNlICovXG4gICAgICBpZiAoTG9nZ2VyLmdldExldmVsKCkgPT09IDApIHtcbiAgICAgICAgdGhpcy5mb3JjZShkYXRhLmN1cnJlbnQudXJsLmhyZWYpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBXaGVuIGEgcmVxdWVzdCBlcnJvciBvY2N1cnMuXG4gICAqXG4gICAqIEFsbG93IHRoZSB1c2VyIHRvIG1hbmFnZSByZXF1ZXN0IGVycm9yLiAoRS5nOiA0MDQpXG4gICAqL1xuICBwdWJsaWMgb25SZXF1ZXN0RXJyb3IodHJpZ2dlcjogVHJpZ2dlciwgLi4uYXJnczogYW55KTogYm9vbGVhbiB7XG4gICAgLy8gQ2FuY2VsIHRyYW5zaXRpb24gc3RhdHVzXG4gICAgdGhpcy50cmFuc2l0aW9ucy5pc1J1bm5pbmcgPSBmYWxzZTtcblxuICAgIGNvbnN0IFtocmVmLCByZXNwb25zZV06IFtzdHJpbmcsIFJlcXVlc3RFcnJvck9yUmVzcG9uc2VdID0gYXJncztcbiAgICBjb25zdCBhY3Rpb24gPSB0aGlzLmNhY2hlLmdldEFjdGlvbihocmVmKTtcbiAgICB0aGlzLmNhY2hlLmRlbGV0ZShocmVmKTtcblxuICAgIC8vIEN1c3RvbSByZXF1ZXN0RXJyb3IgcmV0dXJuaW5nIGZhbHNlIHdpbGwgcmV0dXJuIGhlcmUuXG4gICAgaWYgKFxuICAgICAgdGhpcy5fcmVxdWVzdEN1c3RvbUVycm9yICYmXG4gICAgICB0aGlzLl9yZXF1ZXN0Q3VzdG9tRXJyb3IodHJpZ2dlciwgYWN0aW9uLCBocmVmLCByZXNwb25zZSkgPT09IGZhbHNlXG4gICAgKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgLy8gRm9yY2UgcGFnZSBjaGFuZ2VcbiAgICBpZiAoYWN0aW9uID09PSAnY2xpY2snKSB7XG4gICAgICB0aGlzLmZvcmNlKGhyZWYpO1xuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICAvKipcbiAgICogUHJvZ3JhbW1hdGljYWxseSBwcmVmZXRjaFxuICAgKi9cbiAgcHVibGljIHByZWZldGNoKGhyZWY6IHN0cmluZykge1xuICAgIC8vIEFscmVhZHkgaW4gY2FjaGVcbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICAgIGlmICh0aGlzLmNhY2hlLmhhcyhocmVmKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRoaXMuY2FjaGUuc2V0KFxuICAgICAgaHJlZixcbiAgICAgIHRoaXMucmVxdWVzdChcbiAgICAgICAgaHJlZixcbiAgICAgICAgdGhpcy50aW1lb3V0LFxuICAgICAgICB0aGlzLm9uUmVxdWVzdEVycm9yLmJpbmQodGhpcywgJ2JhcmJhJylcbiAgICAgICkuY2F0Y2goKGVycm9yOiBSZXF1ZXN0RXJyb3JPclJlc3BvbnNlKSA9PiB7XG4gICAgICAgIHRoaXMubG9nZ2VyLmVycm9yKGVycm9yKTtcbiAgICAgIH0pLFxuICAgICAgJ3ByZWZldGNoJ1xuICAgICk7XG4gIH1cblxuICAvKipcbiAgICogQmluZCBldmVudCBsaXN0ZW5lcnMuXG4gICAqL1xuICBwcml2YXRlIF9iaW5kKCk6IHZvaWQge1xuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBlbHNlICovXG4gICAgaWYgKHRoaXMucHJlZmV0Y2hJZ25vcmUgIT09IHRydWUpIHtcbiAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlb3ZlcicsIHRoaXMuX29uTGlua0VudGVyKTtcbiAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ3RvdWNoc3RhcnQnLCB0aGlzLl9vbkxpbmtFbnRlcik7XG4gICAgfVxuICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgdGhpcy5fb25MaW5rQ2xpY2spO1xuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdwb3BzdGF0ZScsIHRoaXMuX29uU3RhdGVDaGFuZ2UpO1xuICB9XG5cbiAgLyoqXG4gICAqIEJpbmQgZXZlbnQgbGlzdGVuZXJzLlxuICAgKi9cbiAgcHJpdmF0ZSBfdW5iaW5kKCk6IHZvaWQge1xuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBlbHNlICovXG4gICAgaWYgKHRoaXMucHJlZmV0Y2hJZ25vcmUgIT09IHRydWUpIHtcbiAgICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ21vdXNlb3ZlcicsIHRoaXMuX29uTGlua0VudGVyKTtcbiAgICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3RvdWNoc3RhcnQnLCB0aGlzLl9vbkxpbmtFbnRlcik7XG4gICAgfVxuICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgdGhpcy5fb25MaW5rQ2xpY2spO1xuICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCdwb3BzdGF0ZScsIHRoaXMuX29uU3RhdGVDaGFuZ2UpO1xuICB9XG5cbiAgLyoqXG4gICAqIFdoZW4gYSBlbGVtZW50IGlzIGVudGVyZWQuXG4gICAqXG4gICAqIEdldCB2YWxpZCBsaW5rIGVsZW1lbnQuXG4gICAqIENhY2hlIFVSTCBpZiBuZWVkZWQuXG4gICAqL1xuICBwcml2YXRlIF9vbkxpbmtFbnRlcihlOiBMaW5rRXZlbnQpOiB2b2lkIHtcbiAgICBjb25zdCBsaW5rID0gdGhpcy5fZ2V0TGlua0VsZW1lbnQoZSk7XG5cbiAgICBpZiAoIWxpbmspIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBjb25zdCBocmVmID0gdGhpcy5kb20uZ2V0SHJlZihsaW5rKTtcblxuICAgIGlmICh0aGlzLnByZXZlbnQuY2hlY2tIcmVmKGhyZWYpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgLy8gQWxyZWFkeSBpbiBjYWNoZVxuICAgIGlmICh0aGlzLmNhY2hlLmhhcyhocmVmKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRoaXMuY2FjaGUuc2V0KFxuICAgICAgaHJlZixcbiAgICAgIHRoaXMucmVxdWVzdChcbiAgICAgICAgaHJlZixcbiAgICAgICAgdGhpcy50aW1lb3V0LFxuICAgICAgICB0aGlzLm9uUmVxdWVzdEVycm9yLmJpbmQodGhpcywgbGluaylcbiAgICAgICkuY2F0Y2goKGVycm9yOiBSZXF1ZXN0RXJyb3JPclJlc3BvbnNlKSA9PiB7XG4gICAgICAgIHRoaXMubG9nZ2VyLmVycm9yKGVycm9yKTtcbiAgICAgIH0pLFxuICAgICAgJ2VudGVyJ1xuICAgICk7XG4gIH1cblxuICAvKipcbiAgICogV2hlbiBhbiBlbGVtZW50IGlzIGNsaWNrZWQuXG4gICAqXG4gICAqIEdldCB2YWxpZCBsaW5rIGVsZW1lbnQuXG4gICAqIFByZXZlbnQgc2FtZSBVUkwuXG4gICAqIEdvIGZvciBhIEJhcmJhIHRyYW5zaXRpb24uXG4gICAqL1xuICBwcml2YXRlIF9vbkxpbmtDbGljayhlOiBMaW5rRXZlbnQpOiB2b2lkIHtcbiAgICAvLyBUaGlzIHVzZSBgcHJldmVudC5jaGVja0xpbmtgIHVuZGVyIHRoZSBob29kIHRvIGdldCBlbGlnaWJsZSBsaW5rLlxuICAgIGNvbnN0IGxpbmsgPSB0aGlzLl9nZXRMaW5rRWxlbWVudChlKTtcblxuICAgIGlmICghbGluaykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmICh0aGlzLnRyYW5zaXRpb25zLmlzUnVubmluZyAmJiB0aGlzLnByZXZlbnRSdW5uaW5nKSB7XG4gICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xuXG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdGhpcy5nbyh0aGlzLmRvbS5nZXRIcmVmKGxpbmspLCBsaW5rLCBlKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBXaGVuIEhpc3Rvcnkgc3RhdGUgY2hhbmdlcy5cbiAgICpcbiAgICogR2V0IFwiaHJlZlwiIGZyb20gVVJMXG4gICAqIEdvIGZvciBhIEJhcmJhIHRyYW5zaXRpb24uXG4gICAqL1xuICBwcml2YXRlIF9vblN0YXRlQ2hhbmdlKGU6IFBvcFN0YXRlRXZlbnQpOiB2b2lkIHtcbiAgICB0aGlzLmdvKHRoaXMudXJsLmdldEhyZWYoKSwgJ3BvcHN0YXRlJywgZSk7XG4gIH1cblxuICAvKipcbiAgICogR2V0IGEgdmFsaWQgbGluayBhbmNlc3Rvci5cbiAgICpcbiAgICogQ2hlY2sgZm9yIGEgXCJocmVmXCIgYXR0cmlidXRlLlxuICAgKiBUaGVuIGNoZWNrIGlmIGVsaWdpYmxlIGZvciBCYXJiYS5cbiAgICovXG4gIHByaXZhdGUgX2dldExpbmtFbGVtZW50KGU6IExpbmtFdmVudCk6IExpbmsge1xuICAgIGxldCBlbCA9IGUudGFyZ2V0IGFzIExpbms7XG5cbiAgICB3aGlsZSAoZWwgJiYgIXRoaXMuZG9tLmdldEhyZWYoZWwpKSB7XG4gICAgICBlbCA9IChlbCBhcyBIVE1MRWxlbWVudCkucGFyZW50Tm9kZSBhcyBMaW5rO1xuICAgIH1cblxuICAgIC8vIENoZWNrIHByZXZlbnRcbiAgICBpZiAoIWVsIHx8IHRoaXMucHJldmVudC5jaGVja0xpbmsoZWwsIGUsIHRoaXMuZG9tLmdldEhyZWYoZWwpKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHJldHVybiBlbDtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXNldCBwYWdlcyBkYXRhLlxuICAgKlxuICAgKiBTZXQgXCJjdXJyZW50XCIgYW5kIHVuc2V0IFwibmV4dFwiLlxuICAgKi9cbiAgcHJpdmF0ZSBfcmVzZXREYXRhKCkge1xuICAgIGNvbnN0IGhyZWYgPSB0aGlzLnVybC5nZXRIcmVmKCk7XG4gICAgY29uc3QgY3VycmVudCA9IHtcbiAgICAgIGNvbnRhaW5lcjogdGhpcy5kb20uZ2V0Q29udGFpbmVyKCksXG4gICAgICBodG1sOiB0aGlzLmRvbS5nZXRIdG1sKCksXG4gICAgICBuYW1lc3BhY2U6IHRoaXMuZG9tLmdldE5hbWVzcGFjZSgpLFxuICAgICAgdXJsOiB7XG4gICAgICAgIGhyZWYsXG4gICAgICAgIC4uLnRoaXMudXJsLnBhcnNlKGhyZWYpLFxuICAgICAgfSxcbiAgICB9O1xuXG4gICAgdGhpcy5fZGF0YSA9IHtcbiAgICAgIGN1cnJlbnQsXG4gICAgICBuZXh0OiB7IC4uLnRoaXMuc2NoZW1hUGFnZSB9LFxuICAgICAgdHJpZ2dlcjogdW5kZWZpbmVkLFxuICAgIH07XG5cbiAgICB0aGlzLmhvb2tzLmRvKCdyZXNldCcsIHRoaXMuZGF0YSk7XG4gIH1cbn1cblxuY29uc3QgY29yZSA9IG5ldyBDb3JlKCk7XG5cbmV4cG9ydCBkZWZhdWx0IGNvcmU7XG4iLCIvKipcbiAqIEV2RW1pdHRlciB2MS4xLjBcbiAqIExpbCcgZXZlbnQgZW1pdHRlclxuICogTUlUIExpY2Vuc2VcbiAqL1xuXG4vKiBqc2hpbnQgdW51c2VkOiB0cnVlLCB1bmRlZjogdHJ1ZSwgc3RyaWN0OiB0cnVlICovXG5cbiggZnVuY3Rpb24oIGdsb2JhbCwgZmFjdG9yeSApIHtcbiAgLy8gdW5pdmVyc2FsIG1vZHVsZSBkZWZpbml0aW9uXG4gIC8qIGpzaGludCBzdHJpY3Q6IGZhbHNlICovIC8qIGdsb2JhbHMgZGVmaW5lLCBtb2R1bGUsIHdpbmRvdyAqL1xuICBpZiAoIHR5cGVvZiBkZWZpbmUgPT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kICkge1xuICAgIC8vIEFNRCAtIFJlcXVpcmVKU1xuICAgIGRlZmluZSggZmFjdG9yeSApO1xuICB9IGVsc2UgaWYgKCB0eXBlb2YgbW9kdWxlID09ICdvYmplY3QnICYmIG1vZHVsZS5leHBvcnRzICkge1xuICAgIC8vIENvbW1vbkpTIC0gQnJvd3NlcmlmeSwgV2VicGFja1xuICAgIG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeSgpO1xuICB9IGVsc2Uge1xuICAgIC8vIEJyb3dzZXIgZ2xvYmFsc1xuICAgIGdsb2JhbC5FdkVtaXR0ZXIgPSBmYWN0b3J5KCk7XG4gIH1cblxufSggdHlwZW9mIHdpbmRvdyAhPSAndW5kZWZpbmVkJyA/IHdpbmRvdyA6IHRoaXMsIGZ1bmN0aW9uKCkge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuZnVuY3Rpb24gRXZFbWl0dGVyKCkge31cblxudmFyIHByb3RvID0gRXZFbWl0dGVyLnByb3RvdHlwZTtcblxucHJvdG8ub24gPSBmdW5jdGlvbiggZXZlbnROYW1lLCBsaXN0ZW5lciApIHtcbiAgaWYgKCAhZXZlbnROYW1lIHx8ICFsaXN0ZW5lciApIHtcbiAgICByZXR1cm47XG4gIH1cbiAgLy8gc2V0IGV2ZW50cyBoYXNoXG4gIHZhciBldmVudHMgPSB0aGlzLl9ldmVudHMgPSB0aGlzLl9ldmVudHMgfHwge307XG4gIC8vIHNldCBsaXN0ZW5lcnMgYXJyYXlcbiAgdmFyIGxpc3RlbmVycyA9IGV2ZW50c1sgZXZlbnROYW1lIF0gPSBldmVudHNbIGV2ZW50TmFtZSBdIHx8IFtdO1xuICAvLyBvbmx5IGFkZCBvbmNlXG4gIGlmICggbGlzdGVuZXJzLmluZGV4T2YoIGxpc3RlbmVyICkgPT0gLTEgKSB7XG4gICAgbGlzdGVuZXJzLnB1c2goIGxpc3RlbmVyICk7XG4gIH1cblxuICByZXR1cm4gdGhpcztcbn07XG5cbnByb3RvLm9uY2UgPSBmdW5jdGlvbiggZXZlbnROYW1lLCBsaXN0ZW5lciApIHtcbiAgaWYgKCAhZXZlbnROYW1lIHx8ICFsaXN0ZW5lciApIHtcbiAgICByZXR1cm47XG4gIH1cbiAgLy8gYWRkIGV2ZW50XG4gIHRoaXMub24oIGV2ZW50TmFtZSwgbGlzdGVuZXIgKTtcbiAgLy8gc2V0IG9uY2UgZmxhZ1xuICAvLyBzZXQgb25jZUV2ZW50cyBoYXNoXG4gIHZhciBvbmNlRXZlbnRzID0gdGhpcy5fb25jZUV2ZW50cyA9IHRoaXMuX29uY2VFdmVudHMgfHwge307XG4gIC8vIHNldCBvbmNlTGlzdGVuZXJzIG9iamVjdFxuICB2YXIgb25jZUxpc3RlbmVycyA9IG9uY2VFdmVudHNbIGV2ZW50TmFtZSBdID0gb25jZUV2ZW50c1sgZXZlbnROYW1lIF0gfHwge307XG4gIC8vIHNldCBmbGFnXG4gIG9uY2VMaXN0ZW5lcnNbIGxpc3RlbmVyIF0gPSB0cnVlO1xuXG4gIHJldHVybiB0aGlzO1xufTtcblxucHJvdG8ub2ZmID0gZnVuY3Rpb24oIGV2ZW50TmFtZSwgbGlzdGVuZXIgKSB7XG4gIHZhciBsaXN0ZW5lcnMgPSB0aGlzLl9ldmVudHMgJiYgdGhpcy5fZXZlbnRzWyBldmVudE5hbWUgXTtcbiAgaWYgKCAhbGlzdGVuZXJzIHx8ICFsaXN0ZW5lcnMubGVuZ3RoICkge1xuICAgIHJldHVybjtcbiAgfVxuICB2YXIgaW5kZXggPSBsaXN0ZW5lcnMuaW5kZXhPZiggbGlzdGVuZXIgKTtcbiAgaWYgKCBpbmRleCAhPSAtMSApIHtcbiAgICBsaXN0ZW5lcnMuc3BsaWNlKCBpbmRleCwgMSApO1xuICB9XG5cbiAgcmV0dXJuIHRoaXM7XG59O1xuXG5wcm90by5lbWl0RXZlbnQgPSBmdW5jdGlvbiggZXZlbnROYW1lLCBhcmdzICkge1xuICB2YXIgbGlzdGVuZXJzID0gdGhpcy5fZXZlbnRzICYmIHRoaXMuX2V2ZW50c1sgZXZlbnROYW1lIF07XG4gIGlmICggIWxpc3RlbmVycyB8fCAhbGlzdGVuZXJzLmxlbmd0aCApIHtcbiAgICByZXR1cm47XG4gIH1cbiAgLy8gY29weSBvdmVyIHRvIGF2b2lkIGludGVyZmVyZW5jZSBpZiAub2ZmKCkgaW4gbGlzdGVuZXJcbiAgbGlzdGVuZXJzID0gbGlzdGVuZXJzLnNsaWNlKDApO1xuICBhcmdzID0gYXJncyB8fCBbXTtcbiAgLy8gb25jZSBzdHVmZlxuICB2YXIgb25jZUxpc3RlbmVycyA9IHRoaXMuX29uY2VFdmVudHMgJiYgdGhpcy5fb25jZUV2ZW50c1sgZXZlbnROYW1lIF07XG5cbiAgZm9yICggdmFyIGk9MDsgaSA8IGxpc3RlbmVycy5sZW5ndGg7IGkrKyApIHtcbiAgICB2YXIgbGlzdGVuZXIgPSBsaXN0ZW5lcnNbaV1cbiAgICB2YXIgaXNPbmNlID0gb25jZUxpc3RlbmVycyAmJiBvbmNlTGlzdGVuZXJzWyBsaXN0ZW5lciBdO1xuICAgIGlmICggaXNPbmNlICkge1xuICAgICAgLy8gcmVtb3ZlIGxpc3RlbmVyXG4gICAgICAvLyByZW1vdmUgYmVmb3JlIHRyaWdnZXIgdG8gcHJldmVudCByZWN1cnNpb25cbiAgICAgIHRoaXMub2ZmKCBldmVudE5hbWUsIGxpc3RlbmVyICk7XG4gICAgICAvLyB1bnNldCBvbmNlIGZsYWdcbiAgICAgIGRlbGV0ZSBvbmNlTGlzdGVuZXJzWyBsaXN0ZW5lciBdO1xuICAgIH1cbiAgICAvLyB0cmlnZ2VyIGxpc3RlbmVyXG4gICAgbGlzdGVuZXIuYXBwbHkoIHRoaXMsIGFyZ3MgKTtcbiAgfVxuXG4gIHJldHVybiB0aGlzO1xufTtcblxucHJvdG8uYWxsT2ZmID0gZnVuY3Rpb24oKSB7XG4gIGRlbGV0ZSB0aGlzLl9ldmVudHM7XG4gIGRlbGV0ZSB0aGlzLl9vbmNlRXZlbnRzO1xufTtcblxucmV0dXJuIEV2RW1pdHRlcjtcblxufSkpO1xuIiwiLyohXG4gKiBDU1NQbHVnaW4gMy41LjFcbiAqIGh0dHBzOi8vZ3JlZW5zb2NrLmNvbVxuICpcbiAqIENvcHlyaWdodCAyMDA4LTIwMjAsIEdyZWVuU29jay4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqIFN1YmplY3QgdG8gdGhlIHRlcm1zIGF0IGh0dHBzOi8vZ3JlZW5zb2NrLmNvbS9zdGFuZGFyZC1saWNlbnNlIG9yIGZvclxuICogQ2x1YiBHcmVlblNvY2sgbWVtYmVycywgdGhlIGFncmVlbWVudCBpc3N1ZWQgd2l0aCB0aGF0IG1lbWJlcnNoaXAuXG4gKiBAYXV0aG9yOiBKYWNrIERveWxlLCBqYWNrQGdyZWVuc29jay5jb21cbiovXG5cbi8qIGVzbGludC1kaXNhYmxlICovXG5pbXBvcnQgeyBnc2FwLCBfZ2V0UHJvcGVydHksIF9udW1FeHAsIF9udW1XaXRoVW5pdEV4cCwgZ2V0VW5pdCwgX2lzU3RyaW5nLCBfaXNVbmRlZmluZWQsIF9yZW5kZXJDb21wbGV4U3RyaW5nLCBfcmVsRXhwLCBfZm9yRWFjaE5hbWUsIF9zb3J0UHJvcFR3ZWVuc0J5UHJpb3JpdHksIF9jb2xvclN0cmluZ0ZpbHRlciwgX2NoZWNrUGx1Z2luLCBfcmVwbGFjZVJhbmRvbSwgX3BsdWdpbnMsIEdTQ2FjaGUsIFByb3BUd2VlbiwgX2NvbmZpZywgX3RpY2tlciwgX3JvdW5kLCBfbWlzc2luZ1BsdWdpbiwgX2dldFNldHRlciwgX2dldENhY2hlLCBfc2V0RGVmYXVsdHMsIF9yZW1vdmVMaW5rZWRMaXN0SXRlbSAvL2ZvciB0aGUgY29tbWVudGVkLW91dCBjbGFzc05hbWUgZmVhdHVyZS5cbn0gZnJvbSBcIi4vZ3NhcC1jb3JlLmpzXCI7XG5cbnZhciBfd2luLFxuICAgIF9kb2MsXG4gICAgX2RvY0VsZW1lbnQsXG4gICAgX3BsdWdpbkluaXR0ZWQsXG4gICAgX3RlbXBEaXYsXG4gICAgX3RlbXBEaXZTdHlsZXIsXG4gICAgX3JlY2VudFNldHRlclBsdWdpbixcbiAgICBfd2luZG93RXhpc3RzID0gZnVuY3Rpb24gX3dpbmRvd0V4aXN0cygpIHtcbiAgcmV0dXJuIHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCI7XG59LFxuICAgIF90cmFuc2Zvcm1Qcm9wcyA9IHt9LFxuICAgIF9SQUQyREVHID0gMTgwIC8gTWF0aC5QSSxcbiAgICBfREVHMlJBRCA9IE1hdGguUEkgLyAxODAsXG4gICAgX2F0YW4yID0gTWF0aC5hdGFuMixcbiAgICBfYmlnTnVtID0gMWU4LFxuICAgIF9jYXBzRXhwID0gLyhbQS1aXSkvZyxcbiAgICBfaG9yaXpvbnRhbEV4cCA9IC8oPzpsZWZ0fHJpZ2h0fHdpZHRofG1hcmdpbnxwYWRkaW5nfHgpL2ksXG4gICAgX2NvbXBsZXhFeHAgPSAvW1xccyxcXChdXFxTLyxcbiAgICBfcHJvcGVydHlBbGlhc2VzID0ge1xuICBhdXRvQWxwaGE6IFwib3BhY2l0eSx2aXNpYmlsaXR5XCIsXG4gIHNjYWxlOiBcInNjYWxlWCxzY2FsZVlcIixcbiAgYWxwaGE6IFwib3BhY2l0eVwiXG59LFxuICAgIF9yZW5kZXJDU1NQcm9wID0gZnVuY3Rpb24gX3JlbmRlckNTU1Byb3AocmF0aW8sIGRhdGEpIHtcbiAgcmV0dXJuIGRhdGEuc2V0KGRhdGEudCwgZGF0YS5wLCBNYXRoLnJvdW5kKChkYXRhLnMgKyBkYXRhLmMgKiByYXRpbykgKiAxMDAwMCkgLyAxMDAwMCArIGRhdGEudSwgZGF0YSk7XG59LFxuICAgIF9yZW5kZXJQcm9wV2l0aEVuZCA9IGZ1bmN0aW9uIF9yZW5kZXJQcm9wV2l0aEVuZChyYXRpbywgZGF0YSkge1xuICByZXR1cm4gZGF0YS5zZXQoZGF0YS50LCBkYXRhLnAsIHJhdGlvID09PSAxID8gZGF0YS5lIDogTWF0aC5yb3VuZCgoZGF0YS5zICsgZGF0YS5jICogcmF0aW8pICogMTAwMDApIC8gMTAwMDAgKyBkYXRhLnUsIGRhdGEpO1xufSxcbiAgICBfcmVuZGVyQ1NTUHJvcFdpdGhCZWdpbm5pbmcgPSBmdW5jdGlvbiBfcmVuZGVyQ1NTUHJvcFdpdGhCZWdpbm5pbmcocmF0aW8sIGRhdGEpIHtcbiAgcmV0dXJuIGRhdGEuc2V0KGRhdGEudCwgZGF0YS5wLCByYXRpbyA/IE1hdGgucm91bmQoKGRhdGEucyArIGRhdGEuYyAqIHJhdGlvKSAqIDEwMDAwKSAvIDEwMDAwICsgZGF0YS51IDogZGF0YS5iLCBkYXRhKTtcbn0sXG4gICAgLy9pZiB1bml0cyBjaGFuZ2UsIHdlIG5lZWQgYSB3YXkgdG8gcmVuZGVyIHRoZSBvcmlnaW5hbCB1bml0L3ZhbHVlIHdoZW4gdGhlIHR3ZWVuIGdvZXMgYWxsIHRoZSB3YXkgYmFjayB0byB0aGUgYmVnaW5uaW5nIChyYXRpbzowKVxuX3JlbmRlclJvdW5kZWRDU1NQcm9wID0gZnVuY3Rpb24gX3JlbmRlclJvdW5kZWRDU1NQcm9wKHJhdGlvLCBkYXRhKSB7XG4gIHZhciB2YWx1ZSA9IGRhdGEucyArIGRhdGEuYyAqIHJhdGlvO1xuICBkYXRhLnNldChkYXRhLnQsIGRhdGEucCwgfn4odmFsdWUgKyAodmFsdWUgPCAwID8gLS41IDogLjUpKSArIGRhdGEudSwgZGF0YSk7XG59LFxuICAgIF9yZW5kZXJOb25Ud2VlbmluZ1ZhbHVlID0gZnVuY3Rpb24gX3JlbmRlck5vblR3ZWVuaW5nVmFsdWUocmF0aW8sIGRhdGEpIHtcbiAgcmV0dXJuIGRhdGEuc2V0KGRhdGEudCwgZGF0YS5wLCByYXRpbyA/IGRhdGEuZSA6IGRhdGEuYiwgZGF0YSk7XG59LFxuICAgIF9yZW5kZXJOb25Ud2VlbmluZ1ZhbHVlT25seUF0RW5kID0gZnVuY3Rpb24gX3JlbmRlck5vblR3ZWVuaW5nVmFsdWVPbmx5QXRFbmQocmF0aW8sIGRhdGEpIHtcbiAgcmV0dXJuIGRhdGEuc2V0KGRhdGEudCwgZGF0YS5wLCByYXRpbyAhPT0gMSA/IGRhdGEuYiA6IGRhdGEuZSwgZGF0YSk7XG59LFxuICAgIF9zZXR0ZXJDU1NTdHlsZSA9IGZ1bmN0aW9uIF9zZXR0ZXJDU1NTdHlsZSh0YXJnZXQsIHByb3BlcnR5LCB2YWx1ZSkge1xuICByZXR1cm4gdGFyZ2V0LnN0eWxlW3Byb3BlcnR5XSA9IHZhbHVlO1xufSxcbiAgICBfc2V0dGVyQ1NTUHJvcCA9IGZ1bmN0aW9uIF9zZXR0ZXJDU1NQcm9wKHRhcmdldCwgcHJvcGVydHksIHZhbHVlKSB7XG4gIHJldHVybiB0YXJnZXQuc3R5bGUuc2V0UHJvcGVydHkocHJvcGVydHksIHZhbHVlKTtcbn0sXG4gICAgX3NldHRlclRyYW5zZm9ybSA9IGZ1bmN0aW9uIF9zZXR0ZXJUcmFuc2Zvcm0odGFyZ2V0LCBwcm9wZXJ0eSwgdmFsdWUpIHtcbiAgcmV0dXJuIHRhcmdldC5fZ3NhcFtwcm9wZXJ0eV0gPSB2YWx1ZTtcbn0sXG4gICAgX3NldHRlclNjYWxlID0gZnVuY3Rpb24gX3NldHRlclNjYWxlKHRhcmdldCwgcHJvcGVydHksIHZhbHVlKSB7XG4gIHJldHVybiB0YXJnZXQuX2dzYXAuc2NhbGVYID0gdGFyZ2V0Ll9nc2FwLnNjYWxlWSA9IHZhbHVlO1xufSxcbiAgICBfc2V0dGVyU2NhbGVXaXRoUmVuZGVyID0gZnVuY3Rpb24gX3NldHRlclNjYWxlV2l0aFJlbmRlcih0YXJnZXQsIHByb3BlcnR5LCB2YWx1ZSwgZGF0YSwgcmF0aW8pIHtcbiAgdmFyIGNhY2hlID0gdGFyZ2V0Ll9nc2FwO1xuICBjYWNoZS5zY2FsZVggPSBjYWNoZS5zY2FsZVkgPSB2YWx1ZTtcbiAgY2FjaGUucmVuZGVyVHJhbnNmb3JtKHJhdGlvLCBjYWNoZSk7XG59LFxuICAgIF9zZXR0ZXJUcmFuc2Zvcm1XaXRoUmVuZGVyID0gZnVuY3Rpb24gX3NldHRlclRyYW5zZm9ybVdpdGhSZW5kZXIodGFyZ2V0LCBwcm9wZXJ0eSwgdmFsdWUsIGRhdGEsIHJhdGlvKSB7XG4gIHZhciBjYWNoZSA9IHRhcmdldC5fZ3NhcDtcbiAgY2FjaGVbcHJvcGVydHldID0gdmFsdWU7XG4gIGNhY2hlLnJlbmRlclRyYW5zZm9ybShyYXRpbywgY2FjaGUpO1xufSxcbiAgICBfdHJhbnNmb3JtUHJvcCA9IFwidHJhbnNmb3JtXCIsXG4gICAgX3RyYW5zZm9ybU9yaWdpblByb3AgPSBfdHJhbnNmb3JtUHJvcCArIFwiT3JpZ2luXCIsXG4gICAgX3N1cHBvcnRzM0QsXG4gICAgX2NyZWF0ZUVsZW1lbnQgPSBmdW5jdGlvbiBfY3JlYXRlRWxlbWVudCh0eXBlLCBucykge1xuICB2YXIgZSA9IF9kb2MuY3JlYXRlRWxlbWVudE5TID8gX2RvYy5jcmVhdGVFbGVtZW50TlMoKG5zIHx8IFwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbFwiKS5yZXBsYWNlKC9eaHR0cHMvLCBcImh0dHBcIiksIHR5cGUpIDogX2RvYy5jcmVhdGVFbGVtZW50KHR5cGUpOyAvL3NvbWUgc2VydmVycyBzd2FwIGluIGh0dHBzIGZvciBodHRwIGluIHRoZSBuYW1lc3BhY2Ugd2hpY2ggY2FuIGJyZWFrIHRoaW5ncywgbWFraW5nIFwic3R5bGVcIiBpbmFjY2Vzc2libGUuXG5cbiAgcmV0dXJuIGUuc3R5bGUgPyBlIDogX2RvYy5jcmVhdGVFbGVtZW50KHR5cGUpOyAvL3NvbWUgZW52aXJvbm1lbnRzIHdvbid0IGFsbG93IGFjY2VzcyB0byB0aGUgZWxlbWVudCdzIHN0eWxlIHdoZW4gY3JlYXRlZCB3aXRoIGEgbmFtZXNwYWNlIGluIHdoaWNoIGNhc2Ugd2UgZGVmYXVsdCB0byB0aGUgc3RhbmRhcmQgY3JlYXRlRWxlbWVudCgpIHRvIHdvcmsgYXJvdW5kIHRoZSBpc3N1ZS4gQWxzbyBub3RlIHRoYXQgd2hlbiBHU0FQIGlzIGVtYmVkZGVkIGRpcmVjdGx5IGluc2lkZSBhbiBTVkcgZmlsZSwgY3JlYXRlRWxlbWVudCgpIHdvbid0IGFsbG93IGFjY2VzcyB0byB0aGUgc3R5bGUgb2JqZWN0IGluIEZpcmVmb3ggKHNlZSBodHRwczovL2dyZWVuc29jay5jb20vZm9ydW1zL3RvcGljLzIwMjE1LXByb2JsZW0tdXNpbmctdHdlZW5tYXgtaW4tc3RhbmRhbG9uZS1zZWxmLWNvbnRhaW5pbmctc3ZnLWZpbGUtZXJyLWNhbm5vdC1zZXQtcHJvcGVydHktY3NzdGV4dC1vZi11bmRlZmluZWQvKS5cbn0sXG4gICAgX2dldENvbXB1dGVkUHJvcGVydHkgPSBmdW5jdGlvbiBfZ2V0Q29tcHV0ZWRQcm9wZXJ0eSh0YXJnZXQsIHByb3BlcnR5LCBza2lwUHJlZml4RmFsbGJhY2spIHtcbiAgdmFyIGNzID0gZ2V0Q29tcHV0ZWRTdHlsZSh0YXJnZXQpO1xuICByZXR1cm4gY3NbcHJvcGVydHldIHx8IGNzLmdldFByb3BlcnR5VmFsdWUocHJvcGVydHkucmVwbGFjZShfY2Fwc0V4cCwgXCItJDFcIikudG9Mb3dlckNhc2UoKSkgfHwgY3MuZ2V0UHJvcGVydHlWYWx1ZShwcm9wZXJ0eSkgfHwgIXNraXBQcmVmaXhGYWxsYmFjayAmJiBfZ2V0Q29tcHV0ZWRQcm9wZXJ0eSh0YXJnZXQsIF9jaGVja1Byb3BQcmVmaXgocHJvcGVydHkpIHx8IHByb3BlcnR5LCAxKSB8fCBcIlwiOyAvL2NzcyB2YXJpYWJsZXMgbWF5IG5vdCBuZWVkIGNhcHMgc3dhcHBlZCBvdXQgZm9yIGRhc2hlcyBhbmQgbG93ZXJjYXNlLlxufSxcbiAgICBfcHJlZml4ZXMgPSBcIk8sTW96LG1zLE1zLFdlYmtpdFwiLnNwbGl0KFwiLFwiKSxcbiAgICBfY2hlY2tQcm9wUHJlZml4ID0gZnVuY3Rpb24gX2NoZWNrUHJvcFByZWZpeChwcm9wZXJ0eSwgZWxlbWVudCwgcHJlZmVyUHJlZml4KSB7XG4gIHZhciBlID0gZWxlbWVudCB8fCBfdGVtcERpdixcbiAgICAgIHMgPSBlLnN0eWxlLFxuICAgICAgaSA9IDU7XG5cbiAgaWYgKHByb3BlcnR5IGluIHMgJiYgIXByZWZlclByZWZpeCkge1xuICAgIHJldHVybiBwcm9wZXJ0eTtcbiAgfVxuXG4gIHByb3BlcnR5ID0gcHJvcGVydHkuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkgKyBwcm9wZXJ0eS5zdWJzdHIoMSk7XG5cbiAgd2hpbGUgKGktLSAmJiAhKF9wcmVmaXhlc1tpXSArIHByb3BlcnR5IGluIHMpKSB7fVxuXG4gIHJldHVybiBpIDwgMCA/IG51bGwgOiAoaSA9PT0gMyA/IFwibXNcIiA6IGkgPj0gMCA/IF9wcmVmaXhlc1tpXSA6IFwiXCIpICsgcHJvcGVydHk7XG59LFxuICAgIF9pbml0Q29yZSA9IGZ1bmN0aW9uIF9pbml0Q29yZSgpIHtcbiAgaWYgKF93aW5kb3dFeGlzdHMoKSAmJiB3aW5kb3cuZG9jdW1lbnQpIHtcbiAgICBfd2luID0gd2luZG93O1xuICAgIF9kb2MgPSBfd2luLmRvY3VtZW50O1xuICAgIF9kb2NFbGVtZW50ID0gX2RvYy5kb2N1bWVudEVsZW1lbnQ7XG4gICAgX3RlbXBEaXYgPSBfY3JlYXRlRWxlbWVudChcImRpdlwiKSB8fCB7XG4gICAgICBzdHlsZToge31cbiAgICB9O1xuICAgIF90ZW1wRGl2U3R5bGVyID0gX2NyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gICAgX3RyYW5zZm9ybVByb3AgPSBfY2hlY2tQcm9wUHJlZml4KF90cmFuc2Zvcm1Qcm9wKTtcbiAgICBfdHJhbnNmb3JtT3JpZ2luUHJvcCA9IF90cmFuc2Zvcm1Qcm9wICsgXCJPcmlnaW5cIjtcbiAgICBfdGVtcERpdi5zdHlsZS5jc3NUZXh0ID0gXCJib3JkZXItd2lkdGg6MDtsaW5lLWhlaWdodDowO3Bvc2l0aW9uOmFic29sdXRlO3BhZGRpbmc6MFwiOyAvL21ha2Ugc3VyZSB0byBvdmVycmlkZSBjZXJ0YWluIHByb3BlcnRpZXMgdGhhdCBtYXkgY29udGFtaW5hdGUgbWVhc3VyZW1lbnRzLCBpbiBjYXNlIHRoZSB1c2VyIGhhcyBvdmVycmVhY2hpbmcgc3R5bGUgc2hlZXRzLlxuXG4gICAgX3N1cHBvcnRzM0QgPSAhIV9jaGVja1Byb3BQcmVmaXgoXCJwZXJzcGVjdGl2ZVwiKTtcbiAgICBfcGx1Z2luSW5pdHRlZCA9IDE7XG4gIH1cbn0sXG4gICAgX2dldEJCb3hIYWNrID0gZnVuY3Rpb24gX2dldEJCb3hIYWNrKHN3YXBJZlBvc3NpYmxlKSB7XG4gIC8vd29ya3MgYXJvdW5kIGlzc3VlcyBpbiBzb21lIGJyb3dzZXJzIChsaWtlIEZpcmVmb3gpIHRoYXQgZG9uJ3QgY29ycmVjdGx5IHJlcG9ydCBnZXRCQm94KCkgb24gU1ZHIGVsZW1lbnRzIGluc2lkZSBhIDxkZWZzPiBlbGVtZW50IGFuZC9vciA8bWFzaz4uIFdlIHRyeSBjcmVhdGluZyBhbiBTVkcsIGFkZGluZyBpdCB0byB0aGUgZG9jdW1lbnRFbGVtZW50IGFuZCB0b3NzIHRoZSBlbGVtZW50IGluIHRoZXJlIHNvIHRoYXQgaXQncyBkZWZpbml0ZWx5IHBhcnQgb2YgdGhlIHJlbmRlcmluZyB0cmVlLCB0aGVuIGdyYWIgdGhlIGJib3ggYW5kIGlmIGl0IHdvcmtzLCB3ZSBhY3R1YWxseSBzd2FwIG91dCB0aGUgb3JpZ2luYWwgZ2V0QkJveCgpIG1ldGhvZCBmb3Igb3VyIG93biB0aGF0IGRvZXMgdGhlc2UgZXh0cmEgc3RlcHMgd2hlbmV2ZXIgZ2V0QkJveCBpcyBuZWVkZWQuIFRoaXMgaGVscHMgZW5zdXJlIHRoYXQgcGVyZm9ybWFuY2UgaXMgb3B0aW1hbCAob25seSBkbyBhbGwgdGhlc2UgZXh0cmEgc3RlcHMgd2hlbiBhYnNvbHV0ZWx5IG5lY2Vzc2FyeS4uLm1vc3QgZWxlbWVudHMgZG9uJ3QgbmVlZCBpdCkuXG4gIHZhciBzdmcgPSBfY3JlYXRlRWxlbWVudChcInN2Z1wiLCB0aGlzLm93bmVyU1ZHRWxlbWVudCAmJiB0aGlzLm93bmVyU1ZHRWxlbWVudC5nZXRBdHRyaWJ1dGUoXCJ4bWxuc1wiKSB8fCBcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIpLFxuICAgICAgb2xkUGFyZW50ID0gdGhpcy5wYXJlbnROb2RlLFxuICAgICAgb2xkU2libGluZyA9IHRoaXMubmV4dFNpYmxpbmcsXG4gICAgICBvbGRDU1MgPSB0aGlzLnN0eWxlLmNzc1RleHQsXG4gICAgICBiYm94O1xuXG4gIF9kb2NFbGVtZW50LmFwcGVuZENoaWxkKHN2Zyk7XG5cbiAgc3ZnLmFwcGVuZENoaWxkKHRoaXMpO1xuICB0aGlzLnN0eWxlLmRpc3BsYXkgPSBcImJsb2NrXCI7XG5cbiAgaWYgKHN3YXBJZlBvc3NpYmxlKSB7XG4gICAgdHJ5IHtcbiAgICAgIGJib3ggPSB0aGlzLmdldEJCb3goKTtcbiAgICAgIHRoaXMuX2dzYXBCQm94ID0gdGhpcy5nZXRCQm94OyAvL3N0b3JlIHRoZSBvcmlnaW5hbFxuXG4gICAgICB0aGlzLmdldEJCb3ggPSBfZ2V0QkJveEhhY2s7XG4gICAgfSBjYXRjaCAoZSkge31cbiAgfSBlbHNlIGlmICh0aGlzLl9nc2FwQkJveCkge1xuICAgIGJib3ggPSB0aGlzLl9nc2FwQkJveCgpO1xuICB9XG5cbiAgaWYgKG9sZFBhcmVudCkge1xuICAgIGlmIChvbGRTaWJsaW5nKSB7XG4gICAgICBvbGRQYXJlbnQuaW5zZXJ0QmVmb3JlKHRoaXMsIG9sZFNpYmxpbmcpO1xuICAgIH0gZWxzZSB7XG4gICAgICBvbGRQYXJlbnQuYXBwZW5kQ2hpbGQodGhpcyk7XG4gICAgfVxuICB9XG5cbiAgX2RvY0VsZW1lbnQucmVtb3ZlQ2hpbGQoc3ZnKTtcblxuICB0aGlzLnN0eWxlLmNzc1RleHQgPSBvbGRDU1M7XG4gIHJldHVybiBiYm94O1xufSxcbiAgICBfZ2V0QXR0cmlidXRlRmFsbGJhY2tzID0gZnVuY3Rpb24gX2dldEF0dHJpYnV0ZUZhbGxiYWNrcyh0YXJnZXQsIGF0dHJpYnV0ZXNBcnJheSkge1xuICB2YXIgaSA9IGF0dHJpYnV0ZXNBcnJheS5sZW5ndGg7XG5cbiAgd2hpbGUgKGktLSkge1xuICAgIGlmICh0YXJnZXQuaGFzQXR0cmlidXRlKGF0dHJpYnV0ZXNBcnJheVtpXSkpIHtcbiAgICAgIHJldHVybiB0YXJnZXQuZ2V0QXR0cmlidXRlKGF0dHJpYnV0ZXNBcnJheVtpXSk7XG4gICAgfVxuICB9XG59LFxuICAgIF9nZXRCQm94ID0gZnVuY3Rpb24gX2dldEJCb3godGFyZ2V0KSB7XG4gIHZhciBib3VuZHM7XG5cbiAgdHJ5IHtcbiAgICBib3VuZHMgPSB0YXJnZXQuZ2V0QkJveCgpOyAvL0ZpcmVmb3ggdGhyb3dzIGVycm9ycyBpZiB5b3UgdHJ5IGNhbGxpbmcgZ2V0QkJveCgpIG9uIGFuIFNWRyBlbGVtZW50IHRoYXQncyBub3QgcmVuZGVyZWQgKGxpa2UgaW4gYSA8c3ltYm9sPiBvciA8ZGVmcz4pLiBodHRwczovL2J1Z3ppbGxhLm1vemlsbGEub3JnL3Nob3dfYnVnLmNnaT9pZD02MTIxMThcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBib3VuZHMgPSBfZ2V0QkJveEhhY2suY2FsbCh0YXJnZXQsIHRydWUpO1xuICB9XG5cbiAgYm91bmRzICYmIChib3VuZHMud2lkdGggfHwgYm91bmRzLmhlaWdodCkgfHwgdGFyZ2V0LmdldEJCb3ggPT09IF9nZXRCQm94SGFjayB8fCAoYm91bmRzID0gX2dldEJCb3hIYWNrLmNhbGwodGFyZ2V0LCB0cnVlKSk7IC8vc29tZSBicm93c2VycyAobGlrZSBGaXJlZm94KSBtaXNyZXBvcnQgdGhlIGJvdW5kcyBpZiB0aGUgZWxlbWVudCBoYXMgemVybyB3aWR0aCBhbmQgaGVpZ2h0IChpdCBqdXN0IGFzc3VtZXMgaXQncyBhdCB4OjAsIHk6MCksIHRodXMgd2UgbmVlZCB0byBtYW51YWxseSBncmFiIHRoZSBwb3NpdGlvbiBpbiB0aGF0IGNhc2UuXG5cbiAgcmV0dXJuIGJvdW5kcyAmJiAhYm91bmRzLndpZHRoICYmICFib3VuZHMueCAmJiAhYm91bmRzLnkgPyB7XG4gICAgeDogK19nZXRBdHRyaWJ1dGVGYWxsYmFja3ModGFyZ2V0LCBbXCJ4XCIsIFwiY3hcIiwgXCJ4MVwiXSkgfHwgMCxcbiAgICB5OiArX2dldEF0dHJpYnV0ZUZhbGxiYWNrcyh0YXJnZXQsIFtcInlcIiwgXCJjeVwiLCBcInkxXCJdKSB8fCAwLFxuICAgIHdpZHRoOiAwLFxuICAgIGhlaWdodDogMFxuICB9IDogYm91bmRzO1xufSxcbiAgICBfaXNTVkcgPSBmdW5jdGlvbiBfaXNTVkcoZSkge1xuICByZXR1cm4gISEoZS5nZXRDVE0gJiYgKCFlLnBhcmVudE5vZGUgfHwgZS5vd25lclNWR0VsZW1lbnQpICYmIF9nZXRCQm94KGUpKTtcbn0sXG4gICAgLy9yZXBvcnRzIGlmIHRoZSBlbGVtZW50IGlzIGFuIFNWRyBvbiB3aGljaCBnZXRCQm94KCkgYWN0dWFsbHkgd29ya3Ncbl9yZW1vdmVQcm9wZXJ0eSA9IGZ1bmN0aW9uIF9yZW1vdmVQcm9wZXJ0eSh0YXJnZXQsIHByb3BlcnR5KSB7XG4gIGlmIChwcm9wZXJ0eSkge1xuICAgIHZhciBzdHlsZSA9IHRhcmdldC5zdHlsZTtcblxuICAgIGlmIChwcm9wZXJ0eSBpbiBfdHJhbnNmb3JtUHJvcHMgJiYgcHJvcGVydHkgIT09IF90cmFuc2Zvcm1PcmlnaW5Qcm9wKSB7XG4gICAgICBwcm9wZXJ0eSA9IF90cmFuc2Zvcm1Qcm9wO1xuICAgIH1cblxuICAgIGlmIChzdHlsZS5yZW1vdmVQcm9wZXJ0eSkge1xuICAgICAgaWYgKHByb3BlcnR5LnN1YnN0cigwLCAyKSA9PT0gXCJtc1wiIHx8IHByb3BlcnR5LnN1YnN0cigwLCA2KSA9PT0gXCJ3ZWJraXRcIikge1xuICAgICAgICAvL01pY3Jvc29mdCBhbmQgc29tZSBXZWJraXQgYnJvd3NlcnMgZG9uJ3QgY29uZm9ybSB0byB0aGUgc3RhbmRhcmQgb2YgY2FwaXRhbGl6aW5nIHRoZSBmaXJzdCBwcmVmaXggY2hhcmFjdGVyLCBzbyB3ZSBhZGp1c3Qgc28gdGhhdCB3aGVuIHdlIHByZWZpeCB0aGUgY2FwcyB3aXRoIGEgZGFzaCwgaXQncyBjb3JyZWN0IChvdGhlcndpc2UgaXQnZCBiZSBcIm1zLXRyYW5zZm9ybVwiIGluc3RlYWQgb2YgXCItbXMtdHJhbnNmb3JtXCIgZm9yIElFOSwgZm9yIGV4YW1wbGUpXG4gICAgICAgIHByb3BlcnR5ID0gXCItXCIgKyBwcm9wZXJ0eTtcbiAgICAgIH1cblxuICAgICAgc3R5bGUucmVtb3ZlUHJvcGVydHkocHJvcGVydHkucmVwbGFjZShfY2Fwc0V4cCwgXCItJDFcIikudG9Mb3dlckNhc2UoKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vbm90ZTogb2xkIHZlcnNpb25zIG9mIElFIHVzZSBcInJlbW92ZUF0dHJpYnV0ZSgpXCIgaW5zdGVhZCBvZiBcInJlbW92ZVByb3BlcnR5KClcIlxuICAgICAgc3R5bGUucmVtb3ZlQXR0cmlidXRlKHByb3BlcnR5KTtcbiAgICB9XG4gIH1cbn0sXG4gICAgX2FkZE5vblR3ZWVuaW5nUFQgPSBmdW5jdGlvbiBfYWRkTm9uVHdlZW5pbmdQVChwbHVnaW4sIHRhcmdldCwgcHJvcGVydHksIGJlZ2lubmluZywgZW5kLCBvbmx5U2V0QXRFbmQpIHtcbiAgdmFyIHB0ID0gbmV3IFByb3BUd2VlbihwbHVnaW4uX3B0LCB0YXJnZXQsIHByb3BlcnR5LCAwLCAxLCBvbmx5U2V0QXRFbmQgPyBfcmVuZGVyTm9uVHdlZW5pbmdWYWx1ZU9ubHlBdEVuZCA6IF9yZW5kZXJOb25Ud2VlbmluZ1ZhbHVlKTtcbiAgcGx1Z2luLl9wdCA9IHB0O1xuICBwdC5iID0gYmVnaW5uaW5nO1xuICBwdC5lID0gZW5kO1xuXG4gIHBsdWdpbi5fcHJvcHMucHVzaChwcm9wZXJ0eSk7XG5cbiAgcmV0dXJuIHB0O1xufSxcbiAgICBfbm9uQ29udmVydGlibGVVbml0cyA9IHtcbiAgZGVnOiAxLFxuICByYWQ6IDEsXG4gIHR1cm46IDFcbn0sXG4gICAgLy90YWtlcyBhIHNpbmdsZSB2YWx1ZSBsaWtlIDIwcHggYW5kIGNvbnZlcnRzIGl0IHRvIHRoZSB1bml0IHNwZWNpZmllZCwgbGlrZSBcIiVcIiwgcmV0dXJuaW5nIG9ubHkgdGhlIG51bWVyaWMgYW1vdW50LlxuX2NvbnZlcnRUb1VuaXQgPSBmdW5jdGlvbiBfY29udmVydFRvVW5pdCh0YXJnZXQsIHByb3BlcnR5LCB2YWx1ZSwgdW5pdCkge1xuICB2YXIgY3VyVmFsdWUgPSBwYXJzZUZsb2F0KHZhbHVlKSB8fCAwLFxuICAgICAgY3VyVW5pdCA9ICh2YWx1ZSArIFwiXCIpLnRyaW0oKS5zdWJzdHIoKGN1clZhbHVlICsgXCJcIikubGVuZ3RoKSB8fCBcInB4XCIsXG4gICAgICAvLyBzb21lIGJyb3dzZXJzIGxlYXZlIGV4dHJhIHdoaXRlc3BhY2UgYXQgdGhlIGJlZ2lubmluZyBvZiBDU1MgdmFyaWFibGVzLCBoZW5jZSB0aGUgbmVlZCB0byB0cmltKClcbiAgc3R5bGUgPSBfdGVtcERpdi5zdHlsZSxcbiAgICAgIGhvcml6b250YWwgPSBfaG9yaXpvbnRhbEV4cC50ZXN0KHByb3BlcnR5KSxcbiAgICAgIGlzUm9vdFNWRyA9IHRhcmdldC50YWdOYW1lLnRvTG93ZXJDYXNlKCkgPT09IFwic3ZnXCIsXG4gICAgICBtZWFzdXJlUHJvcGVydHkgPSAoaXNSb290U1ZHID8gXCJjbGllbnRcIiA6IFwib2Zmc2V0XCIpICsgKGhvcml6b250YWwgPyBcIldpZHRoXCIgOiBcIkhlaWdodFwiKSxcbiAgICAgIGFtb3VudCA9IDEwMCxcbiAgICAgIHRvUGl4ZWxzID0gdW5pdCA9PT0gXCJweFwiLFxuICAgICAgdG9QZXJjZW50ID0gdW5pdCA9PT0gXCIlXCIsXG4gICAgICBweCxcbiAgICAgIHBhcmVudCxcbiAgICAgIGNhY2hlLFxuICAgICAgaXNTVkc7XG5cbiAgaWYgKHVuaXQgPT09IGN1clVuaXQgfHwgIWN1clZhbHVlIHx8IF9ub25Db252ZXJ0aWJsZVVuaXRzW3VuaXRdIHx8IF9ub25Db252ZXJ0aWJsZVVuaXRzW2N1clVuaXRdKSB7XG4gICAgcmV0dXJuIGN1clZhbHVlO1xuICB9XG5cbiAgY3VyVW5pdCAhPT0gXCJweFwiICYmICF0b1BpeGVscyAmJiAoY3VyVmFsdWUgPSBfY29udmVydFRvVW5pdCh0YXJnZXQsIHByb3BlcnR5LCB2YWx1ZSwgXCJweFwiKSk7XG4gIGlzU1ZHID0gdGFyZ2V0LmdldENUTSAmJiBfaXNTVkcodGFyZ2V0KTtcblxuICBpZiAodG9QZXJjZW50ICYmIChfdHJhbnNmb3JtUHJvcHNbcHJvcGVydHldIHx8IH5wcm9wZXJ0eS5pbmRleE9mKFwiYWRpdXNcIikpKSB7XG4gICAgLy90cmFuc2Zvcm1zIGFuZCBib3JkZXJSYWRpdXMgYXJlIHJlbGF0aXZlIHRvIHRoZSBzaXplIG9mIHRoZSBlbGVtZW50IGl0c2VsZiFcbiAgICByZXR1cm4gX3JvdW5kKGN1clZhbHVlIC8gKGlzU1ZHID8gdGFyZ2V0LmdldEJCb3goKVtob3Jpem9udGFsID8gXCJ3aWR0aFwiIDogXCJoZWlnaHRcIl0gOiB0YXJnZXRbbWVhc3VyZVByb3BlcnR5XSkgKiBhbW91bnQpO1xuICB9XG5cbiAgc3R5bGVbaG9yaXpvbnRhbCA/IFwid2lkdGhcIiA6IFwiaGVpZ2h0XCJdID0gYW1vdW50ICsgKHRvUGl4ZWxzID8gY3VyVW5pdCA6IHVuaXQpO1xuICBwYXJlbnQgPSB+cHJvcGVydHkuaW5kZXhPZihcImFkaXVzXCIpIHx8IHVuaXQgPT09IFwiZW1cIiAmJiB0YXJnZXQuYXBwZW5kQ2hpbGQgJiYgIWlzUm9vdFNWRyA/IHRhcmdldCA6IHRhcmdldC5wYXJlbnROb2RlO1xuXG4gIGlmIChpc1NWRykge1xuICAgIHBhcmVudCA9ICh0YXJnZXQub3duZXJTVkdFbGVtZW50IHx8IHt9KS5wYXJlbnROb2RlO1xuICB9XG5cbiAgaWYgKCFwYXJlbnQgfHwgcGFyZW50ID09PSBfZG9jIHx8ICFwYXJlbnQuYXBwZW5kQ2hpbGQpIHtcbiAgICBwYXJlbnQgPSBfZG9jLmJvZHk7XG4gIH1cblxuICBjYWNoZSA9IHBhcmVudC5fZ3NhcDtcblxuICBpZiAoY2FjaGUgJiYgdG9QZXJjZW50ICYmIGNhY2hlLndpZHRoICYmIGhvcml6b250YWwgJiYgY2FjaGUudGltZSA9PT0gX3RpY2tlci50aW1lKSB7XG4gICAgcmV0dXJuIF9yb3VuZChjdXJWYWx1ZSAvIGNhY2hlLndpZHRoICogYW1vdW50KTtcbiAgfSBlbHNlIHtcbiAgICAodG9QZXJjZW50IHx8IGN1clVuaXQgPT09IFwiJVwiKSAmJiAoc3R5bGUucG9zaXRpb24gPSBfZ2V0Q29tcHV0ZWRQcm9wZXJ0eSh0YXJnZXQsIFwicG9zaXRpb25cIikpO1xuICAgIHBhcmVudCA9PT0gdGFyZ2V0ICYmIChzdHlsZS5wb3NpdGlvbiA9IFwic3RhdGljXCIpOyAvLyBsaWtlIGZvciBib3JkZXJSYWRpdXMsIGlmIGl0J3MgYSAlIHdlIG11c3QgaGF2ZSBpdCByZWxhdGl2ZSB0byB0aGUgdGFyZ2V0IGl0c2VsZiBidXQgdGhhdCBtYXkgbm90IGhhdmUgcG9zaXRpb246IHJlbGF0aXZlIG9yIHBvc2l0aW9uOiBhYnNvbHV0ZSBpbiB3aGljaCBjYXNlIGl0J2QgZ28gdXAgdGhlIGNoYWluIHVudGlsIGl0IGZpbmRzIGl0cyBvZmZzZXRQYXJlbnQgKGJhZCkuIHBvc2l0aW9uOiBzdGF0aWMgcHJvdGVjdHMgYWdhaW5zdCB0aGF0LlxuXG4gICAgcGFyZW50LmFwcGVuZENoaWxkKF90ZW1wRGl2KTtcbiAgICBweCA9IF90ZW1wRGl2W21lYXN1cmVQcm9wZXJ0eV07XG4gICAgcGFyZW50LnJlbW92ZUNoaWxkKF90ZW1wRGl2KTtcbiAgICBzdHlsZS5wb3NpdGlvbiA9IFwiYWJzb2x1dGVcIjtcblxuICAgIGlmIChob3Jpem9udGFsICYmIHRvUGVyY2VudCkge1xuICAgICAgY2FjaGUgPSBfZ2V0Q2FjaGUocGFyZW50KTtcbiAgICAgIGNhY2hlLnRpbWUgPSBfdGlja2VyLnRpbWU7XG4gICAgICBjYWNoZS53aWR0aCA9IHBhcmVudFttZWFzdXJlUHJvcGVydHldO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBfcm91bmQodG9QaXhlbHMgPyBweCAqIGN1clZhbHVlIC8gYW1vdW50IDogcHggJiYgY3VyVmFsdWUgPyBhbW91bnQgLyBweCAqIGN1clZhbHVlIDogMCk7XG59LFxuICAgIF9nZXQgPSBmdW5jdGlvbiBfZ2V0KHRhcmdldCwgcHJvcGVydHksIHVuaXQsIHVuY2FjaGUpIHtcbiAgdmFyIHZhbHVlO1xuICBfcGx1Z2luSW5pdHRlZCB8fCBfaW5pdENvcmUoKTtcblxuICBpZiAocHJvcGVydHkgaW4gX3Byb3BlcnR5QWxpYXNlcyAmJiBwcm9wZXJ0eSAhPT0gXCJ0cmFuc2Zvcm1cIikge1xuICAgIHByb3BlcnR5ID0gX3Byb3BlcnR5QWxpYXNlc1twcm9wZXJ0eV07XG5cbiAgICBpZiAofnByb3BlcnR5LmluZGV4T2YoXCIsXCIpKSB7XG4gICAgICBwcm9wZXJ0eSA9IHByb3BlcnR5LnNwbGl0KFwiLFwiKVswXTtcbiAgICB9XG4gIH1cblxuICBpZiAoX3RyYW5zZm9ybVByb3BzW3Byb3BlcnR5XSAmJiBwcm9wZXJ0eSAhPT0gXCJ0cmFuc2Zvcm1cIikge1xuICAgIHZhbHVlID0gX3BhcnNlVHJhbnNmb3JtKHRhcmdldCwgdW5jYWNoZSk7XG4gICAgdmFsdWUgPSBwcm9wZXJ0eSAhPT0gXCJ0cmFuc2Zvcm1PcmlnaW5cIiA/IHZhbHVlW3Byb3BlcnR5XSA6IF9maXJzdFR3b09ubHkoX2dldENvbXB1dGVkUHJvcGVydHkodGFyZ2V0LCBfdHJhbnNmb3JtT3JpZ2luUHJvcCkpICsgXCIgXCIgKyB2YWx1ZS56T3JpZ2luICsgXCJweFwiO1xuICB9IGVsc2Uge1xuICAgIHZhbHVlID0gdGFyZ2V0LnN0eWxlW3Byb3BlcnR5XTtcblxuICAgIGlmICghdmFsdWUgfHwgdmFsdWUgPT09IFwiYXV0b1wiIHx8IHVuY2FjaGUgfHwgfih2YWx1ZSArIFwiXCIpLmluZGV4T2YoXCJjYWxjKFwiKSkge1xuICAgICAgdmFsdWUgPSBfc3BlY2lhbFByb3BzW3Byb3BlcnR5XSAmJiBfc3BlY2lhbFByb3BzW3Byb3BlcnR5XSh0YXJnZXQsIHByb3BlcnR5LCB1bml0KSB8fCBfZ2V0Q29tcHV0ZWRQcm9wZXJ0eSh0YXJnZXQsIHByb3BlcnR5KSB8fCBfZ2V0UHJvcGVydHkodGFyZ2V0LCBwcm9wZXJ0eSkgfHwgKHByb3BlcnR5ID09PSBcIm9wYWNpdHlcIiA/IDEgOiAwKTsgLy8gbm90ZTogc29tZSBicm93c2VycywgbGlrZSBGaXJlZm94LCBkb24ndCByZXBvcnQgYm9yZGVyUmFkaXVzIGNvcnJlY3RseSEgSW5zdGVhZCwgaXQgb25seSByZXBvcnRzIGV2ZXJ5IGNvcm5lciBsaWtlICBib3JkZXJUb3BMZWZ0UmFkaXVzXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHVuaXQgJiYgIX4odmFsdWUgKyBcIlwiKS5pbmRleE9mKFwiIFwiKSA/IF9jb252ZXJ0VG9Vbml0KHRhcmdldCwgcHJvcGVydHksIHZhbHVlLCB1bml0KSArIHVuaXQgOiB2YWx1ZTtcbn0sXG4gICAgX3R3ZWVuQ29tcGxleENTU1N0cmluZyA9IGZ1bmN0aW9uIF90d2VlbkNvbXBsZXhDU1NTdHJpbmcodGFyZ2V0LCBwcm9wLCBzdGFydCwgZW5kKSB7XG4gIC8vbm90ZTogd2UgY2FsbCBfdHdlZW5Db21wbGV4Q1NTU3RyaW5nLmNhbGwocGx1Z2luSW5zdGFuY2UuLi4pIHRvIGVuc3VyZSB0aGF0IGl0J3Mgc2NvcGVkIHByb3Blcmx5LiBXZSBtYXkgY2FsbCBpdCBmcm9tIHdpdGhpbiBhIHBsdWdpbiB0b28sIHRodXMgXCJ0aGlzXCIgd291bGQgcmVmZXIgdG8gdGhlIHBsdWdpbi5cbiAgaWYgKCFzdGFydCB8fCBzdGFydCA9PT0gXCJub25lXCIpIHtcbiAgICAvLyBzb21lIGJyb3dzZXJzIGxpa2UgU2FmYXJpIGFjdHVhbGx5IFBSRUZFUiB0aGUgcHJlZml4ZWQgcHJvcGVydHkgYW5kIG1pcy1yZXBvcnQgdGhlIHVucHJlZml4ZWQgdmFsdWUgbGlrZSBjbGlwUGF0aCAoQlVHKS4gSW4gb3RoZXIgd29yZHMsIGV2ZW4gdGhvdWdoIGNsaXBQYXRoIGV4aXN0cyBpbiB0aGUgc3R5bGUgKFwiY2xpcFBhdGhcIiBpbiB0YXJnZXQuc3R5bGUpIGFuZCBpdCdzIHNldCBpbiB0aGUgQ1NTIHByb3Blcmx5IChhbG9uZyB3aXRoIC13ZWJraXQtY2xpcC1wYXRoKSwgU2FmYXJpIHJlcG9ydHMgY2xpcFBhdGggYXMgXCJub25lXCIgd2hlcmVhcyBXZWJraXRDbGlwUGF0aCByZXBvcnRzIGFjY3VyYXRlbHkgbGlrZSBcImVsbGlwc2UoMTAwJSAwJSBhdCA1MCUgMCUpXCIsIHNvIGluIHRoaXMgY2FzZSB3ZSBtdXN0IFNXSVRDSCB0byB1c2luZyB0aGUgcHJlZml4ZWQgcHJvcGVydHkgaW5zdGVhZC4gU2VlIGh0dHBzOi8vZ3JlZW5zb2NrLmNvbS9mb3J1bXMvdG9waWMvMTgzMTAtY2xpcHBhdGgtZG9lc250LXdvcmstb24taW9zL1xuICAgIHZhciBwID0gX2NoZWNrUHJvcFByZWZpeChwcm9wLCB0YXJnZXQsIDEpLFxuICAgICAgICBzID0gcCAmJiBfZ2V0Q29tcHV0ZWRQcm9wZXJ0eSh0YXJnZXQsIHAsIDEpO1xuXG4gICAgaWYgKHMgJiYgcyAhPT0gc3RhcnQpIHtcbiAgICAgIHByb3AgPSBwO1xuICAgICAgc3RhcnQgPSBzO1xuICAgIH0gZWxzZSBpZiAocHJvcCA9PT0gXCJib3JkZXJDb2xvclwiKSB7XG4gICAgICBzdGFydCA9IF9nZXRDb21wdXRlZFByb3BlcnR5KHRhcmdldCwgXCJib3JkZXJUb3BDb2xvclwiKTsgLy8gRmlyZWZveCBidWc6IGFsd2F5cyByZXBvcnRzIFwiYm9yZGVyQ29sb3JcIiBhcyBcIlwiLCBzbyB3ZSBtdXN0IGZhbGwgYmFjayB0byBib3JkZXJUb3BDb2xvci4gU2VlIGh0dHBzOi8vZ3JlZW5zb2NrLmNvbS9mb3J1bXMvdG9waWMvMjQ1ODMtaG93LXRvLXJldHVybi1jb2xvcnMtdGhhdC1pLWhhZC1hZnRlci1yZXZlcnNlL1xuICAgIH1cbiAgfVxuXG4gIHZhciBwdCA9IG5ldyBQcm9wVHdlZW4odGhpcy5fcHQsIHRhcmdldC5zdHlsZSwgcHJvcCwgMCwgMSwgX3JlbmRlckNvbXBsZXhTdHJpbmcpLFxuICAgICAgaW5kZXggPSAwLFxuICAgICAgbWF0Y2hJbmRleCA9IDAsXG4gICAgICBhLFxuICAgICAgcmVzdWx0LFxuICAgICAgc3RhcnRWYWx1ZXMsXG4gICAgICBzdGFydE51bSxcbiAgICAgIGNvbG9yLFxuICAgICAgc3RhcnRWYWx1ZSxcbiAgICAgIGVuZFZhbHVlLFxuICAgICAgZW5kTnVtLFxuICAgICAgY2h1bmssXG4gICAgICBlbmRVbml0LFxuICAgICAgc3RhcnRVbml0LFxuICAgICAgcmVsYXRpdmUsXG4gICAgICBlbmRWYWx1ZXM7XG4gIHB0LmIgPSBzdGFydDtcbiAgcHQuZSA9IGVuZDtcbiAgc3RhcnQgKz0gXCJcIjsgLy9lbnN1cmUgdmFsdWVzIGFyZSBzdHJpbmdzXG5cbiAgZW5kICs9IFwiXCI7XG5cbiAgaWYgKGVuZCA9PT0gXCJhdXRvXCIpIHtcbiAgICB0YXJnZXQuc3R5bGVbcHJvcF0gPSBlbmQ7XG4gICAgZW5kID0gX2dldENvbXB1dGVkUHJvcGVydHkodGFyZ2V0LCBwcm9wKSB8fCBlbmQ7XG4gICAgdGFyZ2V0LnN0eWxlW3Byb3BdID0gc3RhcnQ7XG4gIH1cblxuICBhID0gW3N0YXJ0LCBlbmRdO1xuXG4gIF9jb2xvclN0cmluZ0ZpbHRlcihhKTsgLy9wYXNzIGFuIGFycmF5IHdpdGggdGhlIHN0YXJ0aW5nIGFuZCBlbmRpbmcgdmFsdWVzIGFuZCBsZXQgdGhlIGZpbHRlciBkbyB3aGF0ZXZlciBpdCBuZWVkcyB0byB0aGUgdmFsdWVzLiBJZiBjb2xvcnMgYXJlIGZvdW5kLCBpdCByZXR1cm5zIHRydWUgYW5kIHRoZW4gd2UgbXVzdCBtYXRjaCB3aGVyZSB0aGUgY29sb3Igc2hvd3MgdXAgb3JkZXItd2lzZSBiZWNhdXNlIGZvciB0aGluZ3MgbGlrZSBib3hTaGFkb3csIHNvbWV0aW1lcyB0aGUgYnJvd3NlciBwcm92aWRlcyB0aGUgY29tcHV0ZWQgdmFsdWVzIHdpdGggdGhlIGNvbG9yIEZJUlNULCBidXQgdGhlIHVzZXIgcHJvdmlkZXMgaXQgd2l0aCB0aGUgY29sb3IgTEFTVCwgc28gZmxpcCB0aGVtIGlmIG5lY2Vzc2FyeS4gU2FtZSBmb3IgZHJvcC1zaGFkb3coKS5cblxuXG4gIHN0YXJ0ID0gYVswXTtcbiAgZW5kID0gYVsxXTtcbiAgc3RhcnRWYWx1ZXMgPSBzdGFydC5tYXRjaChfbnVtV2l0aFVuaXRFeHApIHx8IFtdO1xuICBlbmRWYWx1ZXMgPSBlbmQubWF0Y2goX251bVdpdGhVbml0RXhwKSB8fCBbXTtcblxuICBpZiAoZW5kVmFsdWVzLmxlbmd0aCkge1xuICAgIHdoaWxlIChyZXN1bHQgPSBfbnVtV2l0aFVuaXRFeHAuZXhlYyhlbmQpKSB7XG4gICAgICBlbmRWYWx1ZSA9IHJlc3VsdFswXTtcbiAgICAgIGNodW5rID0gZW5kLnN1YnN0cmluZyhpbmRleCwgcmVzdWx0LmluZGV4KTtcblxuICAgICAgaWYgKGNvbG9yKSB7XG4gICAgICAgIGNvbG9yID0gKGNvbG9yICsgMSkgJSA1O1xuICAgICAgfSBlbHNlIGlmIChjaHVuay5zdWJzdHIoLTUpID09PSBcInJnYmEoXCIgfHwgY2h1bmsuc3Vic3RyKC01KSA9PT0gXCJoc2xhKFwiKSB7XG4gICAgICAgIGNvbG9yID0gMTtcbiAgICAgIH1cblxuICAgICAgaWYgKGVuZFZhbHVlICE9PSAoc3RhcnRWYWx1ZSA9IHN0YXJ0VmFsdWVzW21hdGNoSW5kZXgrK10gfHwgXCJcIikpIHtcbiAgICAgICAgc3RhcnROdW0gPSBwYXJzZUZsb2F0KHN0YXJ0VmFsdWUpIHx8IDA7XG4gICAgICAgIHN0YXJ0VW5pdCA9IHN0YXJ0VmFsdWUuc3Vic3RyKChzdGFydE51bSArIFwiXCIpLmxlbmd0aCk7XG4gICAgICAgIHJlbGF0aXZlID0gZW5kVmFsdWUuY2hhckF0KDEpID09PSBcIj1cIiA/ICsoZW5kVmFsdWUuY2hhckF0KDApICsgXCIxXCIpIDogMDtcblxuICAgICAgICBpZiAocmVsYXRpdmUpIHtcbiAgICAgICAgICBlbmRWYWx1ZSA9IGVuZFZhbHVlLnN1YnN0cigyKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGVuZE51bSA9IHBhcnNlRmxvYXQoZW5kVmFsdWUpO1xuICAgICAgICBlbmRVbml0ID0gZW5kVmFsdWUuc3Vic3RyKChlbmROdW0gKyBcIlwiKS5sZW5ndGgpO1xuICAgICAgICBpbmRleCA9IF9udW1XaXRoVW5pdEV4cC5sYXN0SW5kZXggLSBlbmRVbml0Lmxlbmd0aDtcblxuICAgICAgICBpZiAoIWVuZFVuaXQpIHtcbiAgICAgICAgICAvL2lmIHNvbWV0aGluZyBsaWtlIFwicGVyc3BlY3RpdmU6MzAwXCIgaXMgcGFzc2VkIGluIGFuZCB3ZSBtdXN0IGFkZCBhIHVuaXQgdG8gdGhlIGVuZFxuICAgICAgICAgIGVuZFVuaXQgPSBlbmRVbml0IHx8IF9jb25maWcudW5pdHNbcHJvcF0gfHwgc3RhcnRVbml0O1xuXG4gICAgICAgICAgaWYgKGluZGV4ID09PSBlbmQubGVuZ3RoKSB7XG4gICAgICAgICAgICBlbmQgKz0gZW5kVW5pdDtcbiAgICAgICAgICAgIHB0LmUgKz0gZW5kVW5pdDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoc3RhcnRVbml0ICE9PSBlbmRVbml0KSB7XG4gICAgICAgICAgc3RhcnROdW0gPSBfY29udmVydFRvVW5pdCh0YXJnZXQsIHByb3AsIHN0YXJ0VmFsdWUsIGVuZFVuaXQpIHx8IDA7XG4gICAgICAgIH0gLy90aGVzZSBuZXN0ZWQgUHJvcFR3ZWVucyBhcmUgaGFuZGxlZCBpbiBhIHNwZWNpYWwgd2F5IC0gd2UnbGwgbmV2ZXIgYWN0dWFsbHkgY2FsbCBhIHJlbmRlciBvciBzZXR0ZXIgbWV0aG9kIG9uIHRoZW0uIFdlJ2xsIGp1c3QgbG9vcCB0aHJvdWdoIHRoZW0gaW4gdGhlIHBhcmVudCBjb21wbGV4IHN0cmluZyBQcm9wVHdlZW4ncyByZW5kZXIgbWV0aG9kLlxuXG5cbiAgICAgICAgcHQuX3B0ID0ge1xuICAgICAgICAgIF9uZXh0OiBwdC5fcHQsXG4gICAgICAgICAgcDogY2h1bmsgfHwgbWF0Y2hJbmRleCA9PT0gMSA/IGNodW5rIDogXCIsXCIsXG4gICAgICAgICAgLy9ub3RlOiBTVkcgc3BlYyBhbGxvd3Mgb21pc3Npb24gb2YgY29tbWEvc3BhY2Ugd2hlbiBhIG5lZ2F0aXZlIHNpZ24gaXMgd2VkZ2VkIGJldHdlZW4gdHdvIG51bWJlcnMsIGxpa2UgMi41LTUuMyBpbnN0ZWFkIG9mIDIuNSwtNS4zIGJ1dCB3aGVuIHR3ZWVuaW5nLCB0aGUgbmVnYXRpdmUgdmFsdWUgbWF5IHN3aXRjaCB0byBwb3NpdGl2ZSwgc28gd2UgaW5zZXJ0IHRoZSBjb21tYSBqdXN0IGluIGNhc2UuXG4gICAgICAgICAgczogc3RhcnROdW0sXG4gICAgICAgICAgYzogcmVsYXRpdmUgPyByZWxhdGl2ZSAqIGVuZE51bSA6IGVuZE51bSAtIHN0YXJ0TnVtLFxuICAgICAgICAgIG06IGNvbG9yICYmIGNvbG9yIDwgNCA/IE1hdGgucm91bmQgOiAwXG4gICAgICAgIH07XG4gICAgICB9XG4gICAgfVxuXG4gICAgcHQuYyA9IGluZGV4IDwgZW5kLmxlbmd0aCA/IGVuZC5zdWJzdHJpbmcoaW5kZXgsIGVuZC5sZW5ndGgpIDogXCJcIjsgLy93ZSB1c2UgdGhlIFwiY1wiIG9mIHRoZSBQcm9wVHdlZW4gdG8gc3RvcmUgdGhlIGZpbmFsIHBhcnQgb2YgdGhlIHN0cmluZyAoYWZ0ZXIgdGhlIGxhc3QgbnVtYmVyKVxuICB9IGVsc2Uge1xuICAgIHB0LnIgPSBwcm9wID09PSBcImRpc3BsYXlcIiAmJiBlbmQgPT09IFwibm9uZVwiID8gX3JlbmRlck5vblR3ZWVuaW5nVmFsdWVPbmx5QXRFbmQgOiBfcmVuZGVyTm9uVHdlZW5pbmdWYWx1ZTtcbiAgfVxuXG4gIGlmIChfcmVsRXhwLnRlc3QoZW5kKSkge1xuICAgIHB0LmUgPSAwOyAvL2lmIHRoZSBlbmQgc3RyaW5nIGNvbnRhaW5zIHJlbGF0aXZlIHZhbHVlcyBvciBkeW5hbWljIHJhbmRvbSguLi4pIHZhbHVlcywgZGVsZXRlIHRoZSBlbmQgaXQgc28gdGhhdCBvbiB0aGUgZmluYWwgcmVuZGVyIHdlIGRvbid0IGFjdHVhbGx5IHNldCBpdCB0byB0aGUgc3RyaW5nIHdpdGggKz0gb3IgLT0gY2hhcmFjdGVycyAoZm9yY2VzIGl0IHRvIHVzZSB0aGUgY2FsY3VsYXRlZCB2YWx1ZSkuXG4gIH1cblxuICB0aGlzLl9wdCA9IHB0OyAvL3N0YXJ0IHRoZSBsaW5rZWQgbGlzdCB3aXRoIHRoaXMgbmV3IFByb3BUd2Vlbi4gUmVtZW1iZXIsIHdlIGNhbGwgX3R3ZWVuQ29tcGxleENTU1N0cmluZy5jYWxsKHBsdWdpbkluc3RhbmNlLi4uKSB0byBlbnN1cmUgdGhhdCBpdCdzIHNjb3BlZCBwcm9wZXJseS4gV2UgbWF5IGNhbGwgaXQgZnJvbSB3aXRoaW4gYW5vdGhlciBwbHVnaW4gdG9vLCB0aHVzIFwidGhpc1wiIHdvdWxkIHJlZmVyIHRvIHRoZSBwbHVnaW4uXG5cbiAgcmV0dXJuIHB0O1xufSxcbiAgICBfa2V5d29yZFRvUGVyY2VudCA9IHtcbiAgdG9wOiBcIjAlXCIsXG4gIGJvdHRvbTogXCIxMDAlXCIsXG4gIGxlZnQ6IFwiMCVcIixcbiAgcmlnaHQ6IFwiMTAwJVwiLFxuICBjZW50ZXI6IFwiNTAlXCJcbn0sXG4gICAgX2NvbnZlcnRLZXl3b3Jkc1RvUGVyY2VudGFnZXMgPSBmdW5jdGlvbiBfY29udmVydEtleXdvcmRzVG9QZXJjZW50YWdlcyh2YWx1ZSkge1xuICB2YXIgc3BsaXQgPSB2YWx1ZS5zcGxpdChcIiBcIiksXG4gICAgICB4ID0gc3BsaXRbMF0sXG4gICAgICB5ID0gc3BsaXRbMV0gfHwgXCI1MCVcIjtcblxuICBpZiAoeCA9PT0gXCJ0b3BcIiB8fCB4ID09PSBcImJvdHRvbVwiIHx8IHkgPT09IFwibGVmdFwiIHx8IHkgPT09IFwicmlnaHRcIikge1xuICAgIC8vdGhlIHVzZXIgcHJvdmlkZWQgdGhlbSBpbiB0aGUgd3Jvbmcgb3JkZXIsIHNvIGZsaXAgdGhlbVxuICAgIHZhbHVlID0geDtcbiAgICB4ID0geTtcbiAgICB5ID0gdmFsdWU7XG4gIH1cblxuICBzcGxpdFswXSA9IF9rZXl3b3JkVG9QZXJjZW50W3hdIHx8IHg7XG4gIHNwbGl0WzFdID0gX2tleXdvcmRUb1BlcmNlbnRbeV0gfHwgeTtcbiAgcmV0dXJuIHNwbGl0LmpvaW4oXCIgXCIpO1xufSxcbiAgICBfcmVuZGVyQ2xlYXJQcm9wcyA9IGZ1bmN0aW9uIF9yZW5kZXJDbGVhclByb3BzKHJhdGlvLCBkYXRhKSB7XG4gIGlmIChkYXRhLnR3ZWVuICYmIGRhdGEudHdlZW4uX3RpbWUgPT09IGRhdGEudHdlZW4uX2R1cikge1xuICAgIHZhciB0YXJnZXQgPSBkYXRhLnQsXG4gICAgICAgIHN0eWxlID0gdGFyZ2V0LnN0eWxlLFxuICAgICAgICBwcm9wcyA9IGRhdGEudSxcbiAgICAgICAgY2FjaGUgPSB0YXJnZXQuX2dzYXAsXG4gICAgICAgIHByb3AsXG4gICAgICAgIGNsZWFyVHJhbnNmb3JtcyxcbiAgICAgICAgaTtcblxuICAgIGlmIChwcm9wcyA9PT0gXCJhbGxcIiB8fCBwcm9wcyA9PT0gdHJ1ZSkge1xuICAgICAgc3R5bGUuY3NzVGV4dCA9IFwiXCI7XG4gICAgICBjbGVhclRyYW5zZm9ybXMgPSAxO1xuICAgIH0gZWxzZSB7XG4gICAgICBwcm9wcyA9IHByb3BzLnNwbGl0KFwiLFwiKTtcbiAgICAgIGkgPSBwcm9wcy5sZW5ndGg7XG5cbiAgICAgIHdoaWxlICgtLWkgPiAtMSkge1xuICAgICAgICBwcm9wID0gcHJvcHNbaV07XG5cbiAgICAgICAgaWYgKF90cmFuc2Zvcm1Qcm9wc1twcm9wXSkge1xuICAgICAgICAgIGNsZWFyVHJhbnNmb3JtcyA9IDE7XG4gICAgICAgICAgcHJvcCA9IHByb3AgPT09IFwidHJhbnNmb3JtT3JpZ2luXCIgPyBfdHJhbnNmb3JtT3JpZ2luUHJvcCA6IF90cmFuc2Zvcm1Qcm9wO1xuICAgICAgICB9XG5cbiAgICAgICAgX3JlbW92ZVByb3BlcnR5KHRhcmdldCwgcHJvcCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKGNsZWFyVHJhbnNmb3Jtcykge1xuICAgICAgX3JlbW92ZVByb3BlcnR5KHRhcmdldCwgX3RyYW5zZm9ybVByb3ApO1xuXG4gICAgICBpZiAoY2FjaGUpIHtcbiAgICAgICAgY2FjaGUuc3ZnICYmIHRhcmdldC5yZW1vdmVBdHRyaWJ1dGUoXCJ0cmFuc2Zvcm1cIik7XG5cbiAgICAgICAgX3BhcnNlVHJhbnNmb3JtKHRhcmdldCwgMSk7IC8vIGZvcmNlIGFsbCB0aGUgY2FjaGVkIHZhbHVlcyBiYWNrIHRvIFwibm9ybWFsXCIvaWRlbnRpdHksIG90aGVyd2lzZSBpZiB0aGVyZSdzIGFub3RoZXIgdHdlZW4gdGhhdCdzIGFscmVhZHkgc2V0IHRvIHJlbmRlciB0cmFuc2Zvcm1zIG9uIHRoaXMgZWxlbWVudCwgaXQgY291bGQgZGlzcGxheSB0aGUgd3JvbmcgdmFsdWVzLlxuXG5cbiAgICAgICAgY2FjaGUudW5jYWNoZSA9IDE7XG4gICAgICB9XG4gICAgfVxuICB9XG59LFxuICAgIC8vIG5vdGU6IHNwZWNpYWxQcm9wcyBzaG91bGQgcmV0dXJuIDEgaWYgKGFuZCBvbmx5IGlmKSB0aGV5IGhhdmUgYSBub24temVybyBwcmlvcml0eS4gSXQgaW5kaWNhdGVzIHdlIG5lZWQgdG8gc29ydCB0aGUgbGlua2VkIGxpc3QuXG5fc3BlY2lhbFByb3BzID0ge1xuICBjbGVhclByb3BzOiBmdW5jdGlvbiBjbGVhclByb3BzKHBsdWdpbiwgdGFyZ2V0LCBwcm9wZXJ0eSwgZW5kVmFsdWUsIHR3ZWVuKSB7XG4gICAgaWYgKHR3ZWVuLmRhdGEgIT09IFwiaXNGcm9tU3RhcnRcIikge1xuICAgICAgdmFyIHB0ID0gcGx1Z2luLl9wdCA9IG5ldyBQcm9wVHdlZW4ocGx1Z2luLl9wdCwgdGFyZ2V0LCBwcm9wZXJ0eSwgMCwgMCwgX3JlbmRlckNsZWFyUHJvcHMpO1xuICAgICAgcHQudSA9IGVuZFZhbHVlO1xuICAgICAgcHQucHIgPSAtMTA7XG4gICAgICBwdC50d2VlbiA9IHR3ZWVuO1xuXG4gICAgICBwbHVnaW4uX3Byb3BzLnB1c2gocHJvcGVydHkpO1xuXG4gICAgICByZXR1cm4gMTtcbiAgICB9XG4gIH1cbiAgLyogY2xhc3NOYW1lIGZlYXR1cmUgKGFib3V0IDAuNGtiIGd6aXBwZWQpLlxuICAsIGNsYXNzTmFtZShwbHVnaW4sIHRhcmdldCwgcHJvcGVydHksIGVuZFZhbHVlLCB0d2Vlbikge1xuICBcdGxldCBfcmVuZGVyQ2xhc3NOYW1lID0gKHJhdGlvLCBkYXRhKSA9PiB7XG4gIFx0XHRcdGRhdGEuY3NzLnJlbmRlcihyYXRpbywgZGF0YS5jc3MpO1xuICBcdFx0XHRpZiAoIXJhdGlvIHx8IHJhdGlvID09PSAxKSB7XG4gIFx0XHRcdFx0bGV0IGlubGluZSA9IGRhdGEucm12LFxuICBcdFx0XHRcdFx0dGFyZ2V0ID0gZGF0YS50LFxuICBcdFx0XHRcdFx0cDtcbiAgXHRcdFx0XHR0YXJnZXQuc2V0QXR0cmlidXRlKFwiY2xhc3NcIiwgcmF0aW8gPyBkYXRhLmUgOiBkYXRhLmIpO1xuICBcdFx0XHRcdGZvciAocCBpbiBpbmxpbmUpIHtcbiAgXHRcdFx0XHRcdF9yZW1vdmVQcm9wZXJ0eSh0YXJnZXQsIHApO1xuICBcdFx0XHRcdH1cbiAgXHRcdFx0fVxuICBcdFx0fSxcbiAgXHRcdF9nZXRBbGxTdHlsZXMgPSAodGFyZ2V0KSA9PiB7XG4gIFx0XHRcdGxldCBzdHlsZXMgPSB7fSxcbiAgXHRcdFx0XHRjb21wdXRlZCA9IGdldENvbXB1dGVkU3R5bGUodGFyZ2V0KSxcbiAgXHRcdFx0XHRwO1xuICBcdFx0XHRmb3IgKHAgaW4gY29tcHV0ZWQpIHtcbiAgXHRcdFx0XHRpZiAoaXNOYU4ocCkgJiYgcCAhPT0gXCJjc3NUZXh0XCIgJiYgcCAhPT0gXCJsZW5ndGhcIikge1xuICBcdFx0XHRcdFx0c3R5bGVzW3BdID0gY29tcHV0ZWRbcF07XG4gIFx0XHRcdFx0fVxuICBcdFx0XHR9XG4gIFx0XHRcdF9zZXREZWZhdWx0cyhzdHlsZXMsIF9wYXJzZVRyYW5zZm9ybSh0YXJnZXQsIDEpKTtcbiAgXHRcdFx0cmV0dXJuIHN0eWxlcztcbiAgXHRcdH0sXG4gIFx0XHRzdGFydENsYXNzTGlzdCA9IHRhcmdldC5nZXRBdHRyaWJ1dGUoXCJjbGFzc1wiKSxcbiAgXHRcdHN0eWxlID0gdGFyZ2V0LnN0eWxlLFxuICBcdFx0Y3NzVGV4dCA9IHN0eWxlLmNzc1RleHQsXG4gIFx0XHRjYWNoZSA9IHRhcmdldC5fZ3NhcCxcbiAgXHRcdGNsYXNzUFQgPSBjYWNoZS5jbGFzc1BULFxuICBcdFx0aW5saW5lVG9SZW1vdmVBdEVuZCA9IHt9LFxuICBcdFx0ZGF0YSA9IHt0OnRhcmdldCwgcGx1Z2luOnBsdWdpbiwgcm12OmlubGluZVRvUmVtb3ZlQXRFbmQsIGI6c3RhcnRDbGFzc0xpc3QsIGU6KGVuZFZhbHVlLmNoYXJBdCgxKSAhPT0gXCI9XCIpID8gZW5kVmFsdWUgOiBzdGFydENsYXNzTGlzdC5yZXBsYWNlKG5ldyBSZWdFeHAoXCIoPzpcXFxcc3xeKVwiICsgZW5kVmFsdWUuc3Vic3RyKDIpICsgXCIoPyFbXFxcXHctXSlcIiksIFwiXCIpICsgKChlbmRWYWx1ZS5jaGFyQXQoMCkgPT09IFwiK1wiKSA/IFwiIFwiICsgZW5kVmFsdWUuc3Vic3RyKDIpIDogXCJcIil9LFxuICBcdFx0Y2hhbmdpbmdWYXJzID0ge30sXG4gIFx0XHRzdGFydFZhcnMgPSBfZ2V0QWxsU3R5bGVzKHRhcmdldCksXG4gIFx0XHR0cmFuc2Zvcm1SZWxhdGVkID0gLyh0cmFuc2Zvcm18cGVyc3BlY3RpdmUpL2ksXG4gIFx0XHRlbmRWYXJzLCBwO1xuICBcdGlmIChjbGFzc1BUKSB7XG4gIFx0XHRjbGFzc1BULnIoMSwgY2xhc3NQVC5kKTtcbiAgXHRcdF9yZW1vdmVMaW5rZWRMaXN0SXRlbShjbGFzc1BULmQucGx1Z2luLCBjbGFzc1BULCBcIl9wdFwiKTtcbiAgXHR9XG4gIFx0dGFyZ2V0LnNldEF0dHJpYnV0ZShcImNsYXNzXCIsIGRhdGEuZSk7XG4gIFx0ZW5kVmFycyA9IF9nZXRBbGxTdHlsZXModGFyZ2V0LCB0cnVlKTtcbiAgXHR0YXJnZXQuc2V0QXR0cmlidXRlKFwiY2xhc3NcIiwgc3RhcnRDbGFzc0xpc3QpO1xuICBcdGZvciAocCBpbiBlbmRWYXJzKSB7XG4gIFx0XHRpZiAoZW5kVmFyc1twXSAhPT0gc3RhcnRWYXJzW3BdICYmICF0cmFuc2Zvcm1SZWxhdGVkLnRlc3QocCkpIHtcbiAgXHRcdFx0Y2hhbmdpbmdWYXJzW3BdID0gZW5kVmFyc1twXTtcbiAgXHRcdFx0aWYgKCFzdHlsZVtwXSAmJiBzdHlsZVtwXSAhPT0gXCIwXCIpIHtcbiAgXHRcdFx0XHRpbmxpbmVUb1JlbW92ZUF0RW5kW3BdID0gMTtcbiAgXHRcdFx0fVxuICBcdFx0fVxuICBcdH1cbiAgXHRjYWNoZS5jbGFzc1BUID0gcGx1Z2luLl9wdCA9IG5ldyBQcm9wVHdlZW4ocGx1Z2luLl9wdCwgdGFyZ2V0LCBcImNsYXNzTmFtZVwiLCAwLCAwLCBfcmVuZGVyQ2xhc3NOYW1lLCBkYXRhLCAwLCAtMTEpO1xuICBcdGlmIChzdHlsZS5jc3NUZXh0ICE9PSBjc3NUZXh0KSB7IC8vb25seSBhcHBseSBpZiB0aGluZ3MgY2hhbmdlLiBPdGhlcndpc2UsIGluIGNhc2VzIGxpa2UgYSBiYWNrZ3JvdW5kLWltYWdlIHRoYXQncyBwdWxsZWQgZHluYW1pY2FsbHksIGl0IGNvdWxkIGNhdXNlIGEgcmVmcmVzaC4gU2VlIGh0dHBzOi8vZ3JlZW5zb2NrLmNvbS9mb3J1bXMvdG9waWMvMjAzNjgtcG9zc2libGUtZ3NhcC1idWctc3dpdGNoaW5nLWNsYXNzbmFtZXMtaW4tY2hyb21lLy5cbiAgXHRcdHN0eWxlLmNzc1RleHQgPSBjc3NUZXh0OyAvL3dlIHJlY29yZGVkIGNzc1RleHQgYmVmb3JlIHdlIHN3YXBwZWQgY2xhc3NlcyBhbmQgcmFuIF9nZXRBbGxTdHlsZXMoKSBiZWNhdXNlIGluIGNhc2VzIHdoZW4gYSBjbGFzc05hbWUgdHdlZW4gaXMgb3ZlcndyaXR0ZW4sIHdlIHJlbW92ZSBhbGwgdGhlIHJlbGF0ZWQgdHdlZW5pbmcgcHJvcGVydGllcyBmcm9tIHRoYXQgY2xhc3MgY2hhbmdlIChvdGhlcndpc2UgY2xhc3Mtc3BlY2lmaWMgc3R1ZmYgY2FuJ3Qgb3ZlcnJpZGUgcHJvcGVydGllcyB3ZSd2ZSBkaXJlY3RseSBzZXQgb24gdGhlIHRhcmdldCdzIHN0eWxlIG9iamVjdCBkdWUgdG8gc3BlY2lmaWNpdHkpLlxuICBcdH1cbiAgXHRfcGFyc2VUcmFuc2Zvcm0odGFyZ2V0LCB0cnVlKTsgLy90byBjbGVhciB0aGUgY2FjaGluZyBvZiB0cmFuc2Zvcm1zXG4gIFx0ZGF0YS5jc3MgPSBuZXcgZ3NhcC5wbHVnaW5zLmNzcygpO1xuICBcdGRhdGEuY3NzLmluaXQodGFyZ2V0LCBjaGFuZ2luZ1ZhcnMsIHR3ZWVuKTtcbiAgXHRwbHVnaW4uX3Byb3BzLnB1c2goLi4uZGF0YS5jc3MuX3Byb3BzKTtcbiAgXHRyZXR1cm4gMTtcbiAgfVxuICAqL1xuXG59LFxuXG4vKlxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIFRSQU5TRk9STVNcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKi9cbl9pZGVudGl0eTJETWF0cml4ID0gWzEsIDAsIDAsIDEsIDAsIDBdLFxuICAgIF9yb3RhdGlvbmFsUHJvcGVydGllcyA9IHt9LFxuICAgIF9pc051bGxUcmFuc2Zvcm0gPSBmdW5jdGlvbiBfaXNOdWxsVHJhbnNmb3JtKHZhbHVlKSB7XG4gIHJldHVybiB2YWx1ZSA9PT0gXCJtYXRyaXgoMSwgMCwgMCwgMSwgMCwgMClcIiB8fCB2YWx1ZSA9PT0gXCJub25lXCIgfHwgIXZhbHVlO1xufSxcbiAgICBfZ2V0Q29tcHV0ZWRUcmFuc2Zvcm1NYXRyaXhBc0FycmF5ID0gZnVuY3Rpb24gX2dldENvbXB1dGVkVHJhbnNmb3JtTWF0cml4QXNBcnJheSh0YXJnZXQpIHtcbiAgdmFyIG1hdHJpeFN0cmluZyA9IF9nZXRDb21wdXRlZFByb3BlcnR5KHRhcmdldCwgX3RyYW5zZm9ybVByb3ApO1xuXG4gIHJldHVybiBfaXNOdWxsVHJhbnNmb3JtKG1hdHJpeFN0cmluZykgPyBfaWRlbnRpdHkyRE1hdHJpeCA6IG1hdHJpeFN0cmluZy5zdWJzdHIoNykubWF0Y2goX251bUV4cCkubWFwKF9yb3VuZCk7XG59LFxuICAgIF9nZXRNYXRyaXggPSBmdW5jdGlvbiBfZ2V0TWF0cml4KHRhcmdldCwgZm9yY2UyRCkge1xuICB2YXIgY2FjaGUgPSB0YXJnZXQuX2dzYXAgfHwgX2dldENhY2hlKHRhcmdldCksXG4gICAgICBzdHlsZSA9IHRhcmdldC5zdHlsZSxcbiAgICAgIG1hdHJpeCA9IF9nZXRDb21wdXRlZFRyYW5zZm9ybU1hdHJpeEFzQXJyYXkodGFyZ2V0KSxcbiAgICAgIHBhcmVudCxcbiAgICAgIG5leHRTaWJsaW5nLFxuICAgICAgdGVtcCxcbiAgICAgIGFkZGVkVG9ET007XG5cbiAgaWYgKGNhY2hlLnN2ZyAmJiB0YXJnZXQuZ2V0QXR0cmlidXRlKFwidHJhbnNmb3JtXCIpKSB7XG4gICAgdGVtcCA9IHRhcmdldC50cmFuc2Zvcm0uYmFzZVZhbC5jb25zb2xpZGF0ZSgpLm1hdHJpeDsgLy9lbnN1cmVzIHRoYXQgZXZlbiBjb21wbGV4IHZhbHVlcyBsaWtlIFwidHJhbnNsYXRlKDUwLDYwKSByb3RhdGUoMTM1LDAsMClcIiBhcmUgcGFyc2VkIGJlY2F1c2UgaXQgbWFzaGVzIGl0IGludG8gYSBtYXRyaXguXG5cbiAgICBtYXRyaXggPSBbdGVtcC5hLCB0ZW1wLmIsIHRlbXAuYywgdGVtcC5kLCB0ZW1wLmUsIHRlbXAuZl07XG4gICAgcmV0dXJuIG1hdHJpeC5qb2luKFwiLFwiKSA9PT0gXCIxLDAsMCwxLDAsMFwiID8gX2lkZW50aXR5MkRNYXRyaXggOiBtYXRyaXg7XG4gIH0gZWxzZSBpZiAobWF0cml4ID09PSBfaWRlbnRpdHkyRE1hdHJpeCAmJiAhdGFyZ2V0Lm9mZnNldFBhcmVudCAmJiB0YXJnZXQgIT09IF9kb2NFbGVtZW50ICYmICFjYWNoZS5zdmcpIHtcbiAgICAvL25vdGU6IGlmIG9mZnNldFBhcmVudCBpcyBudWxsLCB0aGF0IG1lYW5zIHRoZSBlbGVtZW50IGlzbid0IGluIHRoZSBub3JtYWwgZG9jdW1lbnQgZmxvdywgbGlrZSBpZiBpdCBoYXMgZGlzcGxheTpub25lIG9yIG9uZSBvZiBpdHMgYW5jZXN0b3JzIGhhcyBkaXNwbGF5Om5vbmUpLiBGaXJlZm94IHJldHVybnMgbnVsbCBmb3IgZ2V0Q29tcHV0ZWRTdHlsZSgpIGlmIHRoZSBlbGVtZW50IGlzIGluIGFuIGlmcmFtZSB0aGF0IGhhcyBkaXNwbGF5Om5vbmUuIGh0dHBzOi8vYnVnemlsbGEubW96aWxsYS5vcmcvc2hvd19idWcuY2dpP2lkPTU0ODM5N1xuICAgIC8vYnJvd3NlcnMgZG9uJ3QgcmVwb3J0IHRyYW5zZm9ybXMgYWNjdXJhdGVseSB1bmxlc3MgdGhlIGVsZW1lbnQgaXMgaW4gdGhlIERPTSBhbmQgaGFzIGEgZGlzcGxheSB2YWx1ZSB0aGF0J3Mgbm90IFwibm9uZVwiLiBGaXJlZm94IGFuZCBNaWNyb3NvZnQgYnJvd3NlcnMgaGF2ZSBhIHBhcnRpYWwgYnVnIHdoZXJlIHRoZXknbGwgcmVwb3J0IHRyYW5zZm9ybXMgZXZlbiBpZiBkaXNwbGF5Om5vbmUgQlVUIG5vdCBhbnkgcGVyY2VudGFnZS1iYXNlZCB2YWx1ZXMgbGlrZSB0cmFuc2xhdGUoLTUwJSwgOHB4KSB3aWxsIGJlIHJlcG9ydGVkIGFzIGlmIGl0J3MgdHJhbnNsYXRlKDAsIDhweCkuXG4gICAgdGVtcCA9IHN0eWxlLmRpc3BsYXk7XG4gICAgc3R5bGUuZGlzcGxheSA9IFwiYmxvY2tcIjtcbiAgICBwYXJlbnQgPSB0YXJnZXQucGFyZW50Tm9kZTtcblxuICAgIGlmICghcGFyZW50IHx8ICF0YXJnZXQub2Zmc2V0UGFyZW50KSB7XG4gICAgICAvLyBub3RlOiBpbiAzLjMuMCB3ZSBzd2l0Y2hlZCB0YXJnZXQub2Zmc2V0UGFyZW50IHRvIF9kb2MuYm9keS5jb250YWlucyh0YXJnZXQpIHRvIGF2b2lkIFtzb21ldGltZXMgdW5uZWNlc3NhcnldIE11dGF0aW9uT2JzZXJ2ZXIgY2FsbHMgYnV0IHRoYXQgd2Fzbid0IGFkZXF1YXRlIGJlY2F1c2UgdGhlcmUgYXJlIGVkZ2UgY2FzZXMgd2hlcmUgbmVzdGVkIHBvc2l0aW9uOiBmaXhlZCBlbGVtZW50cyBuZWVkIHRvIGdldCByZXBhcmVudGVkIHRvIGFjY3VyYXRlbHkgc2Vuc2UgdHJhbnNmb3Jtcy4gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9ncmVlbnNvY2svR1NBUC9pc3N1ZXMvMzg4IGFuZCBodHRwczovL2dpdGh1Yi5jb20vZ3JlZW5zb2NrL0dTQVAvaXNzdWVzLzM3NVxuICAgICAgYWRkZWRUb0RPTSA9IDE7IC8vZmxhZ1xuXG4gICAgICBuZXh0U2libGluZyA9IHRhcmdldC5uZXh0U2libGluZztcblxuICAgICAgX2RvY0VsZW1lbnQuYXBwZW5kQ2hpbGQodGFyZ2V0KTsgLy93ZSBtdXN0IGFkZCBpdCB0byB0aGUgRE9NIGluIG9yZGVyIHRvIGdldCB2YWx1ZXMgcHJvcGVybHlcblxuICAgIH1cblxuICAgIG1hdHJpeCA9IF9nZXRDb21wdXRlZFRyYW5zZm9ybU1hdHJpeEFzQXJyYXkodGFyZ2V0KTtcbiAgICB0ZW1wID8gc3R5bGUuZGlzcGxheSA9IHRlbXAgOiBfcmVtb3ZlUHJvcGVydHkodGFyZ2V0LCBcImRpc3BsYXlcIik7XG5cbiAgICBpZiAoYWRkZWRUb0RPTSkge1xuICAgICAgbmV4dFNpYmxpbmcgPyBwYXJlbnQuaW5zZXJ0QmVmb3JlKHRhcmdldCwgbmV4dFNpYmxpbmcpIDogcGFyZW50ID8gcGFyZW50LmFwcGVuZENoaWxkKHRhcmdldCkgOiBfZG9jRWxlbWVudC5yZW1vdmVDaGlsZCh0YXJnZXQpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBmb3JjZTJEICYmIG1hdHJpeC5sZW5ndGggPiA2ID8gW21hdHJpeFswXSwgbWF0cml4WzFdLCBtYXRyaXhbNF0sIG1hdHJpeFs1XSwgbWF0cml4WzEyXSwgbWF0cml4WzEzXV0gOiBtYXRyaXg7XG59LFxuICAgIF9hcHBseVNWR09yaWdpbiA9IGZ1bmN0aW9uIF9hcHBseVNWR09yaWdpbih0YXJnZXQsIG9yaWdpbiwgb3JpZ2luSXNBYnNvbHV0ZSwgc21vb3RoLCBtYXRyaXhBcnJheSwgcGx1Z2luVG9BZGRQcm9wVHdlZW5zVG8pIHtcbiAgdmFyIGNhY2hlID0gdGFyZ2V0Ll9nc2FwLFxuICAgICAgbWF0cml4ID0gbWF0cml4QXJyYXkgfHwgX2dldE1hdHJpeCh0YXJnZXQsIHRydWUpLFxuICAgICAgeE9yaWdpbk9sZCA9IGNhY2hlLnhPcmlnaW4gfHwgMCxcbiAgICAgIHlPcmlnaW5PbGQgPSBjYWNoZS55T3JpZ2luIHx8IDAsXG4gICAgICB4T2Zmc2V0T2xkID0gY2FjaGUueE9mZnNldCB8fCAwLFxuICAgICAgeU9mZnNldE9sZCA9IGNhY2hlLnlPZmZzZXQgfHwgMCxcbiAgICAgIGEgPSBtYXRyaXhbMF0sXG4gICAgICBiID0gbWF0cml4WzFdLFxuICAgICAgYyA9IG1hdHJpeFsyXSxcbiAgICAgIGQgPSBtYXRyaXhbM10sXG4gICAgICB0eCA9IG1hdHJpeFs0XSxcbiAgICAgIHR5ID0gbWF0cml4WzVdLFxuICAgICAgb3JpZ2luU3BsaXQgPSBvcmlnaW4uc3BsaXQoXCIgXCIpLFxuICAgICAgeE9yaWdpbiA9IHBhcnNlRmxvYXQob3JpZ2luU3BsaXRbMF0pIHx8IDAsXG4gICAgICB5T3JpZ2luID0gcGFyc2VGbG9hdChvcmlnaW5TcGxpdFsxXSkgfHwgMCxcbiAgICAgIGJvdW5kcyxcbiAgICAgIGRldGVybWluYW50LFxuICAgICAgeCxcbiAgICAgIHk7XG5cbiAgaWYgKCFvcmlnaW5Jc0Fic29sdXRlKSB7XG4gICAgYm91bmRzID0gX2dldEJCb3godGFyZ2V0KTtcbiAgICB4T3JpZ2luID0gYm91bmRzLnggKyAofm9yaWdpblNwbGl0WzBdLmluZGV4T2YoXCIlXCIpID8geE9yaWdpbiAvIDEwMCAqIGJvdW5kcy53aWR0aCA6IHhPcmlnaW4pO1xuICAgIHlPcmlnaW4gPSBib3VuZHMueSArICh+KG9yaWdpblNwbGl0WzFdIHx8IG9yaWdpblNwbGl0WzBdKS5pbmRleE9mKFwiJVwiKSA/IHlPcmlnaW4gLyAxMDAgKiBib3VuZHMuaGVpZ2h0IDogeU9yaWdpbik7XG4gIH0gZWxzZSBpZiAobWF0cml4ICE9PSBfaWRlbnRpdHkyRE1hdHJpeCAmJiAoZGV0ZXJtaW5hbnQgPSBhICogZCAtIGIgKiBjKSkge1xuICAgIC8vaWYgaXQncyB6ZXJvIChsaWtlIGlmIHNjYWxlWCBhbmQgc2NhbGVZIGFyZSB6ZXJvKSwgc2tpcCBpdCB0byBhdm9pZCBlcnJvcnMgd2l0aCBkaXZpZGluZyBieSB6ZXJvLlxuICAgIHggPSB4T3JpZ2luICogKGQgLyBkZXRlcm1pbmFudCkgKyB5T3JpZ2luICogKC1jIC8gZGV0ZXJtaW5hbnQpICsgKGMgKiB0eSAtIGQgKiB0eCkgLyBkZXRlcm1pbmFudDtcbiAgICB5ID0geE9yaWdpbiAqICgtYiAvIGRldGVybWluYW50KSArIHlPcmlnaW4gKiAoYSAvIGRldGVybWluYW50KSAtIChhICogdHkgLSBiICogdHgpIC8gZGV0ZXJtaW5hbnQ7XG4gICAgeE9yaWdpbiA9IHg7XG4gICAgeU9yaWdpbiA9IHk7XG4gIH1cblxuICBpZiAoc21vb3RoIHx8IHNtb290aCAhPT0gZmFsc2UgJiYgY2FjaGUuc21vb3RoKSB7XG4gICAgdHggPSB4T3JpZ2luIC0geE9yaWdpbk9sZDtcbiAgICB0eSA9IHlPcmlnaW4gLSB5T3JpZ2luT2xkO1xuICAgIGNhY2hlLnhPZmZzZXQgPSB4T2Zmc2V0T2xkICsgKHR4ICogYSArIHR5ICogYykgLSB0eDtcbiAgICBjYWNoZS55T2Zmc2V0ID0geU9mZnNldE9sZCArICh0eCAqIGIgKyB0eSAqIGQpIC0gdHk7XG4gIH0gZWxzZSB7XG4gICAgY2FjaGUueE9mZnNldCA9IGNhY2hlLnlPZmZzZXQgPSAwO1xuICB9XG5cbiAgY2FjaGUueE9yaWdpbiA9IHhPcmlnaW47XG4gIGNhY2hlLnlPcmlnaW4gPSB5T3JpZ2luO1xuICBjYWNoZS5zbW9vdGggPSAhIXNtb290aDtcbiAgY2FjaGUub3JpZ2luID0gb3JpZ2luO1xuICBjYWNoZS5vcmlnaW5Jc0Fic29sdXRlID0gISFvcmlnaW5Jc0Fic29sdXRlO1xuICB0YXJnZXQuc3R5bGVbX3RyYW5zZm9ybU9yaWdpblByb3BdID0gXCIwcHggMHB4XCI7IC8vb3RoZXJ3aXNlLCBpZiBzb21lb25lIHNldHMgIGFuIG9yaWdpbiB2aWEgQ1NTLCBpdCB3aWxsIGxpa2VseSBpbnRlcmZlcmUgd2l0aCB0aGUgU1ZHIHRyYW5zZm9ybSBhdHRyaWJ1dGUgb25lcyAoYmVjYXVzZSByZW1lbWJlciwgd2UncmUgYmFraW5nIHRoZSBvcmlnaW4gaW50byB0aGUgbWF0cml4KCkgdmFsdWUpLlxuXG4gIGlmIChwbHVnaW5Ub0FkZFByb3BUd2VlbnNUbykge1xuICAgIF9hZGROb25Ud2VlbmluZ1BUKHBsdWdpblRvQWRkUHJvcFR3ZWVuc1RvLCBjYWNoZSwgXCJ4T3JpZ2luXCIsIHhPcmlnaW5PbGQsIHhPcmlnaW4pO1xuXG4gICAgX2FkZE5vblR3ZWVuaW5nUFQocGx1Z2luVG9BZGRQcm9wVHdlZW5zVG8sIGNhY2hlLCBcInlPcmlnaW5cIiwgeU9yaWdpbk9sZCwgeU9yaWdpbik7XG5cbiAgICBfYWRkTm9uVHdlZW5pbmdQVChwbHVnaW5Ub0FkZFByb3BUd2VlbnNUbywgY2FjaGUsIFwieE9mZnNldFwiLCB4T2Zmc2V0T2xkLCBjYWNoZS54T2Zmc2V0KTtcblxuICAgIF9hZGROb25Ud2VlbmluZ1BUKHBsdWdpblRvQWRkUHJvcFR3ZWVuc1RvLCBjYWNoZSwgXCJ5T2Zmc2V0XCIsIHlPZmZzZXRPbGQsIGNhY2hlLnlPZmZzZXQpO1xuICB9XG5cbiAgdGFyZ2V0LnNldEF0dHJpYnV0ZShcImRhdGEtc3ZnLW9yaWdpblwiLCB4T3JpZ2luICsgXCIgXCIgKyB5T3JpZ2luKTtcbn0sXG4gICAgX3BhcnNlVHJhbnNmb3JtID0gZnVuY3Rpb24gX3BhcnNlVHJhbnNmb3JtKHRhcmdldCwgdW5jYWNoZSkge1xuICB2YXIgY2FjaGUgPSB0YXJnZXQuX2dzYXAgfHwgbmV3IEdTQ2FjaGUodGFyZ2V0KTtcblxuICBpZiAoXCJ4XCIgaW4gY2FjaGUgJiYgIXVuY2FjaGUgJiYgIWNhY2hlLnVuY2FjaGUpIHtcbiAgICByZXR1cm4gY2FjaGU7XG4gIH1cblxuICB2YXIgc3R5bGUgPSB0YXJnZXQuc3R5bGUsXG4gICAgICBpbnZlcnRlZFNjYWxlWCA9IGNhY2hlLnNjYWxlWCA8IDAsXG4gICAgICBweCA9IFwicHhcIixcbiAgICAgIGRlZyA9IFwiZGVnXCIsXG4gICAgICBvcmlnaW4gPSBfZ2V0Q29tcHV0ZWRQcm9wZXJ0eSh0YXJnZXQsIF90cmFuc2Zvcm1PcmlnaW5Qcm9wKSB8fCBcIjBcIixcbiAgICAgIHgsXG4gICAgICB5LFxuICAgICAgeixcbiAgICAgIHNjYWxlWCxcbiAgICAgIHNjYWxlWSxcbiAgICAgIHJvdGF0aW9uLFxuICAgICAgcm90YXRpb25YLFxuICAgICAgcm90YXRpb25ZLFxuICAgICAgc2tld1gsXG4gICAgICBza2V3WSxcbiAgICAgIHBlcnNwZWN0aXZlLFxuICAgICAgeE9yaWdpbixcbiAgICAgIHlPcmlnaW4sXG4gICAgICBtYXRyaXgsXG4gICAgICBhbmdsZSxcbiAgICAgIGNvcyxcbiAgICAgIHNpbixcbiAgICAgIGEsXG4gICAgICBiLFxuICAgICAgYyxcbiAgICAgIGQsXG4gICAgICBhMTIsXG4gICAgICBhMjIsXG4gICAgICB0MSxcbiAgICAgIHQyLFxuICAgICAgdDMsXG4gICAgICBhMTMsXG4gICAgICBhMjMsXG4gICAgICBhMzMsXG4gICAgICBhNDIsXG4gICAgICBhNDMsXG4gICAgICBhMzI7XG4gIHggPSB5ID0geiA9IHJvdGF0aW9uID0gcm90YXRpb25YID0gcm90YXRpb25ZID0gc2tld1ggPSBza2V3WSA9IHBlcnNwZWN0aXZlID0gMDtcbiAgc2NhbGVYID0gc2NhbGVZID0gMTtcbiAgY2FjaGUuc3ZnID0gISEodGFyZ2V0LmdldENUTSAmJiBfaXNTVkcodGFyZ2V0KSk7XG4gIG1hdHJpeCA9IF9nZXRNYXRyaXgodGFyZ2V0LCBjYWNoZS5zdmcpO1xuXG4gIGlmIChjYWNoZS5zdmcpIHtcbiAgICB0MSA9ICFjYWNoZS51bmNhY2hlICYmIHRhcmdldC5nZXRBdHRyaWJ1dGUoXCJkYXRhLXN2Zy1vcmlnaW5cIik7XG5cbiAgICBfYXBwbHlTVkdPcmlnaW4odGFyZ2V0LCB0MSB8fCBvcmlnaW4sICEhdDEgfHwgY2FjaGUub3JpZ2luSXNBYnNvbHV0ZSwgY2FjaGUuc21vb3RoICE9PSBmYWxzZSwgbWF0cml4KTtcbiAgfVxuXG4gIHhPcmlnaW4gPSBjYWNoZS54T3JpZ2luIHx8IDA7XG4gIHlPcmlnaW4gPSBjYWNoZS55T3JpZ2luIHx8IDA7XG5cbiAgaWYgKG1hdHJpeCAhPT0gX2lkZW50aXR5MkRNYXRyaXgpIHtcbiAgICBhID0gbWF0cml4WzBdOyAvL2ExMVxuXG4gICAgYiA9IG1hdHJpeFsxXTsgLy9hMjFcblxuICAgIGMgPSBtYXRyaXhbMl07IC8vYTMxXG5cbiAgICBkID0gbWF0cml4WzNdOyAvL2E0MVxuXG4gICAgeCA9IGExMiA9IG1hdHJpeFs0XTtcbiAgICB5ID0gYTIyID0gbWF0cml4WzVdOyAvLzJEIG1hdHJpeFxuXG4gICAgaWYgKG1hdHJpeC5sZW5ndGggPT09IDYpIHtcbiAgICAgIHNjYWxlWCA9IE1hdGguc3FydChhICogYSArIGIgKiBiKTtcbiAgICAgIHNjYWxlWSA9IE1hdGguc3FydChkICogZCArIGMgKiBjKTtcbiAgICAgIHJvdGF0aW9uID0gYSB8fCBiID8gX2F0YW4yKGIsIGEpICogX1JBRDJERUcgOiAwOyAvL25vdGU6IGlmIHNjYWxlWCBpcyAwLCB3ZSBjYW5ub3QgYWNjdXJhdGVseSBtZWFzdXJlIHJvdGF0aW9uLiBTYW1lIGZvciBza2V3WCB3aXRoIGEgc2NhbGVZIG9mIDAuIFRoZXJlZm9yZSwgd2UgZGVmYXVsdCB0byB0aGUgcHJldmlvdXNseSByZWNvcmRlZCB2YWx1ZSAob3IgemVybyBpZiB0aGF0IGRvZXNuJ3QgZXhpc3QpLlxuXG4gICAgICBza2V3WCA9IGMgfHwgZCA/IF9hdGFuMihjLCBkKSAqIF9SQUQyREVHICsgcm90YXRpb24gOiAwO1xuICAgICAgc2tld1ggJiYgKHNjYWxlWSAqPSBNYXRoLmNvcyhza2V3WCAqIF9ERUcyUkFEKSk7XG5cbiAgICAgIGlmIChjYWNoZS5zdmcpIHtcbiAgICAgICAgeCAtPSB4T3JpZ2luIC0gKHhPcmlnaW4gKiBhICsgeU9yaWdpbiAqIGMpO1xuICAgICAgICB5IC09IHlPcmlnaW4gLSAoeE9yaWdpbiAqIGIgKyB5T3JpZ2luICogZCk7XG4gICAgICB9IC8vM0QgbWF0cml4XG5cbiAgICB9IGVsc2Uge1xuICAgICAgYTMyID0gbWF0cml4WzZdO1xuICAgICAgYTQyID0gbWF0cml4WzddO1xuICAgICAgYTEzID0gbWF0cml4WzhdO1xuICAgICAgYTIzID0gbWF0cml4WzldO1xuICAgICAgYTMzID0gbWF0cml4WzEwXTtcbiAgICAgIGE0MyA9IG1hdHJpeFsxMV07XG4gICAgICB4ID0gbWF0cml4WzEyXTtcbiAgICAgIHkgPSBtYXRyaXhbMTNdO1xuICAgICAgeiA9IG1hdHJpeFsxNF07XG4gICAgICBhbmdsZSA9IF9hdGFuMihhMzIsIGEzMyk7XG4gICAgICByb3RhdGlvblggPSBhbmdsZSAqIF9SQUQyREVHOyAvL3JvdGF0aW9uWFxuXG4gICAgICBpZiAoYW5nbGUpIHtcbiAgICAgICAgY29zID0gTWF0aC5jb3MoLWFuZ2xlKTtcbiAgICAgICAgc2luID0gTWF0aC5zaW4oLWFuZ2xlKTtcbiAgICAgICAgdDEgPSBhMTIgKiBjb3MgKyBhMTMgKiBzaW47XG4gICAgICAgIHQyID0gYTIyICogY29zICsgYTIzICogc2luO1xuICAgICAgICB0MyA9IGEzMiAqIGNvcyArIGEzMyAqIHNpbjtcbiAgICAgICAgYTEzID0gYTEyICogLXNpbiArIGExMyAqIGNvcztcbiAgICAgICAgYTIzID0gYTIyICogLXNpbiArIGEyMyAqIGNvcztcbiAgICAgICAgYTMzID0gYTMyICogLXNpbiArIGEzMyAqIGNvcztcbiAgICAgICAgYTQzID0gYTQyICogLXNpbiArIGE0MyAqIGNvcztcbiAgICAgICAgYTEyID0gdDE7XG4gICAgICAgIGEyMiA9IHQyO1xuICAgICAgICBhMzIgPSB0MztcbiAgICAgIH0gLy9yb3RhdGlvbllcblxuXG4gICAgICBhbmdsZSA9IF9hdGFuMigtYywgYTMzKTtcbiAgICAgIHJvdGF0aW9uWSA9IGFuZ2xlICogX1JBRDJERUc7XG5cbiAgICAgIGlmIChhbmdsZSkge1xuICAgICAgICBjb3MgPSBNYXRoLmNvcygtYW5nbGUpO1xuICAgICAgICBzaW4gPSBNYXRoLnNpbigtYW5nbGUpO1xuICAgICAgICB0MSA9IGEgKiBjb3MgLSBhMTMgKiBzaW47XG4gICAgICAgIHQyID0gYiAqIGNvcyAtIGEyMyAqIHNpbjtcbiAgICAgICAgdDMgPSBjICogY29zIC0gYTMzICogc2luO1xuICAgICAgICBhNDMgPSBkICogc2luICsgYTQzICogY29zO1xuICAgICAgICBhID0gdDE7XG4gICAgICAgIGIgPSB0MjtcbiAgICAgICAgYyA9IHQzO1xuICAgICAgfSAvL3JvdGF0aW9uWlxuXG5cbiAgICAgIGFuZ2xlID0gX2F0YW4yKGIsIGEpO1xuICAgICAgcm90YXRpb24gPSBhbmdsZSAqIF9SQUQyREVHO1xuXG4gICAgICBpZiAoYW5nbGUpIHtcbiAgICAgICAgY29zID0gTWF0aC5jb3MoYW5nbGUpO1xuICAgICAgICBzaW4gPSBNYXRoLnNpbihhbmdsZSk7XG4gICAgICAgIHQxID0gYSAqIGNvcyArIGIgKiBzaW47XG4gICAgICAgIHQyID0gYTEyICogY29zICsgYTIyICogc2luO1xuICAgICAgICBiID0gYiAqIGNvcyAtIGEgKiBzaW47XG4gICAgICAgIGEyMiA9IGEyMiAqIGNvcyAtIGExMiAqIHNpbjtcbiAgICAgICAgYSA9IHQxO1xuICAgICAgICBhMTIgPSB0MjtcbiAgICAgIH1cblxuICAgICAgaWYgKHJvdGF0aW9uWCAmJiBNYXRoLmFicyhyb3RhdGlvblgpICsgTWF0aC5hYnMocm90YXRpb24pID4gMzU5LjkpIHtcbiAgICAgICAgLy93aGVuIHJvdGF0aW9uWSBpcyBzZXQsIGl0IHdpbGwgb2Z0ZW4gYmUgcGFyc2VkIGFzIDE4MCBkZWdyZWVzIGRpZmZlcmVudCB0aGFuIGl0IHNob3VsZCBiZSwgYW5kIHJvdGF0aW9uWCBhbmQgcm90YXRpb24gYm90aCBiZWluZyAxODAgKGl0IGxvb2tzIHRoZSBzYW1lKSwgc28gd2UgYWRqdXN0IGZvciB0aGF0IGhlcmUuXG4gICAgICAgIHJvdGF0aW9uWCA9IHJvdGF0aW9uID0gMDtcbiAgICAgICAgcm90YXRpb25ZID0gMTgwIC0gcm90YXRpb25ZO1xuICAgICAgfVxuXG4gICAgICBzY2FsZVggPSBfcm91bmQoTWF0aC5zcXJ0KGEgKiBhICsgYiAqIGIgKyBjICogYykpO1xuICAgICAgc2NhbGVZID0gX3JvdW5kKE1hdGguc3FydChhMjIgKiBhMjIgKyBhMzIgKiBhMzIpKTtcbiAgICAgIGFuZ2xlID0gX2F0YW4yKGExMiwgYTIyKTtcbiAgICAgIHNrZXdYID0gTWF0aC5hYnMoYW5nbGUpID4gMC4wMDAyID8gYW5nbGUgKiBfUkFEMkRFRyA6IDA7XG4gICAgICBwZXJzcGVjdGl2ZSA9IGE0MyA/IDEgLyAoYTQzIDwgMCA/IC1hNDMgOiBhNDMpIDogMDtcbiAgICB9XG5cbiAgICBpZiAoY2FjaGUuc3ZnKSB7XG4gICAgICAvL3NlbnNlIGlmIHRoZXJlIGFyZSBDU1MgdHJhbnNmb3JtcyBhcHBsaWVkIG9uIGFuIFNWRyBlbGVtZW50IGluIHdoaWNoIGNhc2Ugd2UgbXVzdCBvdmVyd3JpdGUgdGhlbSB3aGVuIHJlbmRlcmluZy4gVGhlIHRyYW5zZm9ybSBhdHRyaWJ1dGUgaXMgbW9yZSByZWxpYWJsZSBjcm9zcy1icm93c2VyLCBidXQgd2UgY2FuJ3QganVzdCByZW1vdmUgdGhlIENTUyBvbmVzIGJlY2F1c2UgdGhleSBtYXkgYmUgYXBwbGllZCBpbiBhIENTUyBydWxlIHNvbWV3aGVyZSAobm90IGp1c3QgaW5saW5lKS5cbiAgICAgIHQxID0gdGFyZ2V0LmdldEF0dHJpYnV0ZShcInRyYW5zZm9ybVwiKTtcbiAgICAgIGNhY2hlLmZvcmNlQ1NTID0gdGFyZ2V0LnNldEF0dHJpYnV0ZShcInRyYW5zZm9ybVwiLCBcIlwiKSB8fCAhX2lzTnVsbFRyYW5zZm9ybShfZ2V0Q29tcHV0ZWRQcm9wZXJ0eSh0YXJnZXQsIF90cmFuc2Zvcm1Qcm9wKSk7XG4gICAgICB0MSAmJiB0YXJnZXQuc2V0QXR0cmlidXRlKFwidHJhbnNmb3JtXCIsIHQxKTtcbiAgICB9XG4gIH1cblxuICBpZiAoTWF0aC5hYnMoc2tld1gpID4gOTAgJiYgTWF0aC5hYnMoc2tld1gpIDwgMjcwKSB7XG4gICAgaWYgKGludmVydGVkU2NhbGVYKSB7XG4gICAgICBzY2FsZVggKj0gLTE7XG4gICAgICBza2V3WCArPSByb3RhdGlvbiA8PSAwID8gMTgwIDogLTE4MDtcbiAgICAgIHJvdGF0aW9uICs9IHJvdGF0aW9uIDw9IDAgPyAxODAgOiAtMTgwO1xuICAgIH0gZWxzZSB7XG4gICAgICBzY2FsZVkgKj0gLTE7XG4gICAgICBza2V3WCArPSBza2V3WCA8PSAwID8gMTgwIDogLTE4MDtcbiAgICB9XG4gIH1cblxuICBjYWNoZS54ID0gKChjYWNoZS54UGVyY2VudCA9IHggJiYgTWF0aC5yb3VuZCh0YXJnZXQub2Zmc2V0V2lkdGggLyAyKSA9PT0gTWF0aC5yb3VuZCgteCkgPyAtNTAgOiAwKSA/IDAgOiB4KSArIHB4O1xuICBjYWNoZS55ID0gKChjYWNoZS55UGVyY2VudCA9IHkgJiYgTWF0aC5yb3VuZCh0YXJnZXQub2Zmc2V0SGVpZ2h0IC8gMikgPT09IE1hdGgucm91bmQoLXkpID8gLTUwIDogMCkgPyAwIDogeSkgKyBweDtcbiAgY2FjaGUueiA9IHogKyBweDtcbiAgY2FjaGUuc2NhbGVYID0gX3JvdW5kKHNjYWxlWCk7XG4gIGNhY2hlLnNjYWxlWSA9IF9yb3VuZChzY2FsZVkpO1xuICBjYWNoZS5yb3RhdGlvbiA9IF9yb3VuZChyb3RhdGlvbikgKyBkZWc7XG4gIGNhY2hlLnJvdGF0aW9uWCA9IF9yb3VuZChyb3RhdGlvblgpICsgZGVnO1xuICBjYWNoZS5yb3RhdGlvblkgPSBfcm91bmQocm90YXRpb25ZKSArIGRlZztcbiAgY2FjaGUuc2tld1ggPSBza2V3WCArIGRlZztcbiAgY2FjaGUuc2tld1kgPSBza2V3WSArIGRlZztcbiAgY2FjaGUudHJhbnNmb3JtUGVyc3BlY3RpdmUgPSBwZXJzcGVjdGl2ZSArIHB4O1xuXG4gIGlmIChjYWNoZS56T3JpZ2luID0gcGFyc2VGbG9hdChvcmlnaW4uc3BsaXQoXCIgXCIpWzJdKSB8fCAwKSB7XG4gICAgc3R5bGVbX3RyYW5zZm9ybU9yaWdpblByb3BdID0gX2ZpcnN0VHdvT25seShvcmlnaW4pO1xuICB9XG5cbiAgY2FjaGUueE9mZnNldCA9IGNhY2hlLnlPZmZzZXQgPSAwO1xuICBjYWNoZS5mb3JjZTNEID0gX2NvbmZpZy5mb3JjZTNEO1xuICBjYWNoZS5yZW5kZXJUcmFuc2Zvcm0gPSBjYWNoZS5zdmcgPyBfcmVuZGVyU1ZHVHJhbnNmb3JtcyA6IF9zdXBwb3J0czNEID8gX3JlbmRlckNTU1RyYW5zZm9ybXMgOiBfcmVuZGVyTm9uM0RUcmFuc2Zvcm1zO1xuICBjYWNoZS51bmNhY2hlID0gMDtcbiAgcmV0dXJuIGNhY2hlO1xufSxcbiAgICBfZmlyc3RUd29Pbmx5ID0gZnVuY3Rpb24gX2ZpcnN0VHdvT25seSh2YWx1ZSkge1xuICByZXR1cm4gKHZhbHVlID0gdmFsdWUuc3BsaXQoXCIgXCIpKVswXSArIFwiIFwiICsgdmFsdWVbMV07XG59LFxuICAgIC8vZm9yIGhhbmRsaW5nIHRyYW5zZm9ybU9yaWdpbiB2YWx1ZXMsIHN0cmlwcGluZyBvdXQgdGhlIDNyZCBkaW1lbnNpb25cbl9hZGRQeFRyYW5zbGF0ZSA9IGZ1bmN0aW9uIF9hZGRQeFRyYW5zbGF0ZSh0YXJnZXQsIHN0YXJ0LCB2YWx1ZSkge1xuICB2YXIgdW5pdCA9IGdldFVuaXQoc3RhcnQpO1xuICByZXR1cm4gX3JvdW5kKHBhcnNlRmxvYXQoc3RhcnQpICsgcGFyc2VGbG9hdChfY29udmVydFRvVW5pdCh0YXJnZXQsIFwieFwiLCB2YWx1ZSArIFwicHhcIiwgdW5pdCkpKSArIHVuaXQ7XG59LFxuICAgIF9yZW5kZXJOb24zRFRyYW5zZm9ybXMgPSBmdW5jdGlvbiBfcmVuZGVyTm9uM0RUcmFuc2Zvcm1zKHJhdGlvLCBjYWNoZSkge1xuICBjYWNoZS56ID0gXCIwcHhcIjtcbiAgY2FjaGUucm90YXRpb25ZID0gY2FjaGUucm90YXRpb25YID0gXCIwZGVnXCI7XG4gIGNhY2hlLmZvcmNlM0QgPSAwO1xuXG4gIF9yZW5kZXJDU1NUcmFuc2Zvcm1zKHJhdGlvLCBjYWNoZSk7XG59LFxuICAgIF96ZXJvRGVnID0gXCIwZGVnXCIsXG4gICAgX3plcm9QeCA9IFwiMHB4XCIsXG4gICAgX2VuZFBhcmVudGhlc2lzID0gXCIpIFwiLFxuICAgIF9yZW5kZXJDU1NUcmFuc2Zvcm1zID0gZnVuY3Rpb24gX3JlbmRlckNTU1RyYW5zZm9ybXMocmF0aW8sIGNhY2hlKSB7XG4gIHZhciBfcmVmID0gY2FjaGUgfHwgdGhpcyxcbiAgICAgIHhQZXJjZW50ID0gX3JlZi54UGVyY2VudCxcbiAgICAgIHlQZXJjZW50ID0gX3JlZi55UGVyY2VudCxcbiAgICAgIHggPSBfcmVmLngsXG4gICAgICB5ID0gX3JlZi55LFxuICAgICAgeiA9IF9yZWYueixcbiAgICAgIHJvdGF0aW9uID0gX3JlZi5yb3RhdGlvbixcbiAgICAgIHJvdGF0aW9uWSA9IF9yZWYucm90YXRpb25ZLFxuICAgICAgcm90YXRpb25YID0gX3JlZi5yb3RhdGlvblgsXG4gICAgICBza2V3WCA9IF9yZWYuc2tld1gsXG4gICAgICBza2V3WSA9IF9yZWYuc2tld1ksXG4gICAgICBzY2FsZVggPSBfcmVmLnNjYWxlWCxcbiAgICAgIHNjYWxlWSA9IF9yZWYuc2NhbGVZLFxuICAgICAgdHJhbnNmb3JtUGVyc3BlY3RpdmUgPSBfcmVmLnRyYW5zZm9ybVBlcnNwZWN0aXZlLFxuICAgICAgZm9yY2UzRCA9IF9yZWYuZm9yY2UzRCxcbiAgICAgIHRhcmdldCA9IF9yZWYudGFyZ2V0LFxuICAgICAgek9yaWdpbiA9IF9yZWYuek9yaWdpbixcbiAgICAgIHRyYW5zZm9ybXMgPSBcIlwiLFxuICAgICAgdXNlM0QgPSBmb3JjZTNEID09PSBcImF1dG9cIiAmJiByYXRpbyAmJiByYXRpbyAhPT0gMSB8fCBmb3JjZTNEID09PSB0cnVlOyAvLyBTYWZhcmkgaGFzIGEgYnVnIHRoYXQgY2F1c2VzIGl0IG5vdCB0byByZW5kZXIgM0QgdHJhbnNmb3JtLW9yaWdpbiB2YWx1ZXMgcHJvcGVybHksIHNvIHdlIGZvcmNlIHRoZSB6IG9yaWdpbiB0byAwLCByZWNvcmQgaXQgaW4gdGhlIGNhY2hlLCBhbmQgdGhlbiBkbyB0aGUgbWF0aCBoZXJlIHRvIG9mZnNldCB0aGUgdHJhbnNsYXRlIHZhbHVlcyBhY2NvcmRpbmdseSAoYmFzaWNhbGx5IGRvIHRoZSAzRCB0cmFuc2Zvcm0tb3JpZ2luIHBhcnQgbWFudWFsbHkpXG5cblxuICBpZiAoek9yaWdpbiAmJiAocm90YXRpb25YICE9PSBfemVyb0RlZyB8fCByb3RhdGlvblkgIT09IF96ZXJvRGVnKSkge1xuICAgIHZhciBhbmdsZSA9IHBhcnNlRmxvYXQocm90YXRpb25ZKSAqIF9ERUcyUkFELFxuICAgICAgICBhMTMgPSBNYXRoLnNpbihhbmdsZSksXG4gICAgICAgIGEzMyA9IE1hdGguY29zKGFuZ2xlKSxcbiAgICAgICAgY29zO1xuXG4gICAgYW5nbGUgPSBwYXJzZUZsb2F0KHJvdGF0aW9uWCkgKiBfREVHMlJBRDtcbiAgICBjb3MgPSBNYXRoLmNvcyhhbmdsZSk7XG4gICAgeCA9IF9hZGRQeFRyYW5zbGF0ZSh0YXJnZXQsIHgsIGExMyAqIGNvcyAqIC16T3JpZ2luKTtcbiAgICB5ID0gX2FkZFB4VHJhbnNsYXRlKHRhcmdldCwgeSwgLU1hdGguc2luKGFuZ2xlKSAqIC16T3JpZ2luKTtcbiAgICB6ID0gX2FkZFB4VHJhbnNsYXRlKHRhcmdldCwgeiwgYTMzICogY29zICogLXpPcmlnaW4gKyB6T3JpZ2luKTtcbiAgfVxuXG4gIGlmICh0cmFuc2Zvcm1QZXJzcGVjdGl2ZSAhPT0gX3plcm9QeCkge1xuICAgIHRyYW5zZm9ybXMgKz0gXCJwZXJzcGVjdGl2ZShcIiArIHRyYW5zZm9ybVBlcnNwZWN0aXZlICsgX2VuZFBhcmVudGhlc2lzO1xuICB9XG5cbiAgaWYgKHhQZXJjZW50IHx8IHlQZXJjZW50KSB7XG4gICAgdHJhbnNmb3JtcyArPSBcInRyYW5zbGF0ZShcIiArIHhQZXJjZW50ICsgXCIlLCBcIiArIHlQZXJjZW50ICsgXCIlKSBcIjtcbiAgfVxuXG4gIGlmICh1c2UzRCB8fCB4ICE9PSBfemVyb1B4IHx8IHkgIT09IF96ZXJvUHggfHwgeiAhPT0gX3plcm9QeCkge1xuICAgIHRyYW5zZm9ybXMgKz0geiAhPT0gX3plcm9QeCB8fCB1c2UzRCA/IFwidHJhbnNsYXRlM2QoXCIgKyB4ICsgXCIsIFwiICsgeSArIFwiLCBcIiArIHogKyBcIikgXCIgOiBcInRyYW5zbGF0ZShcIiArIHggKyBcIiwgXCIgKyB5ICsgX2VuZFBhcmVudGhlc2lzO1xuICB9XG5cbiAgaWYgKHJvdGF0aW9uICE9PSBfemVyb0RlZykge1xuICAgIHRyYW5zZm9ybXMgKz0gXCJyb3RhdGUoXCIgKyByb3RhdGlvbiArIF9lbmRQYXJlbnRoZXNpcztcbiAgfVxuXG4gIGlmIChyb3RhdGlvblkgIT09IF96ZXJvRGVnKSB7XG4gICAgdHJhbnNmb3JtcyArPSBcInJvdGF0ZVkoXCIgKyByb3RhdGlvblkgKyBfZW5kUGFyZW50aGVzaXM7XG4gIH1cblxuICBpZiAocm90YXRpb25YICE9PSBfemVyb0RlZykge1xuICAgIHRyYW5zZm9ybXMgKz0gXCJyb3RhdGVYKFwiICsgcm90YXRpb25YICsgX2VuZFBhcmVudGhlc2lzO1xuICB9XG5cbiAgaWYgKHNrZXdYICE9PSBfemVyb0RlZyB8fCBza2V3WSAhPT0gX3plcm9EZWcpIHtcbiAgICB0cmFuc2Zvcm1zICs9IFwic2tldyhcIiArIHNrZXdYICsgXCIsIFwiICsgc2tld1kgKyBfZW5kUGFyZW50aGVzaXM7XG4gIH1cblxuICBpZiAoc2NhbGVYICE9PSAxIHx8IHNjYWxlWSAhPT0gMSkge1xuICAgIHRyYW5zZm9ybXMgKz0gXCJzY2FsZShcIiArIHNjYWxlWCArIFwiLCBcIiArIHNjYWxlWSArIF9lbmRQYXJlbnRoZXNpcztcbiAgfVxuXG4gIHRhcmdldC5zdHlsZVtfdHJhbnNmb3JtUHJvcF0gPSB0cmFuc2Zvcm1zIHx8IFwidHJhbnNsYXRlKDAsIDApXCI7XG59LFxuICAgIF9yZW5kZXJTVkdUcmFuc2Zvcm1zID0gZnVuY3Rpb24gX3JlbmRlclNWR1RyYW5zZm9ybXMocmF0aW8sIGNhY2hlKSB7XG4gIHZhciBfcmVmMiA9IGNhY2hlIHx8IHRoaXMsXG4gICAgICB4UGVyY2VudCA9IF9yZWYyLnhQZXJjZW50LFxuICAgICAgeVBlcmNlbnQgPSBfcmVmMi55UGVyY2VudCxcbiAgICAgIHggPSBfcmVmMi54LFxuICAgICAgeSA9IF9yZWYyLnksXG4gICAgICByb3RhdGlvbiA9IF9yZWYyLnJvdGF0aW9uLFxuICAgICAgc2tld1ggPSBfcmVmMi5za2V3WCxcbiAgICAgIHNrZXdZID0gX3JlZjIuc2tld1ksXG4gICAgICBzY2FsZVggPSBfcmVmMi5zY2FsZVgsXG4gICAgICBzY2FsZVkgPSBfcmVmMi5zY2FsZVksXG4gICAgICB0YXJnZXQgPSBfcmVmMi50YXJnZXQsXG4gICAgICB4T3JpZ2luID0gX3JlZjIueE9yaWdpbixcbiAgICAgIHlPcmlnaW4gPSBfcmVmMi55T3JpZ2luLFxuICAgICAgeE9mZnNldCA9IF9yZWYyLnhPZmZzZXQsXG4gICAgICB5T2Zmc2V0ID0gX3JlZjIueU9mZnNldCxcbiAgICAgIGZvcmNlQ1NTID0gX3JlZjIuZm9yY2VDU1MsXG4gICAgICB0eCA9IHBhcnNlRmxvYXQoeCksXG4gICAgICB0eSA9IHBhcnNlRmxvYXQoeSksXG4gICAgICBhMTEsXG4gICAgICBhMjEsXG4gICAgICBhMTIsXG4gICAgICBhMjIsXG4gICAgICB0ZW1wO1xuXG4gIHJvdGF0aW9uID0gcGFyc2VGbG9hdChyb3RhdGlvbik7XG4gIHNrZXdYID0gcGFyc2VGbG9hdChza2V3WCk7XG4gIHNrZXdZID0gcGFyc2VGbG9hdChza2V3WSk7XG5cbiAgaWYgKHNrZXdZKSB7XG4gICAgLy9mb3IgcGVyZm9ybWFuY2UgcmVhc29ucywgd2UgY29tYmluZSBhbGwgc2tld2luZyBpbnRvIHRoZSBza2V3WCBhbmQgcm90YXRpb24gdmFsdWVzLiBSZW1lbWJlciwgYSBza2V3WSBvZiAxMCBkZWdyZWVzIGxvb2tzIHRoZSBzYW1lIGFzIGEgcm90YXRpb24gb2YgMTAgZGVncmVlcyBwbHVzIGEgc2tld1ggb2YgMTAgZGVncmVlcy5cbiAgICBza2V3WSA9IHBhcnNlRmxvYXQoc2tld1kpO1xuICAgIHNrZXdYICs9IHNrZXdZO1xuICAgIHJvdGF0aW9uICs9IHNrZXdZO1xuICB9XG5cbiAgaWYgKHJvdGF0aW9uIHx8IHNrZXdYKSB7XG4gICAgcm90YXRpb24gKj0gX0RFRzJSQUQ7XG4gICAgc2tld1ggKj0gX0RFRzJSQUQ7XG4gICAgYTExID0gTWF0aC5jb3Mocm90YXRpb24pICogc2NhbGVYO1xuICAgIGEyMSA9IE1hdGguc2luKHJvdGF0aW9uKSAqIHNjYWxlWDtcbiAgICBhMTIgPSBNYXRoLnNpbihyb3RhdGlvbiAtIHNrZXdYKSAqIC1zY2FsZVk7XG4gICAgYTIyID0gTWF0aC5jb3Mocm90YXRpb24gLSBza2V3WCkgKiBzY2FsZVk7XG5cbiAgICBpZiAoc2tld1gpIHtcbiAgICAgIHNrZXdZICo9IF9ERUcyUkFEO1xuICAgICAgdGVtcCA9IE1hdGgudGFuKHNrZXdYIC0gc2tld1kpO1xuICAgICAgdGVtcCA9IE1hdGguc3FydCgxICsgdGVtcCAqIHRlbXApO1xuICAgICAgYTEyICo9IHRlbXA7XG4gICAgICBhMjIgKj0gdGVtcDtcblxuICAgICAgaWYgKHNrZXdZKSB7XG4gICAgICAgIHRlbXAgPSBNYXRoLnRhbihza2V3WSk7XG4gICAgICAgIHRlbXAgPSBNYXRoLnNxcnQoMSArIHRlbXAgKiB0ZW1wKTtcbiAgICAgICAgYTExICo9IHRlbXA7XG4gICAgICAgIGEyMSAqPSB0ZW1wO1xuICAgICAgfVxuICAgIH1cblxuICAgIGExMSA9IF9yb3VuZChhMTEpO1xuICAgIGEyMSA9IF9yb3VuZChhMjEpO1xuICAgIGExMiA9IF9yb3VuZChhMTIpO1xuICAgIGEyMiA9IF9yb3VuZChhMjIpO1xuICB9IGVsc2Uge1xuICAgIGExMSA9IHNjYWxlWDtcbiAgICBhMjIgPSBzY2FsZVk7XG4gICAgYTIxID0gYTEyID0gMDtcbiAgfVxuXG4gIGlmICh0eCAmJiAhfih4ICsgXCJcIikuaW5kZXhPZihcInB4XCIpIHx8IHR5ICYmICF+KHkgKyBcIlwiKS5pbmRleE9mKFwicHhcIikpIHtcbiAgICB0eCA9IF9jb252ZXJ0VG9Vbml0KHRhcmdldCwgXCJ4XCIsIHgsIFwicHhcIik7XG4gICAgdHkgPSBfY29udmVydFRvVW5pdCh0YXJnZXQsIFwieVwiLCB5LCBcInB4XCIpO1xuICB9XG5cbiAgaWYgKHhPcmlnaW4gfHwgeU9yaWdpbiB8fCB4T2Zmc2V0IHx8IHlPZmZzZXQpIHtcbiAgICB0eCA9IF9yb3VuZCh0eCArIHhPcmlnaW4gLSAoeE9yaWdpbiAqIGExMSArIHlPcmlnaW4gKiBhMTIpICsgeE9mZnNldCk7XG4gICAgdHkgPSBfcm91bmQodHkgKyB5T3JpZ2luIC0gKHhPcmlnaW4gKiBhMjEgKyB5T3JpZ2luICogYTIyKSArIHlPZmZzZXQpO1xuICB9XG5cbiAgaWYgKHhQZXJjZW50IHx8IHlQZXJjZW50KSB7XG4gICAgLy9UaGUgU1ZHIHNwZWMgZG9lc24ndCBzdXBwb3J0IHBlcmNlbnRhZ2UtYmFzZWQgdHJhbnNsYXRpb24gaW4gdGhlIFwidHJhbnNmb3JtXCIgYXR0cmlidXRlLCBzbyB3ZSBtZXJnZSBpdCBpbnRvIHRoZSB0cmFuc2xhdGlvbiB0byBzaW11bGF0ZSBpdC5cbiAgICB0ZW1wID0gdGFyZ2V0LmdldEJCb3goKTtcbiAgICB0eCA9IF9yb3VuZCh0eCArIHhQZXJjZW50IC8gMTAwICogdGVtcC53aWR0aCk7XG4gICAgdHkgPSBfcm91bmQodHkgKyB5UGVyY2VudCAvIDEwMCAqIHRlbXAuaGVpZ2h0KTtcbiAgfVxuXG4gIHRlbXAgPSBcIm1hdHJpeChcIiArIGExMSArIFwiLFwiICsgYTIxICsgXCIsXCIgKyBhMTIgKyBcIixcIiArIGEyMiArIFwiLFwiICsgdHggKyBcIixcIiArIHR5ICsgXCIpXCI7XG4gIHRhcmdldC5zZXRBdHRyaWJ1dGUoXCJ0cmFuc2Zvcm1cIiwgdGVtcCk7XG5cbiAgaWYgKGZvcmNlQ1NTKSB7XG4gICAgLy9zb21lIGJyb3dzZXJzIHByaW9yaXRpemUgQ1NTIHRyYW5zZm9ybXMgb3ZlciB0aGUgdHJhbnNmb3JtIGF0dHJpYnV0ZS4gV2hlbiB3ZSBzZW5zZSB0aGF0IHRoZSB1c2VyIGhhcyBDU1MgdHJhbnNmb3JtcyBhcHBsaWVkLCB3ZSBtdXN0IG92ZXJ3cml0ZSB0aGVtIHRoaXMgd2F5IChvdGhlcndpc2Ugc29tZSBicm93c2VyIHNpbXBseSB3b24ndCByZW5kZXIgdGhlICB0cmFuc2Zvcm0gYXR0cmlidXRlIGNoYW5nZXMhKVxuICAgIHRhcmdldC5zdHlsZVtfdHJhbnNmb3JtUHJvcF0gPSB0ZW1wO1xuICB9XG59LFxuICAgIF9hZGRSb3RhdGlvbmFsUHJvcFR3ZWVuID0gZnVuY3Rpb24gX2FkZFJvdGF0aW9uYWxQcm9wVHdlZW4ocGx1Z2luLCB0YXJnZXQsIHByb3BlcnR5LCBzdGFydE51bSwgZW5kVmFsdWUsIHJlbGF0aXZlKSB7XG4gIHZhciBjYXAgPSAzNjAsXG4gICAgICBpc1N0cmluZyA9IF9pc1N0cmluZyhlbmRWYWx1ZSksXG4gICAgICBlbmROdW0gPSBwYXJzZUZsb2F0KGVuZFZhbHVlKSAqIChpc1N0cmluZyAmJiB+ZW5kVmFsdWUuaW5kZXhPZihcInJhZFwiKSA/IF9SQUQyREVHIDogMSksXG4gICAgICBjaGFuZ2UgPSByZWxhdGl2ZSA/IGVuZE51bSAqIHJlbGF0aXZlIDogZW5kTnVtIC0gc3RhcnROdW0sXG4gICAgICBmaW5hbFZhbHVlID0gc3RhcnROdW0gKyBjaGFuZ2UgKyBcImRlZ1wiLFxuICAgICAgZGlyZWN0aW9uLFxuICAgICAgcHQ7XG5cbiAgaWYgKGlzU3RyaW5nKSB7XG4gICAgZGlyZWN0aW9uID0gZW5kVmFsdWUuc3BsaXQoXCJfXCIpWzFdO1xuXG4gICAgaWYgKGRpcmVjdGlvbiA9PT0gXCJzaG9ydFwiKSB7XG4gICAgICBjaGFuZ2UgJT0gY2FwO1xuXG4gICAgICBpZiAoY2hhbmdlICE9PSBjaGFuZ2UgJSAoY2FwIC8gMikpIHtcbiAgICAgICAgY2hhbmdlICs9IGNoYW5nZSA8IDAgPyBjYXAgOiAtY2FwO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChkaXJlY3Rpb24gPT09IFwiY3dcIiAmJiBjaGFuZ2UgPCAwKSB7XG4gICAgICBjaGFuZ2UgPSAoY2hhbmdlICsgY2FwICogX2JpZ051bSkgJSBjYXAgLSB+fihjaGFuZ2UgLyBjYXApICogY2FwO1xuICAgIH0gZWxzZSBpZiAoZGlyZWN0aW9uID09PSBcImNjd1wiICYmIGNoYW5nZSA+IDApIHtcbiAgICAgIGNoYW5nZSA9IChjaGFuZ2UgLSBjYXAgKiBfYmlnTnVtKSAlIGNhcCAtIH5+KGNoYW5nZSAvIGNhcCkgKiBjYXA7XG4gICAgfVxuICB9XG5cbiAgcGx1Z2luLl9wdCA9IHB0ID0gbmV3IFByb3BUd2VlbihwbHVnaW4uX3B0LCB0YXJnZXQsIHByb3BlcnR5LCBzdGFydE51bSwgY2hhbmdlLCBfcmVuZGVyUHJvcFdpdGhFbmQpO1xuICBwdC5lID0gZmluYWxWYWx1ZTtcbiAgcHQudSA9IFwiZGVnXCI7XG5cbiAgcGx1Z2luLl9wcm9wcy5wdXNoKHByb3BlcnR5KTtcblxuICByZXR1cm4gcHQ7XG59LFxuICAgIF9hZGRSYXdUcmFuc2Zvcm1QVHMgPSBmdW5jdGlvbiBfYWRkUmF3VHJhbnNmb3JtUFRzKHBsdWdpbiwgdHJhbnNmb3JtcywgdGFyZ2V0KSB7XG4gIC8vZm9yIGhhbmRsaW5nIGNhc2VzIHdoZXJlIHNvbWVvbmUgcGFzc2VzIGluIGEgd2hvbGUgdHJhbnNmb3JtIHN0cmluZywgbGlrZSB0cmFuc2Zvcm06IFwic2NhbGUoMiwgMykgcm90YXRlKDIwZGVnKSB0cmFuc2xhdGVZKDMwZW0pXCJcbiAgdmFyIHN0eWxlID0gX3RlbXBEaXZTdHlsZXIuc3R5bGUsXG4gICAgICBzdGFydENhY2hlID0gdGFyZ2V0Ll9nc2FwLFxuICAgICAgZXhjbHVkZSA9IFwicGVyc3BlY3RpdmUsZm9yY2UzRCx0cmFuc2Zvcm1PcmlnaW4sc3ZnT3JpZ2luXCIsXG4gICAgICBlbmRDYWNoZSxcbiAgICAgIHAsXG4gICAgICBzdGFydFZhbHVlLFxuICAgICAgZW5kVmFsdWUsXG4gICAgICBzdGFydE51bSxcbiAgICAgIGVuZE51bSxcbiAgICAgIHN0YXJ0VW5pdCxcbiAgICAgIGVuZFVuaXQ7XG4gIHN0eWxlLmNzc1RleHQgPSBnZXRDb21wdXRlZFN0eWxlKHRhcmdldCkuY3NzVGV4dCArIFwiO3Bvc2l0aW9uOmFic29sdXRlO2Rpc3BsYXk6YmxvY2s7XCI7IC8vJS1iYXNlZCB0cmFuc2xhdGlvbnMgd2lsbCBmYWlsIHVubGVzcyB3ZSBzZXQgdGhlIHdpZHRoL2hlaWdodCB0byBtYXRjaCB0aGUgb3JpZ2luYWwgdGFyZ2V0IChhbmQgcGFkZGluZy9ib3JkZXJzIGNhbiBhZmZlY3QgaXQpXG5cbiAgc3R5bGVbX3RyYW5zZm9ybVByb3BdID0gdHJhbnNmb3JtcztcblxuICBfZG9jLmJvZHkuYXBwZW5kQ2hpbGQoX3RlbXBEaXZTdHlsZXIpO1xuXG4gIGVuZENhY2hlID0gX3BhcnNlVHJhbnNmb3JtKF90ZW1wRGl2U3R5bGVyLCAxKTtcblxuICBmb3IgKHAgaW4gX3RyYW5zZm9ybVByb3BzKSB7XG4gICAgc3RhcnRWYWx1ZSA9IHN0YXJ0Q2FjaGVbcF07XG4gICAgZW5kVmFsdWUgPSBlbmRDYWNoZVtwXTtcblxuICAgIGlmIChzdGFydFZhbHVlICE9PSBlbmRWYWx1ZSAmJiBleGNsdWRlLmluZGV4T2YocCkgPCAwKSB7XG4gICAgICAvL3R3ZWVuaW5nIHRvIG5vIHBlcnNwZWN0aXZlIGdpdmVzIHZlcnkgdW5pbnR1aXRpdmUgcmVzdWx0cyAtIGp1c3Qga2VlcCB0aGUgc2FtZSBwZXJzcGVjdGl2ZSBpbiB0aGF0IGNhc2UuXG4gICAgICBzdGFydFVuaXQgPSBnZXRVbml0KHN0YXJ0VmFsdWUpO1xuICAgICAgZW5kVW5pdCA9IGdldFVuaXQoZW5kVmFsdWUpO1xuICAgICAgc3RhcnROdW0gPSBzdGFydFVuaXQgIT09IGVuZFVuaXQgPyBfY29udmVydFRvVW5pdCh0YXJnZXQsIHAsIHN0YXJ0VmFsdWUsIGVuZFVuaXQpIDogcGFyc2VGbG9hdChzdGFydFZhbHVlKTtcbiAgICAgIGVuZE51bSA9IHBhcnNlRmxvYXQoZW5kVmFsdWUpO1xuICAgICAgcGx1Z2luLl9wdCA9IG5ldyBQcm9wVHdlZW4ocGx1Z2luLl9wdCwgc3RhcnRDYWNoZSwgcCwgc3RhcnROdW0sIGVuZE51bSAtIHN0YXJ0TnVtLCBfcmVuZGVyQ1NTUHJvcCk7XG4gICAgICBwbHVnaW4uX3B0LnUgPSBlbmRVbml0IHx8IDA7XG5cbiAgICAgIHBsdWdpbi5fcHJvcHMucHVzaChwKTtcbiAgICB9XG4gIH1cblxuICBfZG9jLmJvZHkucmVtb3ZlQ2hpbGQoX3RlbXBEaXZTdHlsZXIpO1xufTsgLy8gaGFuZGxlIHNwbGl0dGluZyBhcGFydCBwYWRkaW5nLCBtYXJnaW4sIGJvcmRlcldpZHRoLCBhbmQgYm9yZGVyUmFkaXVzIGludG8gdGhlaXIgNCBjb21wb25lbnRzLiBGaXJlZm94LCBmb3IgZXhhbXBsZSwgd29uJ3QgcmVwb3J0IGJvcmRlclJhZGl1cyBjb3JyZWN0bHkgLSBpdCB3aWxsIG9ubHkgZG8gYm9yZGVyVG9wTGVmdFJhZGl1cyBhbmQgdGhlIG90aGVyIGNvcm5lcnMuIFdlIGFsc28gd2FudCB0byBoYW5kbGUgcGFkZGluZ1RvcCwgbWFyZ2luTGVmdCwgYm9yZGVyUmlnaHRXaWR0aCwgZXRjLlxuXG5cbl9mb3JFYWNoTmFtZShcInBhZGRpbmcsbWFyZ2luLFdpZHRoLFJhZGl1c1wiLCBmdW5jdGlvbiAobmFtZSwgaW5kZXgpIHtcbiAgdmFyIHQgPSBcIlRvcFwiLFxuICAgICAgciA9IFwiUmlnaHRcIixcbiAgICAgIGIgPSBcIkJvdHRvbVwiLFxuICAgICAgbCA9IFwiTGVmdFwiLFxuICAgICAgcHJvcHMgPSAoaW5kZXggPCAzID8gW3QsIHIsIGIsIGxdIDogW3QgKyBsLCB0ICsgciwgYiArIHIsIGIgKyBsXSkubWFwKGZ1bmN0aW9uIChzaWRlKSB7XG4gICAgcmV0dXJuIGluZGV4IDwgMiA/IG5hbWUgKyBzaWRlIDogXCJib3JkZXJcIiArIHNpZGUgKyBuYW1lO1xuICB9KTtcblxuICBfc3BlY2lhbFByb3BzW2luZGV4ID4gMSA/IFwiYm9yZGVyXCIgKyBuYW1lIDogbmFtZV0gPSBmdW5jdGlvbiAocGx1Z2luLCB0YXJnZXQsIHByb3BlcnR5LCBlbmRWYWx1ZSwgdHdlZW4pIHtcbiAgICB2YXIgYSwgdmFycztcblxuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoIDwgNCkge1xuICAgICAgLy8gZ2V0dGVyLCBwYXNzZWQgdGFyZ2V0LCBwcm9wZXJ0eSwgYW5kIHVuaXQgKGZyb20gX2dldCgpKVxuICAgICAgYSA9IHByb3BzLm1hcChmdW5jdGlvbiAocHJvcCkge1xuICAgICAgICByZXR1cm4gX2dldChwbHVnaW4sIHByb3AsIHByb3BlcnR5KTtcbiAgICAgIH0pO1xuICAgICAgdmFycyA9IGEuam9pbihcIiBcIik7XG4gICAgICByZXR1cm4gdmFycy5zcGxpdChhWzBdKS5sZW5ndGggPT09IDUgPyBhWzBdIDogdmFycztcbiAgICB9XG5cbiAgICBhID0gKGVuZFZhbHVlICsgXCJcIikuc3BsaXQoXCIgXCIpO1xuICAgIHZhcnMgPSB7fTtcbiAgICBwcm9wcy5mb3JFYWNoKGZ1bmN0aW9uIChwcm9wLCBpKSB7XG4gICAgICByZXR1cm4gdmFyc1twcm9wXSA9IGFbaV0gPSBhW2ldIHx8IGFbKGkgLSAxKSAvIDIgfCAwXTtcbiAgICB9KTtcbiAgICBwbHVnaW4uaW5pdCh0YXJnZXQsIHZhcnMsIHR3ZWVuKTtcbiAgfTtcbn0pO1xuXG5leHBvcnQgdmFyIENTU1BsdWdpbiA9IHtcbiAgbmFtZTogXCJjc3NcIixcbiAgcmVnaXN0ZXI6IF9pbml0Q29yZSxcbiAgdGFyZ2V0VGVzdDogZnVuY3Rpb24gdGFyZ2V0VGVzdCh0YXJnZXQpIHtcbiAgICByZXR1cm4gdGFyZ2V0LnN0eWxlICYmIHRhcmdldC5ub2RlVHlwZTtcbiAgfSxcbiAgaW5pdDogZnVuY3Rpb24gaW5pdCh0YXJnZXQsIHZhcnMsIHR3ZWVuLCBpbmRleCwgdGFyZ2V0cykge1xuICAgIHZhciBwcm9wcyA9IHRoaXMuX3Byb3BzLFxuICAgICAgICBzdHlsZSA9IHRhcmdldC5zdHlsZSxcbiAgICAgICAgc3RhcnRWYWx1ZSxcbiAgICAgICAgZW5kVmFsdWUsXG4gICAgICAgIGVuZE51bSxcbiAgICAgICAgc3RhcnROdW0sXG4gICAgICAgIHR5cGUsXG4gICAgICAgIHNwZWNpYWxQcm9wLFxuICAgICAgICBwLFxuICAgICAgICBzdGFydFVuaXQsXG4gICAgICAgIGVuZFVuaXQsXG4gICAgICAgIHJlbGF0aXZlLFxuICAgICAgICBpc1RyYW5zZm9ybVJlbGF0ZWQsXG4gICAgICAgIHRyYW5zZm9ybVByb3BUd2VlbixcbiAgICAgICAgY2FjaGUsXG4gICAgICAgIHNtb290aCxcbiAgICAgICAgaGFzUHJpb3JpdHk7XG4gICAgX3BsdWdpbkluaXR0ZWQgfHwgX2luaXRDb3JlKCk7XG5cbiAgICBmb3IgKHAgaW4gdmFycykge1xuICAgICAgaWYgKHAgPT09IFwiYXV0b1JvdW5kXCIpIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG5cbiAgICAgIGVuZFZhbHVlID0gdmFyc1twXTtcblxuICAgICAgaWYgKF9wbHVnaW5zW3BdICYmIF9jaGVja1BsdWdpbihwLCB2YXJzLCB0d2VlbiwgaW5kZXgsIHRhcmdldCwgdGFyZ2V0cykpIHtcbiAgICAgICAgLy9wbHVnaW5zXG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuXG4gICAgICB0eXBlID0gdHlwZW9mIGVuZFZhbHVlO1xuICAgICAgc3BlY2lhbFByb3AgPSBfc3BlY2lhbFByb3BzW3BdO1xuXG4gICAgICBpZiAodHlwZSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgIGVuZFZhbHVlID0gZW5kVmFsdWUuY2FsbCh0d2VlbiwgaW5kZXgsIHRhcmdldCwgdGFyZ2V0cyk7XG4gICAgICAgIHR5cGUgPSB0eXBlb2YgZW5kVmFsdWU7XG4gICAgICB9XG5cbiAgICAgIGlmICh0eXBlID09PSBcInN0cmluZ1wiICYmIH5lbmRWYWx1ZS5pbmRleE9mKFwicmFuZG9tKFwiKSkge1xuICAgICAgICBlbmRWYWx1ZSA9IF9yZXBsYWNlUmFuZG9tKGVuZFZhbHVlKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHNwZWNpYWxQcm9wKSB7XG4gICAgICAgIGlmIChzcGVjaWFsUHJvcCh0aGlzLCB0YXJnZXQsIHAsIGVuZFZhbHVlLCB0d2VlbikpIHtcbiAgICAgICAgICBoYXNQcmlvcml0eSA9IDE7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAocC5zdWJzdHIoMCwgMikgPT09IFwiLS1cIikge1xuICAgICAgICAvL0NTUyB2YXJpYWJsZVxuICAgICAgICB0aGlzLmFkZChzdHlsZSwgXCJzZXRQcm9wZXJ0eVwiLCBnZXRDb21wdXRlZFN0eWxlKHRhcmdldCkuZ2V0UHJvcGVydHlWYWx1ZShwKSArIFwiXCIsIGVuZFZhbHVlICsgXCJcIiwgaW5kZXgsIHRhcmdldHMsIDAsIDAsIHApO1xuICAgICAgfSBlbHNlIGlmICh0eXBlICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgIHN0YXJ0VmFsdWUgPSBfZ2V0KHRhcmdldCwgcCk7XG4gICAgICAgIHN0YXJ0TnVtID0gcGFyc2VGbG9hdChzdGFydFZhbHVlKTtcbiAgICAgICAgcmVsYXRpdmUgPSB0eXBlID09PSBcInN0cmluZ1wiICYmIGVuZFZhbHVlLmNoYXJBdCgxKSA9PT0gXCI9XCIgPyArKGVuZFZhbHVlLmNoYXJBdCgwKSArIFwiMVwiKSA6IDA7XG5cbiAgICAgICAgaWYgKHJlbGF0aXZlKSB7XG4gICAgICAgICAgZW5kVmFsdWUgPSBlbmRWYWx1ZS5zdWJzdHIoMik7XG4gICAgICAgIH1cblxuICAgICAgICBlbmROdW0gPSBwYXJzZUZsb2F0KGVuZFZhbHVlKTtcblxuICAgICAgICBpZiAocCBpbiBfcHJvcGVydHlBbGlhc2VzKSB7XG4gICAgICAgICAgaWYgKHAgPT09IFwiYXV0b0FscGhhXCIpIHtcbiAgICAgICAgICAgIC8vc3BlY2lhbCBjYXNlIHdoZXJlIHdlIGNvbnRyb2wgdGhlIHZpc2liaWxpdHkgYWxvbmcgd2l0aCBvcGFjaXR5LiBXZSBzdGlsbCBhbGxvdyB0aGUgb3BhY2l0eSB2YWx1ZSB0byBwYXNzIHRocm91Z2ggYW5kIGdldCB0d2VlbmVkLlxuICAgICAgICAgICAgaWYgKHN0YXJ0TnVtID09PSAxICYmIF9nZXQodGFyZ2V0LCBcInZpc2liaWxpdHlcIikgPT09IFwiaGlkZGVuXCIgJiYgZW5kTnVtKSB7XG4gICAgICAgICAgICAgIC8vaWYgdmlzaWJpbGl0eSBpcyBpbml0aWFsbHkgc2V0IHRvIFwiaGlkZGVuXCIsIHdlIHNob3VsZCBpbnRlcnByZXQgdGhhdCBhcyBpbnRlbnQgdG8gbWFrZSBvcGFjaXR5IDAgKGEgY29udmVuaWVuY2UpXG4gICAgICAgICAgICAgIHN0YXJ0TnVtID0gMDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgX2FkZE5vblR3ZWVuaW5nUFQodGhpcywgc3R5bGUsIFwidmlzaWJpbGl0eVwiLCBzdGFydE51bSA/IFwiaW5oZXJpdFwiIDogXCJoaWRkZW5cIiwgZW5kTnVtID8gXCJpbmhlcml0XCIgOiBcImhpZGRlblwiLCAhZW5kTnVtKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAocCAhPT0gXCJzY2FsZVwiICYmIHAgIT09IFwidHJhbnNmb3JtXCIpIHtcbiAgICAgICAgICAgIHAgPSBfcHJvcGVydHlBbGlhc2VzW3BdO1xuICAgICAgICAgICAgfnAuaW5kZXhPZihcIixcIikgJiYgKHAgPSBwLnNwbGl0KFwiLFwiKVswXSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaXNUcmFuc2Zvcm1SZWxhdGVkID0gcCBpbiBfdHJhbnNmb3JtUHJvcHM7IC8vLS0tIFRSQU5TRk9STS1SRUxBVEVEIC0tLVxuXG4gICAgICAgIGlmIChpc1RyYW5zZm9ybVJlbGF0ZWQpIHtcbiAgICAgICAgICBpZiAoIXRyYW5zZm9ybVByb3BUd2Vlbikge1xuICAgICAgICAgICAgY2FjaGUgPSB0YXJnZXQuX2dzYXA7XG4gICAgICAgICAgICBjYWNoZS5yZW5kZXJUcmFuc2Zvcm0gfHwgX3BhcnNlVHJhbnNmb3JtKHRhcmdldCk7IC8vIGlmLCBmb3IgZXhhbXBsZSwgZ3NhcC5zZXQoLi4uIHt0cmFuc2Zvcm06XCJ0cmFuc2xhdGVYKDUwdncpXCJ9KSwgdGhlIF9nZXQoKSBjYWxsIGRvZXNuJ3QgcGFyc2UgdGhlIHRyYW5zZm9ybSwgdGh1cyBjYWNoZS5yZW5kZXJUcmFuc2Zvcm0gd29uJ3QgYmUgc2V0IHlldCBzbyBmb3JjZSB0aGUgcGFyc2luZyBvZiB0aGUgdHJhbnNmb3JtIGhlcmUuXG5cbiAgICAgICAgICAgIHNtb290aCA9IHZhcnMuc21vb3RoT3JpZ2luICE9PSBmYWxzZSAmJiBjYWNoZS5zbW9vdGg7XG4gICAgICAgICAgICB0cmFuc2Zvcm1Qcm9wVHdlZW4gPSB0aGlzLl9wdCA9IG5ldyBQcm9wVHdlZW4odGhpcy5fcHQsIHN0eWxlLCBfdHJhbnNmb3JtUHJvcCwgMCwgMSwgY2FjaGUucmVuZGVyVHJhbnNmb3JtLCBjYWNoZSwgMCwgLTEpOyAvL3RoZSBmaXJzdCB0aW1lIHRocm91Z2gsIGNyZWF0ZSB0aGUgcmVuZGVyaW5nIFByb3BUd2VlbiBzbyB0aGF0IGl0IHJ1bnMgTEFTVCAoaW4gdGhlIGxpbmtlZCBsaXN0LCB3ZSBrZWVwIGFkZGluZyB0byB0aGUgYmVnaW5uaW5nKVxuXG4gICAgICAgICAgICB0cmFuc2Zvcm1Qcm9wVHdlZW4uZGVwID0gMTsgLy9mbGFnIGl0IGFzIGRlcGVuZGVudCBzbyB0aGF0IGlmIHRoaW5ncyBnZXQga2lsbGVkL292ZXJ3cml0dGVuIGFuZCB0aGlzIGlzIHRoZSBvbmx5IFByb3BUd2VlbiBsZWZ0LCB3ZSBjYW4gc2FmZWx5IGtpbGwgdGhlIHdob2xlIHR3ZWVuLlxuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChwID09PSBcInNjYWxlXCIpIHtcbiAgICAgICAgICAgIHRoaXMuX3B0ID0gbmV3IFByb3BUd2Vlbih0aGlzLl9wdCwgY2FjaGUsIFwic2NhbGVZXCIsIGNhY2hlLnNjYWxlWSwgcmVsYXRpdmUgPyByZWxhdGl2ZSAqIGVuZE51bSA6IGVuZE51bSAtIGNhY2hlLnNjYWxlWSk7XG4gICAgICAgICAgICBwcm9wcy5wdXNoKFwic2NhbGVZXCIsIHApO1xuICAgICAgICAgICAgcCArPSBcIlhcIjtcbiAgICAgICAgICB9IGVsc2UgaWYgKHAgPT09IFwidHJhbnNmb3JtT3JpZ2luXCIpIHtcbiAgICAgICAgICAgIGVuZFZhbHVlID0gX2NvbnZlcnRLZXl3b3Jkc1RvUGVyY2VudGFnZXMoZW5kVmFsdWUpOyAvL2luIGNhc2Ugc29tZXRoaW5nIGxpa2UgXCJsZWZ0IHRvcFwiIG9yIFwiYm90dG9tIHJpZ2h0XCIgaXMgcGFzc2VkIGluLiBDb252ZXJ0IHRvIHBlcmNlbnRhZ2VzLlxuXG4gICAgICAgICAgICBpZiAoY2FjaGUuc3ZnKSB7XG4gICAgICAgICAgICAgIF9hcHBseVNWR09yaWdpbih0YXJnZXQsIGVuZFZhbHVlLCAwLCBzbW9vdGgsIDAsIHRoaXMpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgZW5kVW5pdCA9IHBhcnNlRmxvYXQoZW5kVmFsdWUuc3BsaXQoXCIgXCIpWzJdKSB8fCAwOyAvL2hhbmRsZSB0aGUgek9yaWdpbiBzZXBhcmF0ZWx5IVxuXG4gICAgICAgICAgICAgIGVuZFVuaXQgIT09IGNhY2hlLnpPcmlnaW4gJiYgX2FkZE5vblR3ZWVuaW5nUFQodGhpcywgY2FjaGUsIFwiek9yaWdpblwiLCBjYWNoZS56T3JpZ2luLCBlbmRVbml0KTtcblxuICAgICAgICAgICAgICBfYWRkTm9uVHdlZW5pbmdQVCh0aGlzLCBzdHlsZSwgcCwgX2ZpcnN0VHdvT25seShzdGFydFZhbHVlKSwgX2ZpcnN0VHdvT25seShlbmRWYWx1ZSkpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICB9IGVsc2UgaWYgKHAgPT09IFwic3ZnT3JpZ2luXCIpIHtcbiAgICAgICAgICAgIF9hcHBseVNWR09yaWdpbih0YXJnZXQsIGVuZFZhbHVlLCAxLCBzbW9vdGgsIDAsIHRoaXMpO1xuXG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICB9IGVsc2UgaWYgKHAgaW4gX3JvdGF0aW9uYWxQcm9wZXJ0aWVzKSB7XG4gICAgICAgICAgICBfYWRkUm90YXRpb25hbFByb3BUd2Vlbih0aGlzLCBjYWNoZSwgcCwgc3RhcnROdW0sIGVuZFZhbHVlLCByZWxhdGl2ZSk7XG5cbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgIH0gZWxzZSBpZiAocCA9PT0gXCJzbW9vdGhPcmlnaW5cIikge1xuICAgICAgICAgICAgX2FkZE5vblR3ZWVuaW5nUFQodGhpcywgY2FjaGUsIFwic21vb3RoXCIsIGNhY2hlLnNtb290aCwgZW5kVmFsdWUpO1xuXG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICB9IGVsc2UgaWYgKHAgPT09IFwiZm9yY2UzRFwiKSB7XG4gICAgICAgICAgICBjYWNoZVtwXSA9IGVuZFZhbHVlO1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgfSBlbHNlIGlmIChwID09PSBcInRyYW5zZm9ybVwiKSB7XG4gICAgICAgICAgICBfYWRkUmF3VHJhbnNmb3JtUFRzKHRoaXMsIGVuZFZhbHVlLCB0YXJnZXQpO1xuXG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAoIShwIGluIHN0eWxlKSkge1xuICAgICAgICAgIHAgPSBfY2hlY2tQcm9wUHJlZml4KHApIHx8IHA7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoaXNUcmFuc2Zvcm1SZWxhdGVkIHx8IChlbmROdW0gfHwgZW5kTnVtID09PSAwKSAmJiAoc3RhcnROdW0gfHwgc3RhcnROdW0gPT09IDApICYmICFfY29tcGxleEV4cC50ZXN0KGVuZFZhbHVlKSAmJiBwIGluIHN0eWxlKSB7XG4gICAgICAgICAgc3RhcnRVbml0ID0gKHN0YXJ0VmFsdWUgKyBcIlwiKS5zdWJzdHIoKHN0YXJ0TnVtICsgXCJcIikubGVuZ3RoKTtcbiAgICAgICAgICBlbmROdW0gfHwgKGVuZE51bSA9IDApOyAvLyBwcm90ZWN0IGFnYWluc3QgTmFOXG5cbiAgICAgICAgICBlbmRVbml0ID0gZ2V0VW5pdChlbmRWYWx1ZSkgfHwgKHAgaW4gX2NvbmZpZy51bml0cyA/IF9jb25maWcudW5pdHNbcF0gOiBzdGFydFVuaXQpO1xuICAgICAgICAgIHN0YXJ0VW5pdCAhPT0gZW5kVW5pdCAmJiAoc3RhcnROdW0gPSBfY29udmVydFRvVW5pdCh0YXJnZXQsIHAsIHN0YXJ0VmFsdWUsIGVuZFVuaXQpKTtcbiAgICAgICAgICB0aGlzLl9wdCA9IG5ldyBQcm9wVHdlZW4odGhpcy5fcHQsIGlzVHJhbnNmb3JtUmVsYXRlZCA/IGNhY2hlIDogc3R5bGUsIHAsIHN0YXJ0TnVtLCByZWxhdGl2ZSA/IHJlbGF0aXZlICogZW5kTnVtIDogZW5kTnVtIC0gc3RhcnROdW0sIGVuZFVuaXQgPT09IFwicHhcIiAmJiB2YXJzLmF1dG9Sb3VuZCAhPT0gZmFsc2UgJiYgIWlzVHJhbnNmb3JtUmVsYXRlZCA/IF9yZW5kZXJSb3VuZGVkQ1NTUHJvcCA6IF9yZW5kZXJDU1NQcm9wKTtcbiAgICAgICAgICB0aGlzLl9wdC51ID0gZW5kVW5pdCB8fCAwO1xuXG4gICAgICAgICAgaWYgKHN0YXJ0VW5pdCAhPT0gZW5kVW5pdCkge1xuICAgICAgICAgICAgLy93aGVuIHRoZSB0d2VlbiBnb2VzIGFsbCB0aGUgd2F5IGJhY2sgdG8gdGhlIGJlZ2lubmluZywgd2UgbmVlZCB0byByZXZlcnQgaXQgdG8gdGhlIE9MRC9PUklHSU5BTCB2YWx1ZSAod2l0aCB0aG9zZSB1bml0cykuIFdlIHJlY29yZCB0aGF0IGFzIGEgXCJiXCIgKGJlZ2lubmluZykgcHJvcGVydHkgYW5kIHBvaW50IHRvIGEgcmVuZGVyIG1ldGhvZCB0aGF0IGhhbmRsZXMgdGhhdC4gKHBlcmZvcm1hbmNlIG9wdGltaXphdGlvbilcbiAgICAgICAgICAgIHRoaXMuX3B0LmIgPSBzdGFydFZhbHVlO1xuICAgICAgICAgICAgdGhpcy5fcHQuciA9IF9yZW5kZXJDU1NQcm9wV2l0aEJlZ2lubmluZztcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAoIShwIGluIHN0eWxlKSkge1xuICAgICAgICAgIGlmIChwIGluIHRhcmdldCkge1xuICAgICAgICAgICAgLy9tYXliZSBpdCdzIG5vdCBhIHN0eWxlIC0gaXQgY291bGQgYmUgYSBwcm9wZXJ0eSBhZGRlZCBkaXJlY3RseSB0byBhbiBlbGVtZW50IGluIHdoaWNoIGNhc2Ugd2UnbGwgdHJ5IHRvIGFuaW1hdGUgdGhhdC5cbiAgICAgICAgICAgIHRoaXMuYWRkKHRhcmdldCwgcCwgdGFyZ2V0W3BdLCBlbmRWYWx1ZSwgaW5kZXgsIHRhcmdldHMpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBfbWlzc2luZ1BsdWdpbihwLCBlbmRWYWx1ZSk7XG5cbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBfdHdlZW5Db21wbGV4Q1NTU3RyaW5nLmNhbGwodGhpcywgdGFyZ2V0LCBwLCBzdGFydFZhbHVlLCBlbmRWYWx1ZSk7XG4gICAgICAgIH1cblxuICAgICAgICBwcm9wcy5wdXNoKHApO1xuICAgICAgfVxuICAgIH1cblxuICAgIGhhc1ByaW9yaXR5ICYmIF9zb3J0UHJvcFR3ZWVuc0J5UHJpb3JpdHkodGhpcyk7XG4gIH0sXG4gIGdldDogX2dldCxcbiAgYWxpYXNlczogX3Byb3BlcnR5QWxpYXNlcyxcbiAgZ2V0U2V0dGVyOiBmdW5jdGlvbiBnZXRTZXR0ZXIodGFyZ2V0LCBwcm9wZXJ0eSwgcGx1Z2luKSB7XG4gICAgLy9yZXR1cm5zIGEgc2V0dGVyIGZ1bmN0aW9uIHRoYXQgYWNjZXB0cyB0YXJnZXQsIHByb3BlcnR5LCB2YWx1ZSBhbmQgYXBwbGllcyBpdCBhY2NvcmRpbmdseS4gUmVtZW1iZXIsIHByb3BlcnRpZXMgbGlrZSBcInhcIiBhcmVuJ3QgYXMgc2ltcGxlIGFzIHRhcmdldC5zdHlsZS5wcm9wZXJ0eSA9IHZhbHVlIGJlY2F1c2UgdGhleSd2ZSBnb3QgdG8gYmUgYXBwbGllZCB0byBhIHByb3h5IG9iamVjdCBhbmQgdGhlbiBtZXJnZWQgaW50byBhIHRyYW5zZm9ybSBzdHJpbmcgaW4gYSByZW5kZXJlci5cbiAgICB2YXIgcCA9IF9wcm9wZXJ0eUFsaWFzZXNbcHJvcGVydHldO1xuICAgIHAgJiYgcC5pbmRleE9mKFwiLFwiKSA8IDAgJiYgKHByb3BlcnR5ID0gcCk7XG4gICAgcmV0dXJuIHByb3BlcnR5IGluIF90cmFuc2Zvcm1Qcm9wcyAmJiBwcm9wZXJ0eSAhPT0gX3RyYW5zZm9ybU9yaWdpblByb3AgJiYgKHRhcmdldC5fZ3NhcC54IHx8IF9nZXQodGFyZ2V0LCBcInhcIikpID8gcGx1Z2luICYmIF9yZWNlbnRTZXR0ZXJQbHVnaW4gPT09IHBsdWdpbiA/IHByb3BlcnR5ID09PSBcInNjYWxlXCIgPyBfc2V0dGVyU2NhbGUgOiBfc2V0dGVyVHJhbnNmb3JtIDogKF9yZWNlbnRTZXR0ZXJQbHVnaW4gPSBwbHVnaW4gfHwge30pICYmIChwcm9wZXJ0eSA9PT0gXCJzY2FsZVwiID8gX3NldHRlclNjYWxlV2l0aFJlbmRlciA6IF9zZXR0ZXJUcmFuc2Zvcm1XaXRoUmVuZGVyKSA6IHRhcmdldC5zdHlsZSAmJiAhX2lzVW5kZWZpbmVkKHRhcmdldC5zdHlsZVtwcm9wZXJ0eV0pID8gX3NldHRlckNTU1N0eWxlIDogfnByb3BlcnR5LmluZGV4T2YoXCItXCIpID8gX3NldHRlckNTU1Byb3AgOiBfZ2V0U2V0dGVyKHRhcmdldCwgcHJvcGVydHkpO1xuICB9LFxuICBjb3JlOiB7XG4gICAgX3JlbW92ZVByb3BlcnR5OiBfcmVtb3ZlUHJvcGVydHksXG4gICAgX2dldE1hdHJpeDogX2dldE1hdHJpeFxuICB9XG59O1xuZ3NhcC51dGlscy5jaGVja1ByZWZpeCA9IF9jaGVja1Byb3BQcmVmaXg7XG5cbihmdW5jdGlvbiAocG9zaXRpb25BbmRTY2FsZSwgcm90YXRpb24sIG90aGVycywgYWxpYXNlcykge1xuICB2YXIgYWxsID0gX2ZvckVhY2hOYW1lKHBvc2l0aW9uQW5kU2NhbGUgKyBcIixcIiArIHJvdGF0aW9uICsgXCIsXCIgKyBvdGhlcnMsIGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgX3RyYW5zZm9ybVByb3BzW25hbWVdID0gMTtcbiAgfSk7XG5cbiAgX2ZvckVhY2hOYW1lKHJvdGF0aW9uLCBmdW5jdGlvbiAobmFtZSkge1xuICAgIF9jb25maWcudW5pdHNbbmFtZV0gPSBcImRlZ1wiO1xuICAgIF9yb3RhdGlvbmFsUHJvcGVydGllc1tuYW1lXSA9IDE7XG4gIH0pO1xuXG4gIF9wcm9wZXJ0eUFsaWFzZXNbYWxsWzEzXV0gPSBwb3NpdGlvbkFuZFNjYWxlICsgXCIsXCIgKyByb3RhdGlvbjtcblxuICBfZm9yRWFjaE5hbWUoYWxpYXNlcywgZnVuY3Rpb24gKG5hbWUpIHtcbiAgICB2YXIgc3BsaXQgPSBuYW1lLnNwbGl0KFwiOlwiKTtcbiAgICBfcHJvcGVydHlBbGlhc2VzW3NwbGl0WzFdXSA9IGFsbFtzcGxpdFswXV07XG4gIH0pO1xufSkoXCJ4LHkseixzY2FsZSxzY2FsZVgsc2NhbGVZLHhQZXJjZW50LHlQZXJjZW50XCIsIFwicm90YXRpb24scm90YXRpb25YLHJvdGF0aW9uWSxza2V3WCxza2V3WVwiLCBcInRyYW5zZm9ybSx0cmFuc2Zvcm1PcmlnaW4sc3ZnT3JpZ2luLGZvcmNlM0Qsc21vb3RoT3JpZ2luLHRyYW5zZm9ybVBlcnNwZWN0aXZlXCIsIFwiMDp0cmFuc2xhdGVYLDE6dHJhbnNsYXRlWSwyOnRyYW5zbGF0ZVosODpyb3RhdGUsODpyb3RhdGlvblosODpyb3RhdGVaLDk6cm90YXRlWCwxMDpyb3RhdGVZXCIpO1xuXG5fZm9yRWFjaE5hbWUoXCJ4LHkseix0b3AscmlnaHQsYm90dG9tLGxlZnQsd2lkdGgsaGVpZ2h0LGZvbnRTaXplLHBhZGRpbmcsbWFyZ2luLHBlcnNwZWN0aXZlXCIsIGZ1bmN0aW9uIChuYW1lKSB7XG4gIF9jb25maWcudW5pdHNbbmFtZV0gPSBcInB4XCI7XG59KTtcblxuZ3NhcC5yZWdpc3RlclBsdWdpbihDU1NQbHVnaW4pO1xuZXhwb3J0IHsgQ1NTUGx1Z2luIGFzIGRlZmF1bHQsIF9nZXRCQm94LCBfY3JlYXRlRWxlbWVudCwgX2NoZWNrUHJvcFByZWZpeCBhcyBjaGVja1ByZWZpeCB9OyIsImZ1bmN0aW9uIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZikgeyBpZiAoc2VsZiA9PT0gdm9pZCAwKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gc2VsZjsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHNMb29zZShzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MucHJvdG90eXBlKTsgc3ViQ2xhc3MucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gc3ViQ2xhc3M7IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblxuLyohXG4gKiBHU0FQIDMuNS4xXG4gKiBodHRwczovL2dyZWVuc29jay5jb21cbiAqXG4gKiBAbGljZW5zZSBDb3B5cmlnaHQgMjAwOC0yMDIwLCBHcmVlblNvY2suIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiBTdWJqZWN0IHRvIHRoZSB0ZXJtcyBhdCBodHRwczovL2dyZWVuc29jay5jb20vc3RhbmRhcmQtbGljZW5zZSBvciBmb3JcbiAqIENsdWIgR3JlZW5Tb2NrIG1lbWJlcnMsIHRoZSBhZ3JlZW1lbnQgaXNzdWVkIHdpdGggdGhhdCBtZW1iZXJzaGlwLlxuICogQGF1dGhvcjogSmFjayBEb3lsZSwgamFja0BncmVlbnNvY2suY29tXG4qL1xuXG4vKiBlc2xpbnQtZGlzYWJsZSAqL1xudmFyIF9jb25maWcgPSB7XG4gIGF1dG9TbGVlcDogMTIwLFxuICBmb3JjZTNEOiBcImF1dG9cIixcbiAgbnVsbFRhcmdldFdhcm46IDEsXG4gIHVuaXRzOiB7XG4gICAgbGluZUhlaWdodDogXCJcIlxuICB9XG59LFxuICAgIF9kZWZhdWx0cyA9IHtcbiAgZHVyYXRpb246IC41LFxuICBvdmVyd3JpdGU6IGZhbHNlLFxuICBkZWxheTogMFxufSxcbiAgICBfYmlnTnVtID0gMWU4LFxuICAgIF90aW55TnVtID0gMSAvIF9iaWdOdW0sXG4gICAgXzJQSSA9IE1hdGguUEkgKiAyLFxuICAgIF9IQUxGX1BJID0gXzJQSSAvIDQsXG4gICAgX2dzSUQgPSAwLFxuICAgIF9zcXJ0ID0gTWF0aC5zcXJ0LFxuICAgIF9jb3MgPSBNYXRoLmNvcyxcbiAgICBfc2luID0gTWF0aC5zaW4sXG4gICAgX2lzU3RyaW5nID0gZnVuY3Rpb24gX2lzU3RyaW5nKHZhbHVlKSB7XG4gIHJldHVybiB0eXBlb2YgdmFsdWUgPT09IFwic3RyaW5nXCI7XG59LFxuICAgIF9pc0Z1bmN0aW9uID0gZnVuY3Rpb24gX2lzRnVuY3Rpb24odmFsdWUpIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gXCJmdW5jdGlvblwiO1xufSxcbiAgICBfaXNOdW1iZXIgPSBmdW5jdGlvbiBfaXNOdW1iZXIodmFsdWUpIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gXCJudW1iZXJcIjtcbn0sXG4gICAgX2lzVW5kZWZpbmVkID0gZnVuY3Rpb24gX2lzVW5kZWZpbmVkKHZhbHVlKSB7XG4gIHJldHVybiB0eXBlb2YgdmFsdWUgPT09IFwidW5kZWZpbmVkXCI7XG59LFxuICAgIF9pc09iamVjdCA9IGZ1bmN0aW9uIF9pc09iamVjdCh2YWx1ZSkge1xuICByZXR1cm4gdHlwZW9mIHZhbHVlID09PSBcIm9iamVjdFwiO1xufSxcbiAgICBfaXNOb3RGYWxzZSA9IGZ1bmN0aW9uIF9pc05vdEZhbHNlKHZhbHVlKSB7XG4gIHJldHVybiB2YWx1ZSAhPT0gZmFsc2U7XG59LFxuICAgIF93aW5kb3dFeGlzdHMgPSBmdW5jdGlvbiBfd2luZG93RXhpc3RzKCkge1xuICByZXR1cm4gdHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIjtcbn0sXG4gICAgX2lzRnVuY09yU3RyaW5nID0gZnVuY3Rpb24gX2lzRnVuY09yU3RyaW5nKHZhbHVlKSB7XG4gIHJldHVybiBfaXNGdW5jdGlvbih2YWx1ZSkgfHwgX2lzU3RyaW5nKHZhbHVlKTtcbn0sXG4gICAgX2lzVHlwZWRBcnJheSA9IHR5cGVvZiBBcnJheUJ1ZmZlciA9PT0gXCJmdW5jdGlvblwiICYmIEFycmF5QnVmZmVyLmlzVmlldyB8fCBmdW5jdGlvbiAoKSB7fSxcbiAgICAvLyBub3RlOiBJRTEwIGhhcyBBcnJheUJ1ZmZlciwgYnV0IE5PVCBBcnJheUJ1ZmZlci5pc1ZpZXcoKS5cbl9pc0FycmF5ID0gQXJyYXkuaXNBcnJheSxcbiAgICBfc3RyaWN0TnVtRXhwID0gLyg/Oi0/XFwuP1xcZHxcXC4pKy9naSxcbiAgICAvL29ubHkgbnVtYmVycyAoaW5jbHVkaW5nIG5lZ2F0aXZlcyBhbmQgZGVjaW1hbHMpIGJ1dCBOT1QgcmVsYXRpdmUgdmFsdWVzLlxuX251bUV4cCA9IC9bLSs9Ll0qXFxkK1suZVxcLStdKlxcZCpbZVxcLVxcK10qXFxkKi9nLFxuICAgIC8vZmluZHMgYW55IG51bWJlcnMsIGluY2x1ZGluZyBvbmVzIHRoYXQgc3RhcnQgd2l0aCArPSBvciAtPSwgbmVnYXRpdmUgbnVtYmVycywgYW5kIG9uZXMgaW4gc2NpZW50aWZpYyBub3RhdGlvbiBsaWtlIDFlLTguXG5fbnVtV2l0aFVuaXRFeHAgPSAvWy0rPS5dKlxcZCtbLmUtXSpcXGQqW2EteiVdKi9nLFxuICAgIF9jb21wbGV4U3RyaW5nTnVtRXhwID0gL1stKz0uXSpcXGQrKD86XFwufGUtfGUpKlxcZCovZ2ksXG4gICAgLy9kdXBsaWNhdGUgc28gdGhhdCB3aGlsZSB3ZSdyZSBsb29waW5nIHRocm91Z2ggbWF0Y2hlcyBmcm9tIGV4ZWMoKSwgaXQgZG9lc24ndCBjb250YW1pbmF0ZSB0aGUgbGFzdEluZGV4IG9mIF9udW1FeHAgd2hpY2ggd2UgdXNlIHRvIHNlYXJjaCBmb3IgY29sb3JzIHRvby5cbl9yZWxFeHAgPSAvWystXT0tP1tcXC5cXGRdKy8sXG4gICAgX2RlbGltaXRlZFZhbHVlRXhwID0gL1sjXFwtKy5dKlxcYlthLXpcXGQtPSslLl0rL2dpLFxuICAgIF9nbG9iYWxUaW1lbGluZSxcbiAgICBfd2luLFxuICAgIF9jb3JlSW5pdHRlZCxcbiAgICBfZG9jLFxuICAgIF9nbG9iYWxzID0ge30sXG4gICAgX2luc3RhbGxTY29wZSA9IHt9LFxuICAgIF9jb3JlUmVhZHksXG4gICAgX2luc3RhbGwgPSBmdW5jdGlvbiBfaW5zdGFsbChzY29wZSkge1xuICByZXR1cm4gKF9pbnN0YWxsU2NvcGUgPSBfbWVyZ2Uoc2NvcGUsIF9nbG9iYWxzKSkgJiYgZ3NhcDtcbn0sXG4gICAgX21pc3NpbmdQbHVnaW4gPSBmdW5jdGlvbiBfbWlzc2luZ1BsdWdpbihwcm9wZXJ0eSwgdmFsdWUpIHtcbiAgcmV0dXJuIGNvbnNvbGUud2FybihcIkludmFsaWQgcHJvcGVydHlcIiwgcHJvcGVydHksIFwic2V0IHRvXCIsIHZhbHVlLCBcIk1pc3NpbmcgcGx1Z2luPyBnc2FwLnJlZ2lzdGVyUGx1Z2luKClcIik7XG59LFxuICAgIF93YXJuID0gZnVuY3Rpb24gX3dhcm4obWVzc2FnZSwgc3VwcHJlc3MpIHtcbiAgcmV0dXJuICFzdXBwcmVzcyAmJiBjb25zb2xlLndhcm4obWVzc2FnZSk7XG59LFxuICAgIF9hZGRHbG9iYWwgPSBmdW5jdGlvbiBfYWRkR2xvYmFsKG5hbWUsIG9iaikge1xuICByZXR1cm4gbmFtZSAmJiAoX2dsb2JhbHNbbmFtZV0gPSBvYmopICYmIF9pbnN0YWxsU2NvcGUgJiYgKF9pbnN0YWxsU2NvcGVbbmFtZV0gPSBvYmopIHx8IF9nbG9iYWxzO1xufSxcbiAgICBfZW1wdHlGdW5jID0gZnVuY3Rpb24gX2VtcHR5RnVuYygpIHtcbiAgcmV0dXJuIDA7XG59LFxuICAgIF9yZXNlcnZlZFByb3BzID0ge30sXG4gICAgX2xhenlUd2VlbnMgPSBbXSxcbiAgICBfbGF6eUxvb2t1cCA9IHt9LFxuICAgIF9sYXN0UmVuZGVyZWRGcmFtZSxcbiAgICBfcGx1Z2lucyA9IHt9LFxuICAgIF9lZmZlY3RzID0ge30sXG4gICAgX25leHRHQ0ZyYW1lID0gMzAsXG4gICAgX2hhcm5lc3NQbHVnaW5zID0gW10sXG4gICAgX2NhbGxiYWNrTmFtZXMgPSBcIlwiLFxuICAgIF9oYXJuZXNzID0gZnVuY3Rpb24gX2hhcm5lc3ModGFyZ2V0cykge1xuICB2YXIgdGFyZ2V0ID0gdGFyZ2V0c1swXSxcbiAgICAgIGhhcm5lc3NQbHVnaW4sXG4gICAgICBpO1xuICBfaXNPYmplY3QodGFyZ2V0KSB8fCBfaXNGdW5jdGlvbih0YXJnZXQpIHx8ICh0YXJnZXRzID0gW3RhcmdldHNdKTtcblxuICBpZiAoIShoYXJuZXNzUGx1Z2luID0gKHRhcmdldC5fZ3NhcCB8fCB7fSkuaGFybmVzcykpIHtcbiAgICBpID0gX2hhcm5lc3NQbHVnaW5zLmxlbmd0aDtcblxuICAgIHdoaWxlIChpLS0gJiYgIV9oYXJuZXNzUGx1Z2luc1tpXS50YXJnZXRUZXN0KHRhcmdldCkpIHt9XG5cbiAgICBoYXJuZXNzUGx1Z2luID0gX2hhcm5lc3NQbHVnaW5zW2ldO1xuICB9XG5cbiAgaSA9IHRhcmdldHMubGVuZ3RoO1xuXG4gIHdoaWxlIChpLS0pIHtcbiAgICB0YXJnZXRzW2ldICYmICh0YXJnZXRzW2ldLl9nc2FwIHx8ICh0YXJnZXRzW2ldLl9nc2FwID0gbmV3IEdTQ2FjaGUodGFyZ2V0c1tpXSwgaGFybmVzc1BsdWdpbikpKSB8fCB0YXJnZXRzLnNwbGljZShpLCAxKTtcbiAgfVxuXG4gIHJldHVybiB0YXJnZXRzO1xufSxcbiAgICBfZ2V0Q2FjaGUgPSBmdW5jdGlvbiBfZ2V0Q2FjaGUodGFyZ2V0KSB7XG4gIHJldHVybiB0YXJnZXQuX2dzYXAgfHwgX2hhcm5lc3ModG9BcnJheSh0YXJnZXQpKVswXS5fZ3NhcDtcbn0sXG4gICAgX2dldFByb3BlcnR5ID0gZnVuY3Rpb24gX2dldFByb3BlcnR5KHRhcmdldCwgcHJvcGVydHksIHYpIHtcbiAgcmV0dXJuICh2ID0gdGFyZ2V0W3Byb3BlcnR5XSkgJiYgX2lzRnVuY3Rpb24odikgPyB0YXJnZXRbcHJvcGVydHldKCkgOiBfaXNVbmRlZmluZWQodikgJiYgdGFyZ2V0LmdldEF0dHJpYnV0ZSAmJiB0YXJnZXQuZ2V0QXR0cmlidXRlKHByb3BlcnR5KSB8fCB2O1xufSxcbiAgICBfZm9yRWFjaE5hbWUgPSBmdW5jdGlvbiBfZm9yRWFjaE5hbWUobmFtZXMsIGZ1bmMpIHtcbiAgcmV0dXJuIChuYW1lcyA9IG5hbWVzLnNwbGl0KFwiLFwiKSkuZm9yRWFjaChmdW5jKSB8fCBuYW1lcztcbn0sXG4gICAgLy9zcGxpdCBhIGNvbW1hLWRlbGltaXRlZCBsaXN0IG9mIG5hbWVzIGludG8gYW4gYXJyYXksIHRoZW4gcnVuIGEgZm9yRWFjaCgpIGZ1bmN0aW9uIGFuZCByZXR1cm4gdGhlIHNwbGl0IGFycmF5ICh0aGlzIGlzIGp1c3QgYSB3YXkgdG8gY29uc29saWRhdGUvc2hvcnRlbiBzb21lIGNvZGUpLlxuX3JvdW5kID0gZnVuY3Rpb24gX3JvdW5kKHZhbHVlKSB7XG4gIHJldHVybiBNYXRoLnJvdW5kKHZhbHVlICogMTAwMDAwKSAvIDEwMDAwMCB8fCAwO1xufSxcbiAgICBfYXJyYXlDb250YWluc0FueSA9IGZ1bmN0aW9uIF9hcnJheUNvbnRhaW5zQW55KHRvU2VhcmNoLCB0b0ZpbmQpIHtcbiAgLy9zZWFyY2hlcyBvbmUgYXJyYXkgdG8gZmluZCBtYXRjaGVzIGZvciBhbnkgb2YgdGhlIGl0ZW1zIGluIHRoZSB0b0ZpbmQgYXJyYXkuIEFzIHNvb24gYXMgb25lIGlzIGZvdW5kLCBpdCByZXR1cm5zIHRydWUuIEl0IGRvZXMgTk9UIHJldHVybiBhbGwgdGhlIG1hdGNoZXM7IGl0J3Mgc2ltcGx5IGEgYm9vbGVhbiBzZWFyY2guXG4gIHZhciBsID0gdG9GaW5kLmxlbmd0aCxcbiAgICAgIGkgPSAwO1xuXG4gIGZvciAoOyB0b1NlYXJjaC5pbmRleE9mKHRvRmluZFtpXSkgPCAwICYmICsraSA8IGw7KSB7fVxuXG4gIHJldHVybiBpIDwgbDtcbn0sXG4gICAgX3BhcnNlVmFycyA9IGZ1bmN0aW9uIF9wYXJzZVZhcnMocGFyYW1zLCB0eXBlLCBwYXJlbnQpIHtcbiAgLy9yZWFkcyB0aGUgYXJndW1lbnRzIHBhc3NlZCB0byBvbmUgb2YgdGhlIGtleSBtZXRob2RzIGFuZCBmaWd1cmVzIG91dCBpZiB0aGUgdXNlciBpcyBkZWZpbmluZyB0aGluZ3Mgd2l0aCB0aGUgT0xEL2xlZ2FjeSBzeW50YXggd2hlcmUgdGhlIGR1cmF0aW9uIGlzIHRoZSAybmQgcGFyYW1ldGVyLCBhbmQgdGhlbiBpdCBhZGp1c3RzIHRoaW5ncyBhY2NvcmRpbmdseSBhbmQgc3BpdHMgYmFjayB0aGUgY29ycmVjdGVkIHZhcnMgb2JqZWN0ICh3aXRoIHRoZSBkdXJhdGlvbiBhZGRlZCBpZiBuZWNlc3NhcnksIGFzIHdlbGwgYXMgcnVuQmFja3dhcmRzIG9yIHN0YXJ0QXQgb3IgaW1tZWRpYXRlUmVuZGVyKS4gdHlwZSAwID0gdG8oKS9zdGFnZ2VyVG8oKSwgMSA9IGZyb20oKS9zdGFnZ2VyRnJvbSgpLCAyID0gZnJvbVRvKCkvc3RhZ2dlckZyb21UbygpXG4gIHZhciBpc0xlZ2FjeSA9IF9pc051bWJlcihwYXJhbXNbMV0pLFxuICAgICAgdmFyc0luZGV4ID0gKGlzTGVnYWN5ID8gMiA6IDEpICsgKHR5cGUgPCAyID8gMCA6IDEpLFxuICAgICAgdmFycyA9IHBhcmFtc1t2YXJzSW5kZXhdLFxuICAgICAgaXJWYXJzO1xuXG4gIGlzTGVnYWN5ICYmICh2YXJzLmR1cmF0aW9uID0gcGFyYW1zWzFdKTtcbiAgdmFycy5wYXJlbnQgPSBwYXJlbnQ7XG5cbiAgaWYgKHR5cGUpIHtcbiAgICBpclZhcnMgPSB2YXJzO1xuXG4gICAgd2hpbGUgKHBhcmVudCAmJiAhKFwiaW1tZWRpYXRlUmVuZGVyXCIgaW4gaXJWYXJzKSkge1xuICAgICAgLy8gaW5oZXJpdGFuY2UgaGFzbid0IGhhcHBlbmVkIHlldCwgYnV0IHNvbWVvbmUgbWF5IGhhdmUgc2V0IGEgZGVmYXVsdCBpbiBhbiBhbmNlc3RvciB0aW1lbGluZS4gV2UgY291bGQgZG8gdmFycy5pbW1lZGlhdGVSZW5kZXIgPSBfaXNOb3RGYWxzZShfaW5oZXJpdERlZmF1bHRzKHZhcnMpLmltbWVkaWF0ZVJlbmRlcikgYnV0IHRoYXQnZCBleGFjdCBhIHNsaWdodCBwZXJmb3JtYW5jZSBwZW5hbHR5IGJlY2F1c2UgX2luaGVyaXREZWZhdWx0cygpIGFsc28gcnVucyBpbiB0aGUgVHdlZW4gY29uc3RydWN0b3IuIFdlJ3JlIHBheWluZyBhIHNtYWxsIGtiIHByaWNlIGhlcmUgdG8gZ2FpbiBzcGVlZC5cbiAgICAgIGlyVmFycyA9IHBhcmVudC52YXJzLmRlZmF1bHRzIHx8IHt9O1xuICAgICAgcGFyZW50ID0gX2lzTm90RmFsc2UocGFyZW50LnZhcnMuaW5oZXJpdCkgJiYgcGFyZW50LnBhcmVudDtcbiAgICB9XG5cbiAgICB2YXJzLmltbWVkaWF0ZVJlbmRlciA9IF9pc05vdEZhbHNlKGlyVmFycy5pbW1lZGlhdGVSZW5kZXIpO1xuICAgIHR5cGUgPCAyID8gdmFycy5ydW5CYWNrd2FyZHMgPSAxIDogdmFycy5zdGFydEF0ID0gcGFyYW1zW3ZhcnNJbmRleCAtIDFdOyAvLyBcImZyb21cIiB2YXJzXG4gIH1cblxuICByZXR1cm4gdmFycztcbn0sXG4gICAgX2xhenlSZW5kZXIgPSBmdW5jdGlvbiBfbGF6eVJlbmRlcigpIHtcbiAgdmFyIGwgPSBfbGF6eVR3ZWVucy5sZW5ndGgsXG4gICAgICBhID0gX2xhenlUd2VlbnMuc2xpY2UoMCksXG4gICAgICBpLFxuICAgICAgdHdlZW47XG5cbiAgX2xhenlMb29rdXAgPSB7fTtcbiAgX2xhenlUd2VlbnMubGVuZ3RoID0gMDtcblxuICBmb3IgKGkgPSAwOyBpIDwgbDsgaSsrKSB7XG4gICAgdHdlZW4gPSBhW2ldO1xuICAgIHR3ZWVuICYmIHR3ZWVuLl9sYXp5ICYmICh0d2Vlbi5yZW5kZXIodHdlZW4uX2xhenlbMF0sIHR3ZWVuLl9sYXp5WzFdLCB0cnVlKS5fbGF6eSA9IDApO1xuICB9XG59LFxuICAgIF9sYXp5U2FmZVJlbmRlciA9IGZ1bmN0aW9uIF9sYXp5U2FmZVJlbmRlcihhbmltYXRpb24sIHRpbWUsIHN1cHByZXNzRXZlbnRzLCBmb3JjZSkge1xuICBfbGF6eVR3ZWVucy5sZW5ndGggJiYgX2xhenlSZW5kZXIoKTtcbiAgYW5pbWF0aW9uLnJlbmRlcih0aW1lLCBzdXBwcmVzc0V2ZW50cywgZm9yY2UpO1xuICBfbGF6eVR3ZWVucy5sZW5ndGggJiYgX2xhenlSZW5kZXIoKTsgLy9pbiBjYXNlIHJlbmRlcmluZyBjYXVzZWQgYW55IHR3ZWVucyB0byBsYXp5LWluaXQsIHdlIHNob3VsZCByZW5kZXIgdGhlbSBiZWNhdXNlIHR5cGljYWxseSB3aGVuIHNvbWVvbmUgY2FsbHMgc2VlaygpIG9yIHRpbWUoKSBvciBwcm9ncmVzcygpLCB0aGV5IGV4cGVjdCBhbiBpbW1lZGlhdGUgcmVuZGVyLlxufSxcbiAgICBfbnVtZXJpY0lmUG9zc2libGUgPSBmdW5jdGlvbiBfbnVtZXJpY0lmUG9zc2libGUodmFsdWUpIHtcbiAgdmFyIG4gPSBwYXJzZUZsb2F0KHZhbHVlKTtcbiAgcmV0dXJuIChuIHx8IG4gPT09IDApICYmICh2YWx1ZSArIFwiXCIpLm1hdGNoKF9kZWxpbWl0ZWRWYWx1ZUV4cCkubGVuZ3RoIDwgMiA/IG4gOiBfaXNTdHJpbmcodmFsdWUpID8gdmFsdWUudHJpbSgpIDogdmFsdWU7XG59LFxuICAgIF9wYXNzVGhyb3VnaCA9IGZ1bmN0aW9uIF9wYXNzVGhyb3VnaChwKSB7XG4gIHJldHVybiBwO1xufSxcbiAgICBfc2V0RGVmYXVsdHMgPSBmdW5jdGlvbiBfc2V0RGVmYXVsdHMob2JqLCBkZWZhdWx0cykge1xuICBmb3IgKHZhciBwIGluIGRlZmF1bHRzKSB7XG4gICAgcCBpbiBvYmogfHwgKG9ialtwXSA9IGRlZmF1bHRzW3BdKTtcbiAgfVxuXG4gIHJldHVybiBvYmo7XG59LFxuICAgIF9zZXRLZXlmcmFtZURlZmF1bHRzID0gZnVuY3Rpb24gX3NldEtleWZyYW1lRGVmYXVsdHMob2JqLCBkZWZhdWx0cykge1xuICBmb3IgKHZhciBwIGluIGRlZmF1bHRzKSB7XG4gICAgcCBpbiBvYmogfHwgcCA9PT0gXCJkdXJhdGlvblwiIHx8IHAgPT09IFwiZWFzZVwiIHx8IChvYmpbcF0gPSBkZWZhdWx0c1twXSk7XG4gIH1cbn0sXG4gICAgX21lcmdlID0gZnVuY3Rpb24gX21lcmdlKGJhc2UsIHRvTWVyZ2UpIHtcbiAgZm9yICh2YXIgcCBpbiB0b01lcmdlKSB7XG4gICAgYmFzZVtwXSA9IHRvTWVyZ2VbcF07XG4gIH1cblxuICByZXR1cm4gYmFzZTtcbn0sXG4gICAgX21lcmdlRGVlcCA9IGZ1bmN0aW9uIF9tZXJnZURlZXAoYmFzZSwgdG9NZXJnZSkge1xuICBmb3IgKHZhciBwIGluIHRvTWVyZ2UpIHtcbiAgICBiYXNlW3BdID0gX2lzT2JqZWN0KHRvTWVyZ2VbcF0pID8gX21lcmdlRGVlcChiYXNlW3BdIHx8IChiYXNlW3BdID0ge30pLCB0b01lcmdlW3BdKSA6IHRvTWVyZ2VbcF07XG4gIH1cblxuICByZXR1cm4gYmFzZTtcbn0sXG4gICAgX2NvcHlFeGNsdWRpbmcgPSBmdW5jdGlvbiBfY29weUV4Y2x1ZGluZyhvYmosIGV4Y2x1ZGluZykge1xuICB2YXIgY29weSA9IHt9LFxuICAgICAgcDtcblxuICBmb3IgKHAgaW4gb2JqKSB7XG4gICAgcCBpbiBleGNsdWRpbmcgfHwgKGNvcHlbcF0gPSBvYmpbcF0pO1xuICB9XG5cbiAgcmV0dXJuIGNvcHk7XG59LFxuICAgIF9pbmhlcml0RGVmYXVsdHMgPSBmdW5jdGlvbiBfaW5oZXJpdERlZmF1bHRzKHZhcnMpIHtcbiAgdmFyIHBhcmVudCA9IHZhcnMucGFyZW50IHx8IF9nbG9iYWxUaW1lbGluZSxcbiAgICAgIGZ1bmMgPSB2YXJzLmtleWZyYW1lcyA/IF9zZXRLZXlmcmFtZURlZmF1bHRzIDogX3NldERlZmF1bHRzO1xuXG4gIGlmIChfaXNOb3RGYWxzZSh2YXJzLmluaGVyaXQpKSB7XG4gICAgd2hpbGUgKHBhcmVudCkge1xuICAgICAgZnVuYyh2YXJzLCBwYXJlbnQudmFycy5kZWZhdWx0cyk7XG4gICAgICBwYXJlbnQgPSBwYXJlbnQucGFyZW50IHx8IHBhcmVudC5fZHA7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHZhcnM7XG59LFxuICAgIF9hcnJheXNNYXRjaCA9IGZ1bmN0aW9uIF9hcnJheXNNYXRjaChhMSwgYTIpIHtcbiAgdmFyIGkgPSBhMS5sZW5ndGgsXG4gICAgICBtYXRjaCA9IGkgPT09IGEyLmxlbmd0aDtcblxuICB3aGlsZSAobWF0Y2ggJiYgaS0tICYmIGExW2ldID09PSBhMltpXSkge31cblxuICByZXR1cm4gaSA8IDA7XG59LFxuICAgIF9hZGRMaW5rZWRMaXN0SXRlbSA9IGZ1bmN0aW9uIF9hZGRMaW5rZWRMaXN0SXRlbShwYXJlbnQsIGNoaWxkLCBmaXJzdFByb3AsIGxhc3RQcm9wLCBzb3J0QnkpIHtcbiAgaWYgKGZpcnN0UHJvcCA9PT0gdm9pZCAwKSB7XG4gICAgZmlyc3RQcm9wID0gXCJfZmlyc3RcIjtcbiAgfVxuXG4gIGlmIChsYXN0UHJvcCA9PT0gdm9pZCAwKSB7XG4gICAgbGFzdFByb3AgPSBcIl9sYXN0XCI7XG4gIH1cblxuICB2YXIgcHJldiA9IHBhcmVudFtsYXN0UHJvcF0sXG4gICAgICB0O1xuXG4gIGlmIChzb3J0QnkpIHtcbiAgICB0ID0gY2hpbGRbc29ydEJ5XTtcblxuICAgIHdoaWxlIChwcmV2ICYmIHByZXZbc29ydEJ5XSA+IHQpIHtcbiAgICAgIHByZXYgPSBwcmV2Ll9wcmV2O1xuICAgIH1cbiAgfVxuXG4gIGlmIChwcmV2KSB7XG4gICAgY2hpbGQuX25leHQgPSBwcmV2Ll9uZXh0O1xuICAgIHByZXYuX25leHQgPSBjaGlsZDtcbiAgfSBlbHNlIHtcbiAgICBjaGlsZC5fbmV4dCA9IHBhcmVudFtmaXJzdFByb3BdO1xuICAgIHBhcmVudFtmaXJzdFByb3BdID0gY2hpbGQ7XG4gIH1cblxuICBpZiAoY2hpbGQuX25leHQpIHtcbiAgICBjaGlsZC5fbmV4dC5fcHJldiA9IGNoaWxkO1xuICB9IGVsc2Uge1xuICAgIHBhcmVudFtsYXN0UHJvcF0gPSBjaGlsZDtcbiAgfVxuXG4gIGNoaWxkLl9wcmV2ID0gcHJldjtcbiAgY2hpbGQucGFyZW50ID0gY2hpbGQuX2RwID0gcGFyZW50O1xuICByZXR1cm4gY2hpbGQ7XG59LFxuICAgIF9yZW1vdmVMaW5rZWRMaXN0SXRlbSA9IGZ1bmN0aW9uIF9yZW1vdmVMaW5rZWRMaXN0SXRlbShwYXJlbnQsIGNoaWxkLCBmaXJzdFByb3AsIGxhc3RQcm9wKSB7XG4gIGlmIChmaXJzdFByb3AgPT09IHZvaWQgMCkge1xuICAgIGZpcnN0UHJvcCA9IFwiX2ZpcnN0XCI7XG4gIH1cblxuICBpZiAobGFzdFByb3AgPT09IHZvaWQgMCkge1xuICAgIGxhc3RQcm9wID0gXCJfbGFzdFwiO1xuICB9XG5cbiAgdmFyIHByZXYgPSBjaGlsZC5fcHJldixcbiAgICAgIG5leHQgPSBjaGlsZC5fbmV4dDtcblxuICBpZiAocHJldikge1xuICAgIHByZXYuX25leHQgPSBuZXh0O1xuICB9IGVsc2UgaWYgKHBhcmVudFtmaXJzdFByb3BdID09PSBjaGlsZCkge1xuICAgIHBhcmVudFtmaXJzdFByb3BdID0gbmV4dDtcbiAgfVxuXG4gIGlmIChuZXh0KSB7XG4gICAgbmV4dC5fcHJldiA9IHByZXY7XG4gIH0gZWxzZSBpZiAocGFyZW50W2xhc3RQcm9wXSA9PT0gY2hpbGQpIHtcbiAgICBwYXJlbnRbbGFzdFByb3BdID0gcHJldjtcbiAgfVxuXG4gIGNoaWxkLl9uZXh0ID0gY2hpbGQuX3ByZXYgPSBjaGlsZC5wYXJlbnQgPSBudWxsOyAvLyBkb24ndCBkZWxldGUgdGhlIF9kcCBqdXN0IHNvIHdlIGNhbiByZXZlcnQgaWYgbmVjZXNzYXJ5LiBCdXQgcGFyZW50IHNob3VsZCBiZSBudWxsIHRvIGluZGljYXRlIHRoZSBpdGVtIGlzbid0IGluIGEgbGlua2VkIGxpc3QuXG59LFxuICAgIF9yZW1vdmVGcm9tUGFyZW50ID0gZnVuY3Rpb24gX3JlbW92ZUZyb21QYXJlbnQoY2hpbGQsIG9ubHlJZlBhcmVudEhhc0F1dG9SZW1vdmUpIHtcbiAgY2hpbGQucGFyZW50ICYmICghb25seUlmUGFyZW50SGFzQXV0b1JlbW92ZSB8fCBjaGlsZC5wYXJlbnQuYXV0b1JlbW92ZUNoaWxkcmVuKSAmJiBjaGlsZC5wYXJlbnQucmVtb3ZlKGNoaWxkKTtcbiAgY2hpbGQuX2FjdCA9IDA7XG59LFxuICAgIF91bmNhY2hlID0gZnVuY3Rpb24gX3VuY2FjaGUoYW5pbWF0aW9uLCBjaGlsZCkge1xuICBpZiAoYW5pbWF0aW9uICYmICghY2hpbGQgfHwgY2hpbGQuX2VuZCA+IGFuaW1hdGlvbi5fZHVyIHx8IGNoaWxkLl9zdGFydCA8IDApKSB7XG4gICAgLy8gcGVyZm9ybWFuY2Ugb3B0aW1pemF0aW9uOiBpZiBhIGNoaWxkIGFuaW1hdGlvbiBpcyBwYXNzZWQgaW4gd2Ugc2hvdWxkIG9ubHkgdW5jYWNoZSBpZiB0aGF0IGNoaWxkIEVYVEVORFMgdGhlIGFuaW1hdGlvbiAoaXRzIGVuZCB0aW1lIGlzIGJleW9uZCB0aGUgZW5kKVxuICAgIHZhciBhID0gYW5pbWF0aW9uO1xuXG4gICAgd2hpbGUgKGEpIHtcbiAgICAgIGEuX2RpcnR5ID0gMTtcbiAgICAgIGEgPSBhLnBhcmVudDtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gYW5pbWF0aW9uO1xufSxcbiAgICBfcmVjYWNoZUFuY2VzdG9ycyA9IGZ1bmN0aW9uIF9yZWNhY2hlQW5jZXN0b3JzKGFuaW1hdGlvbikge1xuICB2YXIgcGFyZW50ID0gYW5pbWF0aW9uLnBhcmVudDtcblxuICB3aGlsZSAocGFyZW50ICYmIHBhcmVudC5wYXJlbnQpIHtcbiAgICAvL3NvbWV0aW1lcyB3ZSBtdXN0IGZvcmNlIGEgcmUtc29ydCBvZiBhbGwgY2hpbGRyZW4gYW5kIHVwZGF0ZSB0aGUgZHVyYXRpb24vdG90YWxEdXJhdGlvbiBvZiBhbGwgYW5jZXN0b3IgdGltZWxpbmVzIGltbWVkaWF0ZWx5IGluIGNhc2UsIGZvciBleGFtcGxlLCBpbiB0aGUgbWlkZGxlIG9mIGEgcmVuZGVyIGxvb3AsIG9uZSB0d2VlbiBhbHRlcnMgYW5vdGhlciB0d2VlbidzIHRpbWVTY2FsZSB3aGljaCBzaG92ZXMgaXRzIHN0YXJ0VGltZSBiZWZvcmUgMCwgZm9yY2luZyB0aGUgcGFyZW50IHRpbWVsaW5lIHRvIHNoaWZ0IGFyb3VuZCBhbmQgc2hpZnRDaGlsZHJlbigpIHdoaWNoIGNvdWxkIGFmZmVjdCB0aGF0IG5leHQgdHdlZW4ncyByZW5kZXIgKHN0YXJ0VGltZSkuIERvZXNuJ3QgbWF0dGVyIGZvciB0aGUgcm9vdCB0aW1lbGluZSB0aG91Z2guXG4gICAgcGFyZW50Ll9kaXJ0eSA9IDE7XG4gICAgcGFyZW50LnRvdGFsRHVyYXRpb24oKTtcbiAgICBwYXJlbnQgPSBwYXJlbnQucGFyZW50O1xuICB9XG5cbiAgcmV0dXJuIGFuaW1hdGlvbjtcbn0sXG4gICAgX2hhc05vUGF1c2VkQW5jZXN0b3JzID0gZnVuY3Rpb24gX2hhc05vUGF1c2VkQW5jZXN0b3JzKGFuaW1hdGlvbikge1xuICByZXR1cm4gIWFuaW1hdGlvbiB8fCBhbmltYXRpb24uX3RzICYmIF9oYXNOb1BhdXNlZEFuY2VzdG9ycyhhbmltYXRpb24ucGFyZW50KTtcbn0sXG4gICAgX2VsYXBzZWRDeWNsZUR1cmF0aW9uID0gZnVuY3Rpb24gX2VsYXBzZWRDeWNsZUR1cmF0aW9uKGFuaW1hdGlvbikge1xuICByZXR1cm4gYW5pbWF0aW9uLl9yZXBlYXQgPyBfYW5pbWF0aW9uQ3ljbGUoYW5pbWF0aW9uLl90VGltZSwgYW5pbWF0aW9uID0gYW5pbWF0aW9uLmR1cmF0aW9uKCkgKyBhbmltYXRpb24uX3JEZWxheSkgKiBhbmltYXRpb24gOiAwO1xufSxcbiAgICAvLyBmZWVkIGluIHRoZSB0b3RhbFRpbWUgYW5kIGN5Y2xlRHVyYXRpb24gYW5kIGl0J2xsIHJldHVybiB0aGUgY3ljbGUgKGl0ZXJhdGlvbiBtaW51cyAxKSBhbmQgaWYgdGhlIHBsYXloZWFkIGlzIGV4YWN0bHkgYXQgdGhlIHZlcnkgRU5ELCBpdCB3aWxsIE5PVCBidW1wIHVwIHRvIHRoZSBuZXh0IGN5Y2xlLlxuX2FuaW1hdGlvbkN5Y2xlID0gZnVuY3Rpb24gX2FuaW1hdGlvbkN5Y2xlKHRUaW1lLCBjeWNsZUR1cmF0aW9uKSB7XG4gIHJldHVybiAodFRpbWUgLz0gY3ljbGVEdXJhdGlvbikgJiYgfn50VGltZSA9PT0gdFRpbWUgPyB+fnRUaW1lIC0gMSA6IH5+dFRpbWU7XG59LFxuICAgIF9wYXJlbnRUb0NoaWxkVG90YWxUaW1lID0gZnVuY3Rpb24gX3BhcmVudFRvQ2hpbGRUb3RhbFRpbWUocGFyZW50VGltZSwgY2hpbGQpIHtcbiAgcmV0dXJuIChwYXJlbnRUaW1lIC0gY2hpbGQuX3N0YXJ0KSAqIGNoaWxkLl90cyArIChjaGlsZC5fdHMgPj0gMCA/IDAgOiBjaGlsZC5fZGlydHkgPyBjaGlsZC50b3RhbER1cmF0aW9uKCkgOiBjaGlsZC5fdER1cik7XG59LFxuICAgIF9zZXRFbmQgPSBmdW5jdGlvbiBfc2V0RW5kKGFuaW1hdGlvbikge1xuICByZXR1cm4gYW5pbWF0aW9uLl9lbmQgPSBfcm91bmQoYW5pbWF0aW9uLl9zdGFydCArIChhbmltYXRpb24uX3REdXIgLyBNYXRoLmFicyhhbmltYXRpb24uX3RzIHx8IGFuaW1hdGlvbi5fcnRzIHx8IF90aW55TnVtKSB8fCAwKSk7XG59LFxuICAgIF9hbGlnblBsYXloZWFkID0gZnVuY3Rpb24gX2FsaWduUGxheWhlYWQoYW5pbWF0aW9uLCB0b3RhbFRpbWUpIHtcbiAgLy8gYWRqdXN0cyB0aGUgYW5pbWF0aW9uJ3MgX3N0YXJ0IGFuZCBfZW5kIGFjY29yZGluZyB0byB0aGUgcHJvdmlkZWQgdG90YWxUaW1lIChvbmx5IGlmIHRoZSBwYXJlbnQncyBzbW9vdGhDaGlsZFRpbWluZyBpcyB0cnVlIGFuZCB0aGUgYW5pbWF0aW9uIGlzbid0IHBhdXNlZCkuIEl0IGRvZXNuJ3QgZG8gYW55IHJlbmRlcmluZyBvciBmb3JjaW5nIHRoaW5ncyBiYWNrIGludG8gcGFyZW50IHRpbWVsaW5lcywgZXRjLiAtIHRoYXQncyB3aGF0IHRvdGFsVGltZSgpIGlzIGZvci5cbiAgdmFyIHBhcmVudCA9IGFuaW1hdGlvbi5fZHA7XG5cbiAgaWYgKHBhcmVudCAmJiBwYXJlbnQuc21vb3RoQ2hpbGRUaW1pbmcgJiYgYW5pbWF0aW9uLl90cykge1xuICAgIGFuaW1hdGlvbi5fc3RhcnQgPSBfcm91bmQoYW5pbWF0aW9uLl9kcC5fdGltZSAtIChhbmltYXRpb24uX3RzID4gMCA/IHRvdGFsVGltZSAvIGFuaW1hdGlvbi5fdHMgOiAoKGFuaW1hdGlvbi5fZGlydHkgPyBhbmltYXRpb24udG90YWxEdXJhdGlvbigpIDogYW5pbWF0aW9uLl90RHVyKSAtIHRvdGFsVGltZSkgLyAtYW5pbWF0aW9uLl90cykpO1xuXG4gICAgX3NldEVuZChhbmltYXRpb24pO1xuXG4gICAgcGFyZW50Ll9kaXJ0eSB8fCBfdW5jYWNoZShwYXJlbnQsIGFuaW1hdGlvbik7IC8vZm9yIHBlcmZvcm1hbmNlIGltcHJvdmVtZW50LiBJZiB0aGUgcGFyZW50J3MgY2FjaGUgaXMgYWxyZWFkeSBkaXJ0eSwgaXQgYWxyZWFkeSB0b29rIGNhcmUgb2YgbWFya2luZyB0aGUgYW5jZXN0b3JzIGFzIGRpcnR5IHRvbywgc28gc2tpcCB0aGUgZnVuY3Rpb24gY2FsbCBoZXJlLlxuICB9XG5cbiAgcmV0dXJuIGFuaW1hdGlvbjtcbn0sXG5cbi8qXG5fdG90YWxUaW1lVG9UaW1lID0gKGNsYW1wZWRUb3RhbFRpbWUsIGR1cmF0aW9uLCByZXBlYXQsIHJlcGVhdERlbGF5LCB5b3lvKSA9PiB7XG5cdGxldCBjeWNsZUR1cmF0aW9uID0gZHVyYXRpb24gKyByZXBlYXREZWxheSxcblx0XHR0aW1lID0gX3JvdW5kKGNsYW1wZWRUb3RhbFRpbWUgJSBjeWNsZUR1cmF0aW9uKTtcblx0aWYgKHRpbWUgPiBkdXJhdGlvbikge1xuXHRcdHRpbWUgPSBkdXJhdGlvbjtcblx0fVxuXHRyZXR1cm4gKHlveW8gJiYgKH5+KGNsYW1wZWRUb3RhbFRpbWUgLyBjeWNsZUR1cmF0aW9uKSAmIDEpKSA/IGR1cmF0aW9uIC0gdGltZSA6IHRpbWU7XG59LFxuKi9cbl9wb3N0QWRkQ2hlY2tzID0gZnVuY3Rpb24gX3Bvc3RBZGRDaGVja3ModGltZWxpbmUsIGNoaWxkKSB7XG4gIHZhciB0O1xuXG4gIGlmIChjaGlsZC5fdGltZSB8fCBjaGlsZC5faW5pdHRlZCAmJiAhY2hpbGQuX2R1cikge1xuICAgIC8vaW4gY2FzZSwgZm9yIGV4YW1wbGUsIHRoZSBfc3RhcnQgaXMgbW92ZWQgb24gYSB0d2VlbiB0aGF0IGhhcyBhbHJlYWR5IHJlbmRlcmVkLiBJbWFnaW5lIGl0J3MgYXQgaXRzIGVuZCBzdGF0ZSwgdGhlbiB0aGUgc3RhcnRUaW1lIGlzIG1vdmVkIFdBWSBsYXRlciAoYWZ0ZXIgdGhlIGVuZCBvZiB0aGlzIHRpbWVsaW5lKSwgaXQgc2hvdWxkIHJlbmRlciBhdCBpdHMgYmVnaW5uaW5nLlxuICAgIHQgPSBfcGFyZW50VG9DaGlsZFRvdGFsVGltZSh0aW1lbGluZS5yYXdUaW1lKCksIGNoaWxkKTtcblxuICAgIGlmICghY2hpbGQuX2R1ciB8fCBfY2xhbXAoMCwgY2hpbGQudG90YWxEdXJhdGlvbigpLCB0KSAtIGNoaWxkLl90VGltZSA+IF90aW55TnVtKSB7XG4gICAgICBjaGlsZC5yZW5kZXIodCwgdHJ1ZSk7XG4gICAgfVxuICB9IC8vaWYgdGhlIHRpbWVsaW5lIGhhcyBhbHJlYWR5IGVuZGVkIGJ1dCB0aGUgaW5zZXJ0ZWQgdHdlZW4vdGltZWxpbmUgZXh0ZW5kcyB0aGUgZHVyYXRpb24sIHdlIHNob3VsZCBlbmFibGUgdGhpcyB0aW1lbGluZSBhZ2FpbiBzbyB0aGF0IGl0IHJlbmRlcnMgcHJvcGVybHkuIFdlIHNob3VsZCBhbHNvIGFsaWduIHRoZSBwbGF5aGVhZCB3aXRoIHRoZSBwYXJlbnQgdGltZWxpbmUncyB3aGVuIGFwcHJvcHJpYXRlLlxuXG5cbiAgaWYgKF91bmNhY2hlKHRpbWVsaW5lLCBjaGlsZCkuX2RwICYmIHRpbWVsaW5lLl9pbml0dGVkICYmIHRpbWVsaW5lLl90aW1lID49IHRpbWVsaW5lLl9kdXIgJiYgdGltZWxpbmUuX3RzKSB7XG4gICAgLy9pbiBjYXNlIGFueSBvZiB0aGUgYW5jZXN0b3JzIGhhZCBjb21wbGV0ZWQgYnV0IHNob3VsZCBub3cgYmUgZW5hYmxlZC4uLlxuICAgIGlmICh0aW1lbGluZS5fZHVyIDwgdGltZWxpbmUuZHVyYXRpb24oKSkge1xuICAgICAgdCA9IHRpbWVsaW5lO1xuXG4gICAgICB3aGlsZSAodC5fZHApIHtcbiAgICAgICAgdC5yYXdUaW1lKCkgPj0gMCAmJiB0LnRvdGFsVGltZSh0Ll90VGltZSk7IC8vbW92ZXMgdGhlIHRpbWVsaW5lIChzaGlmdHMgaXRzIHN0YXJ0VGltZSkgaWYgbmVjZXNzYXJ5LCBhbmQgYWxzbyBlbmFibGVzIGl0LiBJZiBpdCdzIGN1cnJlbnRseSB6ZXJvLCB0aG91Z2gsIGl0IG1heSBub3QgYmUgc2NoZWR1bGVkIHRvIHJlbmRlciB1bnRpbCBsYXRlciBzbyB0aGVyZSdzIG5vIG5lZWQgdG8gZm9yY2UgaXQgdG8gYWxpZ24gd2l0aCB0aGUgY3VycmVudCBwbGF5aGVhZCBwb3NpdGlvbi4gT25seSBtb3ZlIHRvIGNhdGNoIHVwIHdpdGggdGhlIHBsYXloZWFkLlxuXG4gICAgICAgIHQgPSB0Ll9kcDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB0aW1lbGluZS5felRpbWUgPSAtX3RpbnlOdW07IC8vIGhlbHBzIGVuc3VyZSB0aGF0IHRoZSBuZXh0IHJlbmRlcigpIHdpbGwgYmUgZm9yY2VkIChjcm9zc2luZ1N0YXJ0ID0gdHJ1ZSBpbiByZW5kZXIoKSksIGV2ZW4gaWYgdGhlIGR1cmF0aW9uIGhhc24ndCBjaGFuZ2VkICh3ZSdyZSBhZGRpbmcgYSBjaGlsZCB3aGljaCB3b3VsZCBuZWVkIHRvIGdldCByZW5kZXJlZCkuIERlZmluaXRlbHkgYW4gZWRnZSBjYXNlLiBOb3RlOiB3ZSBNVVNUIGRvIHRoaXMgQUZURVIgdGhlIGxvb3AgYWJvdmUgd2hlcmUgdGhlIHRvdGFsVGltZSgpIG1pZ2h0IHRyaWdnZXIgYSByZW5kZXIoKSBiZWNhdXNlIHRoaXMgX2FkZFRvVGltZWxpbmUoKSBtZXRob2QgZ2V0cyBjYWxsZWQgZnJvbSB0aGUgQW5pbWF0aW9uIGNvbnN0cnVjdG9yLCBCRUZPUkUgdHdlZW5zIGV2ZW4gcmVjb3JkIHRoZWlyIHRhcmdldHMsIGV0Yy4gc28gd2Ugd291bGRuJ3Qgd2FudCB0aGluZ3MgdG8gZ2V0IHRyaWdnZXJlZCBpbiB0aGUgd3Jvbmcgb3JkZXIuXG4gIH1cbn0sXG4gICAgX2FkZFRvVGltZWxpbmUgPSBmdW5jdGlvbiBfYWRkVG9UaW1lbGluZSh0aW1lbGluZSwgY2hpbGQsIHBvc2l0aW9uLCBza2lwQ2hlY2tzKSB7XG4gIGNoaWxkLnBhcmVudCAmJiBfcmVtb3ZlRnJvbVBhcmVudChjaGlsZCk7XG4gIGNoaWxkLl9zdGFydCA9IF9yb3VuZChwb3NpdGlvbiArIGNoaWxkLl9kZWxheSk7XG4gIGNoaWxkLl9lbmQgPSBfcm91bmQoY2hpbGQuX3N0YXJ0ICsgKGNoaWxkLnRvdGFsRHVyYXRpb24oKSAvIE1hdGguYWJzKGNoaWxkLnRpbWVTY2FsZSgpKSB8fCAwKSk7XG5cbiAgX2FkZExpbmtlZExpc3RJdGVtKHRpbWVsaW5lLCBjaGlsZCwgXCJfZmlyc3RcIiwgXCJfbGFzdFwiLCB0aW1lbGluZS5fc29ydCA/IFwiX3N0YXJ0XCIgOiAwKTtcblxuICB0aW1lbGluZS5fcmVjZW50ID0gY2hpbGQ7XG4gIHNraXBDaGVja3MgfHwgX3Bvc3RBZGRDaGVja3ModGltZWxpbmUsIGNoaWxkKTtcbiAgcmV0dXJuIHRpbWVsaW5lO1xufSxcbiAgICBfc2Nyb2xsVHJpZ2dlciA9IGZ1bmN0aW9uIF9zY3JvbGxUcmlnZ2VyKGFuaW1hdGlvbiwgdHJpZ2dlcikge1xuICByZXR1cm4gKF9nbG9iYWxzLlNjcm9sbFRyaWdnZXIgfHwgX21pc3NpbmdQbHVnaW4oXCJzY3JvbGxUcmlnZ2VyXCIsIHRyaWdnZXIpKSAmJiBfZ2xvYmFscy5TY3JvbGxUcmlnZ2VyLmNyZWF0ZSh0cmlnZ2VyLCBhbmltYXRpb24pO1xufSxcbiAgICBfYXR0ZW1wdEluaXRUd2VlbiA9IGZ1bmN0aW9uIF9hdHRlbXB0SW5pdFR3ZWVuKHR3ZWVuLCB0b3RhbFRpbWUsIGZvcmNlLCBzdXBwcmVzc0V2ZW50cykge1xuICBfaW5pdFR3ZWVuKHR3ZWVuLCB0b3RhbFRpbWUpO1xuXG4gIGlmICghdHdlZW4uX2luaXR0ZWQpIHtcbiAgICByZXR1cm4gMTtcbiAgfVxuXG4gIGlmICghZm9yY2UgJiYgdHdlZW4uX3B0ICYmICh0d2Vlbi5fZHVyICYmIHR3ZWVuLnZhcnMubGF6eSAhPT0gZmFsc2UgfHwgIXR3ZWVuLl9kdXIgJiYgdHdlZW4udmFycy5sYXp5KSAmJiBfbGFzdFJlbmRlcmVkRnJhbWUgIT09IF90aWNrZXIuZnJhbWUpIHtcbiAgICBfbGF6eVR3ZWVucy5wdXNoKHR3ZWVuKTtcblxuICAgIHR3ZWVuLl9sYXp5ID0gW3RvdGFsVGltZSwgc3VwcHJlc3NFdmVudHNdO1xuICAgIHJldHVybiAxO1xuICB9XG59LFxuICAgIF9yZW5kZXJaZXJvRHVyYXRpb25Ud2VlbiA9IGZ1bmN0aW9uIF9yZW5kZXJaZXJvRHVyYXRpb25Ud2Vlbih0d2VlbiwgdG90YWxUaW1lLCBzdXBwcmVzc0V2ZW50cywgZm9yY2UpIHtcbiAgdmFyIHByZXZSYXRpbyA9IHR3ZWVuLnJhdGlvLFxuICAgICAgcmF0aW8gPSB0b3RhbFRpbWUgPCAwIHx8ICF0b3RhbFRpbWUgJiYgcHJldlJhdGlvICYmICF0d2Vlbi5fc3RhcnQgJiYgdHdlZW4uX3pUaW1lID4gX3RpbnlOdW0gJiYgIXR3ZWVuLl9kcC5fbG9jayB8fCAodHdlZW4uX3RzIDwgMCB8fCB0d2Vlbi5fZHAuX3RzIDwgMCkgJiYgdHdlZW4uZGF0YSAhPT0gXCJpc0Zyb21TdGFydFwiICYmIHR3ZWVuLmRhdGEgIT09IFwiaXNTdGFydFwiID8gMCA6IDEsXG4gICAgICAvLyBjaGVjayBwYXJlbnQncyBfbG9jayBiZWNhdXNlIHdoZW4gYSB0aW1lbGluZSByZXBlYXRzL3lveW9zIGFuZCBkb2VzIGl0cyBhcnRpZmljaWFsIHdyYXBwaW5nLCB3ZSBzaG91bGRuJ3QgZm9yY2UgdGhlIHJhdGlvIGJhY2sgdG8gMC4gQWxzbywgaWYgdGhlIHR3ZWVuIG9yIGl0cyBwYXJlbnQgaXMgcmV2ZXJzZWQgYW5kIHRoZSB0b3RhbFRpbWUgaXMgMCwgd2Ugc2hvdWxkIGdvIHRvIGEgcmF0aW8gb2YgMC5cbiAgcmVwZWF0RGVsYXkgPSB0d2Vlbi5fckRlbGF5LFxuICAgICAgdFRpbWUgPSAwLFxuICAgICAgcHQsXG4gICAgICBpdGVyYXRpb24sXG4gICAgICBwcmV2SXRlcmF0aW9uO1xuXG4gIGlmIChyZXBlYXREZWxheSAmJiB0d2Vlbi5fcmVwZWF0KSB7XG4gICAgLy8gaW4gY2FzZSB0aGVyZSdzIGEgemVyby1kdXJhdGlvbiB0d2VlbiB0aGF0IGhhcyBhIHJlcGVhdCB3aXRoIGEgcmVwZWF0RGVsYXlcbiAgICB0VGltZSA9IF9jbGFtcCgwLCB0d2Vlbi5fdER1ciwgdG90YWxUaW1lKTtcbiAgICBpdGVyYXRpb24gPSBfYW5pbWF0aW9uQ3ljbGUodFRpbWUsIHJlcGVhdERlbGF5KTtcbiAgICBwcmV2SXRlcmF0aW9uID0gX2FuaW1hdGlvbkN5Y2xlKHR3ZWVuLl90VGltZSwgcmVwZWF0RGVsYXkpO1xuXG4gICAgaWYgKGl0ZXJhdGlvbiAhPT0gcHJldkl0ZXJhdGlvbikge1xuICAgICAgcHJldlJhdGlvID0gMSAtIHJhdGlvO1xuICAgICAgdHdlZW4udmFycy5yZXBlYXRSZWZyZXNoICYmIHR3ZWVuLl9pbml0dGVkICYmIHR3ZWVuLmludmFsaWRhdGUoKTtcbiAgICB9XG4gIH1cblxuICBpZiAocmF0aW8gIT09IHByZXZSYXRpbyB8fCBmb3JjZSB8fCB0d2Vlbi5felRpbWUgPT09IF90aW55TnVtIHx8ICF0b3RhbFRpbWUgJiYgdHdlZW4uX3pUaW1lKSB7XG4gICAgaWYgKCF0d2Vlbi5faW5pdHRlZCAmJiBfYXR0ZW1wdEluaXRUd2Vlbih0d2VlbiwgdG90YWxUaW1lLCBmb3JjZSwgc3VwcHJlc3NFdmVudHMpKSB7XG4gICAgICAvLyBpZiB3ZSByZW5kZXIgdGhlIHZlcnkgYmVnaW5uaW5nICh0aW1lID09IDApIG9mIGEgZnJvbVRvKCksIHdlIG11c3QgZm9yY2UgdGhlIHJlbmRlciAobm9ybWFsIHR3ZWVucyB3b3VsZG4ndCBuZWVkIHRvIHJlbmRlciBhdCBhIHRpbWUgb2YgMCB3aGVuIHRoZSBwcmV2VGltZSB3YXMgYWxzbyAwKS4gVGhpcyBpcyBhbHNvIG1hbmRhdG9yeSB0byBtYWtlIHN1cmUgb3ZlcndyaXRpbmcga2lja3MgaW4gaW1tZWRpYXRlbHkuXG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgcHJldkl0ZXJhdGlvbiA9IHR3ZWVuLl96VGltZTtcbiAgICB0d2Vlbi5felRpbWUgPSB0b3RhbFRpbWUgfHwgKHN1cHByZXNzRXZlbnRzID8gX3RpbnlOdW0gOiAwKTsgLy8gd2hlbiB0aGUgcGxheWhlYWQgYXJyaXZlcyBhdCBFWEFDVExZIHRpbWUgMCAocmlnaHQgb24gdG9wKSBvZiBhIHplcm8tZHVyYXRpb24gdHdlZW4sIHdlIG5lZWQgdG8gZGlzY2VybiBpZiBldmVudHMgYXJlIHN1cHByZXNzZWQgc28gdGhhdCB3aGVuIHRoZSBwbGF5aGVhZCBtb3ZlcyBhZ2FpbiAobmV4dCB0aW1lKSwgaXQnbGwgdHJpZ2dlciB0aGUgY2FsbGJhY2suIElmIGV2ZW50cyBhcmUgTk9UIHN1cHByZXNzZWQsIG9idmlvdXNseSB0aGUgY2FsbGJhY2sgd291bGQgYmUgdHJpZ2dlcmVkIGluIHRoaXMgcmVuZGVyLiBCYXNpY2FsbHksIHRoZSBjYWxsYmFjayBzaG91bGQgZmlyZSBlaXRoZXIgd2hlbiB0aGUgcGxheWhlYWQgQVJSSVZFUyBvciBMRUFWRVMgdGhpcyBleGFjdCBzcG90LCBub3QgYm90aC4gSW1hZ2luZSBkb2luZyBhIHRpbWVsaW5lLnNlZWsoMCkgYW5kIHRoZXJlJ3MgYSBjYWxsYmFjayB0aGF0IHNpdHMgYXQgMC4gU2luY2UgZXZlbnRzIGFyZSBzdXBwcmVzc2VkIG9uIHRoYXQgc2VlaygpIGJ5IGRlZmF1bHQsIG5vdGhpbmcgd2lsbCBmaXJlLCBidXQgd2hlbiB0aGUgcGxheWhlYWQgbW92ZXMgb2ZmIG9mIHRoYXQgcG9zaXRpb24sIHRoZSBjYWxsYmFjayBzaG91bGQgZmlyZS4gVGhpcyBiZWhhdmlvciBpcyB3aGF0IHBlb3BsZSBpbnR1aXRpdmVseSBleHBlY3QuXG5cbiAgICBzdXBwcmVzc0V2ZW50cyB8fCAoc3VwcHJlc3NFdmVudHMgPSB0b3RhbFRpbWUgJiYgIXByZXZJdGVyYXRpb24pOyAvLyBpZiBpdCB3YXMgcmVuZGVyZWQgcHJldmlvdXNseSBhdCBleGFjdGx5IDAgKF96VGltZSkgYW5kIG5vdyB0aGUgcGxheWhlYWQgaXMgbW92aW5nIGF3YXksIERPTidUIGZpcmUgY2FsbGJhY2tzIG90aGVyd2lzZSB0aGV5J2xsIHNlZW0gbGlrZSBkdXBsaWNhdGVzLlxuXG4gICAgdHdlZW4ucmF0aW8gPSByYXRpbztcbiAgICB0d2Vlbi5fZnJvbSAmJiAocmF0aW8gPSAxIC0gcmF0aW8pO1xuICAgIHR3ZWVuLl90aW1lID0gMDtcbiAgICB0d2Vlbi5fdFRpbWUgPSB0VGltZTtcbiAgICBzdXBwcmVzc0V2ZW50cyB8fCBfY2FsbGJhY2sodHdlZW4sIFwib25TdGFydFwiKTtcbiAgICBwdCA9IHR3ZWVuLl9wdDtcblxuICAgIHdoaWxlIChwdCkge1xuICAgICAgcHQucihyYXRpbywgcHQuZCk7XG4gICAgICBwdCA9IHB0Ll9uZXh0O1xuICAgIH1cblxuICAgIHR3ZWVuLl9zdGFydEF0ICYmIHRvdGFsVGltZSA8IDAgJiYgdHdlZW4uX3N0YXJ0QXQucmVuZGVyKHRvdGFsVGltZSwgdHJ1ZSwgdHJ1ZSk7XG4gICAgdHdlZW4uX29uVXBkYXRlICYmICFzdXBwcmVzc0V2ZW50cyAmJiBfY2FsbGJhY2sodHdlZW4sIFwib25VcGRhdGVcIik7XG4gICAgdFRpbWUgJiYgdHdlZW4uX3JlcGVhdCAmJiAhc3VwcHJlc3NFdmVudHMgJiYgdHdlZW4ucGFyZW50ICYmIF9jYWxsYmFjayh0d2VlbiwgXCJvblJlcGVhdFwiKTtcblxuICAgIGlmICgodG90YWxUaW1lID49IHR3ZWVuLl90RHVyIHx8IHRvdGFsVGltZSA8IDApICYmIHR3ZWVuLnJhdGlvID09PSByYXRpbykge1xuICAgICAgcmF0aW8gJiYgX3JlbW92ZUZyb21QYXJlbnQodHdlZW4sIDEpO1xuXG4gICAgICBpZiAoIXN1cHByZXNzRXZlbnRzKSB7XG4gICAgICAgIF9jYWxsYmFjayh0d2VlbiwgcmF0aW8gPyBcIm9uQ29tcGxldGVcIiA6IFwib25SZXZlcnNlQ29tcGxldGVcIiwgdHJ1ZSk7XG5cbiAgICAgICAgdHdlZW4uX3Byb20gJiYgdHdlZW4uX3Byb20oKTtcbiAgICAgIH1cbiAgICB9XG4gIH0gZWxzZSBpZiAoIXR3ZWVuLl96VGltZSkge1xuICAgIHR3ZWVuLl96VGltZSA9IHRvdGFsVGltZTtcbiAgfVxufSxcbiAgICBfZmluZE5leHRQYXVzZVR3ZWVuID0gZnVuY3Rpb24gX2ZpbmROZXh0UGF1c2VUd2VlbihhbmltYXRpb24sIHByZXZUaW1lLCB0aW1lKSB7XG4gIHZhciBjaGlsZDtcblxuICBpZiAodGltZSA+IHByZXZUaW1lKSB7XG4gICAgY2hpbGQgPSBhbmltYXRpb24uX2ZpcnN0O1xuXG4gICAgd2hpbGUgKGNoaWxkICYmIGNoaWxkLl9zdGFydCA8PSB0aW1lKSB7XG4gICAgICBpZiAoIWNoaWxkLl9kdXIgJiYgY2hpbGQuZGF0YSA9PT0gXCJpc1BhdXNlXCIgJiYgY2hpbGQuX3N0YXJ0ID4gcHJldlRpbWUpIHtcbiAgICAgICAgcmV0dXJuIGNoaWxkO1xuICAgICAgfVxuXG4gICAgICBjaGlsZCA9IGNoaWxkLl9uZXh0O1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBjaGlsZCA9IGFuaW1hdGlvbi5fbGFzdDtcblxuICAgIHdoaWxlIChjaGlsZCAmJiBjaGlsZC5fc3RhcnQgPj0gdGltZSkge1xuICAgICAgaWYgKCFjaGlsZC5fZHVyICYmIGNoaWxkLmRhdGEgPT09IFwiaXNQYXVzZVwiICYmIGNoaWxkLl9zdGFydCA8IHByZXZUaW1lKSB7XG4gICAgICAgIHJldHVybiBjaGlsZDtcbiAgICAgIH1cblxuICAgICAgY2hpbGQgPSBjaGlsZC5fcHJldjtcbiAgICB9XG4gIH1cbn0sXG4gICAgX3NldER1cmF0aW9uID0gZnVuY3Rpb24gX3NldER1cmF0aW9uKGFuaW1hdGlvbiwgZHVyYXRpb24sIHNraXBVbmNhY2hlLCBsZWF2ZVBsYXloZWFkKSB7XG4gIHZhciByZXBlYXQgPSBhbmltYXRpb24uX3JlcGVhdCxcbiAgICAgIGR1ciA9IF9yb3VuZChkdXJhdGlvbikgfHwgMCxcbiAgICAgIHRvdGFsUHJvZ3Jlc3MgPSBhbmltYXRpb24uX3RUaW1lIC8gYW5pbWF0aW9uLl90RHVyO1xuICB0b3RhbFByb2dyZXNzICYmICFsZWF2ZVBsYXloZWFkICYmIChhbmltYXRpb24uX3RpbWUgKj0gZHVyIC8gYW5pbWF0aW9uLl9kdXIpO1xuICBhbmltYXRpb24uX2R1ciA9IGR1cjtcbiAgYW5pbWF0aW9uLl90RHVyID0gIXJlcGVhdCA/IGR1ciA6IHJlcGVhdCA8IDAgPyAxZTEwIDogX3JvdW5kKGR1ciAqIChyZXBlYXQgKyAxKSArIGFuaW1hdGlvbi5fckRlbGF5ICogcmVwZWF0KTtcbiAgdG90YWxQcm9ncmVzcyAmJiAhbGVhdmVQbGF5aGVhZCA/IF9hbGlnblBsYXloZWFkKGFuaW1hdGlvbiwgYW5pbWF0aW9uLl90VGltZSA9IGFuaW1hdGlvbi5fdER1ciAqIHRvdGFsUHJvZ3Jlc3MpIDogYW5pbWF0aW9uLnBhcmVudCAmJiBfc2V0RW5kKGFuaW1hdGlvbik7XG4gIHNraXBVbmNhY2hlIHx8IF91bmNhY2hlKGFuaW1hdGlvbi5wYXJlbnQsIGFuaW1hdGlvbik7XG4gIHJldHVybiBhbmltYXRpb247XG59LFxuICAgIF9vblVwZGF0ZVRvdGFsRHVyYXRpb24gPSBmdW5jdGlvbiBfb25VcGRhdGVUb3RhbER1cmF0aW9uKGFuaW1hdGlvbikge1xuICByZXR1cm4gYW5pbWF0aW9uIGluc3RhbmNlb2YgVGltZWxpbmUgPyBfdW5jYWNoZShhbmltYXRpb24pIDogX3NldER1cmF0aW9uKGFuaW1hdGlvbiwgYW5pbWF0aW9uLl9kdXIpO1xufSxcbiAgICBfemVyb1Bvc2l0aW9uID0ge1xuICBfc3RhcnQ6IDAsXG4gIGVuZFRpbWU6IF9lbXB0eUZ1bmNcbn0sXG4gICAgX3BhcnNlUG9zaXRpb24gPSBmdW5jdGlvbiBfcGFyc2VQb3NpdGlvbihhbmltYXRpb24sIHBvc2l0aW9uKSB7XG4gIHZhciBsYWJlbHMgPSBhbmltYXRpb24ubGFiZWxzLFxuICAgICAgcmVjZW50ID0gYW5pbWF0aW9uLl9yZWNlbnQgfHwgX3plcm9Qb3NpdGlvbixcbiAgICAgIGNsaXBwZWREdXJhdGlvbiA9IGFuaW1hdGlvbi5kdXJhdGlvbigpID49IF9iaWdOdW0gPyByZWNlbnQuZW5kVGltZShmYWxzZSkgOiBhbmltYXRpb24uX2R1cixcbiAgICAgIC8vaW4gY2FzZSB0aGVyZSdzIGEgY2hpbGQgdGhhdCBpbmZpbml0ZWx5IHJlcGVhdHMsIHVzZXJzIGFsbW9zdCBuZXZlciBpbnRlbmQgZm9yIHRoZSBpbnNlcnRpb24gcG9pbnQgb2YgYSBuZXcgY2hpbGQgdG8gYmUgYmFzZWQgb24gYSBTVVBFUiBsb25nIHZhbHVlIGxpa2UgdGhhdCBzbyB3ZSBjbGlwIGl0IGFuZCBhc3N1bWUgdGhlIG1vc3QgcmVjZW50bHktYWRkZWQgY2hpbGQncyBlbmRUaW1lIHNob3VsZCBiZSB1c2VkIGluc3RlYWQuXG4gIGksXG4gICAgICBvZmZzZXQ7XG5cbiAgaWYgKF9pc1N0cmluZyhwb3NpdGlvbikgJiYgKGlzTmFOKHBvc2l0aW9uKSB8fCBwb3NpdGlvbiBpbiBsYWJlbHMpKSB7XG4gICAgLy9pZiB0aGUgc3RyaW5nIGlzIGEgbnVtYmVyIGxpa2UgXCIxXCIsIGNoZWNrIHRvIHNlZSBpZiB0aGVyZSdzIGEgbGFiZWwgd2l0aCB0aGF0IG5hbWUsIG90aGVyd2lzZSBpbnRlcnByZXQgaXQgYXMgYSBudW1iZXIgKGFic29sdXRlIHZhbHVlKS5cbiAgICBpID0gcG9zaXRpb24uY2hhckF0KDApO1xuXG4gICAgaWYgKGkgPT09IFwiPFwiIHx8IGkgPT09IFwiPlwiKSB7XG4gICAgICByZXR1cm4gKGkgPT09IFwiPFwiID8gcmVjZW50Ll9zdGFydCA6IHJlY2VudC5lbmRUaW1lKHJlY2VudC5fcmVwZWF0ID49IDApKSArIChwYXJzZUZsb2F0KHBvc2l0aW9uLnN1YnN0cigxKSkgfHwgMCk7XG4gICAgfVxuXG4gICAgaSA9IHBvc2l0aW9uLmluZGV4T2YoXCI9XCIpO1xuXG4gICAgaWYgKGkgPCAwKSB7XG4gICAgICBwb3NpdGlvbiBpbiBsYWJlbHMgfHwgKGxhYmVsc1twb3NpdGlvbl0gPSBjbGlwcGVkRHVyYXRpb24pO1xuICAgICAgcmV0dXJuIGxhYmVsc1twb3NpdGlvbl07XG4gICAgfVxuXG4gICAgb2Zmc2V0ID0gKyhwb3NpdGlvbi5jaGFyQXQoaSAtIDEpICsgcG9zaXRpb24uc3Vic3RyKGkgKyAxKSk7XG4gICAgcmV0dXJuIGkgPiAxID8gX3BhcnNlUG9zaXRpb24oYW5pbWF0aW9uLCBwb3NpdGlvbi5zdWJzdHIoMCwgaSAtIDEpKSArIG9mZnNldCA6IGNsaXBwZWREdXJhdGlvbiArIG9mZnNldDtcbiAgfVxuXG4gIHJldHVybiBwb3NpdGlvbiA9PSBudWxsID8gY2xpcHBlZER1cmF0aW9uIDogK3Bvc2l0aW9uO1xufSxcbiAgICBfY29uZGl0aW9uYWxSZXR1cm4gPSBmdW5jdGlvbiBfY29uZGl0aW9uYWxSZXR1cm4odmFsdWUsIGZ1bmMpIHtcbiAgcmV0dXJuIHZhbHVlIHx8IHZhbHVlID09PSAwID8gZnVuYyh2YWx1ZSkgOiBmdW5jO1xufSxcbiAgICBfY2xhbXAgPSBmdW5jdGlvbiBfY2xhbXAobWluLCBtYXgsIHZhbHVlKSB7XG4gIHJldHVybiB2YWx1ZSA8IG1pbiA/IG1pbiA6IHZhbHVlID4gbWF4ID8gbWF4IDogdmFsdWU7XG59LFxuICAgIGdldFVuaXQgPSBmdW5jdGlvbiBnZXRVbml0KHZhbHVlKSB7XG4gIHJldHVybiAodmFsdWUgPSAodmFsdWUgKyBcIlwiKS5zdWJzdHIoKHBhcnNlRmxvYXQodmFsdWUpICsgXCJcIikubGVuZ3RoKSkgJiYgaXNOYU4odmFsdWUpID8gdmFsdWUgOiBcIlwiO1xufSxcbiAgICAvLyBub3RlOiBwcm90ZWN0IGFnYWluc3QgcGFkZGVkIG51bWJlcnMgYXMgc3RyaW5ncywgbGlrZSBcIjEwMC4xMDBcIi4gVGhhdCBzaG91bGRuJ3QgcmV0dXJuIFwiMDBcIiBhcyB0aGUgdW5pdC4gSWYgaXQncyBudW1lcmljLCByZXR1cm4gbm8gdW5pdC5cbmNsYW1wID0gZnVuY3Rpb24gY2xhbXAobWluLCBtYXgsIHZhbHVlKSB7XG4gIHJldHVybiBfY29uZGl0aW9uYWxSZXR1cm4odmFsdWUsIGZ1bmN0aW9uICh2KSB7XG4gICAgcmV0dXJuIF9jbGFtcChtaW4sIG1heCwgdik7XG4gIH0pO1xufSxcbiAgICBfc2xpY2UgPSBbXS5zbGljZSxcbiAgICBfaXNBcnJheUxpa2UgPSBmdW5jdGlvbiBfaXNBcnJheUxpa2UodmFsdWUsIG5vbkVtcHR5KSB7XG4gIHJldHVybiB2YWx1ZSAmJiBfaXNPYmplY3QodmFsdWUpICYmIFwibGVuZ3RoXCIgaW4gdmFsdWUgJiYgKCFub25FbXB0eSAmJiAhdmFsdWUubGVuZ3RoIHx8IHZhbHVlLmxlbmd0aCAtIDEgaW4gdmFsdWUgJiYgX2lzT2JqZWN0KHZhbHVlWzBdKSkgJiYgIXZhbHVlLm5vZGVUeXBlICYmIHZhbHVlICE9PSBfd2luO1xufSxcbiAgICBfZmxhdHRlbiA9IGZ1bmN0aW9uIF9mbGF0dGVuKGFyLCBsZWF2ZVN0cmluZ3MsIGFjY3VtdWxhdG9yKSB7XG4gIGlmIChhY2N1bXVsYXRvciA9PT0gdm9pZCAwKSB7XG4gICAgYWNjdW11bGF0b3IgPSBbXTtcbiAgfVxuXG4gIHJldHVybiBhci5mb3JFYWNoKGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgIHZhciBfYWNjdW11bGF0b3I7XG5cbiAgICByZXR1cm4gX2lzU3RyaW5nKHZhbHVlKSAmJiAhbGVhdmVTdHJpbmdzIHx8IF9pc0FycmF5TGlrZSh2YWx1ZSwgMSkgPyAoX2FjY3VtdWxhdG9yID0gYWNjdW11bGF0b3IpLnB1c2guYXBwbHkoX2FjY3VtdWxhdG9yLCB0b0FycmF5KHZhbHVlKSkgOiBhY2N1bXVsYXRvci5wdXNoKHZhbHVlKTtcbiAgfSkgfHwgYWNjdW11bGF0b3I7XG59LFxuICAgIC8vdGFrZXMgYW55IHZhbHVlIGFuZCByZXR1cm5zIGFuIGFycmF5LiBJZiBpdCdzIGEgc3RyaW5nIChhbmQgbGVhdmVTdHJpbmdzIGlzbid0IHRydWUpLCBpdCdsbCB1c2UgZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgpIGFuZCBjb252ZXJ0IHRoYXQgdG8gYW4gYXJyYXkuIEl0J2xsIGFsc28gYWNjZXB0IGl0ZXJhYmxlcyBsaWtlIGpRdWVyeSBvYmplY3RzLlxudG9BcnJheSA9IGZ1bmN0aW9uIHRvQXJyYXkodmFsdWUsIGxlYXZlU3RyaW5ncykge1xuICByZXR1cm4gX2lzU3RyaW5nKHZhbHVlKSAmJiAhbGVhdmVTdHJpbmdzICYmIChfY29yZUluaXR0ZWQgfHwgIV93YWtlKCkpID8gX3NsaWNlLmNhbGwoX2RvYy5xdWVyeVNlbGVjdG9yQWxsKHZhbHVlKSwgMCkgOiBfaXNBcnJheSh2YWx1ZSkgPyBfZmxhdHRlbih2YWx1ZSwgbGVhdmVTdHJpbmdzKSA6IF9pc0FycmF5TGlrZSh2YWx1ZSkgPyBfc2xpY2UuY2FsbCh2YWx1ZSwgMCkgOiB2YWx1ZSA/IFt2YWx1ZV0gOiBbXTtcbn0sXG4gICAgc2h1ZmZsZSA9IGZ1bmN0aW9uIHNodWZmbGUoYSkge1xuICByZXR1cm4gYS5zb3J0KGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gLjUgLSBNYXRoLnJhbmRvbSgpO1xuICB9KTtcbn0sXG4gICAgLy8gYWx0ZXJuYXRpdmUgdGhhdCdzIGEgYml0IGZhc3RlciBhbmQgbW9yZSByZWxpYWJseSBkaXZlcnNlIGJ1dCBiaWdnZXI6ICAgZm9yIChsZXQgaiwgdiwgaSA9IGEubGVuZ3RoOyBpOyBqID0gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogaSksIHYgPSBhWy0taV0sIGFbaV0gPSBhW2pdLCBhW2pdID0gdik7IHJldHVybiBhO1xuLy9mb3IgZGlzdHJpYnV0aW5nIHZhbHVlcyBhY3Jvc3MgYW4gYXJyYXkuIENhbiBhY2NlcHQgYSBudW1iZXIsIGEgZnVuY3Rpb24gb3IgKG1vc3QgY29tbW9ubHkpIGEgZnVuY3Rpb24gd2hpY2ggY2FuIGNvbnRhaW4gdGhlIGZvbGxvd2luZyBwcm9wZXJ0aWVzOiB7YmFzZSwgYW1vdW50LCBmcm9tLCBlYXNlLCBncmlkLCBheGlzLCBsZW5ndGgsIGVhY2h9LiBSZXR1cm5zIGEgZnVuY3Rpb24gdGhhdCBleHBlY3RzIHRoZSBmb2xsb3dpbmcgcGFyYW1ldGVyczogaW5kZXgsIHRhcmdldCwgYXJyYXkuIFJlY29nbml6ZXMgdGhlIGZvbGxvd2luZ1xuZGlzdHJpYnV0ZSA9IGZ1bmN0aW9uIGRpc3RyaWJ1dGUodikge1xuICBpZiAoX2lzRnVuY3Rpb24odikpIHtcbiAgICByZXR1cm4gdjtcbiAgfVxuXG4gIHZhciB2YXJzID0gX2lzT2JqZWN0KHYpID8gdiA6IHtcbiAgICBlYWNoOiB2XG4gIH0sXG4gICAgICAvL246MSBpcyBqdXN0IHRvIGluZGljYXRlIHYgd2FzIGEgbnVtYmVyOyB3ZSBsZXZlcmFnZSB0aGF0IGxhdGVyIHRvIHNldCB2IGFjY29yZGluZyB0byB0aGUgbGVuZ3RoIHdlIGdldC4gSWYgYSBudW1iZXIgaXMgcGFzc2VkIGluLCB3ZSB0cmVhdCBpdCBsaWtlIHRoZSBvbGQgc3RhZ2dlciB2YWx1ZSB3aGVyZSAwLjEsIGZvciBleGFtcGxlLCB3b3VsZCBtZWFuIHRoYXQgdGhpbmdzIHdvdWxkIGJlIGRpc3RyaWJ1dGVkIHdpdGggMC4xIGJldHdlZW4gZWFjaCBlbGVtZW50IGluIHRoZSBhcnJheSByYXRoZXIgdGhhbiBhIHRvdGFsIFwiYW1vdW50XCIgdGhhdCdzIGNodW5rZWQgb3V0IGFtb25nIHRoZW0gYWxsLlxuICBlYXNlID0gX3BhcnNlRWFzZSh2YXJzLmVhc2UpLFxuICAgICAgZnJvbSA9IHZhcnMuZnJvbSB8fCAwLFxuICAgICAgYmFzZSA9IHBhcnNlRmxvYXQodmFycy5iYXNlKSB8fCAwLFxuICAgICAgY2FjaGUgPSB7fSxcbiAgICAgIGlzRGVjaW1hbCA9IGZyb20gPiAwICYmIGZyb20gPCAxLFxuICAgICAgcmF0aW9zID0gaXNOYU4oZnJvbSkgfHwgaXNEZWNpbWFsLFxuICAgICAgYXhpcyA9IHZhcnMuYXhpcyxcbiAgICAgIHJhdGlvWCA9IGZyb20sXG4gICAgICByYXRpb1kgPSBmcm9tO1xuXG4gIGlmIChfaXNTdHJpbmcoZnJvbSkpIHtcbiAgICByYXRpb1ggPSByYXRpb1kgPSB7XG4gICAgICBjZW50ZXI6IC41LFxuICAgICAgZWRnZXM6IC41LFxuICAgICAgZW5kOiAxXG4gICAgfVtmcm9tXSB8fCAwO1xuICB9IGVsc2UgaWYgKCFpc0RlY2ltYWwgJiYgcmF0aW9zKSB7XG4gICAgcmF0aW9YID0gZnJvbVswXTtcbiAgICByYXRpb1kgPSBmcm9tWzFdO1xuICB9XG5cbiAgcmV0dXJuIGZ1bmN0aW9uIChpLCB0YXJnZXQsIGEpIHtcbiAgICB2YXIgbCA9IChhIHx8IHZhcnMpLmxlbmd0aCxcbiAgICAgICAgZGlzdGFuY2VzID0gY2FjaGVbbF0sXG4gICAgICAgIG9yaWdpblgsXG4gICAgICAgIG9yaWdpblksXG4gICAgICAgIHgsXG4gICAgICAgIHksXG4gICAgICAgIGQsXG4gICAgICAgIGosXG4gICAgICAgIG1heCxcbiAgICAgICAgbWluLFxuICAgICAgICB3cmFwQXQ7XG5cbiAgICBpZiAoIWRpc3RhbmNlcykge1xuICAgICAgd3JhcEF0ID0gdmFycy5ncmlkID09PSBcImF1dG9cIiA/IDAgOiAodmFycy5ncmlkIHx8IFsxLCBfYmlnTnVtXSlbMV07XG5cbiAgICAgIGlmICghd3JhcEF0KSB7XG4gICAgICAgIG1heCA9IC1fYmlnTnVtO1xuXG4gICAgICAgIHdoaWxlIChtYXggPCAobWF4ID0gYVt3cmFwQXQrK10uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkubGVmdCkgJiYgd3JhcEF0IDwgbCkge31cblxuICAgICAgICB3cmFwQXQtLTtcbiAgICAgIH1cblxuICAgICAgZGlzdGFuY2VzID0gY2FjaGVbbF0gPSBbXTtcbiAgICAgIG9yaWdpblggPSByYXRpb3MgPyBNYXRoLm1pbih3cmFwQXQsIGwpICogcmF0aW9YIC0gLjUgOiBmcm9tICUgd3JhcEF0O1xuICAgICAgb3JpZ2luWSA9IHJhdGlvcyA/IGwgKiByYXRpb1kgLyB3cmFwQXQgLSAuNSA6IGZyb20gLyB3cmFwQXQgfCAwO1xuICAgICAgbWF4ID0gMDtcbiAgICAgIG1pbiA9IF9iaWdOdW07XG5cbiAgICAgIGZvciAoaiA9IDA7IGogPCBsOyBqKyspIHtcbiAgICAgICAgeCA9IGogJSB3cmFwQXQgLSBvcmlnaW5YO1xuICAgICAgICB5ID0gb3JpZ2luWSAtIChqIC8gd3JhcEF0IHwgMCk7XG4gICAgICAgIGRpc3RhbmNlc1tqXSA9IGQgPSAhYXhpcyA/IF9zcXJ0KHggKiB4ICsgeSAqIHkpIDogTWF0aC5hYnMoYXhpcyA9PT0gXCJ5XCIgPyB5IDogeCk7XG4gICAgICAgIGQgPiBtYXggJiYgKG1heCA9IGQpO1xuICAgICAgICBkIDwgbWluICYmIChtaW4gPSBkKTtcbiAgICAgIH1cblxuICAgICAgZnJvbSA9PT0gXCJyYW5kb21cIiAmJiBzaHVmZmxlKGRpc3RhbmNlcyk7XG4gICAgICBkaXN0YW5jZXMubWF4ID0gbWF4IC0gbWluO1xuICAgICAgZGlzdGFuY2VzLm1pbiA9IG1pbjtcbiAgICAgIGRpc3RhbmNlcy52ID0gbCA9IChwYXJzZUZsb2F0KHZhcnMuYW1vdW50KSB8fCBwYXJzZUZsb2F0KHZhcnMuZWFjaCkgKiAod3JhcEF0ID4gbCA/IGwgLSAxIDogIWF4aXMgPyBNYXRoLm1heCh3cmFwQXQsIGwgLyB3cmFwQXQpIDogYXhpcyA9PT0gXCJ5XCIgPyBsIC8gd3JhcEF0IDogd3JhcEF0KSB8fCAwKSAqIChmcm9tID09PSBcImVkZ2VzXCIgPyAtMSA6IDEpO1xuICAgICAgZGlzdGFuY2VzLmIgPSBsIDwgMCA/IGJhc2UgLSBsIDogYmFzZTtcbiAgICAgIGRpc3RhbmNlcy51ID0gZ2V0VW5pdCh2YXJzLmFtb3VudCB8fCB2YXJzLmVhY2gpIHx8IDA7IC8vdW5pdFxuXG4gICAgICBlYXNlID0gZWFzZSAmJiBsIDwgMCA/IF9pbnZlcnRFYXNlKGVhc2UpIDogZWFzZTtcbiAgICB9XG5cbiAgICBsID0gKGRpc3RhbmNlc1tpXSAtIGRpc3RhbmNlcy5taW4pIC8gZGlzdGFuY2VzLm1heCB8fCAwO1xuICAgIHJldHVybiBfcm91bmQoZGlzdGFuY2VzLmIgKyAoZWFzZSA/IGVhc2UobCkgOiBsKSAqIGRpc3RhbmNlcy52KSArIGRpc3RhbmNlcy51OyAvL3JvdW5kIGluIG9yZGVyIHRvIHdvcmsgYXJvdW5kIGZsb2F0aW5nIHBvaW50IGVycm9yc1xuICB9O1xufSxcbiAgICBfcm91bmRNb2RpZmllciA9IGZ1bmN0aW9uIF9yb3VuZE1vZGlmaWVyKHYpIHtcbiAgLy9wYXNzIGluIDAuMSBnZXQgYSBmdW5jdGlvbiB0aGF0J2xsIHJvdW5kIHRvIHRoZSBuZWFyZXN0IHRlbnRoLCBvciA1IHRvIHJvdW5kIHRvIHRoZSBjbG9zZXN0IDUsIG9yIDAuMDAxIHRvIHRoZSBjbG9zZXN0IDEwMDB0aCwgZXRjLlxuICB2YXIgcCA9IHYgPCAxID8gTWF0aC5wb3coMTAsICh2ICsgXCJcIikubGVuZ3RoIC0gMikgOiAxOyAvL3RvIGF2b2lkIGZsb2F0aW5nIHBvaW50IG1hdGggZXJyb3JzIChsaWtlIDI0ICogMC4xID09IDIuNDAwMDAwMDAwMDAwMDAwNCksIHdlIGNob3Agb2ZmIGF0IGEgc3BlY2lmaWMgbnVtYmVyIG9mIGRlY2ltYWwgcGxhY2VzIChtdWNoIGZhc3RlciB0aGFuIHRvRml4ZWQoKVxuXG4gIHJldHVybiBmdW5jdGlvbiAocmF3KSB7XG4gICAgcmV0dXJuIE1hdGguZmxvb3IoTWF0aC5yb3VuZChwYXJzZUZsb2F0KHJhdykgLyB2KSAqIHYgKiBwKSAvIHAgKyAoX2lzTnVtYmVyKHJhdykgPyAwIDogZ2V0VW5pdChyYXcpKTtcbiAgfTtcbn0sXG4gICAgc25hcCA9IGZ1bmN0aW9uIHNuYXAoc25hcFRvLCB2YWx1ZSkge1xuICB2YXIgaXNBcnJheSA9IF9pc0FycmF5KHNuYXBUbyksXG4gICAgICByYWRpdXMsXG4gICAgICBpczJEO1xuXG4gIGlmICghaXNBcnJheSAmJiBfaXNPYmplY3Qoc25hcFRvKSkge1xuICAgIHJhZGl1cyA9IGlzQXJyYXkgPSBzbmFwVG8ucmFkaXVzIHx8IF9iaWdOdW07XG5cbiAgICBpZiAoc25hcFRvLnZhbHVlcykge1xuICAgICAgc25hcFRvID0gdG9BcnJheShzbmFwVG8udmFsdWVzKTtcblxuICAgICAgaWYgKGlzMkQgPSAhX2lzTnVtYmVyKHNuYXBUb1swXSkpIHtcbiAgICAgICAgcmFkaXVzICo9IHJhZGl1czsgLy9wZXJmb3JtYW5jZSBvcHRpbWl6YXRpb24gc28gd2UgZG9uJ3QgaGF2ZSB0byBNYXRoLnNxcnQoKSBpbiB0aGUgbG9vcC5cbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgc25hcFRvID0gX3JvdW5kTW9kaWZpZXIoc25hcFRvLmluY3JlbWVudCk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIF9jb25kaXRpb25hbFJldHVybih2YWx1ZSwgIWlzQXJyYXkgPyBfcm91bmRNb2RpZmllcihzbmFwVG8pIDogX2lzRnVuY3Rpb24oc25hcFRvKSA/IGZ1bmN0aW9uIChyYXcpIHtcbiAgICBpczJEID0gc25hcFRvKHJhdyk7XG4gICAgcmV0dXJuIE1hdGguYWJzKGlzMkQgLSByYXcpIDw9IHJhZGl1cyA/IGlzMkQgOiByYXc7XG4gIH0gOiBmdW5jdGlvbiAocmF3KSB7XG4gICAgdmFyIHggPSBwYXJzZUZsb2F0KGlzMkQgPyByYXcueCA6IHJhdyksXG4gICAgICAgIHkgPSBwYXJzZUZsb2F0KGlzMkQgPyByYXcueSA6IDApLFxuICAgICAgICBtaW4gPSBfYmlnTnVtLFxuICAgICAgICBjbG9zZXN0ID0gMCxcbiAgICAgICAgaSA9IHNuYXBUby5sZW5ndGgsXG4gICAgICAgIGR4LFxuICAgICAgICBkeTtcblxuICAgIHdoaWxlIChpLS0pIHtcbiAgICAgIGlmIChpczJEKSB7XG4gICAgICAgIGR4ID0gc25hcFRvW2ldLnggLSB4O1xuICAgICAgICBkeSA9IHNuYXBUb1tpXS55IC0geTtcbiAgICAgICAgZHggPSBkeCAqIGR4ICsgZHkgKiBkeTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGR4ID0gTWF0aC5hYnMoc25hcFRvW2ldIC0geCk7XG4gICAgICB9XG5cbiAgICAgIGlmIChkeCA8IG1pbikge1xuICAgICAgICBtaW4gPSBkeDtcbiAgICAgICAgY2xvc2VzdCA9IGk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgY2xvc2VzdCA9ICFyYWRpdXMgfHwgbWluIDw9IHJhZGl1cyA/IHNuYXBUb1tjbG9zZXN0XSA6IHJhdztcbiAgICByZXR1cm4gaXMyRCB8fCBjbG9zZXN0ID09PSByYXcgfHwgX2lzTnVtYmVyKHJhdykgPyBjbG9zZXN0IDogY2xvc2VzdCArIGdldFVuaXQocmF3KTtcbiAgfSk7XG59LFxuICAgIHJhbmRvbSA9IGZ1bmN0aW9uIHJhbmRvbShtaW4sIG1heCwgcm91bmRpbmdJbmNyZW1lbnQsIHJldHVybkZ1bmN0aW9uKSB7XG4gIHJldHVybiBfY29uZGl0aW9uYWxSZXR1cm4oX2lzQXJyYXkobWluKSA/ICFtYXggOiByb3VuZGluZ0luY3JlbWVudCA9PT0gdHJ1ZSA/ICEhKHJvdW5kaW5nSW5jcmVtZW50ID0gMCkgOiAhcmV0dXJuRnVuY3Rpb24sIGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gX2lzQXJyYXkobWluKSA/IG1pblt+fihNYXRoLnJhbmRvbSgpICogbWluLmxlbmd0aCldIDogKHJvdW5kaW5nSW5jcmVtZW50ID0gcm91bmRpbmdJbmNyZW1lbnQgfHwgMWUtNSkgJiYgKHJldHVybkZ1bmN0aW9uID0gcm91bmRpbmdJbmNyZW1lbnQgPCAxID8gTWF0aC5wb3coMTAsIChyb3VuZGluZ0luY3JlbWVudCArIFwiXCIpLmxlbmd0aCAtIDIpIDogMSkgJiYgTWF0aC5mbG9vcihNYXRoLnJvdW5kKChtaW4gKyBNYXRoLnJhbmRvbSgpICogKG1heCAtIG1pbikpIC8gcm91bmRpbmdJbmNyZW1lbnQpICogcm91bmRpbmdJbmNyZW1lbnQgKiByZXR1cm5GdW5jdGlvbikgLyByZXR1cm5GdW5jdGlvbjtcbiAgfSk7XG59LFxuICAgIHBpcGUgPSBmdW5jdGlvbiBwaXBlKCkge1xuICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgZnVuY3Rpb25zID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgIGZ1bmN0aW9uc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgfVxuXG4gIHJldHVybiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICByZXR1cm4gZnVuY3Rpb25zLnJlZHVjZShmdW5jdGlvbiAodiwgZikge1xuICAgICAgcmV0dXJuIGYodik7XG4gICAgfSwgdmFsdWUpO1xuICB9O1xufSxcbiAgICB1bml0aXplID0gZnVuY3Rpb24gdW5pdGl6ZShmdW5jLCB1bml0KSB7XG4gIHJldHVybiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICByZXR1cm4gZnVuYyhwYXJzZUZsb2F0KHZhbHVlKSkgKyAodW5pdCB8fCBnZXRVbml0KHZhbHVlKSk7XG4gIH07XG59LFxuICAgIG5vcm1hbGl6ZSA9IGZ1bmN0aW9uIG5vcm1hbGl6ZShtaW4sIG1heCwgdmFsdWUpIHtcbiAgcmV0dXJuIG1hcFJhbmdlKG1pbiwgbWF4LCAwLCAxLCB2YWx1ZSk7XG59LFxuICAgIF93cmFwQXJyYXkgPSBmdW5jdGlvbiBfd3JhcEFycmF5KGEsIHdyYXBwZXIsIHZhbHVlKSB7XG4gIHJldHVybiBfY29uZGl0aW9uYWxSZXR1cm4odmFsdWUsIGZ1bmN0aW9uIChpbmRleCkge1xuICAgIHJldHVybiBhW35+d3JhcHBlcihpbmRleCldO1xuICB9KTtcbn0sXG4gICAgd3JhcCA9IGZ1bmN0aW9uIHdyYXAobWluLCBtYXgsIHZhbHVlKSB7XG4gIC8vIE5PVEU6IHdyYXAoKSBDQU5OT1QgYmUgYW4gYXJyb3cgZnVuY3Rpb24hIEEgdmVyeSBvZGQgY29tcGlsaW5nIGJ1ZyBjYXVzZXMgcHJvYmxlbXMgKHVucmVsYXRlZCB0byBHU0FQKS5cbiAgdmFyIHJhbmdlID0gbWF4IC0gbWluO1xuICByZXR1cm4gX2lzQXJyYXkobWluKSA/IF93cmFwQXJyYXkobWluLCB3cmFwKDAsIG1pbi5sZW5ndGgpLCBtYXgpIDogX2NvbmRpdGlvbmFsUmV0dXJuKHZhbHVlLCBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICByZXR1cm4gKHJhbmdlICsgKHZhbHVlIC0gbWluKSAlIHJhbmdlKSAlIHJhbmdlICsgbWluO1xuICB9KTtcbn0sXG4gICAgd3JhcFlveW8gPSBmdW5jdGlvbiB3cmFwWW95byhtaW4sIG1heCwgdmFsdWUpIHtcbiAgdmFyIHJhbmdlID0gbWF4IC0gbWluLFxuICAgICAgdG90YWwgPSByYW5nZSAqIDI7XG4gIHJldHVybiBfaXNBcnJheShtaW4pID8gX3dyYXBBcnJheShtaW4sIHdyYXBZb3lvKDAsIG1pbi5sZW5ndGggLSAxKSwgbWF4KSA6IF9jb25kaXRpb25hbFJldHVybih2YWx1ZSwgZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgdmFsdWUgPSAodG90YWwgKyAodmFsdWUgLSBtaW4pICUgdG90YWwpICUgdG90YWwgfHwgMDtcbiAgICByZXR1cm4gbWluICsgKHZhbHVlID4gcmFuZ2UgPyB0b3RhbCAtIHZhbHVlIDogdmFsdWUpO1xuICB9KTtcbn0sXG4gICAgX3JlcGxhY2VSYW5kb20gPSBmdW5jdGlvbiBfcmVwbGFjZVJhbmRvbSh2YWx1ZSkge1xuICAvL3JlcGxhY2VzIGFsbCBvY2N1cnJlbmNlcyBvZiByYW5kb20oLi4uKSBpbiBhIHN0cmluZyB3aXRoIHRoZSBjYWxjdWxhdGVkIHJhbmRvbSB2YWx1ZS4gY2FuIGJlIGEgcmFuZ2UgbGlrZSByYW5kb20oLTEwMCwgMTAwLCA1KSBvciBhbiBhcnJheSBsaWtlIHJhbmRvbShbMCwgMTAwLCA1MDBdKVxuICB2YXIgcHJldiA9IDAsXG4gICAgICBzID0gXCJcIixcbiAgICAgIGksXG4gICAgICBudW1zLFxuICAgICAgZW5kLFxuICAgICAgaXNBcnJheTtcblxuICB3aGlsZSAofihpID0gdmFsdWUuaW5kZXhPZihcInJhbmRvbShcIiwgcHJldikpKSB7XG4gICAgZW5kID0gdmFsdWUuaW5kZXhPZihcIilcIiwgaSk7XG4gICAgaXNBcnJheSA9IHZhbHVlLmNoYXJBdChpICsgNykgPT09IFwiW1wiO1xuICAgIG51bXMgPSB2YWx1ZS5zdWJzdHIoaSArIDcsIGVuZCAtIGkgLSA3KS5tYXRjaChpc0FycmF5ID8gX2RlbGltaXRlZFZhbHVlRXhwIDogX3N0cmljdE51bUV4cCk7XG4gICAgcyArPSB2YWx1ZS5zdWJzdHIocHJldiwgaSAtIHByZXYpICsgcmFuZG9tKGlzQXJyYXkgPyBudW1zIDogK251bXNbMF0sIGlzQXJyYXkgPyAwIDogK251bXNbMV0sICtudW1zWzJdIHx8IDFlLTUpO1xuICAgIHByZXYgPSBlbmQgKyAxO1xuICB9XG5cbiAgcmV0dXJuIHMgKyB2YWx1ZS5zdWJzdHIocHJldiwgdmFsdWUubGVuZ3RoIC0gcHJldik7XG59LFxuICAgIG1hcFJhbmdlID0gZnVuY3Rpb24gbWFwUmFuZ2UoaW5NaW4sIGluTWF4LCBvdXRNaW4sIG91dE1heCwgdmFsdWUpIHtcbiAgdmFyIGluUmFuZ2UgPSBpbk1heCAtIGluTWluLFxuICAgICAgb3V0UmFuZ2UgPSBvdXRNYXggLSBvdXRNaW47XG4gIHJldHVybiBfY29uZGl0aW9uYWxSZXR1cm4odmFsdWUsIGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgIHJldHVybiBvdXRNaW4gKyAoKHZhbHVlIC0gaW5NaW4pIC8gaW5SYW5nZSAqIG91dFJhbmdlIHx8IDApO1xuICB9KTtcbn0sXG4gICAgaW50ZXJwb2xhdGUgPSBmdW5jdGlvbiBpbnRlcnBvbGF0ZShzdGFydCwgZW5kLCBwcm9ncmVzcywgbXV0YXRlKSB7XG4gIHZhciBmdW5jID0gaXNOYU4oc3RhcnQgKyBlbmQpID8gMCA6IGZ1bmN0aW9uIChwKSB7XG4gICAgcmV0dXJuICgxIC0gcCkgKiBzdGFydCArIHAgKiBlbmQ7XG4gIH07XG5cbiAgaWYgKCFmdW5jKSB7XG4gICAgdmFyIGlzU3RyaW5nID0gX2lzU3RyaW5nKHN0YXJ0KSxcbiAgICAgICAgbWFzdGVyID0ge30sXG4gICAgICAgIHAsXG4gICAgICAgIGksXG4gICAgICAgIGludGVycG9sYXRvcnMsXG4gICAgICAgIGwsXG4gICAgICAgIGlsO1xuXG4gICAgcHJvZ3Jlc3MgPT09IHRydWUgJiYgKG11dGF0ZSA9IDEpICYmIChwcm9ncmVzcyA9IG51bGwpO1xuXG4gICAgaWYgKGlzU3RyaW5nKSB7XG4gICAgICBzdGFydCA9IHtcbiAgICAgICAgcDogc3RhcnRcbiAgICAgIH07XG4gICAgICBlbmQgPSB7XG4gICAgICAgIHA6IGVuZFxuICAgICAgfTtcbiAgICB9IGVsc2UgaWYgKF9pc0FycmF5KHN0YXJ0KSAmJiAhX2lzQXJyYXkoZW5kKSkge1xuICAgICAgaW50ZXJwb2xhdG9ycyA9IFtdO1xuICAgICAgbCA9IHN0YXJ0Lmxlbmd0aDtcbiAgICAgIGlsID0gbCAtIDI7XG5cbiAgICAgIGZvciAoaSA9IDE7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgaW50ZXJwb2xhdG9ycy5wdXNoKGludGVycG9sYXRlKHN0YXJ0W2kgLSAxXSwgc3RhcnRbaV0pKTsgLy9idWlsZCB0aGUgaW50ZXJwb2xhdG9ycyB1cCBmcm9udCBhcyBhIHBlcmZvcm1hbmNlIG9wdGltaXphdGlvbiBzbyB0aGF0IHdoZW4gdGhlIGZ1bmN0aW9uIGlzIGNhbGxlZCBtYW55IHRpbWVzLCBpdCBjYW4ganVzdCByZXVzZSB0aGVtLlxuICAgICAgfVxuXG4gICAgICBsLS07XG5cbiAgICAgIGZ1bmMgPSBmdW5jdGlvbiBmdW5jKHApIHtcbiAgICAgICAgcCAqPSBsO1xuICAgICAgICB2YXIgaSA9IE1hdGgubWluKGlsLCB+fnApO1xuICAgICAgICByZXR1cm4gaW50ZXJwb2xhdG9yc1tpXShwIC0gaSk7XG4gICAgICB9O1xuXG4gICAgICBwcm9ncmVzcyA9IGVuZDtcbiAgICB9IGVsc2UgaWYgKCFtdXRhdGUpIHtcbiAgICAgIHN0YXJ0ID0gX21lcmdlKF9pc0FycmF5KHN0YXJ0KSA/IFtdIDoge30sIHN0YXJ0KTtcbiAgICB9XG5cbiAgICBpZiAoIWludGVycG9sYXRvcnMpIHtcbiAgICAgIGZvciAocCBpbiBlbmQpIHtcbiAgICAgICAgX2FkZFByb3BUd2Vlbi5jYWxsKG1hc3Rlciwgc3RhcnQsIHAsIFwiZ2V0XCIsIGVuZFtwXSk7XG4gICAgICB9XG5cbiAgICAgIGZ1bmMgPSBmdW5jdGlvbiBmdW5jKHApIHtcbiAgICAgICAgcmV0dXJuIF9yZW5kZXJQcm9wVHdlZW5zKHAsIG1hc3RlcikgfHwgKGlzU3RyaW5nID8gc3RhcnQucCA6IHN0YXJ0KTtcbiAgICAgIH07XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIF9jb25kaXRpb25hbFJldHVybihwcm9ncmVzcywgZnVuYyk7XG59LFxuICAgIF9nZXRMYWJlbEluRGlyZWN0aW9uID0gZnVuY3Rpb24gX2dldExhYmVsSW5EaXJlY3Rpb24odGltZWxpbmUsIGZyb21UaW1lLCBiYWNrd2FyZCkge1xuICAvL3VzZWQgZm9yIG5leHRMYWJlbCgpIGFuZCBwcmV2aW91c0xhYmVsKClcbiAgdmFyIGxhYmVscyA9IHRpbWVsaW5lLmxhYmVscyxcbiAgICAgIG1pbiA9IF9iaWdOdW0sXG4gICAgICBwLFxuICAgICAgZGlzdGFuY2UsXG4gICAgICBsYWJlbDtcblxuICBmb3IgKHAgaW4gbGFiZWxzKSB7XG4gICAgZGlzdGFuY2UgPSBsYWJlbHNbcF0gLSBmcm9tVGltZTtcblxuICAgIGlmIChkaXN0YW5jZSA8IDAgPT09ICEhYmFja3dhcmQgJiYgZGlzdGFuY2UgJiYgbWluID4gKGRpc3RhbmNlID0gTWF0aC5hYnMoZGlzdGFuY2UpKSkge1xuICAgICAgbGFiZWwgPSBwO1xuICAgICAgbWluID0gZGlzdGFuY2U7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGxhYmVsO1xufSxcbiAgICBfY2FsbGJhY2sgPSBmdW5jdGlvbiBfY2FsbGJhY2soYW5pbWF0aW9uLCB0eXBlLCBleGVjdXRlTGF6eUZpcnN0KSB7XG4gIHZhciB2ID0gYW5pbWF0aW9uLnZhcnMsXG4gICAgICBjYWxsYmFjayA9IHZbdHlwZV0sXG4gICAgICBwYXJhbXMsXG4gICAgICBzY29wZTtcblxuICBpZiAoIWNhbGxiYWNrKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgcGFyYW1zID0gdlt0eXBlICsgXCJQYXJhbXNcIl07XG4gIHNjb3BlID0gdi5jYWxsYmFja1Njb3BlIHx8IGFuaW1hdGlvbjtcbiAgZXhlY3V0ZUxhenlGaXJzdCAmJiBfbGF6eVR3ZWVucy5sZW5ndGggJiYgX2xhenlSZW5kZXIoKTsgLy9pbiBjYXNlIHJlbmRlcmluZyBjYXVzZWQgYW55IHR3ZWVucyB0byBsYXp5LWluaXQsIHdlIHNob3VsZCByZW5kZXIgdGhlbSBiZWNhdXNlIHR5cGljYWxseSB3aGVuIGEgdGltZWxpbmUgZmluaXNoZXMsIHVzZXJzIGV4cGVjdCB0aGluZ3MgdG8gaGF2ZSByZW5kZXJlZCBmdWxseS4gSW1hZ2luZSBhbiBvblVwZGF0ZSBvbiBhIHRpbWVsaW5lIHRoYXQgcmVwb3J0cy9jaGVja3MgdHdlZW5lZCB2YWx1ZXMuXG5cbiAgcmV0dXJuIHBhcmFtcyA/IGNhbGxiYWNrLmFwcGx5KHNjb3BlLCBwYXJhbXMpIDogY2FsbGJhY2suY2FsbChzY29wZSk7XG59LFxuICAgIF9pbnRlcnJ1cHQgPSBmdW5jdGlvbiBfaW50ZXJydXB0KGFuaW1hdGlvbikge1xuICBfcmVtb3ZlRnJvbVBhcmVudChhbmltYXRpb24pO1xuXG4gIGFuaW1hdGlvbi5wcm9ncmVzcygpIDwgMSAmJiBfY2FsbGJhY2soYW5pbWF0aW9uLCBcIm9uSW50ZXJydXB0XCIpO1xuICByZXR1cm4gYW5pbWF0aW9uO1xufSxcbiAgICBfcXVpY2tUd2VlbixcbiAgICBfY3JlYXRlUGx1Z2luID0gZnVuY3Rpb24gX2NyZWF0ZVBsdWdpbihjb25maWcpIHtcbiAgY29uZmlnID0gIWNvbmZpZy5uYW1lICYmIGNvbmZpZ1tcImRlZmF1bHRcIl0gfHwgY29uZmlnOyAvL1VNRCBwYWNrYWdpbmcgd3JhcHMgdGhpbmdzIG9kZGx5LCBzbyBmb3IgZXhhbXBsZSBNb3Rpb25QYXRoSGVscGVyIGJlY29tZXMge01vdGlvblBhdGhIZWxwZXI6TW90aW9uUGF0aEhlbHBlciwgZGVmYXVsdDpNb3Rpb25QYXRoSGVscGVyfS5cblxuICB2YXIgbmFtZSA9IGNvbmZpZy5uYW1lLFxuICAgICAgaXNGdW5jID0gX2lzRnVuY3Rpb24oY29uZmlnKSxcbiAgICAgIFBsdWdpbiA9IG5hbWUgJiYgIWlzRnVuYyAmJiBjb25maWcuaW5pdCA/IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLl9wcm9wcyA9IFtdO1xuICB9IDogY29uZmlnLFxuICAgICAgLy9pbiBjYXNlIHNvbWVvbmUgcGFzc2VzIGluIGFuIG9iamVjdCB0aGF0J3Mgbm90IGEgcGx1Z2luLCBsaWtlIEN1c3RvbUVhc2VcbiAgaW5zdGFuY2VEZWZhdWx0cyA9IHtcbiAgICBpbml0OiBfZW1wdHlGdW5jLFxuICAgIHJlbmRlcjogX3JlbmRlclByb3BUd2VlbnMsXG4gICAgYWRkOiBfYWRkUHJvcFR3ZWVuLFxuICAgIGtpbGw6IF9raWxsUHJvcFR3ZWVuc09mLFxuICAgIG1vZGlmaWVyOiBfYWRkUGx1Z2luTW9kaWZpZXIsXG4gICAgcmF3VmFyczogMFxuICB9LFxuICAgICAgc3RhdGljcyA9IHtcbiAgICB0YXJnZXRUZXN0OiAwLFxuICAgIGdldDogMCxcbiAgICBnZXRTZXR0ZXI6IF9nZXRTZXR0ZXIsXG4gICAgYWxpYXNlczoge30sXG4gICAgcmVnaXN0ZXI6IDBcbiAgfTtcblxuICBfd2FrZSgpO1xuXG4gIGlmIChjb25maWcgIT09IFBsdWdpbikge1xuICAgIGlmIChfcGx1Z2luc1tuYW1lXSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIF9zZXREZWZhdWx0cyhQbHVnaW4sIF9zZXREZWZhdWx0cyhfY29weUV4Y2x1ZGluZyhjb25maWcsIGluc3RhbmNlRGVmYXVsdHMpLCBzdGF0aWNzKSk7IC8vc3RhdGljIG1ldGhvZHNcblxuXG4gICAgX21lcmdlKFBsdWdpbi5wcm90b3R5cGUsIF9tZXJnZShpbnN0YW5jZURlZmF1bHRzLCBfY29weUV4Y2x1ZGluZyhjb25maWcsIHN0YXRpY3MpKSk7IC8vaW5zdGFuY2UgbWV0aG9kc1xuXG5cbiAgICBfcGx1Z2luc1tQbHVnaW4ucHJvcCA9IG5hbWVdID0gUGx1Z2luO1xuXG4gICAgaWYgKGNvbmZpZy50YXJnZXRUZXN0KSB7XG4gICAgICBfaGFybmVzc1BsdWdpbnMucHVzaChQbHVnaW4pO1xuXG4gICAgICBfcmVzZXJ2ZWRQcm9wc1tuYW1lXSA9IDE7XG4gICAgfVxuXG4gICAgbmFtZSA9IChuYW1lID09PSBcImNzc1wiID8gXCJDU1NcIiA6IG5hbWUuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkgKyBuYW1lLnN1YnN0cigxKSkgKyBcIlBsdWdpblwiOyAvL2ZvciB0aGUgZ2xvYmFsIG5hbWUuIFwibW90aW9uUGF0aFwiIHNob3VsZCBiZWNvbWUgTW90aW9uUGF0aFBsdWdpblxuICB9XG5cbiAgX2FkZEdsb2JhbChuYW1lLCBQbHVnaW4pO1xuXG4gIGNvbmZpZy5yZWdpc3RlciAmJiBjb25maWcucmVnaXN0ZXIoZ3NhcCwgUGx1Z2luLCBQcm9wVHdlZW4pO1xufSxcblxuLypcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBDT0xPUlNcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKi9cbl8yNTUgPSAyNTUsXG4gICAgX2NvbG9yTG9va3VwID0ge1xuICBhcXVhOiBbMCwgXzI1NSwgXzI1NV0sXG4gIGxpbWU6IFswLCBfMjU1LCAwXSxcbiAgc2lsdmVyOiBbMTkyLCAxOTIsIDE5Ml0sXG4gIGJsYWNrOiBbMCwgMCwgMF0sXG4gIG1hcm9vbjogWzEyOCwgMCwgMF0sXG4gIHRlYWw6IFswLCAxMjgsIDEyOF0sXG4gIGJsdWU6IFswLCAwLCBfMjU1XSxcbiAgbmF2eTogWzAsIDAsIDEyOF0sXG4gIHdoaXRlOiBbXzI1NSwgXzI1NSwgXzI1NV0sXG4gIG9saXZlOiBbMTI4LCAxMjgsIDBdLFxuICB5ZWxsb3c6IFtfMjU1LCBfMjU1LCAwXSxcbiAgb3JhbmdlOiBbXzI1NSwgMTY1LCAwXSxcbiAgZ3JheTogWzEyOCwgMTI4LCAxMjhdLFxuICBwdXJwbGU6IFsxMjgsIDAsIDEyOF0sXG4gIGdyZWVuOiBbMCwgMTI4LCAwXSxcbiAgcmVkOiBbXzI1NSwgMCwgMF0sXG4gIHBpbms6IFtfMjU1LCAxOTIsIDIwM10sXG4gIGN5YW46IFswLCBfMjU1LCBfMjU1XSxcbiAgdHJhbnNwYXJlbnQ6IFtfMjU1LCBfMjU1LCBfMjU1LCAwXVxufSxcbiAgICBfaHVlID0gZnVuY3Rpb24gX2h1ZShoLCBtMSwgbTIpIHtcbiAgaCA9IGggPCAwID8gaCArIDEgOiBoID4gMSA/IGggLSAxIDogaDtcbiAgcmV0dXJuIChoICogNiA8IDEgPyBtMSArIChtMiAtIG0xKSAqIGggKiA2IDogaCA8IC41ID8gbTIgOiBoICogMyA8IDIgPyBtMSArIChtMiAtIG0xKSAqICgyIC8gMyAtIGgpICogNiA6IG0xKSAqIF8yNTUgKyAuNSB8IDA7XG59LFxuICAgIHNwbGl0Q29sb3IgPSBmdW5jdGlvbiBzcGxpdENvbG9yKHYsIHRvSFNMLCBmb3JjZUFscGhhKSB7XG4gIHZhciBhID0gIXYgPyBfY29sb3JMb29rdXAuYmxhY2sgOiBfaXNOdW1iZXIodikgPyBbdiA+PiAxNiwgdiA+PiA4ICYgXzI1NSwgdiAmIF8yNTVdIDogMCxcbiAgICAgIHIsXG4gICAgICBnLFxuICAgICAgYixcbiAgICAgIGgsXG4gICAgICBzLFxuICAgICAgbCxcbiAgICAgIG1heCxcbiAgICAgIG1pbixcbiAgICAgIGQsXG4gICAgICB3YXNIU0w7XG5cbiAgaWYgKCFhKSB7XG4gICAgaWYgKHYuc3Vic3RyKC0xKSA9PT0gXCIsXCIpIHtcbiAgICAgIC8vc29tZXRpbWVzIGEgdHJhaWxpbmcgY29tbWEgaXMgaW5jbHVkZWQgYW5kIHdlIHNob3VsZCBjaG9wIGl0IG9mZiAodHlwaWNhbGx5IGZyb20gYSBjb21tYS1kZWxpbWl0ZWQgbGlzdCBvZiB2YWx1ZXMgbGlrZSBhIHRleHRTaGFkb3c6XCIycHggMnB4IDJweCBibHVlLCA1cHggNXB4IDVweCByZ2IoMjU1LDAsMClcIiAtIGluIHRoaXMgZXhhbXBsZSBcImJsdWUsXCIgaGFzIGEgdHJhaWxpbmcgY29tbWEuIFdlIGNvdWxkIHN0cmlwIGl0IG91dCBpbnNpZGUgcGFyc2VDb21wbGV4KCkgYnV0IHdlJ2QgbmVlZCB0byBkbyBpdCB0byB0aGUgYmVnaW5uaW5nIGFuZCBlbmRpbmcgdmFsdWVzIHBsdXMgaXQgd291bGRuJ3QgcHJvdmlkZSBwcm90ZWN0aW9uIGZyb20gb3RoZXIgcG90ZW50aWFsIHNjZW5hcmlvcyBsaWtlIGlmIHRoZSB1c2VyIHBhc3NlcyBpbiBhIHNpbWlsYXIgdmFsdWUuXG4gICAgICB2ID0gdi5zdWJzdHIoMCwgdi5sZW5ndGggLSAxKTtcbiAgICB9XG5cbiAgICBpZiAoX2NvbG9yTG9va3VwW3ZdKSB7XG4gICAgICBhID0gX2NvbG9yTG9va3VwW3ZdO1xuICAgIH0gZWxzZSBpZiAodi5jaGFyQXQoMCkgPT09IFwiI1wiKSB7XG4gICAgICBpZiAodi5sZW5ndGggPT09IDQpIHtcbiAgICAgICAgLy9mb3Igc2hvcnRoYW5kIGxpa2UgIzlGMFxuICAgICAgICByID0gdi5jaGFyQXQoMSk7XG4gICAgICAgIGcgPSB2LmNoYXJBdCgyKTtcbiAgICAgICAgYiA9IHYuY2hhckF0KDMpO1xuICAgICAgICB2ID0gXCIjXCIgKyByICsgciArIGcgKyBnICsgYiArIGI7XG4gICAgICB9XG5cbiAgICAgIHYgPSBwYXJzZUludCh2LnN1YnN0cigxKSwgMTYpO1xuICAgICAgYSA9IFt2ID4+IDE2LCB2ID4+IDggJiBfMjU1LCB2ICYgXzI1NV07XG4gICAgfSBlbHNlIGlmICh2LnN1YnN0cigwLCAzKSA9PT0gXCJoc2xcIikge1xuICAgICAgYSA9IHdhc0hTTCA9IHYubWF0Y2goX3N0cmljdE51bUV4cCk7XG5cbiAgICAgIGlmICghdG9IU0wpIHtcbiAgICAgICAgaCA9ICthWzBdICUgMzYwIC8gMzYwO1xuICAgICAgICBzID0gK2FbMV0gLyAxMDA7XG4gICAgICAgIGwgPSArYVsyXSAvIDEwMDtcbiAgICAgICAgZyA9IGwgPD0gLjUgPyBsICogKHMgKyAxKSA6IGwgKyBzIC0gbCAqIHM7XG4gICAgICAgIHIgPSBsICogMiAtIGc7XG4gICAgICAgIGEubGVuZ3RoID4gMyAmJiAoYVszXSAqPSAxKTsgLy9jYXN0IGFzIG51bWJlclxuXG4gICAgICAgIGFbMF0gPSBfaHVlKGggKyAxIC8gMywgciwgZyk7XG4gICAgICAgIGFbMV0gPSBfaHVlKGgsIHIsIGcpO1xuICAgICAgICBhWzJdID0gX2h1ZShoIC0gMSAvIDMsIHIsIGcpO1xuICAgICAgfSBlbHNlIGlmICh+di5pbmRleE9mKFwiPVwiKSkge1xuICAgICAgICAvL2lmIHJlbGF0aXZlIHZhbHVlcyBhcmUgZm91bmQsIGp1c3QgcmV0dXJuIHRoZSByYXcgc3RyaW5ncyB3aXRoIHRoZSByZWxhdGl2ZSBwcmVmaXhlcyBpbiBwbGFjZS5cbiAgICAgICAgYSA9IHYubWF0Y2goX251bUV4cCk7XG4gICAgICAgIGZvcmNlQWxwaGEgJiYgYS5sZW5ndGggPCA0ICYmIChhWzNdID0gMSk7XG4gICAgICAgIHJldHVybiBhO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBhID0gdi5tYXRjaChfc3RyaWN0TnVtRXhwKSB8fCBfY29sb3JMb29rdXAudHJhbnNwYXJlbnQ7XG4gICAgfVxuXG4gICAgYSA9IGEubWFwKE51bWJlcik7XG4gIH1cblxuICBpZiAodG9IU0wgJiYgIXdhc0hTTCkge1xuICAgIHIgPSBhWzBdIC8gXzI1NTtcbiAgICBnID0gYVsxXSAvIF8yNTU7XG4gICAgYiA9IGFbMl0gLyBfMjU1O1xuICAgIG1heCA9IE1hdGgubWF4KHIsIGcsIGIpO1xuICAgIG1pbiA9IE1hdGgubWluKHIsIGcsIGIpO1xuICAgIGwgPSAobWF4ICsgbWluKSAvIDI7XG5cbiAgICBpZiAobWF4ID09PSBtaW4pIHtcbiAgICAgIGggPSBzID0gMDtcbiAgICB9IGVsc2Uge1xuICAgICAgZCA9IG1heCAtIG1pbjtcbiAgICAgIHMgPSBsID4gMC41ID8gZCAvICgyIC0gbWF4IC0gbWluKSA6IGQgLyAobWF4ICsgbWluKTtcbiAgICAgIGggPSBtYXggPT09IHIgPyAoZyAtIGIpIC8gZCArIChnIDwgYiA/IDYgOiAwKSA6IG1heCA9PT0gZyA/IChiIC0gcikgLyBkICsgMiA6IChyIC0gZykgLyBkICsgNDtcbiAgICAgIGggKj0gNjA7XG4gICAgfVxuXG4gICAgYVswXSA9IH5+KGggKyAuNSk7XG4gICAgYVsxXSA9IH5+KHMgKiAxMDAgKyAuNSk7XG4gICAgYVsyXSA9IH5+KGwgKiAxMDAgKyAuNSk7XG4gIH1cblxuICBmb3JjZUFscGhhICYmIGEubGVuZ3RoIDwgNCAmJiAoYVszXSA9IDEpO1xuICByZXR1cm4gYTtcbn0sXG4gICAgX2NvbG9yT3JkZXJEYXRhID0gZnVuY3Rpb24gX2NvbG9yT3JkZXJEYXRhKHYpIHtcbiAgLy8gc3RyaXBzIG91dCB0aGUgY29sb3JzIGZyb20gdGhlIHN0cmluZywgZmluZHMgYWxsIHRoZSBudW1lcmljIHNsb3RzICh3aXRoIHVuaXRzKSBhbmQgcmV0dXJucyBhbiBhcnJheSBvZiB0aG9zZS4gVGhlIEFycmF5IGFsc28gaGFzIGEgXCJjXCIgcHJvcGVydHkgd2hpY2ggaXMgYW4gQXJyYXkgb2YgdGhlIGluZGV4IHZhbHVlcyB3aGVyZSB0aGUgY29sb3JzIGJlbG9uZy4gVGhpcyBpcyB0byBoZWxwIHdvcmsgYXJvdW5kIGlzc3VlcyB3aGVyZSB0aGVyZSdzIGEgbWlzLW1hdGNoZWQgb3JkZXIgb2YgY29sb3IvbnVtZXJpYyBkYXRhIGxpa2UgZHJvcC1zaGFkb3coI2YwMCAwcHggMXB4IDJweCkgYW5kIGRyb3Atc2hhZG93KDB4IDFweCAycHggI2YwMCkuIFRoaXMgaXMgYmFzaWNhbGx5IGEgaGVscGVyIGZ1bmN0aW9uIHVzZWQgaW4gX2Zvcm1hdENvbG9ycygpXG4gIHZhciB2YWx1ZXMgPSBbXSxcbiAgICAgIGMgPSBbXSxcbiAgICAgIGkgPSAtMTtcbiAgdi5zcGxpdChfY29sb3JFeHApLmZvckVhY2goZnVuY3Rpb24gKHYpIHtcbiAgICB2YXIgYSA9IHYubWF0Y2goX251bVdpdGhVbml0RXhwKSB8fCBbXTtcbiAgICB2YWx1ZXMucHVzaC5hcHBseSh2YWx1ZXMsIGEpO1xuICAgIGMucHVzaChpICs9IGEubGVuZ3RoICsgMSk7XG4gIH0pO1xuICB2YWx1ZXMuYyA9IGM7XG4gIHJldHVybiB2YWx1ZXM7XG59LFxuICAgIF9mb3JtYXRDb2xvcnMgPSBmdW5jdGlvbiBfZm9ybWF0Q29sb3JzKHMsIHRvSFNMLCBvcmRlck1hdGNoRGF0YSkge1xuICB2YXIgcmVzdWx0ID0gXCJcIixcbiAgICAgIGNvbG9ycyA9IChzICsgcmVzdWx0KS5tYXRjaChfY29sb3JFeHApLFxuICAgICAgdHlwZSA9IHRvSFNMID8gXCJoc2xhKFwiIDogXCJyZ2JhKFwiLFxuICAgICAgaSA9IDAsXG4gICAgICBjLFxuICAgICAgc2hlbGwsXG4gICAgICBkLFxuICAgICAgbDtcblxuICBpZiAoIWNvbG9ycykge1xuICAgIHJldHVybiBzO1xuICB9XG5cbiAgY29sb3JzID0gY29sb3JzLm1hcChmdW5jdGlvbiAoY29sb3IpIHtcbiAgICByZXR1cm4gKGNvbG9yID0gc3BsaXRDb2xvcihjb2xvciwgdG9IU0wsIDEpKSAmJiB0eXBlICsgKHRvSFNMID8gY29sb3JbMF0gKyBcIixcIiArIGNvbG9yWzFdICsgXCIlLFwiICsgY29sb3JbMl0gKyBcIiUsXCIgKyBjb2xvclszXSA6IGNvbG9yLmpvaW4oXCIsXCIpKSArIFwiKVwiO1xuICB9KTtcblxuICBpZiAob3JkZXJNYXRjaERhdGEpIHtcbiAgICBkID0gX2NvbG9yT3JkZXJEYXRhKHMpO1xuICAgIGMgPSBvcmRlck1hdGNoRGF0YS5jO1xuXG4gICAgaWYgKGMuam9pbihyZXN1bHQpICE9PSBkLmMuam9pbihyZXN1bHQpKSB7XG4gICAgICBzaGVsbCA9IHMucmVwbGFjZShfY29sb3JFeHAsIFwiMVwiKS5zcGxpdChfbnVtV2l0aFVuaXRFeHApO1xuICAgICAgbCA9IHNoZWxsLmxlbmd0aCAtIDE7XG5cbiAgICAgIGZvciAoOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgIHJlc3VsdCArPSBzaGVsbFtpXSArICh+Yy5pbmRleE9mKGkpID8gY29sb3JzLnNoaWZ0KCkgfHwgdHlwZSArIFwiMCwwLDAsMClcIiA6IChkLmxlbmd0aCA/IGQgOiBjb2xvcnMubGVuZ3RoID8gY29sb3JzIDogb3JkZXJNYXRjaERhdGEpLnNoaWZ0KCkpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGlmICghc2hlbGwpIHtcbiAgICBzaGVsbCA9IHMuc3BsaXQoX2NvbG9yRXhwKTtcbiAgICBsID0gc2hlbGwubGVuZ3RoIC0gMTtcblxuICAgIGZvciAoOyBpIDwgbDsgaSsrKSB7XG4gICAgICByZXN1bHQgKz0gc2hlbGxbaV0gKyBjb2xvcnNbaV07XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHJlc3VsdCArIHNoZWxsW2xdO1xufSxcbiAgICBfY29sb3JFeHAgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBzID0gXCIoPzpcXFxcYig/Oig/OnJnYnxyZ2JhfGhzbHxoc2xhKVxcXFwoLis/XFxcXCkpfFxcXFxCIyg/OlswLTlhLWZdezN9KXsxLDJ9XFxcXGJcIixcbiAgICAgIC8vd2UnbGwgZHluYW1pY2FsbHkgYnVpbGQgdGhpcyBSZWd1bGFyIEV4cHJlc3Npb24gdG8gY29uc2VydmUgZmlsZSBzaXplLiBBZnRlciBidWlsZGluZyBpdCwgaXQgd2lsbCBiZSBhYmxlIHRvIGZpbmQgcmdiKCksIHJnYmEoKSwgIyAoaGV4YWRlY2ltYWwpLCBhbmQgbmFtZWQgY29sb3IgdmFsdWVzIGxpa2UgcmVkLCBibHVlLCBwdXJwbGUsIGV0Yy4sXG4gIHA7XG5cbiAgZm9yIChwIGluIF9jb2xvckxvb2t1cCkge1xuICAgIHMgKz0gXCJ8XCIgKyBwICsgXCJcXFxcYlwiO1xuICB9XG5cbiAgcmV0dXJuIG5ldyBSZWdFeHAocyArIFwiKVwiLCBcImdpXCIpO1xufSgpLFxuICAgIF9oc2xFeHAgPSAvaHNsW2FdP1xcKC8sXG4gICAgX2NvbG9yU3RyaW5nRmlsdGVyID0gZnVuY3Rpb24gX2NvbG9yU3RyaW5nRmlsdGVyKGEpIHtcbiAgdmFyIGNvbWJpbmVkID0gYS5qb2luKFwiIFwiKSxcbiAgICAgIHRvSFNMO1xuICBfY29sb3JFeHAubGFzdEluZGV4ID0gMDtcblxuICBpZiAoX2NvbG9yRXhwLnRlc3QoY29tYmluZWQpKSB7XG4gICAgdG9IU0wgPSBfaHNsRXhwLnRlc3QoY29tYmluZWQpO1xuICAgIGFbMV0gPSBfZm9ybWF0Q29sb3JzKGFbMV0sIHRvSFNMKTtcbiAgICBhWzBdID0gX2Zvcm1hdENvbG9ycyhhWzBdLCB0b0hTTCwgX2NvbG9yT3JkZXJEYXRhKGFbMV0pKTsgLy8gbWFrZSBzdXJlIHRoZSBvcmRlciBvZiBudW1iZXJzL2NvbG9ycyBtYXRjaCB3aXRoIHRoZSBFTkQgdmFsdWUuXG5cbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxufSxcblxuLypcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBUSUNLRVJcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKi9cbl90aWNrZXJBY3RpdmUsXG4gICAgX3RpY2tlciA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIF9nZXRUaW1lID0gRGF0ZS5ub3csXG4gICAgICBfbGFnVGhyZXNob2xkID0gNTAwLFxuICAgICAgX2FkanVzdGVkTGFnID0gMzMsXG4gICAgICBfc3RhcnRUaW1lID0gX2dldFRpbWUoKSxcbiAgICAgIF9sYXN0VXBkYXRlID0gX3N0YXJ0VGltZSxcbiAgICAgIF9nYXAgPSAxMDAwIC8gMjQwLFxuICAgICAgX25leHRUaW1lID0gX2dhcCxcbiAgICAgIF9saXN0ZW5lcnMgPSBbXSxcbiAgICAgIF9pZCxcbiAgICAgIF9yZXEsXG4gICAgICBfcmFmLFxuICAgICAgX3NlbGYsXG4gICAgICBfZGVsdGEsXG4gICAgICBfaSxcbiAgICAgIF90aWNrID0gZnVuY3Rpb24gX3RpY2sodikge1xuICAgIHZhciBlbGFwc2VkID0gX2dldFRpbWUoKSAtIF9sYXN0VXBkYXRlLFxuICAgICAgICBtYW51YWwgPSB2ID09PSB0cnVlLFxuICAgICAgICBvdmVybGFwLFxuICAgICAgICBkaXNwYXRjaCxcbiAgICAgICAgdGltZSxcbiAgICAgICAgZnJhbWU7XG5cbiAgICBlbGFwc2VkID4gX2xhZ1RocmVzaG9sZCAmJiAoX3N0YXJ0VGltZSArPSBlbGFwc2VkIC0gX2FkanVzdGVkTGFnKTtcbiAgICBfbGFzdFVwZGF0ZSArPSBlbGFwc2VkO1xuICAgIHRpbWUgPSBfbGFzdFVwZGF0ZSAtIF9zdGFydFRpbWU7XG4gICAgb3ZlcmxhcCA9IHRpbWUgLSBfbmV4dFRpbWU7XG5cbiAgICBpZiAob3ZlcmxhcCA+IDAgfHwgbWFudWFsKSB7XG4gICAgICBmcmFtZSA9ICsrX3NlbGYuZnJhbWU7XG4gICAgICBfZGVsdGEgPSB0aW1lIC0gX3NlbGYudGltZSAqIDEwMDA7XG4gICAgICBfc2VsZi50aW1lID0gdGltZSA9IHRpbWUgLyAxMDAwO1xuICAgICAgX25leHRUaW1lICs9IG92ZXJsYXAgKyAob3ZlcmxhcCA+PSBfZ2FwID8gNCA6IF9nYXAgLSBvdmVybGFwKTtcbiAgICAgIGRpc3BhdGNoID0gMTtcbiAgICB9XG5cbiAgICBtYW51YWwgfHwgKF9pZCA9IF9yZXEoX3RpY2spKTsgLy9tYWtlIHN1cmUgdGhlIHJlcXVlc3QgaXMgbWFkZSBiZWZvcmUgd2UgZGlzcGF0Y2ggdGhlIFwidGlja1wiIGV2ZW50IHNvIHRoYXQgdGltaW5nIGlzIG1haW50YWluZWQuIE90aGVyd2lzZSwgaWYgcHJvY2Vzc2luZyB0aGUgXCJ0aWNrXCIgcmVxdWlyZXMgYSBidW5jaCBvZiB0aW1lIChsaWtlIDE1bXMpIGFuZCB3ZSdyZSB1c2luZyBhIHNldFRpbWVvdXQoKSB0aGF0J3MgYmFzZWQgb24gMTYuN21zLCBpdCdkIHRlY2huaWNhbGx5IHRha2UgMzEuN21zIGJldHdlZW4gZnJhbWVzIG90aGVyd2lzZS5cblxuICAgIGlmIChkaXNwYXRjaCkge1xuICAgICAgZm9yIChfaSA9IDA7IF9pIDwgX2xpc3RlbmVycy5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgLy8gdXNlIF9pIGFuZCBjaGVjayBfbGlzdGVuZXJzLmxlbmd0aCBpbnN0ZWFkIG9mIGEgdmFyaWFibGUgYmVjYXVzZSBhIGxpc3RlbmVyIGNvdWxkIGdldCByZW1vdmVkIGR1cmluZyB0aGUgbG9vcCwgYW5kIGlmIHRoYXQgaGFwcGVucyB0byBhbiBlbGVtZW50IGxlc3MgdGhhbiB0aGUgY3VycmVudCBpbmRleCwgaXQnZCB0aHJvdyB0aGluZ3Mgb2ZmIGluIHRoZSBsb29wLlxuICAgICAgICBfbGlzdGVuZXJzW19pXSh0aW1lLCBfZGVsdGEsIGZyYW1lLCB2KTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgX3NlbGYgPSB7XG4gICAgdGltZTogMCxcbiAgICBmcmFtZTogMCxcbiAgICB0aWNrOiBmdW5jdGlvbiB0aWNrKCkge1xuICAgICAgX3RpY2sodHJ1ZSk7XG4gICAgfSxcbiAgICBkZWx0YVJhdGlvOiBmdW5jdGlvbiBkZWx0YVJhdGlvKGZwcykge1xuICAgICAgcmV0dXJuIF9kZWx0YSAvICgxMDAwIC8gKGZwcyB8fCA2MCkpO1xuICAgIH0sXG4gICAgd2FrZTogZnVuY3Rpb24gd2FrZSgpIHtcbiAgICAgIGlmIChfY29yZVJlYWR5KSB7XG4gICAgICAgIGlmICghX2NvcmVJbml0dGVkICYmIF93aW5kb3dFeGlzdHMoKSkge1xuICAgICAgICAgIF93aW4gPSBfY29yZUluaXR0ZWQgPSB3aW5kb3c7XG4gICAgICAgICAgX2RvYyA9IF93aW4uZG9jdW1lbnQgfHwge307XG4gICAgICAgICAgX2dsb2JhbHMuZ3NhcCA9IGdzYXA7XG4gICAgICAgICAgKF93aW4uZ3NhcFZlcnNpb25zIHx8IChfd2luLmdzYXBWZXJzaW9ucyA9IFtdKSkucHVzaChnc2FwLnZlcnNpb24pO1xuXG4gICAgICAgICAgX2luc3RhbGwoX2luc3RhbGxTY29wZSB8fCBfd2luLkdyZWVuU29ja0dsb2JhbHMgfHwgIV93aW4uZ3NhcCAmJiBfd2luIHx8IHt9KTtcblxuICAgICAgICAgIF9yYWYgPSBfd2luLnJlcXVlc3RBbmltYXRpb25GcmFtZTtcbiAgICAgICAgfVxuXG4gICAgICAgIF9pZCAmJiBfc2VsZi5zbGVlcCgpO1xuXG4gICAgICAgIF9yZXEgPSBfcmFmIHx8IGZ1bmN0aW9uIChmKSB7XG4gICAgICAgICAgcmV0dXJuIHNldFRpbWVvdXQoZiwgX25leHRUaW1lIC0gX3NlbGYudGltZSAqIDEwMDAgKyAxIHwgMCk7XG4gICAgICAgIH07XG5cbiAgICAgICAgX3RpY2tlckFjdGl2ZSA9IDE7XG5cbiAgICAgICAgX3RpY2soMik7XG4gICAgICB9XG4gICAgfSxcbiAgICBzbGVlcDogZnVuY3Rpb24gc2xlZXAoKSB7XG4gICAgICAoX3JhZiA/IF93aW4uY2FuY2VsQW5pbWF0aW9uRnJhbWUgOiBjbGVhclRpbWVvdXQpKF9pZCk7XG4gICAgICBfdGlja2VyQWN0aXZlID0gMDtcbiAgICAgIF9yZXEgPSBfZW1wdHlGdW5jO1xuICAgIH0sXG4gICAgbGFnU21vb3RoaW5nOiBmdW5jdGlvbiBsYWdTbW9vdGhpbmcodGhyZXNob2xkLCBhZGp1c3RlZExhZykge1xuICAgICAgX2xhZ1RocmVzaG9sZCA9IHRocmVzaG9sZCB8fCAxIC8gX3RpbnlOdW07IC8vemVybyBzaG91bGQgYmUgaW50ZXJwcmV0ZWQgYXMgYmFzaWNhbGx5IHVubGltaXRlZFxuXG4gICAgICBfYWRqdXN0ZWRMYWcgPSBNYXRoLm1pbihhZGp1c3RlZExhZywgX2xhZ1RocmVzaG9sZCwgMCk7XG4gICAgfSxcbiAgICBmcHM6IGZ1bmN0aW9uIGZwcyhfZnBzKSB7XG4gICAgICBfZ2FwID0gMTAwMCAvIChfZnBzIHx8IDI0MCk7XG4gICAgICBfbmV4dFRpbWUgPSBfc2VsZi50aW1lICogMTAwMCArIF9nYXA7XG4gICAgfSxcbiAgICBhZGQ6IGZ1bmN0aW9uIGFkZChjYWxsYmFjaykge1xuICAgICAgX2xpc3RlbmVycy5pbmRleE9mKGNhbGxiYWNrKSA8IDAgJiYgX2xpc3RlbmVycy5wdXNoKGNhbGxiYWNrKTtcblxuICAgICAgX3dha2UoKTtcbiAgICB9LFxuICAgIHJlbW92ZTogZnVuY3Rpb24gcmVtb3ZlKGNhbGxiYWNrKSB7XG4gICAgICB2YXIgaTtcbiAgICAgIH4oaSA9IF9saXN0ZW5lcnMuaW5kZXhPZihjYWxsYmFjaykpICYmIF9saXN0ZW5lcnMuc3BsaWNlKGksIDEpICYmIF9pID49IGkgJiYgX2ktLTtcbiAgICB9LFxuICAgIF9saXN0ZW5lcnM6IF9saXN0ZW5lcnNcbiAgfTtcbiAgcmV0dXJuIF9zZWxmO1xufSgpLFxuICAgIF93YWtlID0gZnVuY3Rpb24gX3dha2UoKSB7XG4gIHJldHVybiAhX3RpY2tlckFjdGl2ZSAmJiBfdGlja2VyLndha2UoKTtcbn0sXG4gICAgLy9hbHNvIGVuc3VyZXMgdGhlIGNvcmUgY2xhc3NlcyBhcmUgaW5pdGlhbGl6ZWQuXG5cbi8qXG4qIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiogRUFTSU5HXG4qIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiovXG5fZWFzZU1hcCA9IHt9LFxuICAgIF9jdXN0b21FYXNlRXhwID0gL15bXFxkLlxcLU1dW1xcZC5cXC0sXFxzXS8sXG4gICAgX3F1b3Rlc0V4cCA9IC9bXCInXS9nLFxuICAgIF9wYXJzZU9iamVjdEluU3RyaW5nID0gZnVuY3Rpb24gX3BhcnNlT2JqZWN0SW5TdHJpbmcodmFsdWUpIHtcbiAgLy90YWtlcyBhIHN0cmluZyBsaWtlIFwie3dpZ2dsZXM6MTAsIHR5cGU6YW50aWNpcGF0ZX0pXCIgYW5kIHR1cm5zIGl0IGludG8gYSByZWFsIG9iamVjdC4gTm90aWNlIGl0IGVuZHMgaW4gXCIpXCIgYW5kIGluY2x1ZGVzIHRoZSB7fSB3cmFwcGVycy4gVGhpcyBpcyBiZWNhdXNlIHdlIG9ubHkgdXNlIHRoaXMgZnVuY3Rpb24gZm9yIHBhcnNpbmcgZWFzZSBjb25maWdzIGFuZCBwcmlvcml0aXplZCBvcHRpbWl6YXRpb24gcmF0aGVyIHRoYW4gcmV1c2FiaWxpdHkuXG4gIHZhciBvYmogPSB7fSxcbiAgICAgIHNwbGl0ID0gdmFsdWUuc3Vic3RyKDEsIHZhbHVlLmxlbmd0aCAtIDMpLnNwbGl0KFwiOlwiKSxcbiAgICAgIGtleSA9IHNwbGl0WzBdLFxuICAgICAgaSA9IDEsXG4gICAgICBsID0gc3BsaXQubGVuZ3RoLFxuICAgICAgaW5kZXgsXG4gICAgICB2YWwsXG4gICAgICBwYXJzZWRWYWw7XG5cbiAgZm9yICg7IGkgPCBsOyBpKyspIHtcbiAgICB2YWwgPSBzcGxpdFtpXTtcbiAgICBpbmRleCA9IGkgIT09IGwgLSAxID8gdmFsLmxhc3RJbmRleE9mKFwiLFwiKSA6IHZhbC5sZW5ndGg7XG4gICAgcGFyc2VkVmFsID0gdmFsLnN1YnN0cigwLCBpbmRleCk7XG4gICAgb2JqW2tleV0gPSBpc05hTihwYXJzZWRWYWwpID8gcGFyc2VkVmFsLnJlcGxhY2UoX3F1b3Rlc0V4cCwgXCJcIikudHJpbSgpIDogK3BhcnNlZFZhbDtcbiAgICBrZXkgPSB2YWwuc3Vic3RyKGluZGV4ICsgMSkudHJpbSgpO1xuICB9XG5cbiAgcmV0dXJuIG9iajtcbn0sXG4gICAgX3ZhbHVlSW5QYXJlbnRoZXNlcyA9IGZ1bmN0aW9uIF92YWx1ZUluUGFyZW50aGVzZXModmFsdWUpIHtcbiAgdmFyIG9wZW4gPSB2YWx1ZS5pbmRleE9mKFwiKFwiKSArIDEsXG4gICAgICBjbG9zZSA9IHZhbHVlLmluZGV4T2YoXCIpXCIpLFxuICAgICAgbmVzdGVkID0gdmFsdWUuaW5kZXhPZihcIihcIiwgb3Blbik7XG4gIHJldHVybiB2YWx1ZS5zdWJzdHJpbmcob3Blbiwgfm5lc3RlZCAmJiBuZXN0ZWQgPCBjbG9zZSA/IHZhbHVlLmluZGV4T2YoXCIpXCIsIGNsb3NlICsgMSkgOiBjbG9zZSk7XG59LFxuICAgIF9jb25maWdFYXNlRnJvbVN0cmluZyA9IGZ1bmN0aW9uIF9jb25maWdFYXNlRnJvbVN0cmluZyhuYW1lKSB7XG4gIC8vbmFtZSBjYW4gYmUgYSBzdHJpbmcgbGlrZSBcImVsYXN0aWMub3V0KDEsMC41KVwiLCBhbmQgcGFzcyBpbiBfZWFzZU1hcCBhcyBvYmogYW5kIGl0J2xsIHBhcnNlIGl0IG91dCBhbmQgY2FsbCB0aGUgYWN0dWFsIGZ1bmN0aW9uIGxpa2UgX2Vhc2VNYXAuRWxhc3RpYy5lYXNlT3V0LmNvbmZpZygxLDAuNSkuIEl0IHdpbGwgYWxzbyBwYXJzZSBjdXN0b20gZWFzZSBzdHJpbmdzIGFzIGxvbmcgYXMgQ3VzdG9tRWFzZSBpcyBsb2FkZWQgYW5kIHJlZ2lzdGVyZWQgKGludGVybmFsbHkgYXMgX2Vhc2VNYXAuX0NFKS5cbiAgdmFyIHNwbGl0ID0gKG5hbWUgKyBcIlwiKS5zcGxpdChcIihcIiksXG4gICAgICBlYXNlID0gX2Vhc2VNYXBbc3BsaXRbMF1dO1xuICByZXR1cm4gZWFzZSAmJiBzcGxpdC5sZW5ndGggPiAxICYmIGVhc2UuY29uZmlnID8gZWFzZS5jb25maWcuYXBwbHkobnVsbCwgfm5hbWUuaW5kZXhPZihcIntcIikgPyBbX3BhcnNlT2JqZWN0SW5TdHJpbmcoc3BsaXRbMV0pXSA6IF92YWx1ZUluUGFyZW50aGVzZXMobmFtZSkuc3BsaXQoXCIsXCIpLm1hcChfbnVtZXJpY0lmUG9zc2libGUpKSA6IF9lYXNlTWFwLl9DRSAmJiBfY3VzdG9tRWFzZUV4cC50ZXN0KG5hbWUpID8gX2Vhc2VNYXAuX0NFKFwiXCIsIG5hbWUpIDogZWFzZTtcbn0sXG4gICAgX2ludmVydEVhc2UgPSBmdW5jdGlvbiBfaW52ZXJ0RWFzZShlYXNlKSB7XG4gIHJldHVybiBmdW5jdGlvbiAocCkge1xuICAgIHJldHVybiAxIC0gZWFzZSgxIC0gcCk7XG4gIH07XG59LFxuICAgIC8vIGFsbG93IHlveW9FYXNlIHRvIGJlIHNldCBpbiBjaGlsZHJlbiBhbmQgaGF2ZSB0aG9zZSBhZmZlY3RlZCB3aGVuIHRoZSBwYXJlbnQvYW5jZXN0b3IgdGltZWxpbmUgeW95b3MuXG5fcHJvcGFnYXRlWW95b0Vhc2UgPSBmdW5jdGlvbiBfcHJvcGFnYXRlWW95b0Vhc2UodGltZWxpbmUsIGlzWW95bykge1xuICB2YXIgY2hpbGQgPSB0aW1lbGluZS5fZmlyc3QsXG4gICAgICBlYXNlO1xuXG4gIHdoaWxlIChjaGlsZCkge1xuICAgIGlmIChjaGlsZCBpbnN0YW5jZW9mIFRpbWVsaW5lKSB7XG4gICAgICBfcHJvcGFnYXRlWW95b0Vhc2UoY2hpbGQsIGlzWW95byk7XG4gICAgfSBlbHNlIGlmIChjaGlsZC52YXJzLnlveW9FYXNlICYmICghY2hpbGQuX3lveW8gfHwgIWNoaWxkLl9yZXBlYXQpICYmIGNoaWxkLl95b3lvICE9PSBpc1lveW8pIHtcbiAgICAgIGlmIChjaGlsZC50aW1lbGluZSkge1xuICAgICAgICBfcHJvcGFnYXRlWW95b0Vhc2UoY2hpbGQudGltZWxpbmUsIGlzWW95byk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBlYXNlID0gY2hpbGQuX2Vhc2U7XG4gICAgICAgIGNoaWxkLl9lYXNlID0gY2hpbGQuX3lFYXNlO1xuICAgICAgICBjaGlsZC5feUVhc2UgPSBlYXNlO1xuICAgICAgICBjaGlsZC5feW95byA9IGlzWW95bztcbiAgICAgIH1cbiAgICB9XG5cbiAgICBjaGlsZCA9IGNoaWxkLl9uZXh0O1xuICB9XG59LFxuICAgIF9wYXJzZUVhc2UgPSBmdW5jdGlvbiBfcGFyc2VFYXNlKGVhc2UsIGRlZmF1bHRFYXNlKSB7XG4gIHJldHVybiAhZWFzZSA/IGRlZmF1bHRFYXNlIDogKF9pc0Z1bmN0aW9uKGVhc2UpID8gZWFzZSA6IF9lYXNlTWFwW2Vhc2VdIHx8IF9jb25maWdFYXNlRnJvbVN0cmluZyhlYXNlKSkgfHwgZGVmYXVsdEVhc2U7XG59LFxuICAgIF9pbnNlcnRFYXNlID0gZnVuY3Rpb24gX2luc2VydEVhc2UobmFtZXMsIGVhc2VJbiwgZWFzZU91dCwgZWFzZUluT3V0KSB7XG4gIGlmIChlYXNlT3V0ID09PSB2b2lkIDApIHtcbiAgICBlYXNlT3V0ID0gZnVuY3Rpb24gZWFzZU91dChwKSB7XG4gICAgICByZXR1cm4gMSAtIGVhc2VJbigxIC0gcCk7XG4gICAgfTtcbiAgfVxuXG4gIGlmIChlYXNlSW5PdXQgPT09IHZvaWQgMCkge1xuICAgIGVhc2VJbk91dCA9IGZ1bmN0aW9uIGVhc2VJbk91dChwKSB7XG4gICAgICByZXR1cm4gcCA8IC41ID8gZWFzZUluKHAgKiAyKSAvIDIgOiAxIC0gZWFzZUluKCgxIC0gcCkgKiAyKSAvIDI7XG4gICAgfTtcbiAgfVxuXG4gIHZhciBlYXNlID0ge1xuICAgIGVhc2VJbjogZWFzZUluLFxuICAgIGVhc2VPdXQ6IGVhc2VPdXQsXG4gICAgZWFzZUluT3V0OiBlYXNlSW5PdXRcbiAgfSxcbiAgICAgIGxvd2VyY2FzZU5hbWU7XG5cbiAgX2ZvckVhY2hOYW1lKG5hbWVzLCBmdW5jdGlvbiAobmFtZSkge1xuICAgIF9lYXNlTWFwW25hbWVdID0gX2dsb2JhbHNbbmFtZV0gPSBlYXNlO1xuICAgIF9lYXNlTWFwW2xvd2VyY2FzZU5hbWUgPSBuYW1lLnRvTG93ZXJDYXNlKCldID0gZWFzZU91dDtcblxuICAgIGZvciAodmFyIHAgaW4gZWFzZSkge1xuICAgICAgX2Vhc2VNYXBbbG93ZXJjYXNlTmFtZSArIChwID09PSBcImVhc2VJblwiID8gXCIuaW5cIiA6IHAgPT09IFwiZWFzZU91dFwiID8gXCIub3V0XCIgOiBcIi5pbk91dFwiKV0gPSBfZWFzZU1hcFtuYW1lICsgXCIuXCIgKyBwXSA9IGVhc2VbcF07XG4gICAgfVxuICB9KTtcblxuICByZXR1cm4gZWFzZTtcbn0sXG4gICAgX2Vhc2VJbk91dEZyb21PdXQgPSBmdW5jdGlvbiBfZWFzZUluT3V0RnJvbU91dChlYXNlT3V0KSB7XG4gIHJldHVybiBmdW5jdGlvbiAocCkge1xuICAgIHJldHVybiBwIDwgLjUgPyAoMSAtIGVhc2VPdXQoMSAtIHAgKiAyKSkgLyAyIDogLjUgKyBlYXNlT3V0KChwIC0gLjUpICogMikgLyAyO1xuICB9O1xufSxcbiAgICBfY29uZmlnRWxhc3RpYyA9IGZ1bmN0aW9uIF9jb25maWdFbGFzdGljKHR5cGUsIGFtcGxpdHVkZSwgcGVyaW9kKSB7XG4gIHZhciBwMSA9IGFtcGxpdHVkZSA+PSAxID8gYW1wbGl0dWRlIDogMSxcbiAgICAgIC8vbm90ZTogaWYgYW1wbGl0dWRlIGlzIDwgMSwgd2Ugc2ltcGx5IGFkanVzdCB0aGUgcGVyaW9kIGZvciBhIG1vcmUgbmF0dXJhbCBmZWVsLiBPdGhlcndpc2UgdGhlIG1hdGggZG9lc24ndCB3b3JrIHJpZ2h0IGFuZCB0aGUgY3VydmUgc3RhcnRzIGF0IDEuXG4gIHAyID0gKHBlcmlvZCB8fCAodHlwZSA/IC4zIDogLjQ1KSkgLyAoYW1wbGl0dWRlIDwgMSA/IGFtcGxpdHVkZSA6IDEpLFxuICAgICAgcDMgPSBwMiAvIF8yUEkgKiAoTWF0aC5hc2luKDEgLyBwMSkgfHwgMCksXG4gICAgICBlYXNlT3V0ID0gZnVuY3Rpb24gZWFzZU91dChwKSB7XG4gICAgcmV0dXJuIHAgPT09IDEgPyAxIDogcDEgKiBNYXRoLnBvdygyLCAtMTAgKiBwKSAqIF9zaW4oKHAgLSBwMykgKiBwMikgKyAxO1xuICB9LFxuICAgICAgZWFzZSA9IHR5cGUgPT09IFwib3V0XCIgPyBlYXNlT3V0IDogdHlwZSA9PT0gXCJpblwiID8gZnVuY3Rpb24gKHApIHtcbiAgICByZXR1cm4gMSAtIGVhc2VPdXQoMSAtIHApO1xuICB9IDogX2Vhc2VJbk91dEZyb21PdXQoZWFzZU91dCk7XG5cbiAgcDIgPSBfMlBJIC8gcDI7IC8vcHJlY2FsY3VsYXRlIHRvIG9wdGltaXplXG5cbiAgZWFzZS5jb25maWcgPSBmdW5jdGlvbiAoYW1wbGl0dWRlLCBwZXJpb2QpIHtcbiAgICByZXR1cm4gX2NvbmZpZ0VsYXN0aWModHlwZSwgYW1wbGl0dWRlLCBwZXJpb2QpO1xuICB9O1xuXG4gIHJldHVybiBlYXNlO1xufSxcbiAgICBfY29uZmlnQmFjayA9IGZ1bmN0aW9uIF9jb25maWdCYWNrKHR5cGUsIG92ZXJzaG9vdCkge1xuICBpZiAob3ZlcnNob290ID09PSB2b2lkIDApIHtcbiAgICBvdmVyc2hvb3QgPSAxLjcwMTU4O1xuICB9XG5cbiAgdmFyIGVhc2VPdXQgPSBmdW5jdGlvbiBlYXNlT3V0KHApIHtcbiAgICByZXR1cm4gcCA/IC0tcCAqIHAgKiAoKG92ZXJzaG9vdCArIDEpICogcCArIG92ZXJzaG9vdCkgKyAxIDogMDtcbiAgfSxcbiAgICAgIGVhc2UgPSB0eXBlID09PSBcIm91dFwiID8gZWFzZU91dCA6IHR5cGUgPT09IFwiaW5cIiA/IGZ1bmN0aW9uIChwKSB7XG4gICAgcmV0dXJuIDEgLSBlYXNlT3V0KDEgLSBwKTtcbiAgfSA6IF9lYXNlSW5PdXRGcm9tT3V0KGVhc2VPdXQpO1xuXG4gIGVhc2UuY29uZmlnID0gZnVuY3Rpb24gKG92ZXJzaG9vdCkge1xuICAgIHJldHVybiBfY29uZmlnQmFjayh0eXBlLCBvdmVyc2hvb3QpO1xuICB9O1xuXG4gIHJldHVybiBlYXNlO1xufTsgLy8gYSBjaGVhcGVyIChrYiBhbmQgY3B1KSBidXQgbW9yZSBtaWxkIHdheSB0byBnZXQgYSBwYXJhbWV0ZXJpemVkIHdlaWdodGVkIGVhc2UgYnkgZmVlZGluZyBpbiBhIHZhbHVlIGJldHdlZW4gLTEgKGVhc2VJbikgYW5kIDEgKGVhc2VPdXQpIHdoZXJlIDAgaXMgbGluZWFyLlxuLy8gX3dlaWdodGVkRWFzZSA9IHJhdGlvID0+IHtcbi8vIFx0bGV0IHkgPSAwLjUgKyByYXRpbyAvIDI7XG4vLyBcdHJldHVybiBwID0+ICgyICogKDEgLSBwKSAqIHAgKiB5ICsgcCAqIHApO1xuLy8gfSxcbi8vIGEgc3Ryb25nZXIgKGJ1dCBtb3JlIGV4cGVuc2l2ZSBrYi9jcHUpIHBhcmFtZXRlcml6ZWQgd2VpZ2h0ZWQgZWFzZSB0aGF0IGxldHMgeW91IGZlZWQgaW4gYSB2YWx1ZSBiZXR3ZWVuIC0xIChlYXNlSW4pIGFuZCAxIChlYXNlT3V0KSB3aGVyZSAwIGlzIGxpbmVhci5cbi8vIF93ZWlnaHRlZEVhc2VTdHJvbmcgPSByYXRpbyA9PiB7XG4vLyBcdHJhdGlvID0gLjUgKyByYXRpbyAvIDI7XG4vLyBcdGxldCBvID0gMSAvIDMgKiAocmF0aW8gPCAuNSA/IHJhdGlvIDogMSAtIHJhdGlvKSxcbi8vIFx0XHRiID0gcmF0aW8gLSBvLFxuLy8gXHRcdGMgPSByYXRpbyArIG87XG4vLyBcdHJldHVybiBwID0+IHAgPT09IDEgPyBwIDogMyAqIGIgKiAoMSAtIHApICogKDEgLSBwKSAqIHAgKyAzICogYyAqICgxIC0gcCkgKiBwICogcCArIHAgKiBwICogcDtcbi8vIH07XG5cblxuX2ZvckVhY2hOYW1lKFwiTGluZWFyLFF1YWQsQ3ViaWMsUXVhcnQsUXVpbnQsU3Ryb25nXCIsIGZ1bmN0aW9uIChuYW1lLCBpKSB7XG4gIHZhciBwb3dlciA9IGkgPCA1ID8gaSArIDEgOiBpO1xuXG4gIF9pbnNlcnRFYXNlKG5hbWUgKyBcIixQb3dlclwiICsgKHBvd2VyIC0gMSksIGkgPyBmdW5jdGlvbiAocCkge1xuICAgIHJldHVybiBNYXRoLnBvdyhwLCBwb3dlcik7XG4gIH0gOiBmdW5jdGlvbiAocCkge1xuICAgIHJldHVybiBwO1xuICB9LCBmdW5jdGlvbiAocCkge1xuICAgIHJldHVybiAxIC0gTWF0aC5wb3coMSAtIHAsIHBvd2VyKTtcbiAgfSwgZnVuY3Rpb24gKHApIHtcbiAgICByZXR1cm4gcCA8IC41ID8gTWF0aC5wb3cocCAqIDIsIHBvd2VyKSAvIDIgOiAxIC0gTWF0aC5wb3coKDEgLSBwKSAqIDIsIHBvd2VyKSAvIDI7XG4gIH0pO1xufSk7XG5cbl9lYXNlTWFwLkxpbmVhci5lYXNlTm9uZSA9IF9lYXNlTWFwLm5vbmUgPSBfZWFzZU1hcC5MaW5lYXIuZWFzZUluO1xuXG5faW5zZXJ0RWFzZShcIkVsYXN0aWNcIiwgX2NvbmZpZ0VsYXN0aWMoXCJpblwiKSwgX2NvbmZpZ0VsYXN0aWMoXCJvdXRcIiksIF9jb25maWdFbGFzdGljKCkpO1xuXG4oZnVuY3Rpb24gKG4sIGMpIHtcbiAgdmFyIG4xID0gMSAvIGMsXG4gICAgICBuMiA9IDIgKiBuMSxcbiAgICAgIG4zID0gMi41ICogbjEsXG4gICAgICBlYXNlT3V0ID0gZnVuY3Rpb24gZWFzZU91dChwKSB7XG4gICAgcmV0dXJuIHAgPCBuMSA/IG4gKiBwICogcCA6IHAgPCBuMiA/IG4gKiBNYXRoLnBvdyhwIC0gMS41IC8gYywgMikgKyAuNzUgOiBwIDwgbjMgPyBuICogKHAgLT0gMi4yNSAvIGMpICogcCArIC45Mzc1IDogbiAqIE1hdGgucG93KHAgLSAyLjYyNSAvIGMsIDIpICsgLjk4NDM3NTtcbiAgfTtcblxuICBfaW5zZXJ0RWFzZShcIkJvdW5jZVwiLCBmdW5jdGlvbiAocCkge1xuICAgIHJldHVybiAxIC0gZWFzZU91dCgxIC0gcCk7XG4gIH0sIGVhc2VPdXQpO1xufSkoNy41NjI1LCAyLjc1KTtcblxuX2luc2VydEVhc2UoXCJFeHBvXCIsIGZ1bmN0aW9uIChwKSB7XG4gIHJldHVybiBwID8gTWF0aC5wb3coMiwgMTAgKiAocCAtIDEpKSA6IDA7XG59KTtcblxuX2luc2VydEVhc2UoXCJDaXJjXCIsIGZ1bmN0aW9uIChwKSB7XG4gIHJldHVybiAtKF9zcXJ0KDEgLSBwICogcCkgLSAxKTtcbn0pO1xuXG5faW5zZXJ0RWFzZShcIlNpbmVcIiwgZnVuY3Rpb24gKHApIHtcbiAgcmV0dXJuIHAgPT09IDEgPyAxIDogLV9jb3MocCAqIF9IQUxGX1BJKSArIDE7XG59KTtcblxuX2luc2VydEVhc2UoXCJCYWNrXCIsIF9jb25maWdCYWNrKFwiaW5cIiksIF9jb25maWdCYWNrKFwib3V0XCIpLCBfY29uZmlnQmFjaygpKTtcblxuX2Vhc2VNYXAuU3RlcHBlZEVhc2UgPSBfZWFzZU1hcC5zdGVwcyA9IF9nbG9iYWxzLlN0ZXBwZWRFYXNlID0ge1xuICBjb25maWc6IGZ1bmN0aW9uIGNvbmZpZyhzdGVwcywgaW1tZWRpYXRlU3RhcnQpIHtcbiAgICBpZiAoc3RlcHMgPT09IHZvaWQgMCkge1xuICAgICAgc3RlcHMgPSAxO1xuICAgIH1cblxuICAgIHZhciBwMSA9IDEgLyBzdGVwcyxcbiAgICAgICAgcDIgPSBzdGVwcyArIChpbW1lZGlhdGVTdGFydCA/IDAgOiAxKSxcbiAgICAgICAgcDMgPSBpbW1lZGlhdGVTdGFydCA/IDEgOiAwLFxuICAgICAgICBtYXggPSAxIC0gX3RpbnlOdW07XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChwKSB7XG4gICAgICByZXR1cm4gKChwMiAqIF9jbGFtcCgwLCBtYXgsIHApIHwgMCkgKyBwMykgKiBwMTtcbiAgICB9O1xuICB9XG59O1xuX2RlZmF1bHRzLmVhc2UgPSBfZWFzZU1hcFtcInF1YWQub3V0XCJdO1xuXG5fZm9yRWFjaE5hbWUoXCJvbkNvbXBsZXRlLG9uVXBkYXRlLG9uU3RhcnQsb25SZXBlYXQsb25SZXZlcnNlQ29tcGxldGUsb25JbnRlcnJ1cHRcIiwgZnVuY3Rpb24gKG5hbWUpIHtcbiAgcmV0dXJuIF9jYWxsYmFja05hbWVzICs9IG5hbWUgKyBcIixcIiArIG5hbWUgKyBcIlBhcmFtcyxcIjtcbn0pO1xuLypcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBDQUNIRVxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqL1xuXG5cbmV4cG9ydCB2YXIgR1NDYWNoZSA9IGZ1bmN0aW9uIEdTQ2FjaGUodGFyZ2V0LCBoYXJuZXNzKSB7XG4gIHRoaXMuaWQgPSBfZ3NJRCsrO1xuICB0YXJnZXQuX2dzYXAgPSB0aGlzO1xuICB0aGlzLnRhcmdldCA9IHRhcmdldDtcbiAgdGhpcy5oYXJuZXNzID0gaGFybmVzcztcbiAgdGhpcy5nZXQgPSBoYXJuZXNzID8gaGFybmVzcy5nZXQgOiBfZ2V0UHJvcGVydHk7XG4gIHRoaXMuc2V0ID0gaGFybmVzcyA/IGhhcm5lc3MuZ2V0U2V0dGVyIDogX2dldFNldHRlcjtcbn07XG4vKlxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIEFOSU1BVElPTlxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqL1xuXG5leHBvcnQgdmFyIEFuaW1hdGlvbiA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIEFuaW1hdGlvbih2YXJzLCB0aW1lKSB7XG4gICAgdmFyIHBhcmVudCA9IHZhcnMucGFyZW50IHx8IF9nbG9iYWxUaW1lbGluZTtcbiAgICB0aGlzLnZhcnMgPSB2YXJzO1xuICAgIHRoaXMuX2RlbGF5ID0gK3ZhcnMuZGVsYXkgfHwgMDtcblxuICAgIGlmICh0aGlzLl9yZXBlYXQgPSB2YXJzLnJlcGVhdCB8fCAwKSB7XG4gICAgICB0aGlzLl9yRGVsYXkgPSB2YXJzLnJlcGVhdERlbGF5IHx8IDA7XG4gICAgICB0aGlzLl95b3lvID0gISF2YXJzLnlveW8gfHwgISF2YXJzLnlveW9FYXNlO1xuICAgIH1cblxuICAgIHRoaXMuX3RzID0gMTtcblxuICAgIF9zZXREdXJhdGlvbih0aGlzLCArdmFycy5kdXJhdGlvbiwgMSwgMSk7XG5cbiAgICB0aGlzLmRhdGEgPSB2YXJzLmRhdGE7XG4gICAgX3RpY2tlckFjdGl2ZSB8fCBfdGlja2VyLndha2UoKTtcbiAgICBwYXJlbnQgJiYgX2FkZFRvVGltZWxpbmUocGFyZW50LCB0aGlzLCB0aW1lIHx8IHRpbWUgPT09IDAgPyB0aW1lIDogcGFyZW50Ll90aW1lLCAxKTtcbiAgICB2YXJzLnJldmVyc2VkICYmIHRoaXMucmV2ZXJzZSgpO1xuICAgIHZhcnMucGF1c2VkICYmIHRoaXMucGF1c2VkKHRydWUpO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IEFuaW1hdGlvbi5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLmRlbGF5ID0gZnVuY3Rpb24gZGVsYXkodmFsdWUpIHtcbiAgICBpZiAodmFsdWUgfHwgdmFsdWUgPT09IDApIHtcbiAgICAgIHRoaXMucGFyZW50ICYmIHRoaXMucGFyZW50LnNtb290aENoaWxkVGltaW5nICYmIHRoaXMuc3RhcnRUaW1lKHRoaXMuX3N0YXJ0ICsgdmFsdWUgLSB0aGlzLl9kZWxheSk7XG4gICAgICB0aGlzLl9kZWxheSA9IHZhbHVlO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuX2RlbGF5O1xuICB9O1xuXG4gIF9wcm90by5kdXJhdGlvbiA9IGZ1bmN0aW9uIGR1cmF0aW9uKHZhbHVlKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyB0aGlzLnRvdGFsRHVyYXRpb24odGhpcy5fcmVwZWF0ID4gMCA/IHZhbHVlICsgKHZhbHVlICsgdGhpcy5fckRlbGF5KSAqIHRoaXMuX3JlcGVhdCA6IHZhbHVlKSA6IHRoaXMudG90YWxEdXJhdGlvbigpICYmIHRoaXMuX2R1cjtcbiAgfTtcblxuICBfcHJvdG8udG90YWxEdXJhdGlvbiA9IGZ1bmN0aW9uIHRvdGFsRHVyYXRpb24odmFsdWUpIHtcbiAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHtcbiAgICAgIHJldHVybiB0aGlzLl90RHVyO1xuICAgIH1cblxuICAgIHRoaXMuX2RpcnR5ID0gMDtcbiAgICByZXR1cm4gX3NldER1cmF0aW9uKHRoaXMsIHRoaXMuX3JlcGVhdCA8IDAgPyB2YWx1ZSA6ICh2YWx1ZSAtIHRoaXMuX3JlcGVhdCAqIHRoaXMuX3JEZWxheSkgLyAodGhpcy5fcmVwZWF0ICsgMSkpO1xuICB9O1xuXG4gIF9wcm90by50b3RhbFRpbWUgPSBmdW5jdGlvbiB0b3RhbFRpbWUoX3RvdGFsVGltZSwgc3VwcHJlc3NFdmVudHMpIHtcbiAgICBfd2FrZSgpO1xuXG4gICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSB7XG4gICAgICByZXR1cm4gdGhpcy5fdFRpbWU7XG4gICAgfVxuXG4gICAgdmFyIHBhcmVudCA9IHRoaXMuX2RwO1xuXG4gICAgaWYgKHBhcmVudCAmJiBwYXJlbnQuc21vb3RoQ2hpbGRUaW1pbmcgJiYgdGhpcy5fdHMpIHtcbiAgICAgIF9hbGlnblBsYXloZWFkKHRoaXMsIF90b3RhbFRpbWUpOyAvL2luIGNhc2UgYW55IG9mIHRoZSBhbmNlc3RvciB0aW1lbGluZXMgaGFkIGNvbXBsZXRlZCBidXQgc2hvdWxkIG5vdyBiZSBlbmFibGVkLCB3ZSBzaG91bGQgcmVzZXQgdGhlaXIgdG90YWxUaW1lKCkgd2hpY2ggd2lsbCBhbHNvIGVuc3VyZSB0aGF0IHRoZXkncmUgbGluZWQgdXAgcHJvcGVybHkgYW5kIGVuYWJsZWQuIFNraXAgZm9yIGFuaW1hdGlvbnMgdGhhdCBhcmUgb24gdGhlIHJvb3QgKHdhc3RlZnVsKS4gRXhhbXBsZTogYSBUaW1lbGluZUxpdGUuZXhwb3J0Um9vdCgpIGlzIHBlcmZvcm1lZCB3aGVuIHRoZXJlJ3MgYSBwYXVzZWQgdHdlZW4gb24gdGhlIHJvb3QsIHRoZSBleHBvcnQgd2lsbCBub3QgY29tcGxldGUgdW50aWwgdGhhdCB0d2VlbiBpcyB1bnBhdXNlZCwgYnV0IGltYWdpbmUgYSBjaGlsZCBnZXRzIHJlc3RhcnRlZCBsYXRlciwgYWZ0ZXIgYWxsIFt1bnBhdXNlZF0gdHdlZW5zIGhhdmUgY29tcGxldGVkLiBUaGUgc3RhcnQgb2YgdGhhdCBjaGlsZCB3b3VsZCBnZXQgcHVzaGVkIG91dCwgYnV0IG9uZSBvZiB0aGUgYW5jZXN0b3JzIG1heSBoYXZlIGNvbXBsZXRlZC5cblxuXG4gICAgICB3aGlsZSAocGFyZW50LnBhcmVudCkge1xuICAgICAgICBpZiAocGFyZW50LnBhcmVudC5fdGltZSAhPT0gcGFyZW50Ll9zdGFydCArIChwYXJlbnQuX3RzID49IDAgPyBwYXJlbnQuX3RUaW1lIC8gcGFyZW50Ll90cyA6IChwYXJlbnQudG90YWxEdXJhdGlvbigpIC0gcGFyZW50Ll90VGltZSkgLyAtcGFyZW50Ll90cykpIHtcbiAgICAgICAgICBwYXJlbnQudG90YWxUaW1lKHBhcmVudC5fdFRpbWUsIHRydWUpO1xuICAgICAgICB9XG5cbiAgICAgICAgcGFyZW50ID0gcGFyZW50LnBhcmVudDtcbiAgICAgIH1cblxuICAgICAgaWYgKCF0aGlzLnBhcmVudCAmJiB0aGlzLl9kcC5hdXRvUmVtb3ZlQ2hpbGRyZW4gJiYgKHRoaXMuX3RzID4gMCAmJiBfdG90YWxUaW1lIDwgdGhpcy5fdER1ciB8fCB0aGlzLl90cyA8IDAgJiYgX3RvdGFsVGltZSA+IDAgfHwgIXRoaXMuX3REdXIgJiYgIV90b3RhbFRpbWUpKSB7XG4gICAgICAgIC8vaWYgdGhlIGFuaW1hdGlvbiBkb2Vzbid0IGhhdmUgYSBwYXJlbnQsIHB1dCBpdCBiYWNrIGludG8gaXRzIGxhc3QgcGFyZW50IChyZWNvcmRlZCBhcyBfZHAgZm9yIGV4YWN0bHkgY2FzZXMgbGlrZSB0aGlzKS4gTGltaXQgdG8gcGFyZW50cyB3aXRoIGF1dG9SZW1vdmVDaGlsZHJlbiAobGlrZSBnbG9iYWxUaW1lbGluZSkgc28gdGhhdCBpZiB0aGUgdXNlciBtYW51YWxseSByZW1vdmVzIGFuIGFuaW1hdGlvbiBmcm9tIGEgdGltZWxpbmUgYW5kIHRoZW4gYWx0ZXJzIGl0cyBwbGF5aGVhZCwgaXQgZG9lc24ndCBnZXQgYWRkZWQgYmFjayBpbi5cbiAgICAgICAgX2FkZFRvVGltZWxpbmUodGhpcy5fZHAsIHRoaXMsIHRoaXMuX3N0YXJ0IC0gdGhpcy5fZGVsYXkpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmICh0aGlzLl90VGltZSAhPT0gX3RvdGFsVGltZSB8fCAhdGhpcy5fZHVyICYmICFzdXBwcmVzc0V2ZW50cyB8fCB0aGlzLl9pbml0dGVkICYmIE1hdGguYWJzKHRoaXMuX3pUaW1lKSA9PT0gX3RpbnlOdW0gfHwgIV90b3RhbFRpbWUgJiYgIXRoaXMuX2luaXR0ZWQgJiYgKHRoaXMuYWRkIHx8IHRoaXMuX3B0TG9va3VwKSkge1xuICAgICAgLy8gY2hlY2sgZm9yIF9wdExvb2t1cCBvbiBhIFR3ZWVuIGluc3RhbmNlIHRvIGVuc3VyZSBpdCBoYXMgYWN0dWFsbHkgZmluaXNoZWQgYmVpbmcgaW5zdGFudGlhdGVkLCBvdGhlcndpc2UgaWYgdGhpcy5yZXZlcnNlKCkgZ2V0cyBjYWxsZWQgaW4gdGhlIEFuaW1hdGlvbiBjb25zdHJ1Y3RvciwgaXQgY291bGQgdHJpZ2dlciBhIHJlbmRlcigpIGhlcmUgZXZlbiB0aG91Z2ggdGhlIF90YXJnZXRzIHdlcmVuJ3QgcG9wdWxhdGVkLCB0aHVzIHdoZW4gX2luaXQoKSBpcyBjYWxsZWQgdGhlcmUgd29uJ3QgYmUgYW55IFByb3BUd2VlbnMgKGl0J2xsIGFjdCBsaWtlIHRoZSB0d2VlbiBpcyBub24tZnVuY3Rpb25hbClcbiAgICAgIHRoaXMuX3RzIHx8ICh0aGlzLl9wVGltZSA9IF90b3RhbFRpbWUpOyAvLyBvdGhlcndpc2UsIGlmIGFuIGFuaW1hdGlvbiBpcyBwYXVzZWQsIHRoZW4gdGhlIHBsYXloZWFkIGlzIG1vdmVkIGJhY2sgdG8gemVybywgdGhlbiByZXN1bWVkLCBpdCdkIHJldmVydCBiYWNrIHRvIHRoZSBvcmlnaW5hbCB0aW1lIGF0IHRoZSBwYXVzZVxuXG4gICAgICBfbGF6eVNhZmVSZW5kZXIodGhpcywgX3RvdGFsVGltZSwgc3VwcHJlc3NFdmVudHMpO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIF9wcm90by50aW1lID0gZnVuY3Rpb24gdGltZSh2YWx1ZSwgc3VwcHJlc3NFdmVudHMpIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IHRoaXMudG90YWxUaW1lKE1hdGgubWluKHRoaXMudG90YWxEdXJhdGlvbigpLCB2YWx1ZSArIF9lbGFwc2VkQ3ljbGVEdXJhdGlvbih0aGlzKSkgJSB0aGlzLl9kdXIgfHwgKHZhbHVlID8gdGhpcy5fZHVyIDogMCksIHN1cHByZXNzRXZlbnRzKSA6IHRoaXMuX3RpbWU7IC8vIG5vdGU6IGlmIHRoZSBtb2R1bHVzIHJlc3VsdHMgaW4gMCwgdGhlIHBsYXloZWFkIGNvdWxkIGJlIGV4YWN0bHkgYXQgdGhlIGVuZCBvciB0aGUgYmVnaW5uaW5nLCBhbmQgd2UgYWx3YXlzIGRlZmVyIHRvIHRoZSBFTkQgd2l0aCBhIG5vbi16ZXJvIHZhbHVlLCBvdGhlcndpc2UgaWYgeW91IHNldCB0aGUgdGltZSgpIHRvIHRoZSB2ZXJ5IGVuZCAoZHVyYXRpb24oKSksIGl0IHdvdWxkIHJlbmRlciBhdCB0aGUgU1RBUlQhXG4gIH07XG5cbiAgX3Byb3RvLnRvdGFsUHJvZ3Jlc3MgPSBmdW5jdGlvbiB0b3RhbFByb2dyZXNzKHZhbHVlLCBzdXBwcmVzc0V2ZW50cykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gdGhpcy50b3RhbFRpbWUodGhpcy50b3RhbER1cmF0aW9uKCkgKiB2YWx1ZSwgc3VwcHJlc3NFdmVudHMpIDogdGhpcy50b3RhbER1cmF0aW9uKCkgPyBNYXRoLm1pbigxLCB0aGlzLl90VGltZSAvIHRoaXMuX3REdXIpIDogdGhpcy5yYXRpbztcbiAgfTtcblxuICBfcHJvdG8ucHJvZ3Jlc3MgPSBmdW5jdGlvbiBwcm9ncmVzcyh2YWx1ZSwgc3VwcHJlc3NFdmVudHMpIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IHRoaXMudG90YWxUaW1lKHRoaXMuZHVyYXRpb24oKSAqICh0aGlzLl95b3lvICYmICEodGhpcy5pdGVyYXRpb24oKSAmIDEpID8gMSAtIHZhbHVlIDogdmFsdWUpICsgX2VsYXBzZWRDeWNsZUR1cmF0aW9uKHRoaXMpLCBzdXBwcmVzc0V2ZW50cykgOiB0aGlzLmR1cmF0aW9uKCkgPyBNYXRoLm1pbigxLCB0aGlzLl90aW1lIC8gdGhpcy5fZHVyKSA6IHRoaXMucmF0aW87XG4gIH07XG5cbiAgX3Byb3RvLml0ZXJhdGlvbiA9IGZ1bmN0aW9uIGl0ZXJhdGlvbih2YWx1ZSwgc3VwcHJlc3NFdmVudHMpIHtcbiAgICB2YXIgY3ljbGVEdXJhdGlvbiA9IHRoaXMuZHVyYXRpb24oKSArIHRoaXMuX3JEZWxheTtcblxuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gdGhpcy50b3RhbFRpbWUodGhpcy5fdGltZSArICh2YWx1ZSAtIDEpICogY3ljbGVEdXJhdGlvbiwgc3VwcHJlc3NFdmVudHMpIDogdGhpcy5fcmVwZWF0ID8gX2FuaW1hdGlvbkN5Y2xlKHRoaXMuX3RUaW1lLCBjeWNsZUR1cmF0aW9uKSArIDEgOiAxO1xuICB9IC8vIHBvdGVudGlhbCBmdXR1cmUgYWRkaXRpb246XG4gIC8vIGlzUGxheWluZ0JhY2t3YXJkcygpIHtcbiAgLy8gXHRsZXQgYW5pbWF0aW9uID0gdGhpcyxcbiAgLy8gXHRcdG9yaWVudGF0aW9uID0gMTsgLy8gMSA9IGZvcndhcmQsIC0xID0gYmFja3dhcmRcbiAgLy8gXHR3aGlsZSAoYW5pbWF0aW9uKSB7XG4gIC8vIFx0XHRvcmllbnRhdGlvbiAqPSBhbmltYXRpb24ucmV2ZXJzZWQoKSB8fCAoYW5pbWF0aW9uLnJlcGVhdCgpICYmICEoYW5pbWF0aW9uLml0ZXJhdGlvbigpICYgMSkpID8gLTEgOiAxO1xuICAvLyBcdFx0YW5pbWF0aW9uID0gYW5pbWF0aW9uLnBhcmVudDtcbiAgLy8gXHR9XG4gIC8vIFx0cmV0dXJuIG9yaWVudGF0aW9uIDwgMDtcbiAgLy8gfVxuICA7XG5cbiAgX3Byb3RvLnRpbWVTY2FsZSA9IGZ1bmN0aW9uIHRpbWVTY2FsZSh2YWx1ZSkge1xuICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkge1xuICAgICAgcmV0dXJuIHRoaXMuX3J0cyA9PT0gLV90aW55TnVtID8gMCA6IHRoaXMuX3J0czsgLy8gcmVjb3JkZWQgdGltZVNjYWxlLiBTcGVjaWFsIGNhc2U6IGlmIHNvbWVvbmUgY2FsbHMgcmV2ZXJzZSgpIG9uIGFuIGFuaW1hdGlvbiB3aXRoIHRpbWVTY2FsZSBvZiAwLCB3ZSBhc3NpZ24gaXQgLV90aW55TnVtIHRvIHJlbWVtYmVyIGl0J3MgcmV2ZXJzZWQuXG4gICAgfVxuXG4gICAgaWYgKHRoaXMuX3J0cyA9PT0gdmFsdWUpIHtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIHZhciB0VGltZSA9IHRoaXMucGFyZW50ICYmIHRoaXMuX3RzID8gX3BhcmVudFRvQ2hpbGRUb3RhbFRpbWUodGhpcy5wYXJlbnQuX3RpbWUsIHRoaXMpIDogdGhpcy5fdFRpbWU7IC8vIG1ha2Ugc3VyZSB0byBkbyB0aGUgcGFyZW50VG9DaGlsZFRvdGFsVGltZSgpIEJFRk9SRSBzZXR0aW5nIHRoZSBuZXcgX3RzIGJlY2F1c2UgdGhlIG9sZCBvbmUgbXVzdCBiZSB1c2VkIGluIHRoYXQgY2FsY3VsYXRpb24uXG4gICAgLy8gcHJpb3JpdGl6ZSByZW5kZXJpbmcgd2hlcmUgdGhlIHBhcmVudCdzIHBsYXloZWFkIGxpbmVzIHVwIGluc3RlYWQgb2YgdGhpcy5fdFRpbWUgYmVjYXVzZSB0aGVyZSBjb3VsZCBiZSBhIHR3ZWVuIHRoYXQncyBhbmltYXRpbmcgYW5vdGhlciB0d2VlbidzIHRpbWVTY2FsZSBpbiB0aGUgc2FtZSByZW5kZXJpbmcgbG9vcCAoc2FtZSBwYXJlbnQpLCB0aHVzIGlmIHRoZSB0aW1lU2NhbGUgdHdlZW4gcmVuZGVycyBmaXJzdCwgaXQgd291bGQgYWx0ZXIgX3N0YXJ0IEJFRk9SRSBfdFRpbWUgd2FzIHNldCBvbiB0aGF0IHRpY2sgKGluIHRoZSByZW5kZXJpbmcgbG9vcCksIGVmZmVjdGl2ZWx5IGZyZWV6aW5nIGl0IHVudGlsIHRoZSB0aW1lU2NhbGUgdHdlZW4gZmluaXNoZXMuXG5cbiAgICB0aGlzLl9ydHMgPSArdmFsdWUgfHwgMDtcbiAgICB0aGlzLl90cyA9IHRoaXMuX3BzIHx8IHZhbHVlID09PSAtX3RpbnlOdW0gPyAwIDogdGhpcy5fcnRzOyAvLyBfdHMgaXMgdGhlIGZ1bmN0aW9uYWwgdGltZVNjYWxlIHdoaWNoIHdvdWxkIGJlIDAgaWYgdGhlIGFuaW1hdGlvbiBpcyBwYXVzZWQuXG5cbiAgICByZXR1cm4gX3JlY2FjaGVBbmNlc3RvcnModGhpcy50b3RhbFRpbWUoX2NsYW1wKC10aGlzLl9kZWxheSwgdGhpcy5fdER1ciwgdFRpbWUpLCB0cnVlKSk7XG4gIH07XG5cbiAgX3Byb3RvLnBhdXNlZCA9IGZ1bmN0aW9uIHBhdXNlZCh2YWx1ZSkge1xuICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkge1xuICAgICAgcmV0dXJuIHRoaXMuX3BzO1xuICAgIH1cblxuICAgIGlmICh0aGlzLl9wcyAhPT0gdmFsdWUpIHtcbiAgICAgIHRoaXMuX3BzID0gdmFsdWU7XG5cbiAgICAgIGlmICh2YWx1ZSkge1xuICAgICAgICB0aGlzLl9wVGltZSA9IHRoaXMuX3RUaW1lIHx8IE1hdGgubWF4KC10aGlzLl9kZWxheSwgdGhpcy5yYXdUaW1lKCkpOyAvLyBpZiB0aGUgcGF1c2Ugb2NjdXJzIGR1cmluZyB0aGUgZGVsYXkgcGhhc2UsIG1ha2Ugc3VyZSB0aGF0J3MgZmFjdG9yZWQgaW4gd2hlbiByZXN1bWluZy5cblxuICAgICAgICB0aGlzLl90cyA9IHRoaXMuX2FjdCA9IDA7IC8vIF90cyBpcyB0aGUgZnVuY3Rpb25hbCB0aW1lU2NhbGUsIHNvIGEgcGF1c2VkIHR3ZWVuIHdvdWxkIGVmZmVjdGl2ZWx5IGhhdmUgYSB0aW1lU2NhbGUgb2YgMC4gV2UgcmVjb3JkIHRoZSBcInJlYWxcIiB0aW1lU2NhbGUgYXMgX3J0cyAocmVjb3JkZWQgdGltZSBzY2FsZSlcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIF93YWtlKCk7XG5cbiAgICAgICAgdGhpcy5fdHMgPSB0aGlzLl9ydHM7IC8vb25seSBkZWZlciB0byBfcFRpbWUgKHBhdXNlVGltZSkgaWYgdFRpbWUgaXMgemVyby4gUmVtZW1iZXIsIHNvbWVvbmUgY291bGQgcGF1c2UoKSBhbiBhbmltYXRpb24sIHRoZW4gc2NydWIgdGhlIHBsYXloZWFkIGFuZCByZXN1bWUoKS4gSWYgdGhlIHBhcmVudCBkb2Vzbid0IGhhdmUgc21vb3RoQ2hpbGRUaW1pbmcsIHdlIHJlbmRlciBhdCB0aGUgcmF3VGltZSgpIGJlY2F1c2UgdGhlIHN0YXJ0VGltZSB3b24ndCBnZXQgdXBkYXRlZC5cblxuICAgICAgICB0aGlzLnRvdGFsVGltZSh0aGlzLnBhcmVudCAmJiAhdGhpcy5wYXJlbnQuc21vb3RoQ2hpbGRUaW1pbmcgPyB0aGlzLnJhd1RpbWUoKSA6IHRoaXMuX3RUaW1lIHx8IHRoaXMuX3BUaW1lLCB0aGlzLnByb2dyZXNzKCkgPT09IDEgJiYgKHRoaXMuX3RUaW1lIC09IF90aW55TnVtKSAmJiBNYXRoLmFicyh0aGlzLl96VGltZSkgIT09IF90aW55TnVtKTsgLy8gZWRnZSBjYXNlOiBhbmltYXRpb24ucHJvZ3Jlc3MoMSkucGF1c2UoKS5wbGF5KCkgd291bGRuJ3QgcmVuZGVyIGFnYWluIGJlY2F1c2UgdGhlIHBsYXloZWFkIGlzIGFscmVhZHkgYXQgdGhlIGVuZCwgYnV0IHRoZSBjYWxsIHRvIHRvdGFsVGltZSgpIGJlbG93IHdpbGwgYWRkIGl0IGJhY2sgdG8gaXRzIHBhcmVudC4uLmFuZCBub3QgcmVtb3ZlIGl0IGFnYWluIChzaW5jZSByZW1vdmluZyBvbmx5IGhhcHBlbnMgdXBvbiByZW5kZXJpbmcgYXQgYSBuZXcgdGltZSkuIE9mZnNldHRpbmcgdGhlIF90VGltZSBzbGlnaHRseSBpcyBkb25lIHNpbXBseSB0byBjYXVzZSB0aGUgZmluYWwgcmVuZGVyIGluIHRvdGFsVGltZSgpIHRoYXQnbGwgcG9wIGl0IG9mZiBpdHMgdGltZWxpbmUgKGlmIGF1dG9SZW1vdmVDaGlsZHJlbiBpcyB0cnVlLCBvZiBjb3Vyc2UpLiBDaGVjayB0byBtYWtlIHN1cmUgX3pUaW1lIGlzbid0IC1fdGlueU51bSB0byBhdm9pZCBhbiBlZGdlIGNhc2Ugd2hlcmUgdGhlIHBsYXloZWFkIGlzIHB1c2hlZCB0byB0aGUgZW5kIGJ1dCBJTlNJREUgYSB0d2Vlbi9jYWxsYmFjaywgdGhlIHRpbWVsaW5lIGl0c2VsZiBpcyBwYXVzZWQgdGh1cyBoYWx0aW5nIHJlbmRlcmluZyBhbmQgbGVhdmluZyBhIGZldyB1bnJlbmRlcmVkLiBXaGVuIHJlc3VtaW5nLCBpdCB3b3VsZG4ndCByZW5kZXIgdGhvc2Ugb3RoZXJ3aXNlLlxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIF9wcm90by5zdGFydFRpbWUgPSBmdW5jdGlvbiBzdGFydFRpbWUodmFsdWUpIHtcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCkge1xuICAgICAgdGhpcy5fc3RhcnQgPSB2YWx1ZTtcbiAgICAgIHZhciBwYXJlbnQgPSB0aGlzLnBhcmVudCB8fCB0aGlzLl9kcDtcbiAgICAgIHBhcmVudCAmJiAocGFyZW50Ll9zb3J0IHx8ICF0aGlzLnBhcmVudCkgJiYgX2FkZFRvVGltZWxpbmUocGFyZW50LCB0aGlzLCB2YWx1ZSAtIHRoaXMuX2RlbGF5KTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLl9zdGFydDtcbiAgfTtcblxuICBfcHJvdG8uZW5kVGltZSA9IGZ1bmN0aW9uIGVuZFRpbWUoaW5jbHVkZVJlcGVhdHMpIHtcbiAgICByZXR1cm4gdGhpcy5fc3RhcnQgKyAoX2lzTm90RmFsc2UoaW5jbHVkZVJlcGVhdHMpID8gdGhpcy50b3RhbER1cmF0aW9uKCkgOiB0aGlzLmR1cmF0aW9uKCkpIC8gTWF0aC5hYnModGhpcy5fdHMpO1xuICB9O1xuXG4gIF9wcm90by5yYXdUaW1lID0gZnVuY3Rpb24gcmF3VGltZSh3cmFwUmVwZWF0cykge1xuICAgIHZhciBwYXJlbnQgPSB0aGlzLnBhcmVudCB8fCB0aGlzLl9kcDsgLy8gX2RwID0gZGV0YXRjaGVkIHBhcmVudFxuXG4gICAgcmV0dXJuICFwYXJlbnQgPyB0aGlzLl90VGltZSA6IHdyYXBSZXBlYXRzICYmICghdGhpcy5fdHMgfHwgdGhpcy5fcmVwZWF0ICYmIHRoaXMuX3RpbWUgJiYgdGhpcy50b3RhbFByb2dyZXNzKCkgPCAxKSA/IHRoaXMuX3RUaW1lICUgKHRoaXMuX2R1ciArIHRoaXMuX3JEZWxheSkgOiAhdGhpcy5fdHMgPyB0aGlzLl90VGltZSA6IF9wYXJlbnRUb0NoaWxkVG90YWxUaW1lKHBhcmVudC5yYXdUaW1lKHdyYXBSZXBlYXRzKSwgdGhpcyk7XG4gIH07XG5cbiAgX3Byb3RvLmdsb2JhbFRpbWUgPSBmdW5jdGlvbiBnbG9iYWxUaW1lKHJhd1RpbWUpIHtcbiAgICB2YXIgYW5pbWF0aW9uID0gdGhpcyxcbiAgICAgICAgdGltZSA9IGFyZ3VtZW50cy5sZW5ndGggPyByYXdUaW1lIDogYW5pbWF0aW9uLnJhd1RpbWUoKTtcblxuICAgIHdoaWxlIChhbmltYXRpb24pIHtcbiAgICAgIHRpbWUgPSBhbmltYXRpb24uX3N0YXJ0ICsgdGltZSAvIChhbmltYXRpb24uX3RzIHx8IDEpO1xuICAgICAgYW5pbWF0aW9uID0gYW5pbWF0aW9uLl9kcDtcbiAgICB9XG5cbiAgICByZXR1cm4gdGltZTtcbiAgfTtcblxuICBfcHJvdG8ucmVwZWF0ID0gZnVuY3Rpb24gcmVwZWF0KHZhbHVlKSB7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGgpIHtcbiAgICAgIHRoaXMuX3JlcGVhdCA9IHZhbHVlO1xuICAgICAgcmV0dXJuIF9vblVwZGF0ZVRvdGFsRHVyYXRpb24odGhpcyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuX3JlcGVhdDtcbiAgfTtcblxuICBfcHJvdG8ucmVwZWF0RGVsYXkgPSBmdW5jdGlvbiByZXBlYXREZWxheSh2YWx1ZSkge1xuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoKSB7XG4gICAgICB0aGlzLl9yRGVsYXkgPSB2YWx1ZTtcbiAgICAgIHJldHVybiBfb25VcGRhdGVUb3RhbER1cmF0aW9uKHRoaXMpO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLl9yRGVsYXk7XG4gIH07XG5cbiAgX3Byb3RvLnlveW8gPSBmdW5jdGlvbiB5b3lvKHZhbHVlKSB7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGgpIHtcbiAgICAgIHRoaXMuX3lveW8gPSB2YWx1ZTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLl95b3lvO1xuICB9O1xuXG4gIF9wcm90by5zZWVrID0gZnVuY3Rpb24gc2Vlayhwb3NpdGlvbiwgc3VwcHJlc3NFdmVudHMpIHtcbiAgICByZXR1cm4gdGhpcy50b3RhbFRpbWUoX3BhcnNlUG9zaXRpb24odGhpcywgcG9zaXRpb24pLCBfaXNOb3RGYWxzZShzdXBwcmVzc0V2ZW50cykpO1xuICB9O1xuXG4gIF9wcm90by5yZXN0YXJ0ID0gZnVuY3Rpb24gcmVzdGFydChpbmNsdWRlRGVsYXksIHN1cHByZXNzRXZlbnRzKSB7XG4gICAgcmV0dXJuIHRoaXMucGxheSgpLnRvdGFsVGltZShpbmNsdWRlRGVsYXkgPyAtdGhpcy5fZGVsYXkgOiAwLCBfaXNOb3RGYWxzZShzdXBwcmVzc0V2ZW50cykpO1xuICB9O1xuXG4gIF9wcm90by5wbGF5ID0gZnVuY3Rpb24gcGxheShmcm9tLCBzdXBwcmVzc0V2ZW50cykge1xuICAgIGZyb20gIT0gbnVsbCAmJiB0aGlzLnNlZWsoZnJvbSwgc3VwcHJlc3NFdmVudHMpO1xuICAgIHJldHVybiB0aGlzLnJldmVyc2VkKGZhbHNlKS5wYXVzZWQoZmFsc2UpO1xuICB9O1xuXG4gIF9wcm90by5yZXZlcnNlID0gZnVuY3Rpb24gcmV2ZXJzZShmcm9tLCBzdXBwcmVzc0V2ZW50cykge1xuICAgIGZyb20gIT0gbnVsbCAmJiB0aGlzLnNlZWsoZnJvbSB8fCB0aGlzLnRvdGFsRHVyYXRpb24oKSwgc3VwcHJlc3NFdmVudHMpO1xuICAgIHJldHVybiB0aGlzLnJldmVyc2VkKHRydWUpLnBhdXNlZChmYWxzZSk7XG4gIH07XG5cbiAgX3Byb3RvLnBhdXNlID0gZnVuY3Rpb24gcGF1c2UoYXRUaW1lLCBzdXBwcmVzc0V2ZW50cykge1xuICAgIGF0VGltZSAhPSBudWxsICYmIHRoaXMuc2VlayhhdFRpbWUsIHN1cHByZXNzRXZlbnRzKTtcbiAgICByZXR1cm4gdGhpcy5wYXVzZWQodHJ1ZSk7XG4gIH07XG5cbiAgX3Byb3RvLnJlc3VtZSA9IGZ1bmN0aW9uIHJlc3VtZSgpIHtcbiAgICByZXR1cm4gdGhpcy5wYXVzZWQoZmFsc2UpO1xuICB9O1xuXG4gIF9wcm90by5yZXZlcnNlZCA9IGZ1bmN0aW9uIHJldmVyc2VkKHZhbHVlKSB7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGgpIHtcbiAgICAgICEhdmFsdWUgIT09IHRoaXMucmV2ZXJzZWQoKSAmJiB0aGlzLnRpbWVTY2FsZSgtdGhpcy5fcnRzIHx8ICh2YWx1ZSA/IC1fdGlueU51bSA6IDApKTsgLy8gaW4gY2FzZSB0aW1lU2NhbGUgaXMgemVybywgcmV2ZXJzaW5nIHdvdWxkIGhhdmUgbm8gZWZmZWN0IHNvIHdlIHVzZSBfdGlueU51bS5cblxuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuX3J0cyA8IDA7XG4gIH07XG5cbiAgX3Byb3RvLmludmFsaWRhdGUgPSBmdW5jdGlvbiBpbnZhbGlkYXRlKCkge1xuICAgIHRoaXMuX2luaXR0ZWQgPSAwO1xuICAgIHRoaXMuX3pUaW1lID0gLV90aW55TnVtO1xuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIF9wcm90by5pc0FjdGl2ZSA9IGZ1bmN0aW9uIGlzQWN0aXZlKCkge1xuICAgIHZhciBwYXJlbnQgPSB0aGlzLnBhcmVudCB8fCB0aGlzLl9kcCxcbiAgICAgICAgc3RhcnQgPSB0aGlzLl9zdGFydCxcbiAgICAgICAgcmF3VGltZTtcbiAgICByZXR1cm4gISEoIXBhcmVudCB8fCB0aGlzLl90cyAmJiB0aGlzLl9pbml0dGVkICYmIHBhcmVudC5pc0FjdGl2ZSgpICYmIChyYXdUaW1lID0gcGFyZW50LnJhd1RpbWUodHJ1ZSkpID49IHN0YXJ0ICYmIHJhd1RpbWUgPCB0aGlzLmVuZFRpbWUodHJ1ZSkgLSBfdGlueU51bSk7XG4gIH07XG5cbiAgX3Byb3RvLmV2ZW50Q2FsbGJhY2sgPSBmdW5jdGlvbiBldmVudENhbGxiYWNrKHR5cGUsIGNhbGxiYWNrLCBwYXJhbXMpIHtcbiAgICB2YXIgdmFycyA9IHRoaXMudmFycztcblxuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID4gMSkge1xuICAgICAgaWYgKCFjYWxsYmFjaykge1xuICAgICAgICBkZWxldGUgdmFyc1t0eXBlXTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhcnNbdHlwZV0gPSBjYWxsYmFjaztcbiAgICAgICAgcGFyYW1zICYmICh2YXJzW3R5cGUgKyBcIlBhcmFtc1wiXSA9IHBhcmFtcyk7XG4gICAgICAgIHR5cGUgPT09IFwib25VcGRhdGVcIiAmJiAodGhpcy5fb25VcGRhdGUgPSBjYWxsYmFjayk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIHJldHVybiB2YXJzW3R5cGVdO1xuICB9O1xuXG4gIF9wcm90by50aGVuID0gZnVuY3Rpb24gdGhlbihvbkZ1bGZpbGxlZCkge1xuICAgIHZhciBzZWxmID0gdGhpcztcbiAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUpIHtcbiAgICAgIHZhciBmID0gX2lzRnVuY3Rpb24ob25GdWxmaWxsZWQpID8gb25GdWxmaWxsZWQgOiBfcGFzc1Rocm91Z2gsXG4gICAgICAgICAgX3Jlc29sdmUgPSBmdW5jdGlvbiBfcmVzb2x2ZSgpIHtcbiAgICAgICAgdmFyIF90aGVuID0gc2VsZi50aGVuO1xuICAgICAgICBzZWxmLnRoZW4gPSBudWxsOyAvLyB0ZW1wb3JhcmlseSBudWxsIHRoZSB0aGVuKCkgbWV0aG9kIHRvIGF2b2lkIGFuIGluZmluaXRlIGxvb3AgKHNlZSBodHRwczovL2dpdGh1Yi5jb20vZ3JlZW5zb2NrL0dTQVAvaXNzdWVzLzMyMilcblxuICAgICAgICBfaXNGdW5jdGlvbihmKSAmJiAoZiA9IGYoc2VsZikpICYmIChmLnRoZW4gfHwgZiA9PT0gc2VsZikgJiYgKHNlbGYudGhlbiA9IF90aGVuKTtcbiAgICAgICAgcmVzb2x2ZShmKTtcbiAgICAgICAgc2VsZi50aGVuID0gX3RoZW47XG4gICAgICB9O1xuXG4gICAgICBpZiAoc2VsZi5faW5pdHRlZCAmJiBzZWxmLnRvdGFsUHJvZ3Jlc3MoKSA9PT0gMSAmJiBzZWxmLl90cyA+PSAwIHx8ICFzZWxmLl90VGltZSAmJiBzZWxmLl90cyA8IDApIHtcbiAgICAgICAgX3Jlc29sdmUoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHNlbGYuX3Byb20gPSBfcmVzb2x2ZTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfTtcblxuICBfcHJvdG8ua2lsbCA9IGZ1bmN0aW9uIGtpbGwoKSB7XG4gICAgX2ludGVycnVwdCh0aGlzKTtcbiAgfTtcblxuICByZXR1cm4gQW5pbWF0aW9uO1xufSgpO1xuXG5fc2V0RGVmYXVsdHMoQW5pbWF0aW9uLnByb3RvdHlwZSwge1xuICBfdGltZTogMCxcbiAgX3N0YXJ0OiAwLFxuICBfZW5kOiAwLFxuICBfdFRpbWU6IDAsXG4gIF90RHVyOiAwLFxuICBfZGlydHk6IDAsXG4gIF9yZXBlYXQ6IDAsXG4gIF95b3lvOiBmYWxzZSxcbiAgcGFyZW50OiBudWxsLFxuICBfaW5pdHRlZDogZmFsc2UsXG4gIF9yRGVsYXk6IDAsXG4gIF90czogMSxcbiAgX2RwOiAwLFxuICByYXRpbzogMCxcbiAgX3pUaW1lOiAtX3RpbnlOdW0sXG4gIF9wcm9tOiAwLFxuICBfcHM6IGZhbHNlLFxuICBfcnRzOiAxXG59KTtcbi8qXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBUSU1FTElORVxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICovXG5cblxuZXhwb3J0IHZhciBUaW1lbGluZSA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoX0FuaW1hdGlvbikge1xuICBfaW5oZXJpdHNMb29zZShUaW1lbGluZSwgX0FuaW1hdGlvbik7XG5cbiAgZnVuY3Rpb24gVGltZWxpbmUodmFycywgdGltZSkge1xuICAgIHZhciBfdGhpcztcblxuICAgIGlmICh2YXJzID09PSB2b2lkIDApIHtcbiAgICAgIHZhcnMgPSB7fTtcbiAgICB9XG5cbiAgICBfdGhpcyA9IF9BbmltYXRpb24uY2FsbCh0aGlzLCB2YXJzLCB0aW1lKSB8fCB0aGlzO1xuICAgIF90aGlzLmxhYmVscyA9IHt9O1xuICAgIF90aGlzLnNtb290aENoaWxkVGltaW5nID0gISF2YXJzLnNtb290aENoaWxkVGltaW5nO1xuICAgIF90aGlzLmF1dG9SZW1vdmVDaGlsZHJlbiA9ICEhdmFycy5hdXRvUmVtb3ZlQ2hpbGRyZW47XG4gICAgX3RoaXMuX3NvcnQgPSBfaXNOb3RGYWxzZSh2YXJzLnNvcnRDaGlsZHJlbik7XG4gICAgX3RoaXMucGFyZW50ICYmIF9wb3N0QWRkQ2hlY2tzKF90aGlzLnBhcmVudCwgX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcykpO1xuICAgIHZhcnMuc2Nyb2xsVHJpZ2dlciAmJiBfc2Nyb2xsVHJpZ2dlcihfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgdmFycy5zY3JvbGxUcmlnZ2VyKTtcbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICB2YXIgX3Byb3RvMiA9IFRpbWVsaW5lLnByb3RvdHlwZTtcblxuICBfcHJvdG8yLnRvID0gZnVuY3Rpb24gdG8odGFyZ2V0cywgdmFycywgcG9zaXRpb24pIHtcbiAgICBuZXcgVHdlZW4odGFyZ2V0cywgX3BhcnNlVmFycyhhcmd1bWVudHMsIDAsIHRoaXMpLCBfcGFyc2VQb3NpdGlvbih0aGlzLCBfaXNOdW1iZXIodmFycykgPyBhcmd1bWVudHNbM10gOiBwb3NpdGlvbikpO1xuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIF9wcm90bzIuZnJvbSA9IGZ1bmN0aW9uIGZyb20odGFyZ2V0cywgdmFycywgcG9zaXRpb24pIHtcbiAgICBuZXcgVHdlZW4odGFyZ2V0cywgX3BhcnNlVmFycyhhcmd1bWVudHMsIDEsIHRoaXMpLCBfcGFyc2VQb3NpdGlvbih0aGlzLCBfaXNOdW1iZXIodmFycykgPyBhcmd1bWVudHNbM10gOiBwb3NpdGlvbikpO1xuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIF9wcm90bzIuZnJvbVRvID0gZnVuY3Rpb24gZnJvbVRvKHRhcmdldHMsIGZyb21WYXJzLCB0b1ZhcnMsIHBvc2l0aW9uKSB7XG4gICAgbmV3IFR3ZWVuKHRhcmdldHMsIF9wYXJzZVZhcnMoYXJndW1lbnRzLCAyLCB0aGlzKSwgX3BhcnNlUG9zaXRpb24odGhpcywgX2lzTnVtYmVyKGZyb21WYXJzKSA/IGFyZ3VtZW50c1s0XSA6IHBvc2l0aW9uKSk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgX3Byb3RvMi5zZXQgPSBmdW5jdGlvbiBzZXQodGFyZ2V0cywgdmFycywgcG9zaXRpb24pIHtcbiAgICB2YXJzLmR1cmF0aW9uID0gMDtcbiAgICB2YXJzLnBhcmVudCA9IHRoaXM7XG4gICAgX2luaGVyaXREZWZhdWx0cyh2YXJzKS5yZXBlYXREZWxheSB8fCAodmFycy5yZXBlYXQgPSAwKTtcbiAgICB2YXJzLmltbWVkaWF0ZVJlbmRlciA9ICEhdmFycy5pbW1lZGlhdGVSZW5kZXI7XG4gICAgbmV3IFR3ZWVuKHRhcmdldHMsIHZhcnMsIF9wYXJzZVBvc2l0aW9uKHRoaXMsIHBvc2l0aW9uKSwgMSk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgX3Byb3RvMi5jYWxsID0gZnVuY3Rpb24gY2FsbChjYWxsYmFjaywgcGFyYW1zLCBwb3NpdGlvbikge1xuICAgIHJldHVybiBfYWRkVG9UaW1lbGluZSh0aGlzLCBUd2Vlbi5kZWxheWVkQ2FsbCgwLCBjYWxsYmFjaywgcGFyYW1zKSwgX3BhcnNlUG9zaXRpb24odGhpcywgcG9zaXRpb24pKTtcbiAgfSAvL09OTFkgZm9yIGJhY2t3YXJkIGNvbXBhdGliaWxpdHkhIE1heWJlIGRlbGV0ZT9cbiAgO1xuXG4gIF9wcm90bzIuc3RhZ2dlclRvID0gZnVuY3Rpb24gc3RhZ2dlclRvKHRhcmdldHMsIGR1cmF0aW9uLCB2YXJzLCBzdGFnZ2VyLCBwb3NpdGlvbiwgb25Db21wbGV0ZUFsbCwgb25Db21wbGV0ZUFsbFBhcmFtcykge1xuICAgIHZhcnMuZHVyYXRpb24gPSBkdXJhdGlvbjtcbiAgICB2YXJzLnN0YWdnZXIgPSB2YXJzLnN0YWdnZXIgfHwgc3RhZ2dlcjtcbiAgICB2YXJzLm9uQ29tcGxldGUgPSBvbkNvbXBsZXRlQWxsO1xuICAgIHZhcnMub25Db21wbGV0ZVBhcmFtcyA9IG9uQ29tcGxldGVBbGxQYXJhbXM7XG4gICAgdmFycy5wYXJlbnQgPSB0aGlzO1xuICAgIG5ldyBUd2Vlbih0YXJnZXRzLCB2YXJzLCBfcGFyc2VQb3NpdGlvbih0aGlzLCBwb3NpdGlvbikpO1xuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIF9wcm90bzIuc3RhZ2dlckZyb20gPSBmdW5jdGlvbiBzdGFnZ2VyRnJvbSh0YXJnZXRzLCBkdXJhdGlvbiwgdmFycywgc3RhZ2dlciwgcG9zaXRpb24sIG9uQ29tcGxldGVBbGwsIG9uQ29tcGxldGVBbGxQYXJhbXMpIHtcbiAgICB2YXJzLnJ1bkJhY2t3YXJkcyA9IDE7XG4gICAgX2luaGVyaXREZWZhdWx0cyh2YXJzKS5pbW1lZGlhdGVSZW5kZXIgPSBfaXNOb3RGYWxzZSh2YXJzLmltbWVkaWF0ZVJlbmRlcik7XG4gICAgcmV0dXJuIHRoaXMuc3RhZ2dlclRvKHRhcmdldHMsIGR1cmF0aW9uLCB2YXJzLCBzdGFnZ2VyLCBwb3NpdGlvbiwgb25Db21wbGV0ZUFsbCwgb25Db21wbGV0ZUFsbFBhcmFtcyk7XG4gIH07XG5cbiAgX3Byb3RvMi5zdGFnZ2VyRnJvbVRvID0gZnVuY3Rpb24gc3RhZ2dlckZyb21Ubyh0YXJnZXRzLCBkdXJhdGlvbiwgZnJvbVZhcnMsIHRvVmFycywgc3RhZ2dlciwgcG9zaXRpb24sIG9uQ29tcGxldGVBbGwsIG9uQ29tcGxldGVBbGxQYXJhbXMpIHtcbiAgICB0b1ZhcnMuc3RhcnRBdCA9IGZyb21WYXJzO1xuICAgIF9pbmhlcml0RGVmYXVsdHModG9WYXJzKS5pbW1lZGlhdGVSZW5kZXIgPSBfaXNOb3RGYWxzZSh0b1ZhcnMuaW1tZWRpYXRlUmVuZGVyKTtcbiAgICByZXR1cm4gdGhpcy5zdGFnZ2VyVG8odGFyZ2V0cywgZHVyYXRpb24sIHRvVmFycywgc3RhZ2dlciwgcG9zaXRpb24sIG9uQ29tcGxldGVBbGwsIG9uQ29tcGxldGVBbGxQYXJhbXMpO1xuICB9O1xuXG4gIF9wcm90bzIucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKHRvdGFsVGltZSwgc3VwcHJlc3NFdmVudHMsIGZvcmNlKSB7XG4gICAgdmFyIHByZXZUaW1lID0gdGhpcy5fdGltZSxcbiAgICAgICAgdER1ciA9IHRoaXMuX2RpcnR5ID8gdGhpcy50b3RhbER1cmF0aW9uKCkgOiB0aGlzLl90RHVyLFxuICAgICAgICBkdXIgPSB0aGlzLl9kdXIsXG4gICAgICAgIHRUaW1lID0gdGhpcyAhPT0gX2dsb2JhbFRpbWVsaW5lICYmIHRvdGFsVGltZSA+IHREdXIgLSBfdGlueU51bSAmJiB0b3RhbFRpbWUgPj0gMCA/IHREdXIgOiB0b3RhbFRpbWUgPCBfdGlueU51bSA/IDAgOiB0b3RhbFRpbWUsXG4gICAgICAgIGNyb3NzaW5nU3RhcnQgPSB0aGlzLl96VGltZSA8IDAgIT09IHRvdGFsVGltZSA8IDAgJiYgKHRoaXMuX2luaXR0ZWQgfHwgIWR1ciksXG4gICAgICAgIHRpbWUsXG4gICAgICAgIGNoaWxkLFxuICAgICAgICBuZXh0LFxuICAgICAgICBpdGVyYXRpb24sXG4gICAgICAgIGN5Y2xlRHVyYXRpb24sXG4gICAgICAgIHByZXZQYXVzZWQsXG4gICAgICAgIHBhdXNlVHdlZW4sXG4gICAgICAgIHRpbWVTY2FsZSxcbiAgICAgICAgcHJldlN0YXJ0LFxuICAgICAgICBwcmV2SXRlcmF0aW9uLFxuICAgICAgICB5b3lvLFxuICAgICAgICBpc1lveW87XG5cbiAgICBpZiAodFRpbWUgIT09IHRoaXMuX3RUaW1lIHx8IGZvcmNlIHx8IGNyb3NzaW5nU3RhcnQpIHtcbiAgICAgIGlmIChwcmV2VGltZSAhPT0gdGhpcy5fdGltZSAmJiBkdXIpIHtcbiAgICAgICAgLy9pZiB0b3RhbER1cmF0aW9uKCkgZmluZHMgYSBjaGlsZCB3aXRoIGEgbmVnYXRpdmUgc3RhcnRUaW1lIGFuZCBzbW9vdGhDaGlsZFRpbWluZyBpcyB0cnVlLCB0aGluZ3MgZ2V0IHNoaWZ0ZWQgYXJvdW5kIGludGVybmFsbHkgc28gd2UgbmVlZCB0byBhZGp1c3QgdGhlIHRpbWUgYWNjb3JkaW5nbHkuIEZvciBleGFtcGxlLCBpZiBhIHR3ZWVuIHN0YXJ0cyBhdCAtMzAgd2UgbXVzdCBzaGlmdCBFVkVSWVRISU5HIGZvcndhcmQgMzAgc2Vjb25kcyBhbmQgbW92ZSB0aGlzIHRpbWVsaW5lJ3Mgc3RhcnRUaW1lIGJhY2t3YXJkIGJ5IDMwIHNlY29uZHMgc28gdGhhdCB0aGluZ3MgYWxpZ24gd2l0aCB0aGUgcGxheWhlYWQgKG5vIGp1bXApLlxuICAgICAgICB0VGltZSArPSB0aGlzLl90aW1lIC0gcHJldlRpbWU7XG4gICAgICAgIHRvdGFsVGltZSArPSB0aGlzLl90aW1lIC0gcHJldlRpbWU7XG4gICAgICB9XG5cbiAgICAgIHRpbWUgPSB0VGltZTtcbiAgICAgIHByZXZTdGFydCA9IHRoaXMuX3N0YXJ0O1xuICAgICAgdGltZVNjYWxlID0gdGhpcy5fdHM7XG4gICAgICBwcmV2UGF1c2VkID0gIXRpbWVTY2FsZTtcblxuICAgICAgaWYgKGNyb3NzaW5nU3RhcnQpIHtcbiAgICAgICAgZHVyIHx8IChwcmV2VGltZSA9IHRoaXMuX3pUaW1lKTsgLy93aGVuIHRoZSBwbGF5aGVhZCBhcnJpdmVzIGF0IEVYQUNUTFkgdGltZSAwIChyaWdodCBvbiB0b3ApIG9mIGEgemVyby1kdXJhdGlvbiB0aW1lbGluZSwgd2UgbmVlZCB0byBkaXNjZXJuIGlmIGV2ZW50cyBhcmUgc3VwcHJlc3NlZCBzbyB0aGF0IHdoZW4gdGhlIHBsYXloZWFkIG1vdmVzIGFnYWluIChuZXh0IHRpbWUpLCBpdCdsbCB0cmlnZ2VyIHRoZSBjYWxsYmFjay4gSWYgZXZlbnRzIGFyZSBOT1Qgc3VwcHJlc3NlZCwgb2J2aW91c2x5IHRoZSBjYWxsYmFjayB3b3VsZCBiZSB0cmlnZ2VyZWQgaW4gdGhpcyByZW5kZXIuIEJhc2ljYWxseSwgdGhlIGNhbGxiYWNrIHNob3VsZCBmaXJlIGVpdGhlciB3aGVuIHRoZSBwbGF5aGVhZCBBUlJJVkVTIG9yIExFQVZFUyB0aGlzIGV4YWN0IHNwb3QsIG5vdCBib3RoLiBJbWFnaW5lIGRvaW5nIGEgdGltZWxpbmUuc2VlaygwKSBhbmQgdGhlcmUncyBhIGNhbGxiYWNrIHRoYXQgc2l0cyBhdCAwLiBTaW5jZSBldmVudHMgYXJlIHN1cHByZXNzZWQgb24gdGhhdCBzZWVrKCkgYnkgZGVmYXVsdCwgbm90aGluZyB3aWxsIGZpcmUsIGJ1dCB3aGVuIHRoZSBwbGF5aGVhZCBtb3ZlcyBvZmYgb2YgdGhhdCBwb3NpdGlvbiwgdGhlIGNhbGxiYWNrIHNob3VsZCBmaXJlLiBUaGlzIGJlaGF2aW9yIGlzIHdoYXQgcGVvcGxlIGludHVpdGl2ZWx5IGV4cGVjdC5cblxuICAgICAgICAodG90YWxUaW1lIHx8ICFzdXBwcmVzc0V2ZW50cykgJiYgKHRoaXMuX3pUaW1lID0gdG90YWxUaW1lKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHRoaXMuX3JlcGVhdCkge1xuICAgICAgICAvL2FkanVzdCB0aGUgdGltZSBmb3IgcmVwZWF0cyBhbmQgeW95b3NcbiAgICAgICAgeW95byA9IHRoaXMuX3lveW87XG4gICAgICAgIGN5Y2xlRHVyYXRpb24gPSBkdXIgKyB0aGlzLl9yRGVsYXk7XG4gICAgICAgIHRpbWUgPSBfcm91bmQodFRpbWUgJSBjeWNsZUR1cmF0aW9uKTsgLy9yb3VuZCB0byBhdm9pZCBmbG9hdGluZyBwb2ludCBlcnJvcnMuICg0ICUgMC44IHNob3VsZCBiZSAwIGJ1dCBzb21lIGJyb3dzZXJzIHJlcG9ydCBpdCBhcyAwLjc5OTk5OTk5ISlcblxuICAgICAgICBpZiAodFRpbWUgPT09IHREdXIpIHtcbiAgICAgICAgICAvLyB0aGUgdER1ciA9PT0gdFRpbWUgaXMgZm9yIGVkZ2UgY2FzZXMgd2hlcmUgdGhlcmUncyBhIGxlbmd0aHkgZGVjaW1hbCBvbiB0aGUgZHVyYXRpb24gYW5kIGl0IG1heSByZWFjaCB0aGUgdmVyeSBlbmQgYnV0IHRoZSB0aW1lIGlzIHJlbmRlcmVkIGFzIG5vdC1xdWl0ZS10aGVyZSAocmVtZW1iZXIsIHREdXIgaXMgcm91bmRlZCB0byA0IGRlY2ltYWxzIHdoZXJlYXMgZHVyIGlzbid0KVxuICAgICAgICAgIGl0ZXJhdGlvbiA9IHRoaXMuX3JlcGVhdDtcbiAgICAgICAgICB0aW1lID0gZHVyO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGl0ZXJhdGlvbiA9IH5+KHRUaW1lIC8gY3ljbGVEdXJhdGlvbik7XG5cbiAgICAgICAgICBpZiAoaXRlcmF0aW9uICYmIGl0ZXJhdGlvbiA9PT0gdFRpbWUgLyBjeWNsZUR1cmF0aW9uKSB7XG4gICAgICAgICAgICB0aW1lID0gZHVyO1xuICAgICAgICAgICAgaXRlcmF0aW9uLS07XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgdGltZSA+IGR1ciAmJiAodGltZSA9IGR1cik7XG4gICAgICAgIH1cblxuICAgICAgICBwcmV2SXRlcmF0aW9uID0gX2FuaW1hdGlvbkN5Y2xlKHRoaXMuX3RUaW1lLCBjeWNsZUR1cmF0aW9uKTtcbiAgICAgICAgIXByZXZUaW1lICYmIHRoaXMuX3RUaW1lICYmIHByZXZJdGVyYXRpb24gIT09IGl0ZXJhdGlvbiAmJiAocHJldkl0ZXJhdGlvbiA9IGl0ZXJhdGlvbik7IC8vIGVkZ2UgY2FzZSAtIGlmIHNvbWVvbmUgZG9lcyBhZGRQYXVzZSgpIGF0IHRoZSB2ZXJ5IGJlZ2lubmluZyBvZiBhIHJlcGVhdGluZyB0aW1lbGluZSwgdGhhdCBwYXVzZSBpcyB0ZWNobmljYWxseSBhdCB0aGUgc2FtZSBzcG90IGFzIHRoZSBlbmQgd2hpY2ggY2F1c2VzIHRoaXMuX3RpbWUgdG8gZ2V0IHNldCB0byAwIHdoZW4gdGhlIHRvdGFsVGltZSB3b3VsZCBub3JtYWxseSBwbGFjZSB0aGUgcGxheWhlYWQgYXQgdGhlIGVuZC4gU2VlIGh0dHBzOi8vZ3JlZW5zb2NrLmNvbS9mb3J1bXMvdG9waWMvMjM4MjMtY2xvc2luZy1uYXYtYW5pbWF0aW9uLW5vdC13b3JraW5nLW9uLWllLWFuZC1pcGhvbmUtNi1tYXliZS1vdGhlci1vbGRlci1icm93c2VyLz90YWI9Y29tbWVudHMjY29tbWVudC0xMTMwMDVcblxuICAgICAgICBpZiAoeW95byAmJiBpdGVyYXRpb24gJiAxKSB7XG4gICAgICAgICAgdGltZSA9IGR1ciAtIHRpbWU7XG4gICAgICAgICAgaXNZb3lvID0gMTtcbiAgICAgICAgfVxuICAgICAgICAvKlxuICAgICAgICBtYWtlIHN1cmUgY2hpbGRyZW4gYXQgdGhlIGVuZC9iZWdpbm5pbmcgb2YgdGhlIHRpbWVsaW5lIGFyZSByZW5kZXJlZCBwcm9wZXJseS4gSWYsIGZvciBleGFtcGxlLFxuICAgICAgICBhIDMtc2Vjb25kIGxvbmcgdGltZWxpbmUgcmVuZGVyZWQgYXQgMi45IHNlY29uZHMgcHJldmlvdXNseSwgYW5kIG5vdyByZW5kZXJzIGF0IDMuMiBzZWNvbmRzICh3aGljaFxuICAgICAgICB3b3VsZCBnZXQgdHJhbnNsYXRlZCB0byAyLjggc2Vjb25kcyBpZiB0aGUgdGltZWxpbmUgeW95b3Mgb3IgMC4yIHNlY29uZHMgaWYgaXQganVzdCByZXBlYXRzKSwgdGhlcmVcbiAgICAgICAgY291bGQgYmUgYSBjYWxsYmFjayBvciBhIHNob3J0IHR3ZWVuIHRoYXQncyBhdCAyLjk1IG9yIDMgc2Vjb25kcyBpbiB3aGljaCB3b3VsZG4ndCByZW5kZXIuIFNvXG4gICAgICAgIHdlIG5lZWQgdG8gcHVzaCB0aGUgdGltZWxpbmUgdG8gdGhlIGVuZCAoYW5kL29yIGJlZ2lubmluZyBkZXBlbmRpbmcgb24gaXRzIHlveW8gdmFsdWUpLiBBbHNvIHdlIG11c3RcbiAgICAgICAgZW5zdXJlIHRoYXQgemVyby1kdXJhdGlvbiB0d2VlbnMgYXQgdGhlIHZlcnkgYmVnaW5uaW5nIG9yIGVuZCBvZiB0aGUgVGltZWxpbmUgd29yay5cbiAgICAgICAgKi9cblxuXG4gICAgICAgIGlmIChpdGVyYXRpb24gIT09IHByZXZJdGVyYXRpb24gJiYgIXRoaXMuX2xvY2spIHtcbiAgICAgICAgICB2YXIgcmV3aW5kaW5nID0geW95byAmJiBwcmV2SXRlcmF0aW9uICYgMSxcbiAgICAgICAgICAgICAgZG9lc1dyYXAgPSByZXdpbmRpbmcgPT09ICh5b3lvICYmIGl0ZXJhdGlvbiAmIDEpO1xuICAgICAgICAgIGl0ZXJhdGlvbiA8IHByZXZJdGVyYXRpb24gJiYgKHJld2luZGluZyA9ICFyZXdpbmRpbmcpO1xuICAgICAgICAgIHByZXZUaW1lID0gcmV3aW5kaW5nID8gMCA6IGR1cjtcbiAgICAgICAgICB0aGlzLl9sb2NrID0gMTtcbiAgICAgICAgICB0aGlzLnJlbmRlcihwcmV2VGltZSB8fCAoaXNZb3lvID8gMCA6IF9yb3VuZChpdGVyYXRpb24gKiBjeWNsZUR1cmF0aW9uKSksIHN1cHByZXNzRXZlbnRzLCAhZHVyKS5fbG9jayA9IDA7XG4gICAgICAgICAgIXN1cHByZXNzRXZlbnRzICYmIHRoaXMucGFyZW50ICYmIF9jYWxsYmFjayh0aGlzLCBcIm9uUmVwZWF0XCIpO1xuICAgICAgICAgIHRoaXMudmFycy5yZXBlYXRSZWZyZXNoICYmICFpc1lveW8gJiYgKHRoaXMuaW52YWxpZGF0ZSgpLl9sb2NrID0gMSk7XG5cbiAgICAgICAgICBpZiAocHJldlRpbWUgIT09IHRoaXMuX3RpbWUgfHwgcHJldlBhdXNlZCAhPT0gIXRoaXMuX3RzKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBkdXIgPSB0aGlzLl9kdXI7IC8vIGluIGNhc2UgdGhlIGR1cmF0aW9uIGNoYW5nZWQgaW4gdGhlIG9uUmVwZWF0XG5cbiAgICAgICAgICB0RHVyID0gdGhpcy5fdER1cjtcblxuICAgICAgICAgIGlmIChkb2VzV3JhcCkge1xuICAgICAgICAgICAgdGhpcy5fbG9jayA9IDI7XG4gICAgICAgICAgICBwcmV2VGltZSA9IHJld2luZGluZyA/IGR1ciA6IC0wLjAwMDE7XG4gICAgICAgICAgICB0aGlzLnJlbmRlcihwcmV2VGltZSwgdHJ1ZSk7XG4gICAgICAgICAgICB0aGlzLnZhcnMucmVwZWF0UmVmcmVzaCAmJiAhaXNZb3lvICYmIHRoaXMuaW52YWxpZGF0ZSgpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHRoaXMuX2xvY2sgPSAwO1xuXG4gICAgICAgICAgaWYgKCF0aGlzLl90cyAmJiAhcHJldlBhdXNlZCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgICAgfSAvL2luIG9yZGVyIGZvciB5b3lvRWFzZSB0byB3b3JrIHByb3Blcmx5IHdoZW4gdGhlcmUncyBhIHN0YWdnZXIsIHdlIG11c3Qgc3dhcCBvdXQgdGhlIGVhc2UgaW4gZWFjaCBzdWItdHdlZW4uXG5cblxuICAgICAgICAgIF9wcm9wYWdhdGVZb3lvRWFzZSh0aGlzLCBpc1lveW8pO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLl9oYXNQYXVzZSAmJiAhdGhpcy5fZm9yY2luZyAmJiB0aGlzLl9sb2NrIDwgMikge1xuICAgICAgICBwYXVzZVR3ZWVuID0gX2ZpbmROZXh0UGF1c2VUd2Vlbih0aGlzLCBfcm91bmQocHJldlRpbWUpLCBfcm91bmQodGltZSkpO1xuXG4gICAgICAgIGlmIChwYXVzZVR3ZWVuKSB7XG4gICAgICAgICAgdFRpbWUgLT0gdGltZSAtICh0aW1lID0gcGF1c2VUd2Vlbi5fc3RhcnQpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHRoaXMuX3RUaW1lID0gdFRpbWU7XG4gICAgICB0aGlzLl90aW1lID0gdGltZTtcbiAgICAgIHRoaXMuX2FjdCA9ICF0aW1lU2NhbGU7IC8vYXMgbG9uZyBhcyBpdCdzIG5vdCBwYXVzZWQsIGZvcmNlIGl0IHRvIGJlIGFjdGl2ZSBzbyB0aGF0IGlmIHRoZSB1c2VyIHJlbmRlcnMgaW5kZXBlbmRlbnQgb2YgdGhlIHBhcmVudCB0aW1lbGluZSwgaXQnbGwgYmUgZm9yY2VkIHRvIHJlLXJlbmRlciBvbiB0aGUgbmV4dCB0aWNrLlxuXG4gICAgICBpZiAoIXRoaXMuX2luaXR0ZWQpIHtcbiAgICAgICAgdGhpcy5fb25VcGRhdGUgPSB0aGlzLnZhcnMub25VcGRhdGU7XG4gICAgICAgIHRoaXMuX2luaXR0ZWQgPSAxO1xuICAgICAgICB0aGlzLl96VGltZSA9IHRvdGFsVGltZTtcbiAgICAgIH1cblxuICAgICAgIXByZXZUaW1lICYmIHRpbWUgJiYgIXN1cHByZXNzRXZlbnRzICYmIF9jYWxsYmFjayh0aGlzLCBcIm9uU3RhcnRcIik7XG5cbiAgICAgIGlmICh0aW1lID49IHByZXZUaW1lICYmIHRvdGFsVGltZSA+PSAwKSB7XG4gICAgICAgIGNoaWxkID0gdGhpcy5fZmlyc3Q7XG5cbiAgICAgICAgd2hpbGUgKGNoaWxkKSB7XG4gICAgICAgICAgbmV4dCA9IGNoaWxkLl9uZXh0O1xuXG4gICAgICAgICAgaWYgKChjaGlsZC5fYWN0IHx8IHRpbWUgPj0gY2hpbGQuX3N0YXJ0KSAmJiBjaGlsZC5fdHMgJiYgcGF1c2VUd2VlbiAhPT0gY2hpbGQpIHtcbiAgICAgICAgICAgIGlmIChjaGlsZC5wYXJlbnQgIT09IHRoaXMpIHtcbiAgICAgICAgICAgICAgLy8gYW4gZXh0cmVtZSBlZGdlIGNhc2UgLSB0aGUgY2hpbGQncyByZW5kZXIgY291bGQgZG8gc29tZXRoaW5nIGxpa2Uga2lsbCgpIHRoZSBcIm5leHRcIiBvbmUgaW4gdGhlIGxpbmtlZCBsaXN0LCBvciByZXBhcmVudCBpdC4gSW4gdGhhdCBjYXNlIHdlIG11c3QgcmUtaW5pdGlhdGUgdGhlIHdob2xlIHJlbmRlciB0byBiZSBzYWZlLlxuICAgICAgICAgICAgICByZXR1cm4gdGhpcy5yZW5kZXIodG90YWxUaW1lLCBzdXBwcmVzc0V2ZW50cywgZm9yY2UpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBjaGlsZC5yZW5kZXIoY2hpbGQuX3RzID4gMCA/ICh0aW1lIC0gY2hpbGQuX3N0YXJ0KSAqIGNoaWxkLl90cyA6IChjaGlsZC5fZGlydHkgPyBjaGlsZC50b3RhbER1cmF0aW9uKCkgOiBjaGlsZC5fdER1cikgKyAodGltZSAtIGNoaWxkLl9zdGFydCkgKiBjaGlsZC5fdHMsIHN1cHByZXNzRXZlbnRzLCBmb3JjZSk7XG5cbiAgICAgICAgICAgIGlmICh0aW1lICE9PSB0aGlzLl90aW1lIHx8ICF0aGlzLl90cyAmJiAhcHJldlBhdXNlZCkge1xuICAgICAgICAgICAgICAvL2luIGNhc2UgYSB0d2VlbiBwYXVzZXMgb3Igc2Vla3MgdGhlIHRpbWVsaW5lIHdoZW4gcmVuZGVyaW5nLCBsaWtlIGluc2lkZSBvZiBhbiBvblVwZGF0ZS9vbkNvbXBsZXRlXG4gICAgICAgICAgICAgIHBhdXNlVHdlZW4gPSAwO1xuICAgICAgICAgICAgICBuZXh0ICYmICh0VGltZSArPSB0aGlzLl96VGltZSA9IC1fdGlueU51bSk7IC8vIGl0IGRpZG4ndCBmaW5pc2ggcmVuZGVyaW5nLCBzbyBmbGFnIHpUaW1lIGFzIG5lZ2F0aXZlIHNvIHRoYXQgc28gdGhhdCB0aGUgbmV4dCB0aW1lIHJlbmRlcigpIGlzIGNhbGxlZCBpdCdsbCBiZSBmb3JjZWQgKHRvIHJlbmRlciBhbnkgcmVtYWluaW5nIGNoaWxkcmVuKVxuXG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIGNoaWxkID0gbmV4dDtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY2hpbGQgPSB0aGlzLl9sYXN0O1xuICAgICAgICB2YXIgYWRqdXN0ZWRUaW1lID0gdG90YWxUaW1lIDwgMCA/IHRvdGFsVGltZSA6IHRpbWU7IC8vd2hlbiB0aGUgcGxheWhlYWQgZ29lcyBiYWNrd2FyZCBiZXlvbmQgdGhlIHN0YXJ0IG9mIHRoaXMgdGltZWxpbmUsIHdlIG11c3QgcGFzcyB0aGF0IGluZm9ybWF0aW9uIGRvd24gdG8gdGhlIGNoaWxkIGFuaW1hdGlvbnMgc28gdGhhdCB6ZXJvLWR1cmF0aW9uIHR3ZWVucyBrbm93IHdoZXRoZXIgdG8gcmVuZGVyIHRoZWlyIHN0YXJ0aW5nIG9yIGVuZGluZyB2YWx1ZXMuXG5cbiAgICAgICAgd2hpbGUgKGNoaWxkKSB7XG4gICAgICAgICAgbmV4dCA9IGNoaWxkLl9wcmV2O1xuXG4gICAgICAgICAgaWYgKChjaGlsZC5fYWN0IHx8IGFkanVzdGVkVGltZSA8PSBjaGlsZC5fZW5kKSAmJiBjaGlsZC5fdHMgJiYgcGF1c2VUd2VlbiAhPT0gY2hpbGQpIHtcbiAgICAgICAgICAgIGlmIChjaGlsZC5wYXJlbnQgIT09IHRoaXMpIHtcbiAgICAgICAgICAgICAgLy8gYW4gZXh0cmVtZSBlZGdlIGNhc2UgLSB0aGUgY2hpbGQncyByZW5kZXIgY291bGQgZG8gc29tZXRoaW5nIGxpa2Uga2lsbCgpIHRoZSBcIm5leHRcIiBvbmUgaW4gdGhlIGxpbmtlZCBsaXN0LCBvciByZXBhcmVudCBpdC4gSW4gdGhhdCBjYXNlIHdlIG11c3QgcmUtaW5pdGlhdGUgdGhlIHdob2xlIHJlbmRlciB0byBiZSBzYWZlLlxuICAgICAgICAgICAgICByZXR1cm4gdGhpcy5yZW5kZXIodG90YWxUaW1lLCBzdXBwcmVzc0V2ZW50cywgZm9yY2UpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBjaGlsZC5yZW5kZXIoY2hpbGQuX3RzID4gMCA/IChhZGp1c3RlZFRpbWUgLSBjaGlsZC5fc3RhcnQpICogY2hpbGQuX3RzIDogKGNoaWxkLl9kaXJ0eSA/IGNoaWxkLnRvdGFsRHVyYXRpb24oKSA6IGNoaWxkLl90RHVyKSArIChhZGp1c3RlZFRpbWUgLSBjaGlsZC5fc3RhcnQpICogY2hpbGQuX3RzLCBzdXBwcmVzc0V2ZW50cywgZm9yY2UpO1xuXG4gICAgICAgICAgICBpZiAodGltZSAhPT0gdGhpcy5fdGltZSB8fCAhdGhpcy5fdHMgJiYgIXByZXZQYXVzZWQpIHtcbiAgICAgICAgICAgICAgLy9pbiBjYXNlIGEgdHdlZW4gcGF1c2VzIG9yIHNlZWtzIHRoZSB0aW1lbGluZSB3aGVuIHJlbmRlcmluZywgbGlrZSBpbnNpZGUgb2YgYW4gb25VcGRhdGUvb25Db21wbGV0ZVxuICAgICAgICAgICAgICBwYXVzZVR3ZWVuID0gMDtcbiAgICAgICAgICAgICAgbmV4dCAmJiAodFRpbWUgKz0gdGhpcy5felRpbWUgPSBhZGp1c3RlZFRpbWUgPyAtX3RpbnlOdW0gOiBfdGlueU51bSk7IC8vIGl0IGRpZG4ndCBmaW5pc2ggcmVuZGVyaW5nLCBzbyBhZGp1c3QgelRpbWUgc28gdGhhdCBzbyB0aGF0IHRoZSBuZXh0IHRpbWUgcmVuZGVyKCkgaXMgY2FsbGVkIGl0J2xsIGJlIGZvcmNlZCAodG8gcmVuZGVyIGFueSByZW1haW5pbmcgY2hpbGRyZW4pXG5cbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgY2hpbGQgPSBuZXh0O1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChwYXVzZVR3ZWVuICYmICFzdXBwcmVzc0V2ZW50cykge1xuICAgICAgICB0aGlzLnBhdXNlKCk7XG4gICAgICAgIHBhdXNlVHdlZW4ucmVuZGVyKHRpbWUgPj0gcHJldlRpbWUgPyAwIDogLV90aW55TnVtKS5felRpbWUgPSB0aW1lID49IHByZXZUaW1lID8gMSA6IC0xO1xuXG4gICAgICAgIGlmICh0aGlzLl90cykge1xuICAgICAgICAgIC8vdGhlIGNhbGxiYWNrIHJlc3VtZWQgcGxheWJhY2shIFNvIHNpbmNlIHdlIG1heSBoYXZlIGhlbGQgYmFjayB0aGUgcGxheWhlYWQgZHVlIHRvIHdoZXJlIHRoZSBwYXVzZSBpcyBwb3NpdGlvbmVkLCBnbyBhaGVhZCBhbmQganVtcCB0byB3aGVyZSBpdCdzIFNVUFBPU0VEIHRvIGJlIChpZiBubyBwYXVzZSBoYXBwZW5lZCkuXG4gICAgICAgICAgdGhpcy5fc3RhcnQgPSBwcmV2U3RhcnQ7IC8vaWYgdGhlIHBhdXNlIHdhcyBhdCBhbiBlYXJsaWVyIHRpbWUgYW5kIHRoZSB1c2VyIHJlc3VtZWQgaW4gdGhlIGNhbGxiYWNrLCBpdCBjb3VsZCByZXBvc2l0aW9uIHRoZSB0aW1lbGluZSAoY2hhbmdpbmcgaXRzIHN0YXJ0VGltZSksIHRocm93aW5nIHRoaW5ncyBvZmYgc2xpZ2h0bHksIHNvIHdlIG1ha2Ugc3VyZSB0aGUgX3N0YXJ0IGRvZXNuJ3Qgc2hpZnQuXG5cbiAgICAgICAgICBfc2V0RW5kKHRoaXMpO1xuXG4gICAgICAgICAgcmV0dXJuIHRoaXMucmVuZGVyKHRvdGFsVGltZSwgc3VwcHJlc3NFdmVudHMsIGZvcmNlKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICB0aGlzLl9vblVwZGF0ZSAmJiAhc3VwcHJlc3NFdmVudHMgJiYgX2NhbGxiYWNrKHRoaXMsIFwib25VcGRhdGVcIiwgdHJ1ZSk7XG4gICAgICBpZiAodFRpbWUgPT09IHREdXIgJiYgdER1ciA+PSB0aGlzLnRvdGFsRHVyYXRpb24oKSB8fCAhdFRpbWUgJiYgcHJldlRpbWUpIGlmIChwcmV2U3RhcnQgPT09IHRoaXMuX3N0YXJ0IHx8IE1hdGguYWJzKHRpbWVTY2FsZSkgIT09IE1hdGguYWJzKHRoaXMuX3RzKSkgaWYgKCF0aGlzLl9sb2NrKSB7XG4gICAgICAgICh0b3RhbFRpbWUgfHwgIWR1cikgJiYgKHRUaW1lID09PSB0RHVyICYmIHRoaXMuX3RzID4gMCB8fCAhdFRpbWUgJiYgdGhpcy5fdHMgPCAwKSAmJiBfcmVtb3ZlRnJvbVBhcmVudCh0aGlzLCAxKTsgLy8gZG9uJ3QgcmVtb3ZlIGlmIHRoZSB0aW1lbGluZSBpcyByZXZlcnNlZCBhbmQgdGhlIHBsYXloZWFkIGlzbid0IGF0IDAsIG90aGVyd2lzZSB0bC5wcm9ncmVzcygxKS5yZXZlcnNlKCkgd29uJ3Qgd29yay4gT25seSByZW1vdmUgaWYgdGhlIHBsYXloZWFkIGlzIGF0IHRoZSBlbmQgYW5kIHRpbWVTY2FsZSBpcyBwb3NpdGl2ZSwgb3IgaWYgdGhlIHBsYXloZWFkIGlzIGF0IDAgYW5kIHRoZSB0aW1lU2NhbGUgaXMgbmVnYXRpdmUuXG5cbiAgICAgICAgaWYgKCFzdXBwcmVzc0V2ZW50cyAmJiAhKHRvdGFsVGltZSA8IDAgJiYgIXByZXZUaW1lKSAmJiAodFRpbWUgfHwgcHJldlRpbWUpKSB7XG4gICAgICAgICAgX2NhbGxiYWNrKHRoaXMsIHRUaW1lID09PSB0RHVyID8gXCJvbkNvbXBsZXRlXCIgOiBcIm9uUmV2ZXJzZUNvbXBsZXRlXCIsIHRydWUpO1xuXG4gICAgICAgICAgdGhpcy5fcHJvbSAmJiAhKHRUaW1lIDwgdER1ciAmJiB0aGlzLnRpbWVTY2FsZSgpID4gMCkgJiYgdGhpcy5fcHJvbSgpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgX3Byb3RvMi5hZGQgPSBmdW5jdGlvbiBhZGQoY2hpbGQsIHBvc2l0aW9uKSB7XG4gICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgICBpZiAoIV9pc051bWJlcihwb3NpdGlvbikpIHtcbiAgICAgIHBvc2l0aW9uID0gX3BhcnNlUG9zaXRpb24odGhpcywgcG9zaXRpb24pO1xuICAgIH1cblxuICAgIGlmICghKGNoaWxkIGluc3RhbmNlb2YgQW5pbWF0aW9uKSkge1xuICAgICAgaWYgKF9pc0FycmF5KGNoaWxkKSkge1xuICAgICAgICBjaGlsZC5mb3JFYWNoKGZ1bmN0aW9uIChvYmopIHtcbiAgICAgICAgICByZXR1cm4gX3RoaXMyLmFkZChvYmosIHBvc2l0aW9uKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgfVxuXG4gICAgICBpZiAoX2lzU3RyaW5nKGNoaWxkKSkge1xuICAgICAgICByZXR1cm4gdGhpcy5hZGRMYWJlbChjaGlsZCwgcG9zaXRpb24pO1xuICAgICAgfVxuXG4gICAgICBpZiAoX2lzRnVuY3Rpb24oY2hpbGQpKSB7XG4gICAgICAgIGNoaWxkID0gVHdlZW4uZGVsYXllZENhbGwoMCwgY2hpbGQpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMgIT09IGNoaWxkID8gX2FkZFRvVGltZWxpbmUodGhpcywgY2hpbGQsIHBvc2l0aW9uKSA6IHRoaXM7IC8vZG9uJ3QgYWxsb3cgYSB0aW1lbGluZSB0byBiZSBhZGRlZCB0byBpdHNlbGYgYXMgYSBjaGlsZCFcbiAgfTtcblxuICBfcHJvdG8yLmdldENoaWxkcmVuID0gZnVuY3Rpb24gZ2V0Q2hpbGRyZW4obmVzdGVkLCB0d2VlbnMsIHRpbWVsaW5lcywgaWdub3JlQmVmb3JlVGltZSkge1xuICAgIGlmIChuZXN0ZWQgPT09IHZvaWQgMCkge1xuICAgICAgbmVzdGVkID0gdHJ1ZTtcbiAgICB9XG5cbiAgICBpZiAodHdlZW5zID09PSB2b2lkIDApIHtcbiAgICAgIHR3ZWVucyA9IHRydWU7XG4gICAgfVxuXG4gICAgaWYgKHRpbWVsaW5lcyA9PT0gdm9pZCAwKSB7XG4gICAgICB0aW1lbGluZXMgPSB0cnVlO1xuICAgIH1cblxuICAgIGlmIChpZ25vcmVCZWZvcmVUaW1lID09PSB2b2lkIDApIHtcbiAgICAgIGlnbm9yZUJlZm9yZVRpbWUgPSAtX2JpZ051bTtcbiAgICB9XG5cbiAgICB2YXIgYSA9IFtdLFxuICAgICAgICBjaGlsZCA9IHRoaXMuX2ZpcnN0O1xuXG4gICAgd2hpbGUgKGNoaWxkKSB7XG4gICAgICBpZiAoY2hpbGQuX3N0YXJ0ID49IGlnbm9yZUJlZm9yZVRpbWUpIHtcbiAgICAgICAgaWYgKGNoaWxkIGluc3RhbmNlb2YgVHdlZW4pIHtcbiAgICAgICAgICB0d2VlbnMgJiYgYS5wdXNoKGNoaWxkKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aW1lbGluZXMgJiYgYS5wdXNoKGNoaWxkKTtcbiAgICAgICAgICBuZXN0ZWQgJiYgYS5wdXNoLmFwcGx5KGEsIGNoaWxkLmdldENoaWxkcmVuKHRydWUsIHR3ZWVucywgdGltZWxpbmVzKSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgY2hpbGQgPSBjaGlsZC5fbmV4dDtcbiAgICB9XG5cbiAgICByZXR1cm4gYTtcbiAgfTtcblxuICBfcHJvdG8yLmdldEJ5SWQgPSBmdW5jdGlvbiBnZXRCeUlkKGlkKSB7XG4gICAgdmFyIGFuaW1hdGlvbnMgPSB0aGlzLmdldENoaWxkcmVuKDEsIDEsIDEpLFxuICAgICAgICBpID0gYW5pbWF0aW9ucy5sZW5ndGg7XG5cbiAgICB3aGlsZSAoaS0tKSB7XG4gICAgICBpZiAoYW5pbWF0aW9uc1tpXS52YXJzLmlkID09PSBpZCkge1xuICAgICAgICByZXR1cm4gYW5pbWF0aW9uc1tpXTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgX3Byb3RvMi5yZW1vdmUgPSBmdW5jdGlvbiByZW1vdmUoY2hpbGQpIHtcbiAgICBpZiAoX2lzU3RyaW5nKGNoaWxkKSkge1xuICAgICAgcmV0dXJuIHRoaXMucmVtb3ZlTGFiZWwoY2hpbGQpO1xuICAgIH1cblxuICAgIGlmIChfaXNGdW5jdGlvbihjaGlsZCkpIHtcbiAgICAgIHJldHVybiB0aGlzLmtpbGxUd2VlbnNPZihjaGlsZCk7XG4gICAgfVxuXG4gICAgX3JlbW92ZUxpbmtlZExpc3RJdGVtKHRoaXMsIGNoaWxkKTtcblxuICAgIGlmIChjaGlsZCA9PT0gdGhpcy5fcmVjZW50KSB7XG4gICAgICB0aGlzLl9yZWNlbnQgPSB0aGlzLl9sYXN0O1xuICAgIH1cblxuICAgIHJldHVybiBfdW5jYWNoZSh0aGlzKTtcbiAgfTtcblxuICBfcHJvdG8yLnRvdGFsVGltZSA9IGZ1bmN0aW9uIHRvdGFsVGltZShfdG90YWxUaW1lMiwgc3VwcHJlc3NFdmVudHMpIHtcbiAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHtcbiAgICAgIHJldHVybiB0aGlzLl90VGltZTtcbiAgICB9XG5cbiAgICB0aGlzLl9mb3JjaW5nID0gMTtcblxuICAgIGlmICghdGhpcy5fZHAgJiYgdGhpcy5fdHMpIHtcbiAgICAgIC8vc3BlY2lhbCBjYXNlIGZvciB0aGUgZ2xvYmFsIHRpbWVsaW5lIChvciBhbnkgb3RoZXIgdGhhdCBoYXMgbm8gcGFyZW50IG9yIGRldGFjaGVkIHBhcmVudCkuXG4gICAgICB0aGlzLl9zdGFydCA9IF9yb3VuZChfdGlja2VyLnRpbWUgLSAodGhpcy5fdHMgPiAwID8gX3RvdGFsVGltZTIgLyB0aGlzLl90cyA6ICh0aGlzLnRvdGFsRHVyYXRpb24oKSAtIF90b3RhbFRpbWUyKSAvIC10aGlzLl90cykpO1xuICAgIH1cblxuICAgIF9BbmltYXRpb24ucHJvdG90eXBlLnRvdGFsVGltZS5jYWxsKHRoaXMsIF90b3RhbFRpbWUyLCBzdXBwcmVzc0V2ZW50cyk7XG5cbiAgICB0aGlzLl9mb3JjaW5nID0gMDtcbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICBfcHJvdG8yLmFkZExhYmVsID0gZnVuY3Rpb24gYWRkTGFiZWwobGFiZWwsIHBvc2l0aW9uKSB7XG4gICAgdGhpcy5sYWJlbHNbbGFiZWxdID0gX3BhcnNlUG9zaXRpb24odGhpcywgcG9zaXRpb24pO1xuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIF9wcm90bzIucmVtb3ZlTGFiZWwgPSBmdW5jdGlvbiByZW1vdmVMYWJlbChsYWJlbCkge1xuICAgIGRlbGV0ZSB0aGlzLmxhYmVsc1tsYWJlbF07XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgX3Byb3RvMi5hZGRQYXVzZSA9IGZ1bmN0aW9uIGFkZFBhdXNlKHBvc2l0aW9uLCBjYWxsYmFjaywgcGFyYW1zKSB7XG4gICAgdmFyIHQgPSBUd2Vlbi5kZWxheWVkQ2FsbCgwLCBjYWxsYmFjayB8fCBfZW1wdHlGdW5jLCBwYXJhbXMpO1xuICAgIHQuZGF0YSA9IFwiaXNQYXVzZVwiO1xuICAgIHRoaXMuX2hhc1BhdXNlID0gMTtcbiAgICByZXR1cm4gX2FkZFRvVGltZWxpbmUodGhpcywgdCwgX3BhcnNlUG9zaXRpb24odGhpcywgcG9zaXRpb24pKTtcbiAgfTtcblxuICBfcHJvdG8yLnJlbW92ZVBhdXNlID0gZnVuY3Rpb24gcmVtb3ZlUGF1c2UocG9zaXRpb24pIHtcbiAgICB2YXIgY2hpbGQgPSB0aGlzLl9maXJzdDtcbiAgICBwb3NpdGlvbiA9IF9wYXJzZVBvc2l0aW9uKHRoaXMsIHBvc2l0aW9uKTtcblxuICAgIHdoaWxlIChjaGlsZCkge1xuICAgICAgaWYgKGNoaWxkLl9zdGFydCA9PT0gcG9zaXRpb24gJiYgY2hpbGQuZGF0YSA9PT0gXCJpc1BhdXNlXCIpIHtcbiAgICAgICAgX3JlbW92ZUZyb21QYXJlbnQoY2hpbGQpO1xuICAgICAgfVxuXG4gICAgICBjaGlsZCA9IGNoaWxkLl9uZXh0O1xuICAgIH1cbiAgfTtcblxuICBfcHJvdG8yLmtpbGxUd2VlbnNPZiA9IGZ1bmN0aW9uIGtpbGxUd2VlbnNPZih0YXJnZXRzLCBwcm9wcywgb25seUFjdGl2ZSkge1xuICAgIHZhciB0d2VlbnMgPSB0aGlzLmdldFR3ZWVuc09mKHRhcmdldHMsIG9ubHlBY3RpdmUpLFxuICAgICAgICBpID0gdHdlZW5zLmxlbmd0aDtcblxuICAgIHdoaWxlIChpLS0pIHtcbiAgICAgIF9vdmVyd3JpdGluZ1R3ZWVuICE9PSB0d2VlbnNbaV0gJiYgdHdlZW5zW2ldLmtpbGwodGFyZ2V0cywgcHJvcHMpO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIF9wcm90bzIuZ2V0VHdlZW5zT2YgPSBmdW5jdGlvbiBnZXRUd2VlbnNPZih0YXJnZXRzLCBvbmx5QWN0aXZlKSB7XG4gICAgdmFyIGEgPSBbXSxcbiAgICAgICAgcGFyc2VkVGFyZ2V0cyA9IHRvQXJyYXkodGFyZ2V0cyksXG4gICAgICAgIGNoaWxkID0gdGhpcy5fZmlyc3QsXG4gICAgICAgIGlzR2xvYmFsVGltZSA9IF9pc051bWJlcihvbmx5QWN0aXZlKSxcbiAgICAgICAgLy8gYSBudW1iZXIgaXMgaW50ZXJwcmV0ZWQgYXMgYSBnbG9iYWwgdGltZS4gSWYgdGhlIGFuaW1hdGlvbiBzcGFuc1xuICAgIGNoaWxkcmVuO1xuXG4gICAgd2hpbGUgKGNoaWxkKSB7XG4gICAgICBpZiAoY2hpbGQgaW5zdGFuY2VvZiBUd2Vlbikge1xuICAgICAgICBpZiAoX2FycmF5Q29udGFpbnNBbnkoY2hpbGQuX3RhcmdldHMsIHBhcnNlZFRhcmdldHMpICYmIChpc0dsb2JhbFRpbWUgPyAoIV9vdmVyd3JpdGluZ1R3ZWVuIHx8IGNoaWxkLl9pbml0dGVkICYmIGNoaWxkLl90cykgJiYgY2hpbGQuZ2xvYmFsVGltZSgwKSA8PSBvbmx5QWN0aXZlICYmIGNoaWxkLmdsb2JhbFRpbWUoY2hpbGQudG90YWxEdXJhdGlvbigpKSA+IG9ubHlBY3RpdmUgOiAhb25seUFjdGl2ZSB8fCBjaGlsZC5pc0FjdGl2ZSgpKSkge1xuICAgICAgICAgIC8vIG5vdGU6IGlmIHRoaXMgaXMgZm9yIG92ZXJ3cml0aW5nLCBpdCBzaG91bGQgb25seSBiZSBmb3IgdHdlZW5zIHRoYXQgYXJlbid0IHBhdXNlZCBhbmQgYXJlIGluaXR0ZWQuXG4gICAgICAgICAgYS5wdXNoKGNoaWxkKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmICgoY2hpbGRyZW4gPSBjaGlsZC5nZXRUd2VlbnNPZihwYXJzZWRUYXJnZXRzLCBvbmx5QWN0aXZlKSkubGVuZ3RoKSB7XG4gICAgICAgIGEucHVzaC5hcHBseShhLCBjaGlsZHJlbik7XG4gICAgICB9XG5cbiAgICAgIGNoaWxkID0gY2hpbGQuX25leHQ7XG4gICAgfVxuXG4gICAgcmV0dXJuIGE7XG4gIH07XG5cbiAgX3Byb3RvMi50d2VlblRvID0gZnVuY3Rpb24gdHdlZW5Ubyhwb3NpdGlvbiwgdmFycykge1xuICAgIHZhcnMgPSB2YXJzIHx8IHt9O1xuXG4gICAgdmFyIHRsID0gdGhpcyxcbiAgICAgICAgZW5kVGltZSA9IF9wYXJzZVBvc2l0aW9uKHRsLCBwb3NpdGlvbiksXG4gICAgICAgIF92YXJzID0gdmFycyxcbiAgICAgICAgc3RhcnRBdCA9IF92YXJzLnN0YXJ0QXQsXG4gICAgICAgIF9vblN0YXJ0ID0gX3ZhcnMub25TdGFydCxcbiAgICAgICAgb25TdGFydFBhcmFtcyA9IF92YXJzLm9uU3RhcnRQYXJhbXMsXG4gICAgICAgIHR3ZWVuID0gVHdlZW4udG8odGwsIF9zZXREZWZhdWx0cyh2YXJzLCB7XG4gICAgICBlYXNlOiBcIm5vbmVcIixcbiAgICAgIGxhenk6IGZhbHNlLFxuICAgICAgdGltZTogZW5kVGltZSxcbiAgICAgIG92ZXJ3cml0ZTogXCJhdXRvXCIsXG4gICAgICBkdXJhdGlvbjogdmFycy5kdXJhdGlvbiB8fCBNYXRoLmFicygoZW5kVGltZSAtIChzdGFydEF0ICYmIFwidGltZVwiIGluIHN0YXJ0QXQgPyBzdGFydEF0LnRpbWUgOiB0bC5fdGltZSkpIC8gdGwudGltZVNjYWxlKCkpIHx8IF90aW55TnVtLFxuICAgICAgb25TdGFydDogZnVuY3Rpb24gb25TdGFydCgpIHtcbiAgICAgICAgdGwucGF1c2UoKTtcbiAgICAgICAgdmFyIGR1cmF0aW9uID0gdmFycy5kdXJhdGlvbiB8fCBNYXRoLmFicygoZW5kVGltZSAtIHRsLl90aW1lKSAvIHRsLnRpbWVTY2FsZSgpKTtcbiAgICAgICAgdHdlZW4uX2R1ciAhPT0gZHVyYXRpb24gJiYgX3NldER1cmF0aW9uKHR3ZWVuLCBkdXJhdGlvbiwgMCwgMSkucmVuZGVyKHR3ZWVuLl90aW1lLCB0cnVlLCB0cnVlKTtcbiAgICAgICAgX29uU3RhcnQgJiYgX29uU3RhcnQuYXBwbHkodHdlZW4sIG9uU3RhcnRQYXJhbXMgfHwgW10pOyAvL2luIGNhc2UgdGhlIHVzZXIgaGFkIGFuIG9uU3RhcnQgaW4gdGhlIHZhcnMgLSB3ZSBkb24ndCB3YW50IHRvIG92ZXJ3cml0ZSBpdC5cbiAgICAgIH1cbiAgICB9KSk7XG5cbiAgICByZXR1cm4gdHdlZW47XG4gIH07XG5cbiAgX3Byb3RvMi50d2VlbkZyb21UbyA9IGZ1bmN0aW9uIHR3ZWVuRnJvbVRvKGZyb21Qb3NpdGlvbiwgdG9Qb3NpdGlvbiwgdmFycykge1xuICAgIHJldHVybiB0aGlzLnR3ZWVuVG8odG9Qb3NpdGlvbiwgX3NldERlZmF1bHRzKHtcbiAgICAgIHN0YXJ0QXQ6IHtcbiAgICAgICAgdGltZTogX3BhcnNlUG9zaXRpb24odGhpcywgZnJvbVBvc2l0aW9uKVxuICAgICAgfVxuICAgIH0sIHZhcnMpKTtcbiAgfTtcblxuICBfcHJvdG8yLnJlY2VudCA9IGZ1bmN0aW9uIHJlY2VudCgpIHtcbiAgICByZXR1cm4gdGhpcy5fcmVjZW50O1xuICB9O1xuXG4gIF9wcm90bzIubmV4dExhYmVsID0gZnVuY3Rpb24gbmV4dExhYmVsKGFmdGVyVGltZSkge1xuICAgIGlmIChhZnRlclRpbWUgPT09IHZvaWQgMCkge1xuICAgICAgYWZ0ZXJUaW1lID0gdGhpcy5fdGltZTtcbiAgICB9XG5cbiAgICByZXR1cm4gX2dldExhYmVsSW5EaXJlY3Rpb24odGhpcywgX3BhcnNlUG9zaXRpb24odGhpcywgYWZ0ZXJUaW1lKSk7XG4gIH07XG5cbiAgX3Byb3RvMi5wcmV2aW91c0xhYmVsID0gZnVuY3Rpb24gcHJldmlvdXNMYWJlbChiZWZvcmVUaW1lKSB7XG4gICAgaWYgKGJlZm9yZVRpbWUgPT09IHZvaWQgMCkge1xuICAgICAgYmVmb3JlVGltZSA9IHRoaXMuX3RpbWU7XG4gICAgfVxuXG4gICAgcmV0dXJuIF9nZXRMYWJlbEluRGlyZWN0aW9uKHRoaXMsIF9wYXJzZVBvc2l0aW9uKHRoaXMsIGJlZm9yZVRpbWUpLCAxKTtcbiAgfTtcblxuICBfcHJvdG8yLmN1cnJlbnRMYWJlbCA9IGZ1bmN0aW9uIGN1cnJlbnRMYWJlbCh2YWx1ZSkge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gdGhpcy5zZWVrKHZhbHVlLCB0cnVlKSA6IHRoaXMucHJldmlvdXNMYWJlbCh0aGlzLl90aW1lICsgX3RpbnlOdW0pO1xuICB9O1xuXG4gIF9wcm90bzIuc2hpZnRDaGlsZHJlbiA9IGZ1bmN0aW9uIHNoaWZ0Q2hpbGRyZW4oYW1vdW50LCBhZGp1c3RMYWJlbHMsIGlnbm9yZUJlZm9yZVRpbWUpIHtcbiAgICBpZiAoaWdub3JlQmVmb3JlVGltZSA9PT0gdm9pZCAwKSB7XG4gICAgICBpZ25vcmVCZWZvcmVUaW1lID0gMDtcbiAgICB9XG5cbiAgICB2YXIgY2hpbGQgPSB0aGlzLl9maXJzdCxcbiAgICAgICAgbGFiZWxzID0gdGhpcy5sYWJlbHMsXG4gICAgICAgIHA7XG5cbiAgICB3aGlsZSAoY2hpbGQpIHtcbiAgICAgIGlmIChjaGlsZC5fc3RhcnQgPj0gaWdub3JlQmVmb3JlVGltZSkge1xuICAgICAgICBjaGlsZC5fc3RhcnQgKz0gYW1vdW50O1xuICAgICAgICBjaGlsZC5fZW5kICs9IGFtb3VudDtcbiAgICAgIH1cblxuICAgICAgY2hpbGQgPSBjaGlsZC5fbmV4dDtcbiAgICB9XG5cbiAgICBpZiAoYWRqdXN0TGFiZWxzKSB7XG4gICAgICBmb3IgKHAgaW4gbGFiZWxzKSB7XG4gICAgICAgIGlmIChsYWJlbHNbcF0gPj0gaWdub3JlQmVmb3JlVGltZSkge1xuICAgICAgICAgIGxhYmVsc1twXSArPSBhbW91bnQ7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gX3VuY2FjaGUodGhpcyk7XG4gIH07XG5cbiAgX3Byb3RvMi5pbnZhbGlkYXRlID0gZnVuY3Rpb24gaW52YWxpZGF0ZSgpIHtcbiAgICB2YXIgY2hpbGQgPSB0aGlzLl9maXJzdDtcbiAgICB0aGlzLl9sb2NrID0gMDtcblxuICAgIHdoaWxlIChjaGlsZCkge1xuICAgICAgY2hpbGQuaW52YWxpZGF0ZSgpO1xuICAgICAgY2hpbGQgPSBjaGlsZC5fbmV4dDtcbiAgICB9XG5cbiAgICByZXR1cm4gX0FuaW1hdGlvbi5wcm90b3R5cGUuaW52YWxpZGF0ZS5jYWxsKHRoaXMpO1xuICB9O1xuXG4gIF9wcm90bzIuY2xlYXIgPSBmdW5jdGlvbiBjbGVhcihpbmNsdWRlTGFiZWxzKSB7XG4gICAgaWYgKGluY2x1ZGVMYWJlbHMgPT09IHZvaWQgMCkge1xuICAgICAgaW5jbHVkZUxhYmVscyA9IHRydWU7XG4gICAgfVxuXG4gICAgdmFyIGNoaWxkID0gdGhpcy5fZmlyc3QsXG4gICAgICAgIG5leHQ7XG5cbiAgICB3aGlsZSAoY2hpbGQpIHtcbiAgICAgIG5leHQgPSBjaGlsZC5fbmV4dDtcbiAgICAgIHRoaXMucmVtb3ZlKGNoaWxkKTtcbiAgICAgIGNoaWxkID0gbmV4dDtcbiAgICB9XG5cbiAgICB0aGlzLl90aW1lID0gdGhpcy5fdFRpbWUgPSB0aGlzLl9wVGltZSA9IDA7XG4gICAgaW5jbHVkZUxhYmVscyAmJiAodGhpcy5sYWJlbHMgPSB7fSk7XG4gICAgcmV0dXJuIF91bmNhY2hlKHRoaXMpO1xuICB9O1xuXG4gIF9wcm90bzIudG90YWxEdXJhdGlvbiA9IGZ1bmN0aW9uIHRvdGFsRHVyYXRpb24odmFsdWUpIHtcbiAgICB2YXIgbWF4ID0gMCxcbiAgICAgICAgc2VsZiA9IHRoaXMsXG4gICAgICAgIGNoaWxkID0gc2VsZi5fbGFzdCxcbiAgICAgICAgcHJldlN0YXJ0ID0gX2JpZ051bSxcbiAgICAgICAgcHJldixcbiAgICAgICAgc3RhcnQsXG4gICAgICAgIHBhcmVudDtcblxuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoKSB7XG4gICAgICByZXR1cm4gc2VsZi50aW1lU2NhbGUoKHNlbGYuX3JlcGVhdCA8IDAgPyBzZWxmLmR1cmF0aW9uKCkgOiBzZWxmLnRvdGFsRHVyYXRpb24oKSkgLyAoc2VsZi5yZXZlcnNlZCgpID8gLXZhbHVlIDogdmFsdWUpKTtcbiAgICB9XG5cbiAgICBpZiAoc2VsZi5fZGlydHkpIHtcbiAgICAgIHBhcmVudCA9IHNlbGYucGFyZW50O1xuXG4gICAgICB3aGlsZSAoY2hpbGQpIHtcbiAgICAgICAgcHJldiA9IGNoaWxkLl9wcmV2OyAvL3JlY29yZCBpdCBoZXJlIGluIGNhc2UgdGhlIHR3ZWVuIGNoYW5nZXMgcG9zaXRpb24gaW4gdGhlIHNlcXVlbmNlLi4uXG5cbiAgICAgICAgY2hpbGQuX2RpcnR5ICYmIGNoaWxkLnRvdGFsRHVyYXRpb24oKTsgLy9jb3VsZCBjaGFuZ2UgdGhlIHR3ZWVuLl9zdGFydFRpbWUsIHNvIG1ha2Ugc3VyZSB0aGUgYW5pbWF0aW9uJ3MgY2FjaGUgaXMgY2xlYW4gYmVmb3JlIGFuYWx5emluZyBpdC5cblxuICAgICAgICBzdGFydCA9IGNoaWxkLl9zdGFydDtcblxuICAgICAgICBpZiAoc3RhcnQgPiBwcmV2U3RhcnQgJiYgc2VsZi5fc29ydCAmJiBjaGlsZC5fdHMgJiYgIXNlbGYuX2xvY2spIHtcbiAgICAgICAgICAvL2luIGNhc2Ugb25lIG9mIHRoZSB0d2VlbnMgc2hpZnRlZCBvdXQgb2Ygb3JkZXIsIGl0IG5lZWRzIHRvIGJlIHJlLWluc2VydGVkIGludG8gdGhlIGNvcnJlY3QgcG9zaXRpb24gaW4gdGhlIHNlcXVlbmNlXG4gICAgICAgICAgc2VsZi5fbG9jayA9IDE7IC8vcHJldmVudCBlbmRsZXNzIHJlY3Vyc2l2ZSBjYWxscyAtIHRoZXJlIGFyZSBtZXRob2RzIHRoYXQgZ2V0IHRyaWdnZXJlZCB0aGF0IGNoZWNrIGR1cmF0aW9uL3RvdGFsRHVyYXRpb24gd2hlbiB3ZSBhZGQoKS5cblxuICAgICAgICAgIF9hZGRUb1RpbWVsaW5lKHNlbGYsIGNoaWxkLCBzdGFydCAtIGNoaWxkLl9kZWxheSwgMSkuX2xvY2sgPSAwO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHByZXZTdGFydCA9IHN0YXJ0O1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHN0YXJ0IDwgMCAmJiBjaGlsZC5fdHMpIHtcbiAgICAgICAgICAvL2NoaWxkcmVuIGFyZW4ndCBhbGxvd2VkIHRvIGhhdmUgbmVnYXRpdmUgc3RhcnRUaW1lcyB1bmxlc3Mgc21vb3RoQ2hpbGRUaW1pbmcgaXMgdHJ1ZSwgc28gYWRqdXN0IGhlcmUgaWYgb25lIGlzIGZvdW5kLlxuICAgICAgICAgIG1heCAtPSBzdGFydDtcblxuICAgICAgICAgIGlmICghcGFyZW50ICYmICFzZWxmLl9kcCB8fCBwYXJlbnQgJiYgcGFyZW50LnNtb290aENoaWxkVGltaW5nKSB7XG4gICAgICAgICAgICBzZWxmLl9zdGFydCArPSBzdGFydCAvIHNlbGYuX3RzO1xuICAgICAgICAgICAgc2VsZi5fdGltZSAtPSBzdGFydDtcbiAgICAgICAgICAgIHNlbGYuX3RUaW1lIC09IHN0YXJ0O1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHNlbGYuc2hpZnRDaGlsZHJlbigtc3RhcnQsIGZhbHNlLCAtMWU5OTkpO1xuICAgICAgICAgIHByZXZTdGFydCA9IDA7XG4gICAgICAgIH1cblxuICAgICAgICBjaGlsZC5fZW5kID4gbWF4ICYmIGNoaWxkLl90cyAmJiAobWF4ID0gY2hpbGQuX2VuZCk7XG4gICAgICAgIGNoaWxkID0gcHJldjtcbiAgICAgIH1cblxuICAgICAgX3NldER1cmF0aW9uKHNlbGYsIHNlbGYgPT09IF9nbG9iYWxUaW1lbGluZSAmJiBzZWxmLl90aW1lID4gbWF4ID8gc2VsZi5fdGltZSA6IG1heCwgMSwgMSk7XG5cbiAgICAgIHNlbGYuX2RpcnR5ID0gMDtcbiAgICB9XG5cbiAgICByZXR1cm4gc2VsZi5fdER1cjtcbiAgfTtcblxuICBUaW1lbGluZS51cGRhdGVSb290ID0gZnVuY3Rpb24gdXBkYXRlUm9vdCh0aW1lKSB7XG4gICAgaWYgKF9nbG9iYWxUaW1lbGluZS5fdHMpIHtcbiAgICAgIF9sYXp5U2FmZVJlbmRlcihfZ2xvYmFsVGltZWxpbmUsIF9wYXJlbnRUb0NoaWxkVG90YWxUaW1lKHRpbWUsIF9nbG9iYWxUaW1lbGluZSkpO1xuXG4gICAgICBfbGFzdFJlbmRlcmVkRnJhbWUgPSBfdGlja2VyLmZyYW1lO1xuICAgIH1cblxuICAgIGlmIChfdGlja2VyLmZyYW1lID49IF9uZXh0R0NGcmFtZSkge1xuICAgICAgX25leHRHQ0ZyYW1lICs9IF9jb25maWcuYXV0b1NsZWVwIHx8IDEyMDtcbiAgICAgIHZhciBjaGlsZCA9IF9nbG9iYWxUaW1lbGluZS5fZmlyc3Q7XG4gICAgICBpZiAoIWNoaWxkIHx8ICFjaGlsZC5fdHMpIGlmIChfY29uZmlnLmF1dG9TbGVlcCAmJiBfdGlja2VyLl9saXN0ZW5lcnMubGVuZ3RoIDwgMikge1xuICAgICAgICB3aGlsZSAoY2hpbGQgJiYgIWNoaWxkLl90cykge1xuICAgICAgICAgIGNoaWxkID0gY2hpbGQuX25leHQ7XG4gICAgICAgIH1cblxuICAgICAgICBjaGlsZCB8fCBfdGlja2VyLnNsZWVwKCk7XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIHJldHVybiBUaW1lbGluZTtcbn0oQW5pbWF0aW9uKTtcblxuX3NldERlZmF1bHRzKFRpbWVsaW5lLnByb3RvdHlwZSwge1xuICBfbG9jazogMCxcbiAgX2hhc1BhdXNlOiAwLFxuICBfZm9yY2luZzogMFxufSk7XG5cbnZhciBfYWRkQ29tcGxleFN0cmluZ1Byb3BUd2VlbiA9IGZ1bmN0aW9uIF9hZGRDb21wbGV4U3RyaW5nUHJvcFR3ZWVuKHRhcmdldCwgcHJvcCwgc3RhcnQsIGVuZCwgc2V0dGVyLCBzdHJpbmdGaWx0ZXIsIGZ1bmNQYXJhbSkge1xuICAvL25vdGU6IHdlIGNhbGwgX2FkZENvbXBsZXhTdHJpbmdQcm9wVHdlZW4uY2FsbCh0d2Vlbkluc3RhbmNlLi4uKSB0byBlbnN1cmUgdGhhdCBpdCdzIHNjb3BlZCBwcm9wZXJseS4gV2UgbWF5IGNhbGwgaXQgZnJvbSB3aXRoaW4gYSBwbHVnaW4gdG9vLCB0aHVzIFwidGhpc1wiIHdvdWxkIHJlZmVyIHRvIHRoZSBwbHVnaW4uXG4gIHZhciBwdCA9IG5ldyBQcm9wVHdlZW4odGhpcy5fcHQsIHRhcmdldCwgcHJvcCwgMCwgMSwgX3JlbmRlckNvbXBsZXhTdHJpbmcsIG51bGwsIHNldHRlciksXG4gICAgICBpbmRleCA9IDAsXG4gICAgICBtYXRjaEluZGV4ID0gMCxcbiAgICAgIHJlc3VsdCxcbiAgICAgIHN0YXJ0TnVtcyxcbiAgICAgIGNvbG9yLFxuICAgICAgZW5kTnVtLFxuICAgICAgY2h1bmssXG4gICAgICBzdGFydE51bSxcbiAgICAgIGhhc1JhbmRvbSxcbiAgICAgIGE7XG4gIHB0LmIgPSBzdGFydDtcbiAgcHQuZSA9IGVuZDtcbiAgc3RhcnQgKz0gXCJcIjsgLy9lbnN1cmUgdmFsdWVzIGFyZSBzdHJpbmdzXG5cbiAgZW5kICs9IFwiXCI7XG5cbiAgaWYgKGhhc1JhbmRvbSA9IH5lbmQuaW5kZXhPZihcInJhbmRvbShcIikpIHtcbiAgICBlbmQgPSBfcmVwbGFjZVJhbmRvbShlbmQpO1xuICB9XG5cbiAgaWYgKHN0cmluZ0ZpbHRlcikge1xuICAgIGEgPSBbc3RhcnQsIGVuZF07XG4gICAgc3RyaW5nRmlsdGVyKGEsIHRhcmdldCwgcHJvcCk7IC8vcGFzcyBhbiBhcnJheSB3aXRoIHRoZSBzdGFydGluZyBhbmQgZW5kaW5nIHZhbHVlcyBhbmQgbGV0IHRoZSBmaWx0ZXIgZG8gd2hhdGV2ZXIgaXQgbmVlZHMgdG8gdGhlIHZhbHVlcy5cblxuICAgIHN0YXJ0ID0gYVswXTtcbiAgICBlbmQgPSBhWzFdO1xuICB9XG5cbiAgc3RhcnROdW1zID0gc3RhcnQubWF0Y2goX2NvbXBsZXhTdHJpbmdOdW1FeHApIHx8IFtdO1xuXG4gIHdoaWxlIChyZXN1bHQgPSBfY29tcGxleFN0cmluZ051bUV4cC5leGVjKGVuZCkpIHtcbiAgICBlbmROdW0gPSByZXN1bHRbMF07XG4gICAgY2h1bmsgPSBlbmQuc3Vic3RyaW5nKGluZGV4LCByZXN1bHQuaW5kZXgpO1xuXG4gICAgaWYgKGNvbG9yKSB7XG4gICAgICBjb2xvciA9IChjb2xvciArIDEpICUgNTtcbiAgICB9IGVsc2UgaWYgKGNodW5rLnN1YnN0cigtNSkgPT09IFwicmdiYShcIikge1xuICAgICAgY29sb3IgPSAxO1xuICAgIH1cblxuICAgIGlmIChlbmROdW0gIT09IHN0YXJ0TnVtc1ttYXRjaEluZGV4KytdKSB7XG4gICAgICBzdGFydE51bSA9IHBhcnNlRmxvYXQoc3RhcnROdW1zW21hdGNoSW5kZXggLSAxXSkgfHwgMDsgLy90aGVzZSBuZXN0ZWQgUHJvcFR3ZWVucyBhcmUgaGFuZGxlZCBpbiBhIHNwZWNpYWwgd2F5IC0gd2UnbGwgbmV2ZXIgYWN0dWFsbHkgY2FsbCBhIHJlbmRlciBvciBzZXR0ZXIgbWV0aG9kIG9uIHRoZW0uIFdlJ2xsIGp1c3QgbG9vcCB0aHJvdWdoIHRoZW0gaW4gdGhlIHBhcmVudCBjb21wbGV4IHN0cmluZyBQcm9wVHdlZW4ncyByZW5kZXIgbWV0aG9kLlxuXG4gICAgICBwdC5fcHQgPSB7XG4gICAgICAgIF9uZXh0OiBwdC5fcHQsXG4gICAgICAgIHA6IGNodW5rIHx8IG1hdGNoSW5kZXggPT09IDEgPyBjaHVuayA6IFwiLFwiLFxuICAgICAgICAvL25vdGU6IFNWRyBzcGVjIGFsbG93cyBvbWlzc2lvbiBvZiBjb21tYS9zcGFjZSB3aGVuIGEgbmVnYXRpdmUgc2lnbiBpcyB3ZWRnZWQgYmV0d2VlbiB0d28gbnVtYmVycywgbGlrZSAyLjUtNS4zIGluc3RlYWQgb2YgMi41LC01LjMgYnV0IHdoZW4gdHdlZW5pbmcsIHRoZSBuZWdhdGl2ZSB2YWx1ZSBtYXkgc3dpdGNoIHRvIHBvc2l0aXZlLCBzbyB3ZSBpbnNlcnQgdGhlIGNvbW1hIGp1c3QgaW4gY2FzZS5cbiAgICAgICAgczogc3RhcnROdW0sXG4gICAgICAgIGM6IGVuZE51bS5jaGFyQXQoMSkgPT09IFwiPVwiID8gcGFyc2VGbG9hdChlbmROdW0uc3Vic3RyKDIpKSAqIChlbmROdW0uY2hhckF0KDApID09PSBcIi1cIiA/IC0xIDogMSkgOiBwYXJzZUZsb2F0KGVuZE51bSkgLSBzdGFydE51bSxcbiAgICAgICAgbTogY29sb3IgJiYgY29sb3IgPCA0ID8gTWF0aC5yb3VuZCA6IDBcbiAgICAgIH07XG4gICAgICBpbmRleCA9IF9jb21wbGV4U3RyaW5nTnVtRXhwLmxhc3RJbmRleDtcbiAgICB9XG4gIH1cblxuICBwdC5jID0gaW5kZXggPCBlbmQubGVuZ3RoID8gZW5kLnN1YnN0cmluZyhpbmRleCwgZW5kLmxlbmd0aCkgOiBcIlwiOyAvL3dlIHVzZSB0aGUgXCJjXCIgb2YgdGhlIFByb3BUd2VlbiB0byBzdG9yZSB0aGUgZmluYWwgcGFydCBvZiB0aGUgc3RyaW5nIChhZnRlciB0aGUgbGFzdCBudW1iZXIpXG5cbiAgcHQuZnAgPSBmdW5jUGFyYW07XG5cbiAgaWYgKF9yZWxFeHAudGVzdChlbmQpIHx8IGhhc1JhbmRvbSkge1xuICAgIHB0LmUgPSAwOyAvL2lmIHRoZSBlbmQgc3RyaW5nIGNvbnRhaW5zIHJlbGF0aXZlIHZhbHVlcyBvciBkeW5hbWljIHJhbmRvbSguLi4pIHZhbHVlcywgZGVsZXRlIHRoZSBlbmQgaXQgc28gdGhhdCBvbiB0aGUgZmluYWwgcmVuZGVyIHdlIGRvbid0IGFjdHVhbGx5IHNldCBpdCB0byB0aGUgc3RyaW5nIHdpdGggKz0gb3IgLT0gY2hhcmFjdGVycyAoZm9yY2VzIGl0IHRvIHVzZSB0aGUgY2FsY3VsYXRlZCB2YWx1ZSkuXG4gIH1cblxuICB0aGlzLl9wdCA9IHB0OyAvL3N0YXJ0IHRoZSBsaW5rZWQgbGlzdCB3aXRoIHRoaXMgbmV3IFByb3BUd2Vlbi4gUmVtZW1iZXIsIHdlIGNhbGwgX2FkZENvbXBsZXhTdHJpbmdQcm9wVHdlZW4uY2FsbCh0d2Vlbkluc3RhbmNlLi4uKSB0byBlbnN1cmUgdGhhdCBpdCdzIHNjb3BlZCBwcm9wZXJseS4gV2UgbWF5IGNhbGwgaXQgZnJvbSB3aXRoaW4gYSBwbHVnaW4gdG9vLCB0aHVzIFwidGhpc1wiIHdvdWxkIHJlZmVyIHRvIHRoZSBwbHVnaW4uXG5cbiAgcmV0dXJuIHB0O1xufSxcbiAgICBfYWRkUHJvcFR3ZWVuID0gZnVuY3Rpb24gX2FkZFByb3BUd2Vlbih0YXJnZXQsIHByb3AsIHN0YXJ0LCBlbmQsIGluZGV4LCB0YXJnZXRzLCBtb2RpZmllciwgc3RyaW5nRmlsdGVyLCBmdW5jUGFyYW0pIHtcbiAgX2lzRnVuY3Rpb24oZW5kKSAmJiAoZW5kID0gZW5kKGluZGV4IHx8IDAsIHRhcmdldCwgdGFyZ2V0cykpO1xuICB2YXIgY3VycmVudFZhbHVlID0gdGFyZ2V0W3Byb3BdLFxuICAgICAgcGFyc2VkU3RhcnQgPSBzdGFydCAhPT0gXCJnZXRcIiA/IHN0YXJ0IDogIV9pc0Z1bmN0aW9uKGN1cnJlbnRWYWx1ZSkgPyBjdXJyZW50VmFsdWUgOiBmdW5jUGFyYW0gPyB0YXJnZXRbcHJvcC5pbmRleE9mKFwic2V0XCIpIHx8ICFfaXNGdW5jdGlvbih0YXJnZXRbXCJnZXRcIiArIHByb3Auc3Vic3RyKDMpXSkgPyBwcm9wIDogXCJnZXRcIiArIHByb3Auc3Vic3RyKDMpXShmdW5jUGFyYW0pIDogdGFyZ2V0W3Byb3BdKCksXG4gICAgICBzZXR0ZXIgPSAhX2lzRnVuY3Rpb24oY3VycmVudFZhbHVlKSA/IF9zZXR0ZXJQbGFpbiA6IGZ1bmNQYXJhbSA/IF9zZXR0ZXJGdW5jV2l0aFBhcmFtIDogX3NldHRlckZ1bmMsXG4gICAgICBwdDtcblxuICBpZiAoX2lzU3RyaW5nKGVuZCkpIHtcbiAgICBpZiAofmVuZC5pbmRleE9mKFwicmFuZG9tKFwiKSkge1xuICAgICAgZW5kID0gX3JlcGxhY2VSYW5kb20oZW5kKTtcbiAgICB9XG5cbiAgICBpZiAoZW5kLmNoYXJBdCgxKSA9PT0gXCI9XCIpIHtcbiAgICAgIGVuZCA9IHBhcnNlRmxvYXQocGFyc2VkU3RhcnQpICsgcGFyc2VGbG9hdChlbmQuc3Vic3RyKDIpKSAqIChlbmQuY2hhckF0KDApID09PSBcIi1cIiA/IC0xIDogMSkgKyAoZ2V0VW5pdChwYXJzZWRTdGFydCkgfHwgMCk7XG4gICAgfVxuICB9XG5cbiAgaWYgKHBhcnNlZFN0YXJ0ICE9PSBlbmQpIHtcbiAgICBpZiAoIWlzTmFOKHBhcnNlZFN0YXJ0ICogZW5kKSkge1xuICAgICAgcHQgPSBuZXcgUHJvcFR3ZWVuKHRoaXMuX3B0LCB0YXJnZXQsIHByb3AsICtwYXJzZWRTdGFydCB8fCAwLCBlbmQgLSAocGFyc2VkU3RhcnQgfHwgMCksIHR5cGVvZiBjdXJyZW50VmFsdWUgPT09IFwiYm9vbGVhblwiID8gX3JlbmRlckJvb2xlYW4gOiBfcmVuZGVyUGxhaW4sIDAsIHNldHRlcik7XG4gICAgICBmdW5jUGFyYW0gJiYgKHB0LmZwID0gZnVuY1BhcmFtKTtcbiAgICAgIG1vZGlmaWVyICYmIHB0Lm1vZGlmaWVyKG1vZGlmaWVyLCB0aGlzLCB0YXJnZXQpO1xuICAgICAgcmV0dXJuIHRoaXMuX3B0ID0gcHQ7XG4gICAgfVxuXG4gICAgIWN1cnJlbnRWYWx1ZSAmJiAhKHByb3AgaW4gdGFyZ2V0KSAmJiBfbWlzc2luZ1BsdWdpbihwcm9wLCBlbmQpO1xuICAgIHJldHVybiBfYWRkQ29tcGxleFN0cmluZ1Byb3BUd2Vlbi5jYWxsKHRoaXMsIHRhcmdldCwgcHJvcCwgcGFyc2VkU3RhcnQsIGVuZCwgc2V0dGVyLCBzdHJpbmdGaWx0ZXIgfHwgX2NvbmZpZy5zdHJpbmdGaWx0ZXIsIGZ1bmNQYXJhbSk7XG4gIH1cbn0sXG4gICAgLy9jcmVhdGVzIGEgY29weSBvZiB0aGUgdmFycyBvYmplY3QgYW5kIHByb2Nlc3NlcyBhbnkgZnVuY3Rpb24tYmFzZWQgdmFsdWVzIChwdXR0aW5nIHRoZSByZXN1bHRpbmcgdmFsdWVzIGRpcmVjdGx5IGludG8gdGhlIGNvcHkpIGFzIHdlbGwgYXMgc3RyaW5ncyB3aXRoIFwicmFuZG9tKClcIiBpbiB0aGVtLiBJdCBkb2VzIE5PVCBwcm9jZXNzIHJlbGF0aXZlIHZhbHVlcy5cbl9wcm9jZXNzVmFycyA9IGZ1bmN0aW9uIF9wcm9jZXNzVmFycyh2YXJzLCBpbmRleCwgdGFyZ2V0LCB0YXJnZXRzLCB0d2Vlbikge1xuICBfaXNGdW5jdGlvbih2YXJzKSAmJiAodmFycyA9IF9wYXJzZUZ1bmNPclN0cmluZyh2YXJzLCB0d2VlbiwgaW5kZXgsIHRhcmdldCwgdGFyZ2V0cykpO1xuXG4gIGlmICghX2lzT2JqZWN0KHZhcnMpIHx8IHZhcnMuc3R5bGUgJiYgdmFycy5ub2RlVHlwZSB8fCBfaXNBcnJheSh2YXJzKSB8fCBfaXNUeXBlZEFycmF5KHZhcnMpKSB7XG4gICAgcmV0dXJuIF9pc1N0cmluZyh2YXJzKSA/IF9wYXJzZUZ1bmNPclN0cmluZyh2YXJzLCB0d2VlbiwgaW5kZXgsIHRhcmdldCwgdGFyZ2V0cykgOiB2YXJzO1xuICB9XG5cbiAgdmFyIGNvcHkgPSB7fSxcbiAgICAgIHA7XG5cbiAgZm9yIChwIGluIHZhcnMpIHtcbiAgICBjb3B5W3BdID0gX3BhcnNlRnVuY09yU3RyaW5nKHZhcnNbcF0sIHR3ZWVuLCBpbmRleCwgdGFyZ2V0LCB0YXJnZXRzKTtcbiAgfVxuXG4gIHJldHVybiBjb3B5O1xufSxcbiAgICBfY2hlY2tQbHVnaW4gPSBmdW5jdGlvbiBfY2hlY2tQbHVnaW4ocHJvcGVydHksIHZhcnMsIHR3ZWVuLCBpbmRleCwgdGFyZ2V0LCB0YXJnZXRzKSB7XG4gIHZhciBwbHVnaW4sIHB0LCBwdExvb2t1cCwgaTtcblxuICBpZiAoX3BsdWdpbnNbcHJvcGVydHldICYmIChwbHVnaW4gPSBuZXcgX3BsdWdpbnNbcHJvcGVydHldKCkpLmluaXQodGFyZ2V0LCBwbHVnaW4ucmF3VmFycyA/IHZhcnNbcHJvcGVydHldIDogX3Byb2Nlc3NWYXJzKHZhcnNbcHJvcGVydHldLCBpbmRleCwgdGFyZ2V0LCB0YXJnZXRzLCB0d2VlbiksIHR3ZWVuLCBpbmRleCwgdGFyZ2V0cykgIT09IGZhbHNlKSB7XG4gICAgdHdlZW4uX3B0ID0gcHQgPSBuZXcgUHJvcFR3ZWVuKHR3ZWVuLl9wdCwgdGFyZ2V0LCBwcm9wZXJ0eSwgMCwgMSwgcGx1Z2luLnJlbmRlciwgcGx1Z2luLCAwLCBwbHVnaW4ucHJpb3JpdHkpO1xuXG4gICAgaWYgKHR3ZWVuICE9PSBfcXVpY2tUd2Vlbikge1xuICAgICAgcHRMb29rdXAgPSB0d2Vlbi5fcHRMb29rdXBbdHdlZW4uX3RhcmdldHMuaW5kZXhPZih0YXJnZXQpXTsgLy9ub3RlOiB3ZSBjYW4ndCB1c2UgdHdlZW4uX3B0TG9va3VwW2luZGV4XSBiZWNhdXNlIGZvciBzdGFnZ2VyZWQgdHdlZW5zLCB0aGUgaW5kZXggZnJvbSB0aGUgZnVsbFRhcmdldHMgYXJyYXkgd29uJ3QgbWF0Y2ggd2hhdCBpdCBpcyBpbiBlYWNoIGluZGl2aWR1YWwgdHdlZW4gdGhhdCBzcGF3bnMgZnJvbSB0aGUgc3RhZ2dlci5cblxuICAgICAgaSA9IHBsdWdpbi5fcHJvcHMubGVuZ3RoO1xuXG4gICAgICB3aGlsZSAoaS0tKSB7XG4gICAgICAgIHB0TG9va3VwW3BsdWdpbi5fcHJvcHNbaV1dID0gcHQ7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHBsdWdpbjtcbn0sXG4gICAgX292ZXJ3cml0aW5nVHdlZW4sXG4gICAgLy9zdG9yZSBhIHJlZmVyZW5jZSB0ZW1wb3JhcmlseSBzbyB3ZSBjYW4gYXZvaWQgb3ZlcndyaXRpbmcgaXRzZWxmLlxuX2luaXRUd2VlbiA9IGZ1bmN0aW9uIF9pbml0VHdlZW4odHdlZW4sIHRpbWUpIHtcbiAgdmFyIHZhcnMgPSB0d2Vlbi52YXJzLFxuICAgICAgZWFzZSA9IHZhcnMuZWFzZSxcbiAgICAgIHN0YXJ0QXQgPSB2YXJzLnN0YXJ0QXQsXG4gICAgICBpbW1lZGlhdGVSZW5kZXIgPSB2YXJzLmltbWVkaWF0ZVJlbmRlcixcbiAgICAgIGxhenkgPSB2YXJzLmxhenksXG4gICAgICBvblVwZGF0ZSA9IHZhcnMub25VcGRhdGUsXG4gICAgICBvblVwZGF0ZVBhcmFtcyA9IHZhcnMub25VcGRhdGVQYXJhbXMsXG4gICAgICBjYWxsYmFja1Njb3BlID0gdmFycy5jYWxsYmFja1Njb3BlLFxuICAgICAgcnVuQmFja3dhcmRzID0gdmFycy5ydW5CYWNrd2FyZHMsXG4gICAgICB5b3lvRWFzZSA9IHZhcnMueW95b0Vhc2UsXG4gICAgICBrZXlmcmFtZXMgPSB2YXJzLmtleWZyYW1lcyxcbiAgICAgIGF1dG9SZXZlcnQgPSB2YXJzLmF1dG9SZXZlcnQsXG4gICAgICBkdXIgPSB0d2Vlbi5fZHVyLFxuICAgICAgcHJldlN0YXJ0QXQgPSB0d2Vlbi5fc3RhcnRBdCxcbiAgICAgIHRhcmdldHMgPSB0d2Vlbi5fdGFyZ2V0cyxcbiAgICAgIHBhcmVudCA9IHR3ZWVuLnBhcmVudCxcbiAgICAgIGZ1bGxUYXJnZXRzID0gcGFyZW50ICYmIHBhcmVudC5kYXRhID09PSBcIm5lc3RlZFwiID8gcGFyZW50LnBhcmVudC5fdGFyZ2V0cyA6IHRhcmdldHMsXG4gICAgICBhdXRvT3ZlcndyaXRlID0gdHdlZW4uX292ZXJ3cml0ZSA9PT0gXCJhdXRvXCIsXG4gICAgICB0bCA9IHR3ZWVuLnRpbWVsaW5lLFxuICAgICAgY2xlYW5WYXJzLFxuICAgICAgaSxcbiAgICAgIHAsXG4gICAgICBwdCxcbiAgICAgIHRhcmdldCxcbiAgICAgIGhhc1ByaW9yaXR5LFxuICAgICAgZ3NEYXRhLFxuICAgICAgaGFybmVzcyxcbiAgICAgIHBsdWdpbixcbiAgICAgIHB0TG9va3VwLFxuICAgICAgaW5kZXgsXG4gICAgICBoYXJuZXNzVmFycyxcbiAgICAgIG92ZXJ3cml0dGVuO1xuICB0bCAmJiAoIWtleWZyYW1lcyB8fCAhZWFzZSkgJiYgKGVhc2UgPSBcIm5vbmVcIik7XG4gIHR3ZWVuLl9lYXNlID0gX3BhcnNlRWFzZShlYXNlLCBfZGVmYXVsdHMuZWFzZSk7XG4gIHR3ZWVuLl95RWFzZSA9IHlveW9FYXNlID8gX2ludmVydEVhc2UoX3BhcnNlRWFzZSh5b3lvRWFzZSA9PT0gdHJ1ZSA/IGVhc2UgOiB5b3lvRWFzZSwgX2RlZmF1bHRzLmVhc2UpKSA6IDA7XG5cbiAgaWYgKHlveW9FYXNlICYmIHR3ZWVuLl95b3lvICYmICF0d2Vlbi5fcmVwZWF0KSB7XG4gICAgLy90aGVyZSBtdXN0IGhhdmUgYmVlbiBhIHBhcmVudCB0aW1lbGluZSB3aXRoIHlveW86dHJ1ZSB0aGF0IGlzIGN1cnJlbnRseSBpbiBpdHMgeW95byBwaGFzZSwgc28gZmxpcCB0aGUgZWFzZXMuXG4gICAgeW95b0Vhc2UgPSB0d2Vlbi5feUVhc2U7XG4gICAgdHdlZW4uX3lFYXNlID0gdHdlZW4uX2Vhc2U7XG4gICAgdHdlZW4uX2Vhc2UgPSB5b3lvRWFzZTtcbiAgfVxuXG4gIGlmICghdGwpIHtcbiAgICAvL2lmIHRoZXJlJ3MgYW4gaW50ZXJuYWwgdGltZWxpbmUsIHNraXAgYWxsIHRoZSBwYXJzaW5nIGJlY2F1c2Ugd2UgcGFzc2VkIHRoYXQgdGFzayBkb3duIHRoZSBjaGFpbi5cbiAgICBoYXJuZXNzID0gdGFyZ2V0c1swXSA/IF9nZXRDYWNoZSh0YXJnZXRzWzBdKS5oYXJuZXNzIDogMDtcbiAgICBoYXJuZXNzVmFycyA9IGhhcm5lc3MgJiYgdmFyc1toYXJuZXNzLnByb3BdOyAvL3NvbWVvbmUgbWF5IG5lZWQgdG8gc3BlY2lmeSBDU1Mtc3BlY2lmaWMgdmFsdWVzIEFORCBub24tQ1NTIHZhbHVlcywgbGlrZSBpZiB0aGUgZWxlbWVudCBoYXMgYW4gXCJ4XCIgcHJvcGVydHkgcGx1cyBpdCdzIGEgc3RhbmRhcmQgRE9NIGVsZW1lbnQuIFdlIGFsbG93IHBlb3BsZSB0byBkaXN0aW5ndWlzaCBieSB3cmFwcGluZyBwbHVnaW4tc3BlY2lmaWMgc3R1ZmYgaW4gYSBjc3M6e30gb2JqZWN0IGZvciBleGFtcGxlLlxuXG4gICAgY2xlYW5WYXJzID0gX2NvcHlFeGNsdWRpbmcodmFycywgX3Jlc2VydmVkUHJvcHMpO1xuICAgIHByZXZTdGFydEF0ICYmIHByZXZTdGFydEF0LnJlbmRlcigtMSwgdHJ1ZSkua2lsbCgpO1xuXG4gICAgaWYgKHN0YXJ0QXQpIHtcbiAgICAgIF9yZW1vdmVGcm9tUGFyZW50KHR3ZWVuLl9zdGFydEF0ID0gVHdlZW4uc2V0KHRhcmdldHMsIF9zZXREZWZhdWx0cyh7XG4gICAgICAgIGRhdGE6IFwiaXNTdGFydFwiLFxuICAgICAgICBvdmVyd3JpdGU6IGZhbHNlLFxuICAgICAgICBwYXJlbnQ6IHBhcmVudCxcbiAgICAgICAgaW1tZWRpYXRlUmVuZGVyOiB0cnVlLFxuICAgICAgICBsYXp5OiBfaXNOb3RGYWxzZShsYXp5KSxcbiAgICAgICAgc3RhcnRBdDogbnVsbCxcbiAgICAgICAgZGVsYXk6IDAsXG4gICAgICAgIG9uVXBkYXRlOiBvblVwZGF0ZSxcbiAgICAgICAgb25VcGRhdGVQYXJhbXM6IG9uVXBkYXRlUGFyYW1zLFxuICAgICAgICBjYWxsYmFja1Njb3BlOiBjYWxsYmFja1Njb3BlLFxuICAgICAgICBzdGFnZ2VyOiAwXG4gICAgICB9LCBzdGFydEF0KSkpOyAvL2NvcHkgdGhlIHByb3BlcnRpZXMvdmFsdWVzIGludG8gYSBuZXcgb2JqZWN0IHRvIGF2b2lkIGNvbGxpc2lvbnMsIGxpa2UgdmFyIHRvID0ge3g6MH0sIGZyb20gPSB7eDo1MDB9OyB0aW1lbGluZS5mcm9tVG8oZSwgZnJvbSwgdG8pLmZyb21UbyhlLCB0bywgZnJvbSk7XG5cblxuICAgICAgaWYgKGltbWVkaWF0ZVJlbmRlcikge1xuICAgICAgICBpZiAodGltZSA+IDApIHtcbiAgICAgICAgICBhdXRvUmV2ZXJ0IHx8ICh0d2Vlbi5fc3RhcnRBdCA9IDApOyAvL3R3ZWVucyB0aGF0IHJlbmRlciBpbW1lZGlhdGVseSAobGlrZSBtb3N0IGZyb20oKSBhbmQgZnJvbVRvKCkgdHdlZW5zKSBzaG91bGRuJ3QgcmV2ZXJ0IHdoZW4gdGhlaXIgcGFyZW50IHRpbWVsaW5lJ3MgcGxheWhlYWQgZ29lcyBiYWNrd2FyZCBwYXN0IHRoZSBzdGFydFRpbWUgYmVjYXVzZSB0aGUgaW5pdGlhbCByZW5kZXIgY291bGQgaGF2ZSBoYXBwZW5lZCBhbnl0aW1lIGFuZCBpdCBzaG91bGRuJ3QgYmUgZGlyZWN0bHkgY29ycmVsYXRlZCB0byB0aGlzIHR3ZWVuJ3Mgc3RhcnRUaW1lLiBJbWFnaW5lIHNldHRpbmcgdXAgYSBjb21wbGV4IGFuaW1hdGlvbiB3aGVyZSB0aGUgYmVnaW5uaW5nIHN0YXRlcyBvZiB2YXJpb3VzIG9iamVjdHMgYXJlIHJlbmRlcmVkIGltbWVkaWF0ZWx5IGJ1dCB0aGUgdHdlZW4gZG9lc24ndCBoYXBwZW4gZm9yIHF1aXRlIHNvbWUgdGltZSAtIGlmIHdlIHJldmVydCB0byB0aGUgc3RhcnRpbmcgdmFsdWVzIGFzIHNvb24gYXMgdGhlIHBsYXloZWFkIGdvZXMgYmFja3dhcmQgcGFzdCB0aGUgdHdlZW4ncyBzdGFydFRpbWUsIGl0IHdpbGwgdGhyb3cgdGhpbmdzIG9mZiB2aXN1YWxseS4gUmV2ZXJzaW9uIHNob3VsZCBvbmx5IGhhcHBlbiBpbiBUaW1lbGluZSBpbnN0YW5jZXMgd2hlcmUgaW1tZWRpYXRlUmVuZGVyIHdhcyBmYWxzZSBvciB3aGVuIGF1dG9SZXZlcnQgaXMgZXhwbGljaXRseSBzZXQgdG8gdHJ1ZS5cbiAgICAgICAgfSBlbHNlIGlmIChkdXIgJiYgISh0aW1lIDwgMCAmJiBwcmV2U3RhcnRBdCkpIHtcbiAgICAgICAgICB0aW1lICYmICh0d2Vlbi5felRpbWUgPSB0aW1lKTtcbiAgICAgICAgICByZXR1cm47IC8vd2Ugc2tpcCBpbml0aWFsaXphdGlvbiBoZXJlIHNvIHRoYXQgb3ZlcndyaXRpbmcgZG9lc24ndCBvY2N1ciB1bnRpbCB0aGUgdHdlZW4gYWN0dWFsbHkgYmVnaW5zLiBPdGhlcndpc2UsIGlmIHlvdSBjcmVhdGUgc2V2ZXJhbCBpbW1lZGlhdGVSZW5kZXI6dHJ1ZSB0d2VlbnMgb2YgdGhlIHNhbWUgdGFyZ2V0L3Byb3BlcnRpZXMgdG8gZHJvcCBpbnRvIGEgVGltZWxpbmUsIHRoZSBsYXN0IG9uZSBjcmVhdGVkIHdvdWxkIG92ZXJ3cml0ZSB0aGUgZmlyc3Qgb25lcyBiZWNhdXNlIHRoZXkgZGlkbid0IGdldCBwbGFjZWQgaW50byB0aGUgdGltZWxpbmUgeWV0IGJlZm9yZSB0aGUgZmlyc3QgcmVuZGVyIG9jY3VycyBhbmQga2lja3MgaW4gb3ZlcndyaXRpbmcuXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKHJ1bkJhY2t3YXJkcyAmJiBkdXIpIHtcbiAgICAgIC8vZnJvbSgpIHR3ZWVucyBtdXN0IGJlIGhhbmRsZWQgdW5pcXVlbHk6IHRoZWlyIGJlZ2lubmluZyB2YWx1ZXMgbXVzdCBiZSByZW5kZXJlZCBidXQgd2UgZG9uJ3Qgd2FudCBvdmVyd3JpdGluZyB0byBvY2N1ciB5ZXQgKHdoZW4gdGltZSBpcyBzdGlsbCAwKS4gV2FpdCB1bnRpbCB0aGUgdHdlZW4gYWN0dWFsbHkgYmVnaW5zIGJlZm9yZSBkb2luZyBhbGwgdGhlIHJvdXRpbmVzIGxpa2Ugb3ZlcndyaXRpbmcuIEF0IHRoYXQgdGltZSwgd2Ugc2hvdWxkIHJlbmRlciBhdCB0aGUgRU5EIG9mIHRoZSB0d2VlbiB0byBlbnN1cmUgdGhhdCB0aGluZ3MgaW5pdGlhbGl6ZSBjb3JyZWN0bHkgKHJlbWVtYmVyLCBmcm9tKCkgdHdlZW5zIGdvIGJhY2t3YXJkcylcbiAgICAgIGlmIChwcmV2U3RhcnRBdCkge1xuICAgICAgICAhYXV0b1JldmVydCAmJiAodHdlZW4uX3N0YXJ0QXQgPSAwKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRpbWUgJiYgKGltbWVkaWF0ZVJlbmRlciA9IGZhbHNlKTsgLy9pbiByYXJlIGNhc2VzIChsaWtlIGlmIGEgZnJvbSgpIHR3ZWVuIHJ1bnMgYW5kIHRoZW4gaXMgaW52YWxpZGF0ZSgpLWVkKSwgaW1tZWRpYXRlUmVuZGVyIGNvdWxkIGJlIHRydWUgYnV0IHRoZSBpbml0aWFsIGZvcmNlZC1yZW5kZXIgZ2V0cyBza2lwcGVkLCBzbyB0aGVyZSdzIG5vIG5lZWQgdG8gZm9yY2UgdGhlIHJlbmRlciBpbiB0aGlzIGNvbnRleHQgd2hlbiB0aGUgX3RpbWUgaXMgZ3JlYXRlciB0aGFuIDBcblxuICAgICAgICBwID0gX3NldERlZmF1bHRzKHtcbiAgICAgICAgICBvdmVyd3JpdGU6IGZhbHNlLFxuICAgICAgICAgIGRhdGE6IFwiaXNGcm9tU3RhcnRcIixcbiAgICAgICAgICAvL3dlIHRhZyB0aGUgdHdlZW4gd2l0aCBhcyBcImlzRnJvbVN0YXJ0XCIgc28gdGhhdCBpZiBbaW5zaWRlIGEgcGx1Z2luXSB3ZSBuZWVkIHRvIG9ubHkgZG8gc29tZXRoaW5nIGF0IHRoZSB2ZXJ5IEVORCBvZiBhIHR3ZWVuLCB3ZSBoYXZlIGEgd2F5IG9mIGlkZW50aWZ5aW5nIHRoaXMgdHdlZW4gYXMgbWVyZWx5IHRoZSBvbmUgdGhhdCdzIHNldHRpbmcgdGhlIGJlZ2lubmluZyB2YWx1ZXMgZm9yIGEgXCJmcm9tKClcIiB0d2Vlbi4gRm9yIGV4YW1wbGUsIGNsZWFyUHJvcHMgaW4gQ1NTUGx1Z2luIHNob3VsZCBvbmx5IGdldCBhcHBsaWVkIGF0IHRoZSB2ZXJ5IEVORCBvZiBhIHR3ZWVuIGFuZCB3aXRob3V0IHRoaXMgdGFnLCBmcm9tKC4uLntoZWlnaHQ6MTAwLCBjbGVhclByb3BzOlwiaGVpZ2h0XCIsIGRlbGF5OjF9KSB3b3VsZCB3aXBlIHRoZSBoZWlnaHQgYXQgdGhlIGJlZ2lubmluZyBvZiB0aGUgdHdlZW4gYW5kIGFmdGVyIDEgc2Vjb25kLCBpdCdkIGtpY2sgYmFjayBpbi5cbiAgICAgICAgICBsYXp5OiBpbW1lZGlhdGVSZW5kZXIgJiYgX2lzTm90RmFsc2UobGF6eSksXG4gICAgICAgICAgaW1tZWRpYXRlUmVuZGVyOiBpbW1lZGlhdGVSZW5kZXIsXG4gICAgICAgICAgLy96ZXJvLWR1cmF0aW9uIHR3ZWVucyByZW5kZXIgaW1tZWRpYXRlbHkgYnkgZGVmYXVsdCwgYnV0IGlmIHdlJ3JlIG5vdCBzcGVjaWZpY2FsbHkgaW5zdHJ1Y3RlZCB0byByZW5kZXIgdGhpcyB0d2VlbiBpbW1lZGlhdGVseSwgd2Ugc2hvdWxkIHNraXAgdGhpcyBhbmQgbWVyZWx5IF9pbml0KCkgdG8gcmVjb3JkIHRoZSBzdGFydGluZyB2YWx1ZXMgKHJlbmRlcmluZyB0aGVtIGltbWVkaWF0ZWx5IHdvdWxkIHB1c2ggdGhlbSB0byBjb21wbGV0aW9uIHdoaWNoIGlzIHdhc3RlZnVsIGluIHRoYXQgY2FzZSAtIHdlJ2QgaGF2ZSB0byByZW5kZXIoLTEpIGltbWVkaWF0ZWx5IGFmdGVyKVxuICAgICAgICAgIHN0YWdnZXI6IDAsXG4gICAgICAgICAgcGFyZW50OiBwYXJlbnQgLy9lbnN1cmVzIHRoYXQgbmVzdGVkIHR3ZWVucyB0aGF0IGhhZCBhIHN0YWdnZXIgYXJlIGhhbmRsZWQgcHJvcGVybHksIGxpa2UgZ3NhcC5mcm9tKFwiLmNsYXNzXCIsIHt5OmdzYXAudXRpbHMud3JhcChbLTEwMCwxMDBdKX0pXG5cbiAgICAgICAgfSwgY2xlYW5WYXJzKTtcbiAgICAgICAgaGFybmVzc1ZhcnMgJiYgKHBbaGFybmVzcy5wcm9wXSA9IGhhcm5lc3NWYXJzKTsgLy8gaW4gY2FzZSBzb21lb25lIGRvZXMgc29tZXRoaW5nIGxpa2UgLmZyb20oLi4uLCB7Y3NzOnt9fSlcblxuICAgICAgICBfcmVtb3ZlRnJvbVBhcmVudCh0d2Vlbi5fc3RhcnRBdCA9IFR3ZWVuLnNldCh0YXJnZXRzLCBwKSk7XG5cbiAgICAgICAgaWYgKCFpbW1lZGlhdGVSZW5kZXIpIHtcbiAgICAgICAgICBfaW5pdFR3ZWVuKHR3ZWVuLl9zdGFydEF0LCBfdGlueU51bSk7IC8vZW5zdXJlcyB0aGF0IHRoZSBpbml0aWFsIHZhbHVlcyBhcmUgcmVjb3JkZWRcblxuICAgICAgICB9IGVsc2UgaWYgKCF0aW1lKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgdHdlZW4uX3B0ID0gMDtcbiAgICBsYXp5ID0gZHVyICYmIF9pc05vdEZhbHNlKGxhenkpIHx8IGxhenkgJiYgIWR1cjtcblxuICAgIGZvciAoaSA9IDA7IGkgPCB0YXJnZXRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB0YXJnZXQgPSB0YXJnZXRzW2ldO1xuICAgICAgZ3NEYXRhID0gdGFyZ2V0Ll9nc2FwIHx8IF9oYXJuZXNzKHRhcmdldHMpW2ldLl9nc2FwO1xuICAgICAgdHdlZW4uX3B0TG9va3VwW2ldID0gcHRMb29rdXAgPSB7fTtcbiAgICAgIF9sYXp5TG9va3VwW2dzRGF0YS5pZF0gJiYgX2xhenlUd2VlbnMubGVuZ3RoICYmIF9sYXp5UmVuZGVyKCk7IC8vaWYgb3RoZXIgdHdlZW5zIG9mIHRoZSBzYW1lIHRhcmdldCBoYXZlIHJlY2VudGx5IGluaXR0ZWQgYnV0IGhhdmVuJ3QgcmVuZGVyZWQgeWV0LCB3ZSd2ZSBnb3QgdG8gZm9yY2UgdGhlIHJlbmRlciBzbyB0aGF0IHRoZSBzdGFydGluZyB2YWx1ZXMgYXJlIGNvcnJlY3QgKGltYWdpbmUgcG9wdWxhdGluZyBhIHRpbWVsaW5lIHdpdGggYSBidW5jaCBvZiBzZXF1ZW50aWFsIHR3ZWVucyBhbmQgdGhlbiBqdW1waW5nIHRvIHRoZSBlbmQpXG5cbiAgICAgIGluZGV4ID0gZnVsbFRhcmdldHMgPT09IHRhcmdldHMgPyBpIDogZnVsbFRhcmdldHMuaW5kZXhPZih0YXJnZXQpO1xuXG4gICAgICBpZiAoaGFybmVzcyAmJiAocGx1Z2luID0gbmV3IGhhcm5lc3MoKSkuaW5pdCh0YXJnZXQsIGhhcm5lc3NWYXJzIHx8IGNsZWFuVmFycywgdHdlZW4sIGluZGV4LCBmdWxsVGFyZ2V0cykgIT09IGZhbHNlKSB7XG4gICAgICAgIHR3ZWVuLl9wdCA9IHB0ID0gbmV3IFByb3BUd2Vlbih0d2Vlbi5fcHQsIHRhcmdldCwgcGx1Z2luLm5hbWUsIDAsIDEsIHBsdWdpbi5yZW5kZXIsIHBsdWdpbiwgMCwgcGx1Z2luLnByaW9yaXR5KTtcblxuICAgICAgICBwbHVnaW4uX3Byb3BzLmZvckVhY2goZnVuY3Rpb24gKG5hbWUpIHtcbiAgICAgICAgICBwdExvb2t1cFtuYW1lXSA9IHB0O1xuICAgICAgICB9KTtcblxuICAgICAgICBwbHVnaW4ucHJpb3JpdHkgJiYgKGhhc1ByaW9yaXR5ID0gMSk7XG4gICAgICB9XG5cbiAgICAgIGlmICghaGFybmVzcyB8fCBoYXJuZXNzVmFycykge1xuICAgICAgICBmb3IgKHAgaW4gY2xlYW5WYXJzKSB7XG4gICAgICAgICAgaWYgKF9wbHVnaW5zW3BdICYmIChwbHVnaW4gPSBfY2hlY2tQbHVnaW4ocCwgY2xlYW5WYXJzLCB0d2VlbiwgaW5kZXgsIHRhcmdldCwgZnVsbFRhcmdldHMpKSkge1xuICAgICAgICAgICAgcGx1Z2luLnByaW9yaXR5ICYmIChoYXNQcmlvcml0eSA9IDEpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBwdExvb2t1cFtwXSA9IHB0ID0gX2FkZFByb3BUd2Vlbi5jYWxsKHR3ZWVuLCB0YXJnZXQsIHAsIFwiZ2V0XCIsIGNsZWFuVmFyc1twXSwgaW5kZXgsIGZ1bGxUYXJnZXRzLCAwLCB2YXJzLnN0cmluZ0ZpbHRlcik7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHR3ZWVuLl9vcCAmJiB0d2Vlbi5fb3BbaV0gJiYgdHdlZW4ua2lsbCh0YXJnZXQsIHR3ZWVuLl9vcFtpXSk7XG5cbiAgICAgIGlmIChhdXRvT3ZlcndyaXRlICYmIHR3ZWVuLl9wdCkge1xuICAgICAgICBfb3ZlcndyaXRpbmdUd2VlbiA9IHR3ZWVuO1xuXG4gICAgICAgIF9nbG9iYWxUaW1lbGluZS5raWxsVHdlZW5zT2YodGFyZ2V0LCBwdExvb2t1cCwgdHdlZW4uZ2xvYmFsVGltZSgwKSk7IC8vQWxzbyBtYWtlIHN1cmUgdGhlIG92ZXJ3cml0aW5nIGRvZXNuJ3Qgb3ZlcndyaXRlIFRISVMgdHdlZW4hISFcblxuXG4gICAgICAgIG92ZXJ3cml0dGVuID0gIXR3ZWVuLnBhcmVudDtcbiAgICAgICAgX292ZXJ3cml0aW5nVHdlZW4gPSAwO1xuICAgICAgfVxuXG4gICAgICB0d2Vlbi5fcHQgJiYgbGF6eSAmJiAoX2xhenlMb29rdXBbZ3NEYXRhLmlkXSA9IDEpO1xuICAgIH1cblxuICAgIGhhc1ByaW9yaXR5ICYmIF9zb3J0UHJvcFR3ZWVuc0J5UHJpb3JpdHkodHdlZW4pO1xuICAgIHR3ZWVuLl9vbkluaXQgJiYgdHdlZW4uX29uSW5pdCh0d2Vlbik7IC8vcGx1Z2lucyBsaWtlIFJvdW5kUHJvcHMgbXVzdCB3YWl0IHVudGlsIEFMTCBvZiB0aGUgUHJvcFR3ZWVucyBhcmUgaW5zdGFudGlhdGVkLiBJbiB0aGUgcGx1Z2luJ3MgaW5pdCgpIGZ1bmN0aW9uLCBpdCBzZXRzIHRoZSBfb25Jbml0IG9uIHRoZSB0d2VlbiBpbnN0YW5jZS4gTWF5IG5vdCBiZSBwcmV0dHkvaW50dWl0aXZlLCBidXQgaXQncyBmYXN0IGFuZCBrZWVwcyBmaWxlIHNpemUgZG93bi5cbiAgfVxuXG4gIHR3ZWVuLl9mcm9tID0gIXRsICYmICEhdmFycy5ydW5CYWNrd2FyZHM7IC8vbmVzdGVkIHRpbWVsaW5lcyBzaG91bGQgbmV2ZXIgcnVuIGJhY2t3YXJkcyAtIHRoZSBiYWNrd2FyZHMtbmVzcyBpcyBpbiB0aGUgY2hpbGQgdHdlZW5zLlxuXG4gIHR3ZWVuLl9vblVwZGF0ZSA9IG9uVXBkYXRlO1xuICB0d2Vlbi5faW5pdHRlZCA9ICghdHdlZW4uX29wIHx8IHR3ZWVuLl9wdCkgJiYgIW92ZXJ3cml0dGVuOyAvLyBpZiBvdmVyd3JpdHRlblByb3BzIHJlc3VsdGVkIGluIHRoZSBlbnRpcmUgdHdlZW4gYmVpbmcga2lsbGVkLCBkbyBOT1QgZmxhZyBpdCBhcyBpbml0dGVkIG9yIGVsc2UgaXQgbWF5IHJlbmRlciBmb3Igb25lIHRpY2suXG59LFxuICAgIF9hZGRBbGlhc2VzVG9WYXJzID0gZnVuY3Rpb24gX2FkZEFsaWFzZXNUb1ZhcnModGFyZ2V0cywgdmFycykge1xuICB2YXIgaGFybmVzcyA9IHRhcmdldHNbMF0gPyBfZ2V0Q2FjaGUodGFyZ2V0c1swXSkuaGFybmVzcyA6IDAsXG4gICAgICBwcm9wZXJ0eUFsaWFzZXMgPSBoYXJuZXNzICYmIGhhcm5lc3MuYWxpYXNlcyxcbiAgICAgIGNvcHksXG4gICAgICBwLFxuICAgICAgaSxcbiAgICAgIGFsaWFzZXM7XG5cbiAgaWYgKCFwcm9wZXJ0eUFsaWFzZXMpIHtcbiAgICByZXR1cm4gdmFycztcbiAgfVxuXG4gIGNvcHkgPSBfbWVyZ2Uoe30sIHZhcnMpO1xuXG4gIGZvciAocCBpbiBwcm9wZXJ0eUFsaWFzZXMpIHtcbiAgICBpZiAocCBpbiBjb3B5KSB7XG4gICAgICBhbGlhc2VzID0gcHJvcGVydHlBbGlhc2VzW3BdLnNwbGl0KFwiLFwiKTtcbiAgICAgIGkgPSBhbGlhc2VzLmxlbmd0aDtcblxuICAgICAgd2hpbGUgKGktLSkge1xuICAgICAgICBjb3B5W2FsaWFzZXNbaV1dID0gY29weVtwXTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gY29weTtcbn0sXG4gICAgX3BhcnNlRnVuY09yU3RyaW5nID0gZnVuY3Rpb24gX3BhcnNlRnVuY09yU3RyaW5nKHZhbHVlLCB0d2VlbiwgaSwgdGFyZ2V0LCB0YXJnZXRzKSB7XG4gIHJldHVybiBfaXNGdW5jdGlvbih2YWx1ZSkgPyB2YWx1ZS5jYWxsKHR3ZWVuLCBpLCB0YXJnZXQsIHRhcmdldHMpIDogX2lzU3RyaW5nKHZhbHVlKSAmJiB+dmFsdWUuaW5kZXhPZihcInJhbmRvbShcIikgPyBfcmVwbGFjZVJhbmRvbSh2YWx1ZSkgOiB2YWx1ZTtcbn0sXG4gICAgX3N0YWdnZXJUd2VlblByb3BzID0gX2NhbGxiYWNrTmFtZXMgKyBcInJlcGVhdCxyZXBlYXREZWxheSx5b3lvLHJlcGVhdFJlZnJlc2gseW95b0Vhc2VcIixcbiAgICBfc3RhZ2dlclByb3BzVG9Ta2lwID0gKF9zdGFnZ2VyVHdlZW5Qcm9wcyArIFwiLGlkLHN0YWdnZXIsZGVsYXksZHVyYXRpb24scGF1c2VkLHNjcm9sbFRyaWdnZXJcIikuc3BsaXQoXCIsXCIpO1xuLypcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBUV0VFTlxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqL1xuXG5cbmV4cG9ydCB2YXIgVHdlZW4gPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKF9BbmltYXRpb24yKSB7XG4gIF9pbmhlcml0c0xvb3NlKFR3ZWVuLCBfQW5pbWF0aW9uMik7XG5cbiAgZnVuY3Rpb24gVHdlZW4odGFyZ2V0cywgdmFycywgdGltZSwgc2tpcEluaGVyaXQpIHtcbiAgICB2YXIgX3RoaXMzO1xuXG4gICAgaWYgKHR5cGVvZiB2YXJzID09PSBcIm51bWJlclwiKSB7XG4gICAgICB0aW1lLmR1cmF0aW9uID0gdmFycztcbiAgICAgIHZhcnMgPSB0aW1lO1xuICAgICAgdGltZSA9IG51bGw7XG4gICAgfVxuXG4gICAgX3RoaXMzID0gX0FuaW1hdGlvbjIuY2FsbCh0aGlzLCBza2lwSW5oZXJpdCA/IHZhcnMgOiBfaW5oZXJpdERlZmF1bHRzKHZhcnMpLCB0aW1lKSB8fCB0aGlzO1xuICAgIHZhciBfdGhpczMkdmFycyA9IF90aGlzMy52YXJzLFxuICAgICAgICBkdXJhdGlvbiA9IF90aGlzMyR2YXJzLmR1cmF0aW9uLFxuICAgICAgICBkZWxheSA9IF90aGlzMyR2YXJzLmRlbGF5LFxuICAgICAgICBpbW1lZGlhdGVSZW5kZXIgPSBfdGhpczMkdmFycy5pbW1lZGlhdGVSZW5kZXIsXG4gICAgICAgIHN0YWdnZXIgPSBfdGhpczMkdmFycy5zdGFnZ2VyLFxuICAgICAgICBvdmVyd3JpdGUgPSBfdGhpczMkdmFycy5vdmVyd3JpdGUsXG4gICAgICAgIGtleWZyYW1lcyA9IF90aGlzMyR2YXJzLmtleWZyYW1lcyxcbiAgICAgICAgZGVmYXVsdHMgPSBfdGhpczMkdmFycy5kZWZhdWx0cyxcbiAgICAgICAgc2Nyb2xsVHJpZ2dlciA9IF90aGlzMyR2YXJzLnNjcm9sbFRyaWdnZXIsXG4gICAgICAgIHlveW9FYXNlID0gX3RoaXMzJHZhcnMueW95b0Vhc2UsXG4gICAgICAgIHBhcmVudCA9IF90aGlzMy5wYXJlbnQsXG4gICAgICAgIHBhcnNlZFRhcmdldHMgPSAoX2lzQXJyYXkodGFyZ2V0cykgfHwgX2lzVHlwZWRBcnJheSh0YXJnZXRzKSA/IF9pc051bWJlcih0YXJnZXRzWzBdKSA6IFwibGVuZ3RoXCIgaW4gdmFycykgPyBbdGFyZ2V0c10gOiB0b0FycmF5KHRhcmdldHMpLFxuICAgICAgICB0bCxcbiAgICAgICAgaSxcbiAgICAgICAgY29weSxcbiAgICAgICAgbCxcbiAgICAgICAgcCxcbiAgICAgICAgY3VyVGFyZ2V0LFxuICAgICAgICBzdGFnZ2VyRnVuYyxcbiAgICAgICAgc3RhZ2dlclZhcnNUb01lcmdlO1xuICAgIF90aGlzMy5fdGFyZ2V0cyA9IHBhcnNlZFRhcmdldHMubGVuZ3RoID8gX2hhcm5lc3MocGFyc2VkVGFyZ2V0cykgOiBfd2FybihcIkdTQVAgdGFyZ2V0IFwiICsgdGFyZ2V0cyArIFwiIG5vdCBmb3VuZC4gaHR0cHM6Ly9ncmVlbnNvY2suY29tXCIsICFfY29uZmlnLm51bGxUYXJnZXRXYXJuKSB8fCBbXTtcbiAgICBfdGhpczMuX3B0TG9va3VwID0gW107IC8vUHJvcFR3ZWVuIGxvb2t1cC4gQW4gYXJyYXkgY29udGFpbmluZyBhbiBvYmplY3QgZm9yIGVhY2ggdGFyZ2V0LCBoYXZpbmcga2V5cyBmb3IgZWFjaCB0d2VlbmluZyBwcm9wZXJ0eVxuXG4gICAgX3RoaXMzLl9vdmVyd3JpdGUgPSBvdmVyd3JpdGU7XG5cbiAgICBpZiAoa2V5ZnJhbWVzIHx8IHN0YWdnZXIgfHwgX2lzRnVuY09yU3RyaW5nKGR1cmF0aW9uKSB8fCBfaXNGdW5jT3JTdHJpbmcoZGVsYXkpKSB7XG4gICAgICB2YXJzID0gX3RoaXMzLnZhcnM7XG4gICAgICB0bCA9IF90aGlzMy50aW1lbGluZSA9IG5ldyBUaW1lbGluZSh7XG4gICAgICAgIGRhdGE6IFwibmVzdGVkXCIsXG4gICAgICAgIGRlZmF1bHRzOiBkZWZhdWx0cyB8fCB7fVxuICAgICAgfSk7XG4gICAgICB0bC5raWxsKCk7XG4gICAgICB0bC5wYXJlbnQgPSBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzMyk7XG5cbiAgICAgIGlmIChrZXlmcmFtZXMpIHtcbiAgICAgICAgX3NldERlZmF1bHRzKHRsLnZhcnMuZGVmYXVsdHMsIHtcbiAgICAgICAgICBlYXNlOiBcIm5vbmVcIlxuICAgICAgICB9KTtcblxuICAgICAgICBrZXlmcmFtZXMuZm9yRWFjaChmdW5jdGlvbiAoZnJhbWUpIHtcbiAgICAgICAgICByZXR1cm4gdGwudG8ocGFyc2VkVGFyZ2V0cywgZnJhbWUsIFwiPlwiKTtcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBsID0gcGFyc2VkVGFyZ2V0cy5sZW5ndGg7XG4gICAgICAgIHN0YWdnZXJGdW5jID0gc3RhZ2dlciA/IGRpc3RyaWJ1dGUoc3RhZ2dlcikgOiBfZW1wdHlGdW5jO1xuXG4gICAgICAgIGlmIChfaXNPYmplY3Qoc3RhZ2dlcikpIHtcbiAgICAgICAgICAvL3VzZXJzIGNhbiBwYXNzIGluIGNhbGxiYWNrcyBsaWtlIG9uU3RhcnQvb25Db21wbGV0ZSBpbiB0aGUgc3RhZ2dlciBvYmplY3QuIFRoZXNlIHNob3VsZCBmaXJlIHdpdGggZWFjaCBpbmRpdmlkdWFsIHR3ZWVuLlxuICAgICAgICAgIGZvciAocCBpbiBzdGFnZ2VyKSB7XG4gICAgICAgICAgICBpZiAofl9zdGFnZ2VyVHdlZW5Qcm9wcy5pbmRleE9mKHApKSB7XG4gICAgICAgICAgICAgIHN0YWdnZXJWYXJzVG9NZXJnZSB8fCAoc3RhZ2dlclZhcnNUb01lcmdlID0ge30pO1xuICAgICAgICAgICAgICBzdGFnZ2VyVmFyc1RvTWVyZ2VbcF0gPSBzdGFnZ2VyW3BdO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgICBjb3B5ID0ge307XG5cbiAgICAgICAgICBmb3IgKHAgaW4gdmFycykge1xuICAgICAgICAgICAgaWYgKF9zdGFnZ2VyUHJvcHNUb1NraXAuaW5kZXhPZihwKSA8IDApIHtcbiAgICAgICAgICAgICAgY29weVtwXSA9IHZhcnNbcF07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgY29weS5zdGFnZ2VyID0gMDtcbiAgICAgICAgICB5b3lvRWFzZSAmJiAoY29weS55b3lvRWFzZSA9IHlveW9FYXNlKTtcbiAgICAgICAgICBzdGFnZ2VyVmFyc1RvTWVyZ2UgJiYgX21lcmdlKGNvcHksIHN0YWdnZXJWYXJzVG9NZXJnZSk7XG4gICAgICAgICAgY3VyVGFyZ2V0ID0gcGFyc2VkVGFyZ2V0c1tpXTsgLy9kb24ndCBqdXN0IGNvcHkgZHVyYXRpb24gb3IgZGVsYXkgYmVjYXVzZSBpZiB0aGV5J3JlIGEgc3RyaW5nIG9yIGZ1bmN0aW9uLCB3ZSdkIGVuZCB1cCBpbiBhbiBpbmZpbml0ZSBsb29wIGJlY2F1c2UgX2lzRnVuY09yU3RyaW5nKCkgd291bGQgZXZhbHVhdGUgYXMgdHJ1ZSBpbiB0aGUgY2hpbGQgdHdlZW5zLCBlbnRlcmluZyB0aGlzIGxvb3AsIGV0Yy4gU28gd2UgcGFyc2UgdGhlIHZhbHVlIHN0cmFpZ2h0IGZyb20gdmFycyBhbmQgZGVmYXVsdCB0byAwLlxuXG4gICAgICAgICAgY29weS5kdXJhdGlvbiA9ICtfcGFyc2VGdW5jT3JTdHJpbmcoZHVyYXRpb24sIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMzKSwgaSwgY3VyVGFyZ2V0LCBwYXJzZWRUYXJnZXRzKTtcbiAgICAgICAgICBjb3B5LmRlbGF5ID0gKCtfcGFyc2VGdW5jT3JTdHJpbmcoZGVsYXksIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMzKSwgaSwgY3VyVGFyZ2V0LCBwYXJzZWRUYXJnZXRzKSB8fCAwKSAtIF90aGlzMy5fZGVsYXk7XG5cbiAgICAgICAgICBpZiAoIXN0YWdnZXIgJiYgbCA9PT0gMSAmJiBjb3B5LmRlbGF5KSB7XG4gICAgICAgICAgICAvLyBpZiBzb21lb25lIGRvZXMgZGVsYXk6XCJyYW5kb20oMSwgNSlcIiwgcmVwZWF0Oi0xLCBmb3IgZXhhbXBsZSwgdGhlIGRlbGF5IHNob3VsZG4ndCBiZSBpbnNpZGUgdGhlIHJlcGVhdC5cbiAgICAgICAgICAgIF90aGlzMy5fZGVsYXkgPSBkZWxheSA9IGNvcHkuZGVsYXk7XG4gICAgICAgICAgICBfdGhpczMuX3N0YXJ0ICs9IGRlbGF5O1xuICAgICAgICAgICAgY29weS5kZWxheSA9IDA7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgdGwudG8oY3VyVGFyZ2V0LCBjb3B5LCBzdGFnZ2VyRnVuYyhpLCBjdXJUYXJnZXQsIHBhcnNlZFRhcmdldHMpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRsLmR1cmF0aW9uKCkgPyBkdXJhdGlvbiA9IGRlbGF5ID0gMCA6IF90aGlzMy50aW1lbGluZSA9IDA7IC8vIGlmIHRoZSB0aW1lbGluZSdzIGR1cmF0aW9uIGlzIDAsIHdlIGRvbid0IG5lZWQgYSB0aW1lbGluZSBpbnRlcm5hbGx5IVxuICAgICAgfVxuXG4gICAgICBkdXJhdGlvbiB8fCBfdGhpczMuZHVyYXRpb24oZHVyYXRpb24gPSB0bC5kdXJhdGlvbigpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgX3RoaXMzLnRpbWVsaW5lID0gMDsgLy9zcGVlZCBvcHRpbWl6YXRpb24sIGZhc3RlciBsb29rdXBzIChubyBnb2luZyB1cCB0aGUgcHJvdG90eXBlIGNoYWluKVxuICAgIH1cblxuICAgIGlmIChvdmVyd3JpdGUgPT09IHRydWUpIHtcbiAgICAgIF9vdmVyd3JpdGluZ1R3ZWVuID0gX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpczMpO1xuXG4gICAgICBfZ2xvYmFsVGltZWxpbmUua2lsbFR3ZWVuc09mKHBhcnNlZFRhcmdldHMpO1xuXG4gICAgICBfb3ZlcndyaXRpbmdUd2VlbiA9IDA7XG4gICAgfVxuXG4gICAgcGFyZW50ICYmIF9wb3N0QWRkQ2hlY2tzKHBhcmVudCwgX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpczMpKTtcblxuICAgIGlmIChpbW1lZGlhdGVSZW5kZXIgfHwgIWR1cmF0aW9uICYmICFrZXlmcmFtZXMgJiYgX3RoaXMzLl9zdGFydCA9PT0gX3JvdW5kKHBhcmVudC5fdGltZSkgJiYgX2lzTm90RmFsc2UoaW1tZWRpYXRlUmVuZGVyKSAmJiBfaGFzTm9QYXVzZWRBbmNlc3RvcnMoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpczMpKSAmJiBwYXJlbnQuZGF0YSAhPT0gXCJuZXN0ZWRcIikge1xuICAgICAgX3RoaXMzLl90VGltZSA9IC1fdGlueU51bTsgLy9mb3JjZXMgYSByZW5kZXIgd2l0aG91dCBoYXZpbmcgdG8gc2V0IHRoZSByZW5kZXIoKSBcImZvcmNlXCIgcGFyYW1ldGVyIHRvIHRydWUgYmVjYXVzZSB3ZSB3YW50IHRvIGFsbG93IGxhenlpbmcgYnkgZGVmYXVsdCAodXNpbmcgdGhlIFwiZm9yY2VcIiBwYXJhbWV0ZXIgYWx3YXlzIGZvcmNlcyBhbiBpbW1lZGlhdGUgZnVsbCByZW5kZXIpXG5cbiAgICAgIF90aGlzMy5yZW5kZXIoTWF0aC5tYXgoMCwgLWRlbGF5KSk7IC8vaW4gY2FzZSBkZWxheSBpcyBuZWdhdGl2ZVxuXG4gICAgfVxuXG4gICAgc2Nyb2xsVHJpZ2dlciAmJiBfc2Nyb2xsVHJpZ2dlcihfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzMyksIHNjcm9sbFRyaWdnZXIpO1xuICAgIHJldHVybiBfdGhpczM7XG4gIH1cblxuICB2YXIgX3Byb3RvMyA9IFR3ZWVuLnByb3RvdHlwZTtcblxuICBfcHJvdG8zLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcih0b3RhbFRpbWUsIHN1cHByZXNzRXZlbnRzLCBmb3JjZSkge1xuICAgIHZhciBwcmV2VGltZSA9IHRoaXMuX3RpbWUsXG4gICAgICAgIHREdXIgPSB0aGlzLl90RHVyLFxuICAgICAgICBkdXIgPSB0aGlzLl9kdXIsXG4gICAgICAgIHRUaW1lID0gdG90YWxUaW1lID4gdER1ciAtIF90aW55TnVtICYmIHRvdGFsVGltZSA+PSAwID8gdER1ciA6IHRvdGFsVGltZSA8IF90aW55TnVtID8gMCA6IHRvdGFsVGltZSxcbiAgICAgICAgdGltZSxcbiAgICAgICAgcHQsXG4gICAgICAgIGl0ZXJhdGlvbixcbiAgICAgICAgY3ljbGVEdXJhdGlvbixcbiAgICAgICAgcHJldkl0ZXJhdGlvbixcbiAgICAgICAgaXNZb3lvLFxuICAgICAgICByYXRpbyxcbiAgICAgICAgdGltZWxpbmUsXG4gICAgICAgIHlveW9FYXNlO1xuXG4gICAgaWYgKCFkdXIpIHtcbiAgICAgIF9yZW5kZXJaZXJvRHVyYXRpb25Ud2Vlbih0aGlzLCB0b3RhbFRpbWUsIHN1cHByZXNzRXZlbnRzLCBmb3JjZSk7XG4gICAgfSBlbHNlIGlmICh0VGltZSAhPT0gdGhpcy5fdFRpbWUgfHwgIXRvdGFsVGltZSB8fCBmb3JjZSB8fCB0aGlzLl9zdGFydEF0ICYmIHRoaXMuX3pUaW1lIDwgMCAhPT0gdG90YWxUaW1lIDwgMCkge1xuICAgICAgLy90aGlzIHNlbnNlcyBpZiB3ZSdyZSBjcm9zc2luZyBvdmVyIHRoZSBzdGFydCB0aW1lLCBpbiB3aGljaCBjYXNlIHdlIG11c3QgcmVjb3JkIF96VGltZSBhbmQgZm9yY2UgdGhlIHJlbmRlciwgYnV0IHdlIGRvIGl0IGluIHRoaXMgbGVuZ3RoeSBjb25kaXRpb25hbCB3YXkgZm9yIHBlcmZvcm1hbmNlIHJlYXNvbnMgKHVzdWFsbHkgd2UgY2FuIHNraXAgdGhlIGNhbGN1bGF0aW9ucyk6IHRoaXMuX2luaXR0ZWQgJiYgKHRoaXMuX3pUaW1lIDwgMCkgIT09ICh0b3RhbFRpbWUgPCAwKVxuICAgICAgdGltZSA9IHRUaW1lO1xuICAgICAgdGltZWxpbmUgPSB0aGlzLnRpbWVsaW5lO1xuXG4gICAgICBpZiAodGhpcy5fcmVwZWF0KSB7XG4gICAgICAgIC8vYWRqdXN0IHRoZSB0aW1lIGZvciByZXBlYXRzIGFuZCB5b3lvc1xuICAgICAgICBjeWNsZUR1cmF0aW9uID0gZHVyICsgdGhpcy5fckRlbGF5O1xuICAgICAgICB0aW1lID0gX3JvdW5kKHRUaW1lICUgY3ljbGVEdXJhdGlvbik7IC8vcm91bmQgdG8gYXZvaWQgZmxvYXRpbmcgcG9pbnQgZXJyb3JzLiAoNCAlIDAuOCBzaG91bGQgYmUgMCBidXQgc29tZSBicm93c2VycyByZXBvcnQgaXQgYXMgMC43OTk5OTk5OSEpXG5cbiAgICAgICAgaWYgKHRUaW1lID09PSB0RHVyKSB7XG4gICAgICAgICAgLy8gdGhlIHREdXIgPT09IHRUaW1lIGlzIGZvciBlZGdlIGNhc2VzIHdoZXJlIHRoZXJlJ3MgYSBsZW5ndGh5IGRlY2ltYWwgb24gdGhlIGR1cmF0aW9uIGFuZCBpdCBtYXkgcmVhY2ggdGhlIHZlcnkgZW5kIGJ1dCB0aGUgdGltZSBpcyByZW5kZXJlZCBhcyBub3QtcXVpdGUtdGhlcmUgKHJlbWVtYmVyLCB0RHVyIGlzIHJvdW5kZWQgdG8gNCBkZWNpbWFscyB3aGVyZWFzIGR1ciBpc24ndClcbiAgICAgICAgICBpdGVyYXRpb24gPSB0aGlzLl9yZXBlYXQ7XG4gICAgICAgICAgdGltZSA9IGR1cjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpdGVyYXRpb24gPSB+fih0VGltZSAvIGN5Y2xlRHVyYXRpb24pO1xuXG4gICAgICAgICAgaWYgKGl0ZXJhdGlvbiAmJiBpdGVyYXRpb24gPT09IHRUaW1lIC8gY3ljbGVEdXJhdGlvbikge1xuICAgICAgICAgICAgdGltZSA9IGR1cjtcbiAgICAgICAgICAgIGl0ZXJhdGlvbi0tO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHRpbWUgPiBkdXIgJiYgKHRpbWUgPSBkdXIpO1xuICAgICAgICB9XG5cbiAgICAgICAgaXNZb3lvID0gdGhpcy5feW95byAmJiBpdGVyYXRpb24gJiAxO1xuXG4gICAgICAgIGlmIChpc1lveW8pIHtcbiAgICAgICAgICB5b3lvRWFzZSA9IHRoaXMuX3lFYXNlO1xuICAgICAgICAgIHRpbWUgPSBkdXIgLSB0aW1lO1xuICAgICAgICB9XG5cbiAgICAgICAgcHJldkl0ZXJhdGlvbiA9IF9hbmltYXRpb25DeWNsZSh0aGlzLl90VGltZSwgY3ljbGVEdXJhdGlvbik7XG5cbiAgICAgICAgaWYgKHRpbWUgPT09IHByZXZUaW1lICYmICFmb3JjZSAmJiB0aGlzLl9pbml0dGVkKSB7XG4gICAgICAgICAgLy9jb3VsZCBiZSBkdXJpbmcgdGhlIHJlcGVhdERlbGF5IHBhcnQuIE5vIG5lZWQgdG8gcmVuZGVyIGFuZCBmaXJlIGNhbGxiYWNrcy5cbiAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChpdGVyYXRpb24gIT09IHByZXZJdGVyYXRpb24pIHtcbiAgICAgICAgICB0aW1lbGluZSAmJiB0aGlzLl95RWFzZSAmJiBfcHJvcGFnYXRlWW95b0Vhc2UodGltZWxpbmUsIGlzWW95byk7IC8vcmVwZWF0UmVmcmVzaCBmdW5jdGlvbmFsaXR5XG5cbiAgICAgICAgICBpZiAodGhpcy52YXJzLnJlcGVhdFJlZnJlc2ggJiYgIWlzWW95byAmJiAhdGhpcy5fbG9jaykge1xuICAgICAgICAgICAgdGhpcy5fbG9jayA9IGZvcmNlID0gMTsgLy9mb3JjZSwgb3RoZXJ3aXNlIGlmIGxhenkgaXMgdHJ1ZSwgdGhlIF9hdHRlbXB0SW5pdFR3ZWVuKCkgd2lsbCByZXR1cm4gYW5kIHdlJ2xsIGp1bXAgb3V0IGFuZCBnZXQgY2F1Z2h0IGJvdW5jaW5nIG9uIGVhY2ggdGljay5cblxuICAgICAgICAgICAgdGhpcy5yZW5kZXIoX3JvdW5kKGN5Y2xlRHVyYXRpb24gKiBpdGVyYXRpb24pLCB0cnVlKS5pbnZhbGlkYXRlKCkuX2xvY2sgPSAwO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoIXRoaXMuX2luaXR0ZWQpIHtcbiAgICAgICAgaWYgKF9hdHRlbXB0SW5pdFR3ZWVuKHRoaXMsIHRvdGFsVGltZSA8IDAgPyB0b3RhbFRpbWUgOiB0aW1lLCBmb3JjZSwgc3VwcHJlc3NFdmVudHMpKSB7XG4gICAgICAgICAgdGhpcy5fdFRpbWUgPSAwOyAvLyBpbiBjb25zdHJ1Y3RvciBpZiBpbW1lZGlhdGVSZW5kZXIgaXMgdHJ1ZSwgd2Ugc2V0IF90VGltZSB0byAtX3RpbnlOdW0gdG8gaGF2ZSB0aGUgcGxheWhlYWQgY3Jvc3MgdGhlIHN0YXJ0aW5nIHBvaW50IGJ1dCB3ZSBjYW4ndCBsZWF2ZSBfdFRpbWUgYXMgYSBuZWdhdGl2ZSBudW1iZXIuXG5cbiAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChkdXIgIT09IHRoaXMuX2R1cikge1xuICAgICAgICAgIC8vIHdoaWxlIGluaXR0aW5nLCBhIHBsdWdpbiBsaWtlIEluZXJ0aWFQbHVnaW4gbWlnaHQgYWx0ZXIgdGhlIGR1cmF0aW9uLCBzbyByZXJ1biBmcm9tIHRoZSBzdGFydCB0byBlbnN1cmUgZXZlcnl0aGluZyByZW5kZXJzIGFzIGl0IHNob3VsZC5cbiAgICAgICAgICByZXR1cm4gdGhpcy5yZW5kZXIodG90YWxUaW1lLCBzdXBwcmVzc0V2ZW50cywgZm9yY2UpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHRoaXMuX3RUaW1lID0gdFRpbWU7XG4gICAgICB0aGlzLl90aW1lID0gdGltZTtcblxuICAgICAgaWYgKCF0aGlzLl9hY3QgJiYgdGhpcy5fdHMpIHtcbiAgICAgICAgdGhpcy5fYWN0ID0gMTsgLy9hcyBsb25nIGFzIGl0J3Mgbm90IHBhdXNlZCwgZm9yY2UgaXQgdG8gYmUgYWN0aXZlIHNvIHRoYXQgaWYgdGhlIHVzZXIgcmVuZGVycyBpbmRlcGVuZGVudCBvZiB0aGUgcGFyZW50IHRpbWVsaW5lLCBpdCdsbCBiZSBmb3JjZWQgdG8gcmUtcmVuZGVyIG9uIHRoZSBuZXh0IHRpY2suXG5cbiAgICAgICAgdGhpcy5fbGF6eSA9IDA7XG4gICAgICB9XG5cbiAgICAgIHRoaXMucmF0aW8gPSByYXRpbyA9ICh5b3lvRWFzZSB8fCB0aGlzLl9lYXNlKSh0aW1lIC8gZHVyKTtcblxuICAgICAgaWYgKHRoaXMuX2Zyb20pIHtcbiAgICAgICAgdGhpcy5yYXRpbyA9IHJhdGlvID0gMSAtIHJhdGlvO1xuICAgICAgfVxuXG4gICAgICB0aW1lICYmICFwcmV2VGltZSAmJiAhc3VwcHJlc3NFdmVudHMgJiYgX2NhbGxiYWNrKHRoaXMsIFwib25TdGFydFwiKTtcbiAgICAgIHB0ID0gdGhpcy5fcHQ7XG5cbiAgICAgIHdoaWxlIChwdCkge1xuICAgICAgICBwdC5yKHJhdGlvLCBwdC5kKTtcbiAgICAgICAgcHQgPSBwdC5fbmV4dDtcbiAgICAgIH1cblxuICAgICAgdGltZWxpbmUgJiYgdGltZWxpbmUucmVuZGVyKHRvdGFsVGltZSA8IDAgPyB0b3RhbFRpbWUgOiAhdGltZSAmJiBpc1lveW8gPyAtX3RpbnlOdW0gOiB0aW1lbGluZS5fZHVyICogcmF0aW8sIHN1cHByZXNzRXZlbnRzLCBmb3JjZSkgfHwgdGhpcy5fc3RhcnRBdCAmJiAodGhpcy5felRpbWUgPSB0b3RhbFRpbWUpO1xuXG4gICAgICBpZiAodGhpcy5fb25VcGRhdGUgJiYgIXN1cHByZXNzRXZlbnRzKSB7XG4gICAgICAgIHRvdGFsVGltZSA8IDAgJiYgdGhpcy5fc3RhcnRBdCAmJiB0aGlzLl9zdGFydEF0LnJlbmRlcih0b3RhbFRpbWUsIHRydWUsIGZvcmNlKTsgLy9ub3RlOiBmb3IgcGVyZm9ybWFuY2UgcmVhc29ucywgd2UgdHVjayB0aGlzIGNvbmRpdGlvbmFsIGxvZ2ljIGluc2lkZSBsZXNzIHRyYXZlbGVkIGFyZWFzIChtb3N0IHR3ZWVucyBkb24ndCBoYXZlIGFuIG9uVXBkYXRlKS4gV2UnZCBqdXN0IGhhdmUgaXQgYXQgdGhlIGVuZCBiZWZvcmUgdGhlIG9uQ29tcGxldGUsIGJ1dCB0aGUgdmFsdWVzIHNob3VsZCBiZSB1cGRhdGVkIGJlZm9yZSBhbnkgb25VcGRhdGUgaXMgY2FsbGVkLCBzbyB3ZSBBTFNPIHB1dCBpdCBoZXJlIGFuZCB0aGVuIGlmIGl0J3Mgbm90IGNhbGxlZCwgd2UgZG8gc28gbGF0ZXIgbmVhciB0aGUgb25Db21wbGV0ZS5cblxuICAgICAgICBfY2FsbGJhY2sodGhpcywgXCJvblVwZGF0ZVwiKTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5fcmVwZWF0ICYmIGl0ZXJhdGlvbiAhPT0gcHJldkl0ZXJhdGlvbiAmJiB0aGlzLnZhcnMub25SZXBlYXQgJiYgIXN1cHByZXNzRXZlbnRzICYmIHRoaXMucGFyZW50ICYmIF9jYWxsYmFjayh0aGlzLCBcIm9uUmVwZWF0XCIpO1xuXG4gICAgICBpZiAoKHRUaW1lID09PSB0aGlzLl90RHVyIHx8ICF0VGltZSkgJiYgdGhpcy5fdFRpbWUgPT09IHRUaW1lKSB7XG4gICAgICAgIHRvdGFsVGltZSA8IDAgJiYgdGhpcy5fc3RhcnRBdCAmJiAhdGhpcy5fb25VcGRhdGUgJiYgdGhpcy5fc3RhcnRBdC5yZW5kZXIodG90YWxUaW1lLCB0cnVlLCB0cnVlKTtcbiAgICAgICAgKHRvdGFsVGltZSB8fCAhZHVyKSAmJiAodFRpbWUgPT09IHRoaXMuX3REdXIgJiYgdGhpcy5fdHMgPiAwIHx8ICF0VGltZSAmJiB0aGlzLl90cyA8IDApICYmIF9yZW1vdmVGcm9tUGFyZW50KHRoaXMsIDEpOyAvLyBkb24ndCByZW1vdmUgaWYgd2UncmUgcmVuZGVyaW5nIGF0IGV4YWN0bHkgYSB0aW1lIG9mIDAsIGFzIHRoZXJlIGNvdWxkIGJlIGF1dG9SZXZlcnQgdmFsdWVzIHRoYXQgc2hvdWxkIGdldCBzZXQgb24gdGhlIG5leHQgdGljayAoaWYgdGhlIHBsYXloZWFkIGdvZXMgYmFja3dhcmQgYmV5b25kIHRoZSBzdGFydFRpbWUsIG5lZ2F0aXZlIHRvdGFsVGltZSkuIERvbid0IHJlbW92ZSBpZiB0aGUgdGltZWxpbmUgaXMgcmV2ZXJzZWQgYW5kIHRoZSBwbGF5aGVhZCBpc24ndCBhdCAwLCBvdGhlcndpc2UgdGwucHJvZ3Jlc3MoMSkucmV2ZXJzZSgpIHdvbid0IHdvcmsuIE9ubHkgcmVtb3ZlIGlmIHRoZSBwbGF5aGVhZCBpcyBhdCB0aGUgZW5kIGFuZCB0aW1lU2NhbGUgaXMgcG9zaXRpdmUsIG9yIGlmIHRoZSBwbGF5aGVhZCBpcyBhdCAwIGFuZCB0aGUgdGltZVNjYWxlIGlzIG5lZ2F0aXZlLlxuXG4gICAgICAgIGlmICghc3VwcHJlc3NFdmVudHMgJiYgISh0b3RhbFRpbWUgPCAwICYmICFwcmV2VGltZSkgJiYgKHRUaW1lIHx8IHByZXZUaW1lKSkge1xuICAgICAgICAgIC8vIGlmIHByZXZUaW1lIGFuZCB0VGltZSBhcmUgemVybywgd2Ugc2hvdWxkbid0IGZpcmUgdGhlIG9uUmV2ZXJzZUNvbXBsZXRlLiBUaGlzIGNvdWxkIGhhcHBlbiBpZiB5b3UgZ3NhcC50byguLi4ge3BhdXNlZDp0cnVlfSkucGxheSgpO1xuICAgICAgICAgIF9jYWxsYmFjayh0aGlzLCB0VGltZSA9PT0gdER1ciA/IFwib25Db21wbGV0ZVwiIDogXCJvblJldmVyc2VDb21wbGV0ZVwiLCB0cnVlKTtcblxuICAgICAgICAgIHRoaXMuX3Byb20gJiYgISh0VGltZSA8IHREdXIgJiYgdGhpcy50aW1lU2NhbGUoKSA+IDApICYmIHRoaXMuX3Byb20oKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIF9wcm90bzMudGFyZ2V0cyA9IGZ1bmN0aW9uIHRhcmdldHMoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3RhcmdldHM7XG4gIH07XG5cbiAgX3Byb3RvMy5pbnZhbGlkYXRlID0gZnVuY3Rpb24gaW52YWxpZGF0ZSgpIHtcbiAgICB0aGlzLl9wdCA9IHRoaXMuX29wID0gdGhpcy5fc3RhcnRBdCA9IHRoaXMuX29uVXBkYXRlID0gdGhpcy5fYWN0ID0gdGhpcy5fbGF6eSA9IDA7XG4gICAgdGhpcy5fcHRMb29rdXAgPSBbXTtcbiAgICB0aGlzLnRpbWVsaW5lICYmIHRoaXMudGltZWxpbmUuaW52YWxpZGF0ZSgpO1xuICAgIHJldHVybiBfQW5pbWF0aW9uMi5wcm90b3R5cGUuaW52YWxpZGF0ZS5jYWxsKHRoaXMpO1xuICB9O1xuXG4gIF9wcm90bzMua2lsbCA9IGZ1bmN0aW9uIGtpbGwodGFyZ2V0cywgdmFycykge1xuICAgIGlmICh2YXJzID09PSB2b2lkIDApIHtcbiAgICAgIHZhcnMgPSBcImFsbFwiO1xuICAgIH1cblxuICAgIGlmICghdGFyZ2V0cyAmJiAoIXZhcnMgfHwgdmFycyA9PT0gXCJhbGxcIikpIHtcbiAgICAgIHRoaXMuX2xhenkgPSAwO1xuXG4gICAgICBpZiAodGhpcy5wYXJlbnQpIHtcbiAgICAgICAgcmV0dXJuIF9pbnRlcnJ1cHQodGhpcyk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHRoaXMudGltZWxpbmUpIHtcbiAgICAgIHZhciB0RHVyID0gdGhpcy50aW1lbGluZS50b3RhbER1cmF0aW9uKCk7XG4gICAgICB0aGlzLnRpbWVsaW5lLmtpbGxUd2VlbnNPZih0YXJnZXRzLCB2YXJzLCBfb3ZlcndyaXRpbmdUd2VlbiAmJiBfb3ZlcndyaXRpbmdUd2Vlbi52YXJzLm92ZXJ3cml0ZSAhPT0gdHJ1ZSkuX2ZpcnN0IHx8IF9pbnRlcnJ1cHQodGhpcyk7IC8vIGlmIG5vdGhpbmcgaXMgbGVmdCB0d2Vlbm5nLCBpbnRlcnJ1cHQuXG5cbiAgICAgIHRoaXMucGFyZW50ICYmIHREdXIgIT09IHRoaXMudGltZWxpbmUudG90YWxEdXJhdGlvbigpICYmIF9zZXREdXJhdGlvbih0aGlzLCB0aGlzLl9kdXIgKiB0aGlzLnRpbWVsaW5lLl90RHVyIC8gdER1ciwgMCwgMSk7IC8vIGlmIGEgbmVzdGVkIHR3ZWVuIGlzIGtpbGxlZCB0aGF0IGNoYW5nZXMgdGhlIGR1cmF0aW9uLCBpdCBzaG91bGQgYWZmZWN0IHRoaXMgdHdlZW4ncyBkdXJhdGlvbi4gV2UgbXVzdCB1c2UgdGhlIHJhdGlvLCB0aG91Z2gsIGJlY2F1c2Ugc29tZXRpbWVzIHRoZSBpbnRlcm5hbCB0aW1lbGluZSBpcyBzdHJldGNoZWQgbGlrZSBmb3Iga2V5ZnJhbWVzIHdoZXJlIHRoZXkgZG9uJ3QgYWxsIGFkZCB1cCB0byB3aGF0ZXZlciB0aGUgcGFyZW50IHR3ZWVuJ3MgZHVyYXRpb24gd2FzIHNldCB0by5cblxuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgdmFyIHBhcnNlZFRhcmdldHMgPSB0aGlzLl90YXJnZXRzLFxuICAgICAgICBraWxsaW5nVGFyZ2V0cyA9IHRhcmdldHMgPyB0b0FycmF5KHRhcmdldHMpIDogcGFyc2VkVGFyZ2V0cyxcbiAgICAgICAgcHJvcFR3ZWVuTG9va3VwID0gdGhpcy5fcHRMb29rdXAsXG4gICAgICAgIGZpcnN0UFQgPSB0aGlzLl9wdCxcbiAgICAgICAgb3ZlcndyaXR0ZW5Qcm9wcyxcbiAgICAgICAgY3VyTG9va3VwLFxuICAgICAgICBjdXJPdmVyd3JpdGVQcm9wcyxcbiAgICAgICAgcHJvcHMsXG4gICAgICAgIHAsXG4gICAgICAgIHB0LFxuICAgICAgICBpO1xuXG4gICAgaWYgKCghdmFycyB8fCB2YXJzID09PSBcImFsbFwiKSAmJiBfYXJyYXlzTWF0Y2gocGFyc2VkVGFyZ2V0cywga2lsbGluZ1RhcmdldHMpKSB7XG4gICAgICB2YXJzID09PSBcImFsbFwiICYmICh0aGlzLl9wdCA9IDApO1xuICAgICAgcmV0dXJuIF9pbnRlcnJ1cHQodGhpcyk7XG4gICAgfVxuXG4gICAgb3ZlcndyaXR0ZW5Qcm9wcyA9IHRoaXMuX29wID0gdGhpcy5fb3AgfHwgW107XG5cbiAgICBpZiAodmFycyAhPT0gXCJhbGxcIikge1xuICAgICAgLy9zbyBwZW9wbGUgY2FuIHBhc3MgaW4gYSBjb21tYS1kZWxpbWl0ZWQgbGlzdCBvZiBwcm9wZXJ0eSBuYW1lc1xuICAgICAgaWYgKF9pc1N0cmluZyh2YXJzKSkge1xuICAgICAgICBwID0ge307XG5cbiAgICAgICAgX2ZvckVhY2hOYW1lKHZhcnMsIGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgICAgICAgcmV0dXJuIHBbbmFtZV0gPSAxO1xuICAgICAgICB9KTtcblxuICAgICAgICB2YXJzID0gcDtcbiAgICAgIH1cblxuICAgICAgdmFycyA9IF9hZGRBbGlhc2VzVG9WYXJzKHBhcnNlZFRhcmdldHMsIHZhcnMpO1xuICAgIH1cblxuICAgIGkgPSBwYXJzZWRUYXJnZXRzLmxlbmd0aDtcblxuICAgIHdoaWxlIChpLS0pIHtcbiAgICAgIGlmICh+a2lsbGluZ1RhcmdldHMuaW5kZXhPZihwYXJzZWRUYXJnZXRzW2ldKSkge1xuICAgICAgICBjdXJMb29rdXAgPSBwcm9wVHdlZW5Mb29rdXBbaV07XG5cbiAgICAgICAgaWYgKHZhcnMgPT09IFwiYWxsXCIpIHtcbiAgICAgICAgICBvdmVyd3JpdHRlblByb3BzW2ldID0gdmFycztcbiAgICAgICAgICBwcm9wcyA9IGN1ckxvb2t1cDtcbiAgICAgICAgICBjdXJPdmVyd3JpdGVQcm9wcyA9IHt9O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGN1ck92ZXJ3cml0ZVByb3BzID0gb3ZlcndyaXR0ZW5Qcm9wc1tpXSA9IG92ZXJ3cml0dGVuUHJvcHNbaV0gfHwge307XG4gICAgICAgICAgcHJvcHMgPSB2YXJzO1xuICAgICAgICB9XG5cbiAgICAgICAgZm9yIChwIGluIHByb3BzKSB7XG4gICAgICAgICAgcHQgPSBjdXJMb29rdXAgJiYgY3VyTG9va3VwW3BdO1xuXG4gICAgICAgICAgaWYgKHB0KSB7XG4gICAgICAgICAgICBpZiAoIShcImtpbGxcIiBpbiBwdC5kKSB8fCBwdC5kLmtpbGwocCkgPT09IHRydWUpIHtcbiAgICAgICAgICAgICAgX3JlbW92ZUxpbmtlZExpc3RJdGVtKHRoaXMsIHB0LCBcIl9wdFwiKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZGVsZXRlIGN1ckxvb2t1cFtwXTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAoY3VyT3ZlcndyaXRlUHJvcHMgIT09IFwiYWxsXCIpIHtcbiAgICAgICAgICAgIGN1ck92ZXJ3cml0ZVByb3BzW3BdID0gMTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICB0aGlzLl9pbml0dGVkICYmICF0aGlzLl9wdCAmJiBmaXJzdFBUICYmIF9pbnRlcnJ1cHQodGhpcyk7IC8vaWYgYWxsIHR3ZWVuaW5nIHByb3BlcnRpZXMgYXJlIGtpbGxlZCwga2lsbCB0aGUgdHdlZW4uIFdpdGhvdXQgdGhpcyBsaW5lLCBpZiB0aGVyZSdzIGEgdHdlZW4gd2l0aCBtdWx0aXBsZSB0YXJnZXRzIGFuZCB0aGVuIHlvdSBraWxsVHdlZW5zT2YoKSBlYWNoIHRhcmdldCBpbmRpdmlkdWFsbHksIHRoZSB0d2VlbiB3b3VsZCB0ZWNobmljYWxseSBzdGlsbCByZW1haW4gYWN0aXZlIGFuZCBmaXJlIGl0cyBvbkNvbXBsZXRlIGV2ZW4gdGhvdWdoIHRoZXJlIGFyZW4ndCBhbnkgbW9yZSBwcm9wZXJ0aWVzIHR3ZWVuaW5nLlxuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgVHdlZW4udG8gPSBmdW5jdGlvbiB0byh0YXJnZXRzLCB2YXJzKSB7XG4gICAgcmV0dXJuIG5ldyBUd2Vlbih0YXJnZXRzLCB2YXJzLCBhcmd1bWVudHNbMl0pO1xuICB9O1xuXG4gIFR3ZWVuLmZyb20gPSBmdW5jdGlvbiBmcm9tKHRhcmdldHMsIHZhcnMpIHtcbiAgICByZXR1cm4gbmV3IFR3ZWVuKHRhcmdldHMsIF9wYXJzZVZhcnMoYXJndW1lbnRzLCAxKSk7XG4gIH07XG5cbiAgVHdlZW4uZGVsYXllZENhbGwgPSBmdW5jdGlvbiBkZWxheWVkQ2FsbChkZWxheSwgY2FsbGJhY2ssIHBhcmFtcywgc2NvcGUpIHtcbiAgICByZXR1cm4gbmV3IFR3ZWVuKGNhbGxiYWNrLCAwLCB7XG4gICAgICBpbW1lZGlhdGVSZW5kZXI6IGZhbHNlLFxuICAgICAgbGF6eTogZmFsc2UsXG4gICAgICBvdmVyd3JpdGU6IGZhbHNlLFxuICAgICAgZGVsYXk6IGRlbGF5LFxuICAgICAgb25Db21wbGV0ZTogY2FsbGJhY2ssXG4gICAgICBvblJldmVyc2VDb21wbGV0ZTogY2FsbGJhY2ssXG4gICAgICBvbkNvbXBsZXRlUGFyYW1zOiBwYXJhbXMsXG4gICAgICBvblJldmVyc2VDb21wbGV0ZVBhcmFtczogcGFyYW1zLFxuICAgICAgY2FsbGJhY2tTY29wZTogc2NvcGVcbiAgICB9KTtcbiAgfTtcblxuICBUd2Vlbi5mcm9tVG8gPSBmdW5jdGlvbiBmcm9tVG8odGFyZ2V0cywgZnJvbVZhcnMsIHRvVmFycykge1xuICAgIHJldHVybiBuZXcgVHdlZW4odGFyZ2V0cywgX3BhcnNlVmFycyhhcmd1bWVudHMsIDIpKTtcbiAgfTtcblxuICBUd2Vlbi5zZXQgPSBmdW5jdGlvbiBzZXQodGFyZ2V0cywgdmFycykge1xuICAgIHZhcnMuZHVyYXRpb24gPSAwO1xuICAgIHZhcnMucmVwZWF0RGVsYXkgfHwgKHZhcnMucmVwZWF0ID0gMCk7XG4gICAgcmV0dXJuIG5ldyBUd2Vlbih0YXJnZXRzLCB2YXJzKTtcbiAgfTtcblxuICBUd2Vlbi5raWxsVHdlZW5zT2YgPSBmdW5jdGlvbiBraWxsVHdlZW5zT2YodGFyZ2V0cywgcHJvcHMsIG9ubHlBY3RpdmUpIHtcbiAgICByZXR1cm4gX2dsb2JhbFRpbWVsaW5lLmtpbGxUd2VlbnNPZih0YXJnZXRzLCBwcm9wcywgb25seUFjdGl2ZSk7XG4gIH07XG5cbiAgcmV0dXJuIFR3ZWVuO1xufShBbmltYXRpb24pO1xuXG5fc2V0RGVmYXVsdHMoVHdlZW4ucHJvdG90eXBlLCB7XG4gIF90YXJnZXRzOiBbXSxcbiAgX2xhenk6IDAsXG4gIF9zdGFydEF0OiAwLFxuICBfb3A6IDAsXG4gIF9vbkluaXQ6IDBcbn0pOyAvL2FkZCB0aGUgcGVydGluZW50IHRpbWVsaW5lIG1ldGhvZHMgdG8gVHdlZW4gaW5zdGFuY2VzIHNvIHRoYXQgdXNlcnMgY2FuIGNoYWluIGNvbnZlbmllbnRseSBhbmQgY3JlYXRlIGEgdGltZWxpbmUgYXV0b21hdGljYWxseS4gKHJlbW92ZWQgZHVlIHRvIGNvbmNlcm5zIHRoYXQgaXQnZCB1bHRpbWF0ZWx5IGFkZCB0byBtb3JlIGNvbmZ1c2lvbiBlc3BlY2lhbGx5IGZvciBiZWdpbm5lcnMpXG4vLyBfZm9yRWFjaE5hbWUoXCJ0byxmcm9tLGZyb21UbyxzZXQsY2FsbCxhZGQsYWRkTGFiZWwsYWRkUGF1c2VcIiwgbmFtZSA9PiB7XG4vLyBcdFR3ZWVuLnByb3RvdHlwZVtuYW1lXSA9IGZ1bmN0aW9uKCkge1xuLy8gXHRcdGxldCB0bCA9IG5ldyBUaW1lbGluZSgpO1xuLy8gXHRcdHJldHVybiBfYWRkVG9UaW1lbGluZSh0bCwgdGhpcylbbmFtZV0uYXBwbHkodGwsIHRvQXJyYXkoYXJndW1lbnRzKSk7XG4vLyBcdH1cbi8vIH0pO1xuLy9mb3IgYmFja3dhcmQgY29tcGF0aWJpbGl0eS4gTGV2ZXJhZ2UgdGhlIHRpbWVsaW5lIGNhbGxzLlxuXG5cbl9mb3JFYWNoTmFtZShcInN0YWdnZXJUbyxzdGFnZ2VyRnJvbSxzdGFnZ2VyRnJvbVRvXCIsIGZ1bmN0aW9uIChuYW1lKSB7XG4gIFR3ZWVuW25hbWVdID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciB0bCA9IG5ldyBUaW1lbGluZSgpLFxuICAgICAgICBwYXJhbXMgPSBfc2xpY2UuY2FsbChhcmd1bWVudHMsIDApO1xuXG4gICAgcGFyYW1zLnNwbGljZShuYW1lID09PSBcInN0YWdnZXJGcm9tVG9cIiA/IDUgOiA0LCAwLCAwKTtcbiAgICByZXR1cm4gdGxbbmFtZV0uYXBwbHkodGwsIHBhcmFtcyk7XG4gIH07XG59KTtcbi8qXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogUFJPUFRXRUVOXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICovXG5cblxudmFyIF9zZXR0ZXJQbGFpbiA9IGZ1bmN0aW9uIF9zZXR0ZXJQbGFpbih0YXJnZXQsIHByb3BlcnR5LCB2YWx1ZSkge1xuICByZXR1cm4gdGFyZ2V0W3Byb3BlcnR5XSA9IHZhbHVlO1xufSxcbiAgICBfc2V0dGVyRnVuYyA9IGZ1bmN0aW9uIF9zZXR0ZXJGdW5jKHRhcmdldCwgcHJvcGVydHksIHZhbHVlKSB7XG4gIHJldHVybiB0YXJnZXRbcHJvcGVydHldKHZhbHVlKTtcbn0sXG4gICAgX3NldHRlckZ1bmNXaXRoUGFyYW0gPSBmdW5jdGlvbiBfc2V0dGVyRnVuY1dpdGhQYXJhbSh0YXJnZXQsIHByb3BlcnR5LCB2YWx1ZSwgZGF0YSkge1xuICByZXR1cm4gdGFyZ2V0W3Byb3BlcnR5XShkYXRhLmZwLCB2YWx1ZSk7XG59LFxuICAgIF9zZXR0ZXJBdHRyaWJ1dGUgPSBmdW5jdGlvbiBfc2V0dGVyQXR0cmlidXRlKHRhcmdldCwgcHJvcGVydHksIHZhbHVlKSB7XG4gIHJldHVybiB0YXJnZXQuc2V0QXR0cmlidXRlKHByb3BlcnR5LCB2YWx1ZSk7XG59LFxuICAgIF9nZXRTZXR0ZXIgPSBmdW5jdGlvbiBfZ2V0U2V0dGVyKHRhcmdldCwgcHJvcGVydHkpIHtcbiAgcmV0dXJuIF9pc0Z1bmN0aW9uKHRhcmdldFtwcm9wZXJ0eV0pID8gX3NldHRlckZ1bmMgOiBfaXNVbmRlZmluZWQodGFyZ2V0W3Byb3BlcnR5XSkgJiYgdGFyZ2V0LnNldEF0dHJpYnV0ZSA/IF9zZXR0ZXJBdHRyaWJ1dGUgOiBfc2V0dGVyUGxhaW47XG59LFxuICAgIF9yZW5kZXJQbGFpbiA9IGZ1bmN0aW9uIF9yZW5kZXJQbGFpbihyYXRpbywgZGF0YSkge1xuICByZXR1cm4gZGF0YS5zZXQoZGF0YS50LCBkYXRhLnAsIE1hdGgucm91bmQoKGRhdGEucyArIGRhdGEuYyAqIHJhdGlvKSAqIDEwMDAwKSAvIDEwMDAwLCBkYXRhKTtcbn0sXG4gICAgX3JlbmRlckJvb2xlYW4gPSBmdW5jdGlvbiBfcmVuZGVyQm9vbGVhbihyYXRpbywgZGF0YSkge1xuICByZXR1cm4gZGF0YS5zZXQoZGF0YS50LCBkYXRhLnAsICEhKGRhdGEucyArIGRhdGEuYyAqIHJhdGlvKSwgZGF0YSk7XG59LFxuICAgIF9yZW5kZXJDb21wbGV4U3RyaW5nID0gZnVuY3Rpb24gX3JlbmRlckNvbXBsZXhTdHJpbmcocmF0aW8sIGRhdGEpIHtcbiAgdmFyIHB0ID0gZGF0YS5fcHQsXG4gICAgICBzID0gXCJcIjtcblxuICBpZiAoIXJhdGlvICYmIGRhdGEuYikge1xuICAgIC8vYiA9IGJlZ2lubmluZyBzdHJpbmdcbiAgICBzID0gZGF0YS5iO1xuICB9IGVsc2UgaWYgKHJhdGlvID09PSAxICYmIGRhdGEuZSkge1xuICAgIC8vZSA9IGVuZGluZyBzdHJpbmdcbiAgICBzID0gZGF0YS5lO1xuICB9IGVsc2Uge1xuICAgIHdoaWxlIChwdCkge1xuICAgICAgcyA9IHB0LnAgKyAocHQubSA/IHB0Lm0ocHQucyArIHB0LmMgKiByYXRpbykgOiBNYXRoLnJvdW5kKChwdC5zICsgcHQuYyAqIHJhdGlvKSAqIDEwMDAwKSAvIDEwMDAwKSArIHM7IC8vd2UgdXNlIHRoZSBcInBcIiBwcm9wZXJ0eSBmb3IgdGhlIHRleHQgaW5iZXR3ZWVuIChsaWtlIGEgc3VmZml4KS4gQW5kIGluIHRoZSBjb250ZXh0IG9mIGEgY29tcGxleCBzdHJpbmcsIHRoZSBtb2RpZmllciAobSkgaXMgdHlwaWNhbGx5IGp1c3QgTWF0aC5yb3VuZCgpLCBsaWtlIGZvciBSR0IgY29sb3JzLlxuXG4gICAgICBwdCA9IHB0Ll9uZXh0O1xuICAgIH1cblxuICAgIHMgKz0gZGF0YS5jOyAvL3dlIHVzZSB0aGUgXCJjXCIgb2YgdGhlIFByb3BUd2VlbiB0byBzdG9yZSB0aGUgZmluYWwgY2h1bmsgb2Ygbm9uLW51bWVyaWMgdGV4dC5cbiAgfVxuXG4gIGRhdGEuc2V0KGRhdGEudCwgZGF0YS5wLCBzLCBkYXRhKTtcbn0sXG4gICAgX3JlbmRlclByb3BUd2VlbnMgPSBmdW5jdGlvbiBfcmVuZGVyUHJvcFR3ZWVucyhyYXRpbywgZGF0YSkge1xuICB2YXIgcHQgPSBkYXRhLl9wdDtcblxuICB3aGlsZSAocHQpIHtcbiAgICBwdC5yKHJhdGlvLCBwdC5kKTtcbiAgICBwdCA9IHB0Ll9uZXh0O1xuICB9XG59LFxuICAgIF9hZGRQbHVnaW5Nb2RpZmllciA9IGZ1bmN0aW9uIF9hZGRQbHVnaW5Nb2RpZmllcihtb2RpZmllciwgdHdlZW4sIHRhcmdldCwgcHJvcGVydHkpIHtcbiAgdmFyIHB0ID0gdGhpcy5fcHQsXG4gICAgICBuZXh0O1xuXG4gIHdoaWxlIChwdCkge1xuICAgIG5leHQgPSBwdC5fbmV4dDtcbiAgICBwdC5wID09PSBwcm9wZXJ0eSAmJiBwdC5tb2RpZmllcihtb2RpZmllciwgdHdlZW4sIHRhcmdldCk7XG4gICAgcHQgPSBuZXh0O1xuICB9XG59LFxuICAgIF9raWxsUHJvcFR3ZWVuc09mID0gZnVuY3Rpb24gX2tpbGxQcm9wVHdlZW5zT2YocHJvcGVydHkpIHtcbiAgdmFyIHB0ID0gdGhpcy5fcHQsXG4gICAgICBoYXNOb25EZXBlbmRlbnRSZW1haW5pbmcsXG4gICAgICBuZXh0O1xuXG4gIHdoaWxlIChwdCkge1xuICAgIG5leHQgPSBwdC5fbmV4dDtcblxuICAgIGlmIChwdC5wID09PSBwcm9wZXJ0eSAmJiAhcHQub3AgfHwgcHQub3AgPT09IHByb3BlcnR5KSB7XG4gICAgICBfcmVtb3ZlTGlua2VkTGlzdEl0ZW0odGhpcywgcHQsIFwiX3B0XCIpO1xuICAgIH0gZWxzZSBpZiAoIXB0LmRlcCkge1xuICAgICAgaGFzTm9uRGVwZW5kZW50UmVtYWluaW5nID0gMTtcbiAgICB9XG5cbiAgICBwdCA9IG5leHQ7XG4gIH1cblxuICByZXR1cm4gIWhhc05vbkRlcGVuZGVudFJlbWFpbmluZztcbn0sXG4gICAgX3NldHRlcldpdGhNb2RpZmllciA9IGZ1bmN0aW9uIF9zZXR0ZXJXaXRoTW9kaWZpZXIodGFyZ2V0LCBwcm9wZXJ0eSwgdmFsdWUsIGRhdGEpIHtcbiAgZGF0YS5tU2V0KHRhcmdldCwgcHJvcGVydHksIGRhdGEubS5jYWxsKGRhdGEudHdlZW4sIHZhbHVlLCBkYXRhLm10KSwgZGF0YSk7XG59LFxuICAgIF9zb3J0UHJvcFR3ZWVuc0J5UHJpb3JpdHkgPSBmdW5jdGlvbiBfc29ydFByb3BUd2VlbnNCeVByaW9yaXR5KHBhcmVudCkge1xuICB2YXIgcHQgPSBwYXJlbnQuX3B0LFxuICAgICAgbmV4dCxcbiAgICAgIHB0MixcbiAgICAgIGZpcnN0LFxuICAgICAgbGFzdDsgLy9zb3J0cyB0aGUgUHJvcFR3ZWVuIGxpbmtlZCBsaXN0IGluIG9yZGVyIG9mIHByaW9yaXR5IGJlY2F1c2Ugc29tZSBwbHVnaW5zIG5lZWQgdG8gZG8gdGhlaXIgd29yayBhZnRlciBBTEwgb2YgdGhlIFByb3BUd2VlbnMgd2VyZSBjcmVhdGVkIChsaWtlIFJvdW5kUHJvcHNQbHVnaW4gYW5kIE1vZGlmaWVyc1BsdWdpbilcblxuICB3aGlsZSAocHQpIHtcbiAgICBuZXh0ID0gcHQuX25leHQ7XG4gICAgcHQyID0gZmlyc3Q7XG5cbiAgICB3aGlsZSAocHQyICYmIHB0Mi5wciA+IHB0LnByKSB7XG4gICAgICBwdDIgPSBwdDIuX25leHQ7XG4gICAgfVxuXG4gICAgaWYgKHB0Ll9wcmV2ID0gcHQyID8gcHQyLl9wcmV2IDogbGFzdCkge1xuICAgICAgcHQuX3ByZXYuX25leHQgPSBwdDtcbiAgICB9IGVsc2Uge1xuICAgICAgZmlyc3QgPSBwdDtcbiAgICB9XG5cbiAgICBpZiAocHQuX25leHQgPSBwdDIpIHtcbiAgICAgIHB0Mi5fcHJldiA9IHB0O1xuICAgIH0gZWxzZSB7XG4gICAgICBsYXN0ID0gcHQ7XG4gICAgfVxuXG4gICAgcHQgPSBuZXh0O1xuICB9XG5cbiAgcGFyZW50Ll9wdCA9IGZpcnN0O1xufTsgLy9Qcm9wVHdlZW4ga2V5OiB0ID0gdGFyZ2V0LCBwID0gcHJvcCwgciA9IHJlbmRlcmVyLCBkID0gZGF0YSwgcyA9IHN0YXJ0LCBjID0gY2hhbmdlLCBvcCA9IG92ZXJ3cml0ZVByb3BlcnR5IChPTkxZIHBvcHVsYXRlZCB3aGVuIGl0J3MgZGlmZmVyZW50IHRoYW4gcCksIHByID0gcHJpb3JpdHksIF9uZXh0L19wcmV2IGZvciB0aGUgbGlua2VkIGxpc3Qgc2libGluZ3MsIHNldCA9IHNldHRlciwgbSA9IG1vZGlmaWVyLCBtU2V0ID0gbW9kaWZpZXJTZXR0ZXIgKHRoZSBvcmlnaW5hbCBzZXR0ZXIsIGJlZm9yZSBhIG1vZGlmaWVyIHdhcyBhZGRlZClcblxuXG5leHBvcnQgdmFyIFByb3BUd2VlbiA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIFByb3BUd2VlbihuZXh0LCB0YXJnZXQsIHByb3AsIHN0YXJ0LCBjaGFuZ2UsIHJlbmRlcmVyLCBkYXRhLCBzZXR0ZXIsIHByaW9yaXR5KSB7XG4gICAgdGhpcy50ID0gdGFyZ2V0O1xuICAgIHRoaXMucyA9IHN0YXJ0O1xuICAgIHRoaXMuYyA9IGNoYW5nZTtcbiAgICB0aGlzLnAgPSBwcm9wO1xuICAgIHRoaXMuciA9IHJlbmRlcmVyIHx8IF9yZW5kZXJQbGFpbjtcbiAgICB0aGlzLmQgPSBkYXRhIHx8IHRoaXM7XG4gICAgdGhpcy5zZXQgPSBzZXR0ZXIgfHwgX3NldHRlclBsYWluO1xuICAgIHRoaXMucHIgPSBwcmlvcml0eSB8fCAwO1xuICAgIHRoaXMuX25leHQgPSBuZXh0O1xuXG4gICAgaWYgKG5leHQpIHtcbiAgICAgIG5leHQuX3ByZXYgPSB0aGlzO1xuICAgIH1cbiAgfVxuXG4gIHZhciBfcHJvdG80ID0gUHJvcFR3ZWVuLnByb3RvdHlwZTtcblxuICBfcHJvdG80Lm1vZGlmaWVyID0gZnVuY3Rpb24gbW9kaWZpZXIoZnVuYywgdHdlZW4sIHRhcmdldCkge1xuICAgIHRoaXMubVNldCA9IHRoaXMubVNldCB8fCB0aGlzLnNldDsgLy9pbiBjYXNlIGl0IHdhcyBhbHJlYWR5IHNldCAoYSBQcm9wVHdlZW4gY2FuIG9ubHkgaGF2ZSBvbmUgbW9kaWZpZXIpXG5cbiAgICB0aGlzLnNldCA9IF9zZXR0ZXJXaXRoTW9kaWZpZXI7XG4gICAgdGhpcy5tID0gZnVuYztcbiAgICB0aGlzLm10ID0gdGFyZ2V0OyAvL21vZGlmaWVyIHRhcmdldFxuXG4gICAgdGhpcy50d2VlbiA9IHR3ZWVuO1xuICB9O1xuXG4gIHJldHVybiBQcm9wVHdlZW47XG59KCk7IC8vSW5pdGlhbGl6YXRpb24gdGFza3NcblxuX2ZvckVhY2hOYW1lKF9jYWxsYmFja05hbWVzICsgXCJwYXJlbnQsZHVyYXRpb24sZWFzZSxkZWxheSxvdmVyd3JpdGUscnVuQmFja3dhcmRzLHN0YXJ0QXQseW95byxpbW1lZGlhdGVSZW5kZXIscmVwZWF0LHJlcGVhdERlbGF5LGRhdGEscGF1c2VkLHJldmVyc2VkLGxhenksY2FsbGJhY2tTY29wZSxzdHJpbmdGaWx0ZXIsaWQseW95b0Vhc2Usc3RhZ2dlcixpbmhlcml0LHJlcGVhdFJlZnJlc2gsa2V5ZnJhbWVzLGF1dG9SZXZlcnQsc2Nyb2xsVHJpZ2dlclwiLCBmdW5jdGlvbiAobmFtZSkge1xuICByZXR1cm4gX3Jlc2VydmVkUHJvcHNbbmFtZV0gPSAxO1xufSk7XG5cbl9nbG9iYWxzLlR3ZWVuTWF4ID0gX2dsb2JhbHMuVHdlZW5MaXRlID0gVHdlZW47XG5fZ2xvYmFscy5UaW1lbGluZUxpdGUgPSBfZ2xvYmFscy5UaW1lbGluZU1heCA9IFRpbWVsaW5lO1xuX2dsb2JhbFRpbWVsaW5lID0gbmV3IFRpbWVsaW5lKHtcbiAgc29ydENoaWxkcmVuOiBmYWxzZSxcbiAgZGVmYXVsdHM6IF9kZWZhdWx0cyxcbiAgYXV0b1JlbW92ZUNoaWxkcmVuOiB0cnVlLFxuICBpZDogXCJyb290XCIsXG4gIHNtb290aENoaWxkVGltaW5nOiB0cnVlXG59KTtcbl9jb25maWcuc3RyaW5nRmlsdGVyID0gX2NvbG9yU3RyaW5nRmlsdGVyO1xuLypcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBHU0FQXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICovXG5cbnZhciBfZ3NhcCA9IHtcbiAgcmVnaXN0ZXJQbHVnaW46IGZ1bmN0aW9uIHJlZ2lzdGVyUGx1Z2luKCkge1xuICAgIGZvciAodmFyIF9sZW4yID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuMiksIF9rZXkyID0gMDsgX2tleTIgPCBfbGVuMjsgX2tleTIrKykge1xuICAgICAgYXJnc1tfa2V5Ml0gPSBhcmd1bWVudHNbX2tleTJdO1xuICAgIH1cblxuICAgIGFyZ3MuZm9yRWFjaChmdW5jdGlvbiAoY29uZmlnKSB7XG4gICAgICByZXR1cm4gX2NyZWF0ZVBsdWdpbihjb25maWcpO1xuICAgIH0pO1xuICB9LFxuICB0aW1lbGluZTogZnVuY3Rpb24gdGltZWxpbmUodmFycykge1xuICAgIHJldHVybiBuZXcgVGltZWxpbmUodmFycyk7XG4gIH0sXG4gIGdldFR3ZWVuc09mOiBmdW5jdGlvbiBnZXRUd2VlbnNPZih0YXJnZXRzLCBvbmx5QWN0aXZlKSB7XG4gICAgcmV0dXJuIF9nbG9iYWxUaW1lbGluZS5nZXRUd2VlbnNPZih0YXJnZXRzLCBvbmx5QWN0aXZlKTtcbiAgfSxcbiAgZ2V0UHJvcGVydHk6IGZ1bmN0aW9uIGdldFByb3BlcnR5KHRhcmdldCwgcHJvcGVydHksIHVuaXQsIHVuY2FjaGUpIHtcbiAgICBfaXNTdHJpbmcodGFyZ2V0KSAmJiAodGFyZ2V0ID0gdG9BcnJheSh0YXJnZXQpWzBdKTsgLy9pbiBjYXNlIHNlbGVjdG9yIHRleHQgb3IgYW4gYXJyYXkgaXMgcGFzc2VkIGluXG5cbiAgICB2YXIgZ2V0dGVyID0gX2dldENhY2hlKHRhcmdldCB8fCB7fSkuZ2V0LFxuICAgICAgICBmb3JtYXQgPSB1bml0ID8gX3Bhc3NUaHJvdWdoIDogX251bWVyaWNJZlBvc3NpYmxlO1xuXG4gICAgdW5pdCA9PT0gXCJuYXRpdmVcIiAmJiAodW5pdCA9IFwiXCIpO1xuICAgIHJldHVybiAhdGFyZ2V0ID8gdGFyZ2V0IDogIXByb3BlcnR5ID8gZnVuY3Rpb24gKHByb3BlcnR5LCB1bml0LCB1bmNhY2hlKSB7XG4gICAgICByZXR1cm4gZm9ybWF0KChfcGx1Z2luc1twcm9wZXJ0eV0gJiYgX3BsdWdpbnNbcHJvcGVydHldLmdldCB8fCBnZXR0ZXIpKHRhcmdldCwgcHJvcGVydHksIHVuaXQsIHVuY2FjaGUpKTtcbiAgICB9IDogZm9ybWF0KChfcGx1Z2luc1twcm9wZXJ0eV0gJiYgX3BsdWdpbnNbcHJvcGVydHldLmdldCB8fCBnZXR0ZXIpKHRhcmdldCwgcHJvcGVydHksIHVuaXQsIHVuY2FjaGUpKTtcbiAgfSxcbiAgcXVpY2tTZXR0ZXI6IGZ1bmN0aW9uIHF1aWNrU2V0dGVyKHRhcmdldCwgcHJvcGVydHksIHVuaXQpIHtcbiAgICB0YXJnZXQgPSB0b0FycmF5KHRhcmdldCk7XG5cbiAgICBpZiAodGFyZ2V0Lmxlbmd0aCA+IDEpIHtcbiAgICAgIHZhciBzZXR0ZXJzID0gdGFyZ2V0Lm1hcChmdW5jdGlvbiAodCkge1xuICAgICAgICByZXR1cm4gZ3NhcC5xdWlja1NldHRlcih0LCBwcm9wZXJ0eSwgdW5pdCk7XG4gICAgICB9KSxcbiAgICAgICAgICBsID0gc2V0dGVycy5sZW5ndGg7XG4gICAgICByZXR1cm4gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIHZhciBpID0gbDtcblxuICAgICAgICB3aGlsZSAoaS0tKSB7XG4gICAgICAgICAgc2V0dGVyc1tpXSh2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgfVxuXG4gICAgdGFyZ2V0ID0gdGFyZ2V0WzBdIHx8IHt9O1xuXG4gICAgdmFyIFBsdWdpbiA9IF9wbHVnaW5zW3Byb3BlcnR5XSxcbiAgICAgICAgY2FjaGUgPSBfZ2V0Q2FjaGUodGFyZ2V0KSxcbiAgICAgICAgcCA9IGNhY2hlLmhhcm5lc3MgJiYgKGNhY2hlLmhhcm5lc3MuYWxpYXNlcyB8fCB7fSlbcHJvcGVydHldIHx8IHByb3BlcnR5LFxuICAgICAgICAvLyBpbiBjYXNlIGl0J3MgYW4gYWxpYXMsIGxpa2UgXCJyb3RhdGVcIiBmb3IgXCJyb3RhdGlvblwiLlxuICAgIHNldHRlciA9IFBsdWdpbiA/IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgdmFyIHAgPSBuZXcgUGx1Z2luKCk7XG4gICAgICBfcXVpY2tUd2Vlbi5fcHQgPSAwO1xuICAgICAgcC5pbml0KHRhcmdldCwgdW5pdCA/IHZhbHVlICsgdW5pdCA6IHZhbHVlLCBfcXVpY2tUd2VlbiwgMCwgW3RhcmdldF0pO1xuICAgICAgcC5yZW5kZXIoMSwgcCk7XG4gICAgICBfcXVpY2tUd2Vlbi5fcHQgJiYgX3JlbmRlclByb3BUd2VlbnMoMSwgX3F1aWNrVHdlZW4pO1xuICAgIH0gOiBjYWNoZS5zZXQodGFyZ2V0LCBwKTtcblxuICAgIHJldHVybiBQbHVnaW4gPyBzZXR0ZXIgOiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgIHJldHVybiBzZXR0ZXIodGFyZ2V0LCBwLCB1bml0ID8gdmFsdWUgKyB1bml0IDogdmFsdWUsIGNhY2hlLCAxKTtcbiAgICB9O1xuICB9LFxuICBpc1R3ZWVuaW5nOiBmdW5jdGlvbiBpc1R3ZWVuaW5nKHRhcmdldHMpIHtcbiAgICByZXR1cm4gX2dsb2JhbFRpbWVsaW5lLmdldFR3ZWVuc09mKHRhcmdldHMsIHRydWUpLmxlbmd0aCA+IDA7XG4gIH0sXG4gIGRlZmF1bHRzOiBmdW5jdGlvbiBkZWZhdWx0cyh2YWx1ZSkge1xuICAgIHZhbHVlICYmIHZhbHVlLmVhc2UgJiYgKHZhbHVlLmVhc2UgPSBfcGFyc2VFYXNlKHZhbHVlLmVhc2UsIF9kZWZhdWx0cy5lYXNlKSk7XG4gICAgcmV0dXJuIF9tZXJnZURlZXAoX2RlZmF1bHRzLCB2YWx1ZSB8fCB7fSk7XG4gIH0sXG4gIGNvbmZpZzogZnVuY3Rpb24gY29uZmlnKHZhbHVlKSB7XG4gICAgcmV0dXJuIF9tZXJnZURlZXAoX2NvbmZpZywgdmFsdWUgfHwge30pO1xuICB9LFxuICByZWdpc3RlckVmZmVjdDogZnVuY3Rpb24gcmVnaXN0ZXJFZmZlY3QoX3JlZikge1xuICAgIHZhciBuYW1lID0gX3JlZi5uYW1lLFxuICAgICAgICBlZmZlY3QgPSBfcmVmLmVmZmVjdCxcbiAgICAgICAgcGx1Z2lucyA9IF9yZWYucGx1Z2lucyxcbiAgICAgICAgZGVmYXVsdHMgPSBfcmVmLmRlZmF1bHRzLFxuICAgICAgICBleHRlbmRUaW1lbGluZSA9IF9yZWYuZXh0ZW5kVGltZWxpbmU7XG4gICAgKHBsdWdpbnMgfHwgXCJcIikuc3BsaXQoXCIsXCIpLmZvckVhY2goZnVuY3Rpb24gKHBsdWdpbk5hbWUpIHtcbiAgICAgIHJldHVybiBwbHVnaW5OYW1lICYmICFfcGx1Z2luc1twbHVnaW5OYW1lXSAmJiAhX2dsb2JhbHNbcGx1Z2luTmFtZV0gJiYgX3dhcm4obmFtZSArIFwiIGVmZmVjdCByZXF1aXJlcyBcIiArIHBsdWdpbk5hbWUgKyBcIiBwbHVnaW4uXCIpO1xuICAgIH0pO1xuXG4gICAgX2VmZmVjdHNbbmFtZV0gPSBmdW5jdGlvbiAodGFyZ2V0cywgdmFycywgdGwpIHtcbiAgICAgIHJldHVybiBlZmZlY3QodG9BcnJheSh0YXJnZXRzKSwgX3NldERlZmF1bHRzKHZhcnMgfHwge30sIGRlZmF1bHRzKSwgdGwpO1xuICAgIH07XG5cbiAgICBpZiAoZXh0ZW5kVGltZWxpbmUpIHtcbiAgICAgIFRpbWVsaW5lLnByb3RvdHlwZVtuYW1lXSA9IGZ1bmN0aW9uICh0YXJnZXRzLCB2YXJzLCBwb3NpdGlvbikge1xuICAgICAgICByZXR1cm4gdGhpcy5hZGQoX2VmZmVjdHNbbmFtZV0odGFyZ2V0cywgX2lzT2JqZWN0KHZhcnMpID8gdmFycyA6IChwb3NpdGlvbiA9IHZhcnMpICYmIHt9LCB0aGlzKSwgcG9zaXRpb24pO1xuICAgICAgfTtcbiAgICB9XG4gIH0sXG4gIHJlZ2lzdGVyRWFzZTogZnVuY3Rpb24gcmVnaXN0ZXJFYXNlKG5hbWUsIGVhc2UpIHtcbiAgICBfZWFzZU1hcFtuYW1lXSA9IF9wYXJzZUVhc2UoZWFzZSk7XG4gIH0sXG4gIHBhcnNlRWFzZTogZnVuY3Rpb24gcGFyc2VFYXNlKGVhc2UsIGRlZmF1bHRFYXNlKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyBfcGFyc2VFYXNlKGVhc2UsIGRlZmF1bHRFYXNlKSA6IF9lYXNlTWFwO1xuICB9LFxuICBnZXRCeUlkOiBmdW5jdGlvbiBnZXRCeUlkKGlkKSB7XG4gICAgcmV0dXJuIF9nbG9iYWxUaW1lbGluZS5nZXRCeUlkKGlkKTtcbiAgfSxcbiAgZXhwb3J0Um9vdDogZnVuY3Rpb24gZXhwb3J0Um9vdCh2YXJzLCBpbmNsdWRlRGVsYXllZENhbGxzKSB7XG4gICAgaWYgKHZhcnMgPT09IHZvaWQgMCkge1xuICAgICAgdmFycyA9IHt9O1xuICAgIH1cblxuICAgIHZhciB0bCA9IG5ldyBUaW1lbGluZSh2YXJzKSxcbiAgICAgICAgY2hpbGQsXG4gICAgICAgIG5leHQ7XG4gICAgdGwuc21vb3RoQ2hpbGRUaW1pbmcgPSBfaXNOb3RGYWxzZSh2YXJzLnNtb290aENoaWxkVGltaW5nKTtcblxuICAgIF9nbG9iYWxUaW1lbGluZS5yZW1vdmUodGwpO1xuXG4gICAgdGwuX2RwID0gMDsgLy9vdGhlcndpc2UgaXQnbGwgZ2V0IHJlLWFjdGl2YXRlZCB3aGVuIGFkZGluZyBjaGlsZHJlbiBhbmQgYmUgcmUtaW50cm9kdWNlZCBpbnRvIF9nbG9iYWxUaW1lbGluZSdzIGxpbmtlZCBsaXN0ICh0aGVuIGFkZGVkIHRvIGl0c2VsZikuXG5cbiAgICB0bC5fdGltZSA9IHRsLl90VGltZSA9IF9nbG9iYWxUaW1lbGluZS5fdGltZTtcbiAgICBjaGlsZCA9IF9nbG9iYWxUaW1lbGluZS5fZmlyc3Q7XG5cbiAgICB3aGlsZSAoY2hpbGQpIHtcbiAgICAgIG5leHQgPSBjaGlsZC5fbmV4dDtcblxuICAgICAgaWYgKGluY2x1ZGVEZWxheWVkQ2FsbHMgfHwgISghY2hpbGQuX2R1ciAmJiBjaGlsZCBpbnN0YW5jZW9mIFR3ZWVuICYmIGNoaWxkLnZhcnMub25Db21wbGV0ZSA9PT0gY2hpbGQuX3RhcmdldHNbMF0pKSB7XG4gICAgICAgIF9hZGRUb1RpbWVsaW5lKHRsLCBjaGlsZCwgY2hpbGQuX3N0YXJ0IC0gY2hpbGQuX2RlbGF5KTtcbiAgICAgIH1cblxuICAgICAgY2hpbGQgPSBuZXh0O1xuICAgIH1cblxuICAgIF9hZGRUb1RpbWVsaW5lKF9nbG9iYWxUaW1lbGluZSwgdGwsIDApO1xuXG4gICAgcmV0dXJuIHRsO1xuICB9LFxuICB1dGlsczoge1xuICAgIHdyYXA6IHdyYXAsXG4gICAgd3JhcFlveW86IHdyYXBZb3lvLFxuICAgIGRpc3RyaWJ1dGU6IGRpc3RyaWJ1dGUsXG4gICAgcmFuZG9tOiByYW5kb20sXG4gICAgc25hcDogc25hcCxcbiAgICBub3JtYWxpemU6IG5vcm1hbGl6ZSxcbiAgICBnZXRVbml0OiBnZXRVbml0LFxuICAgIGNsYW1wOiBjbGFtcCxcbiAgICBzcGxpdENvbG9yOiBzcGxpdENvbG9yLFxuICAgIHRvQXJyYXk6IHRvQXJyYXksXG4gICAgbWFwUmFuZ2U6IG1hcFJhbmdlLFxuICAgIHBpcGU6IHBpcGUsXG4gICAgdW5pdGl6ZTogdW5pdGl6ZSxcbiAgICBpbnRlcnBvbGF0ZTogaW50ZXJwb2xhdGUsXG4gICAgc2h1ZmZsZTogc2h1ZmZsZVxuICB9LFxuICBpbnN0YWxsOiBfaW5zdGFsbCxcbiAgZWZmZWN0czogX2VmZmVjdHMsXG4gIHRpY2tlcjogX3RpY2tlcixcbiAgdXBkYXRlUm9vdDogVGltZWxpbmUudXBkYXRlUm9vdCxcbiAgcGx1Z2luczogX3BsdWdpbnMsXG4gIGdsb2JhbFRpbWVsaW5lOiBfZ2xvYmFsVGltZWxpbmUsXG4gIGNvcmU6IHtcbiAgICBQcm9wVHdlZW46IFByb3BUd2VlbixcbiAgICBnbG9iYWxzOiBfYWRkR2xvYmFsLFxuICAgIFR3ZWVuOiBUd2VlbixcbiAgICBUaW1lbGluZTogVGltZWxpbmUsXG4gICAgQW5pbWF0aW9uOiBBbmltYXRpb24sXG4gICAgZ2V0Q2FjaGU6IF9nZXRDYWNoZSxcbiAgICBfcmVtb3ZlTGlua2VkTGlzdEl0ZW06IF9yZW1vdmVMaW5rZWRMaXN0SXRlbVxuICB9XG59O1xuXG5fZm9yRWFjaE5hbWUoXCJ0byxmcm9tLGZyb21UbyxkZWxheWVkQ2FsbCxzZXQsa2lsbFR3ZWVuc09mXCIsIGZ1bmN0aW9uIChuYW1lKSB7XG4gIHJldHVybiBfZ3NhcFtuYW1lXSA9IFR3ZWVuW25hbWVdO1xufSk7XG5cbl90aWNrZXIuYWRkKFRpbWVsaW5lLnVwZGF0ZVJvb3QpO1xuXG5fcXVpY2tUd2VlbiA9IF9nc2FwLnRvKHt9LCB7XG4gIGR1cmF0aW9uOiAwXG59KTsgLy8gLS0tLSBFWFRSQSBQTFVHSU5TIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbnZhciBfZ2V0UGx1Z2luUHJvcFR3ZWVuID0gZnVuY3Rpb24gX2dldFBsdWdpblByb3BUd2VlbihwbHVnaW4sIHByb3ApIHtcbiAgdmFyIHB0ID0gcGx1Z2luLl9wdDtcblxuICB3aGlsZSAocHQgJiYgcHQucCAhPT0gcHJvcCAmJiBwdC5vcCAhPT0gcHJvcCAmJiBwdC5mcCAhPT0gcHJvcCkge1xuICAgIHB0ID0gcHQuX25leHQ7XG4gIH1cblxuICByZXR1cm4gcHQ7XG59LFxuICAgIF9hZGRNb2RpZmllcnMgPSBmdW5jdGlvbiBfYWRkTW9kaWZpZXJzKHR3ZWVuLCBtb2RpZmllcnMpIHtcbiAgdmFyIHRhcmdldHMgPSB0d2Vlbi5fdGFyZ2V0cyxcbiAgICAgIHAsXG4gICAgICBpLFxuICAgICAgcHQ7XG5cbiAgZm9yIChwIGluIG1vZGlmaWVycykge1xuICAgIGkgPSB0YXJnZXRzLmxlbmd0aDtcblxuICAgIHdoaWxlIChpLS0pIHtcbiAgICAgIHB0ID0gdHdlZW4uX3B0TG9va3VwW2ldW3BdO1xuXG4gICAgICBpZiAocHQgJiYgKHB0ID0gcHQuZCkpIHtcbiAgICAgICAgaWYgKHB0Ll9wdCkge1xuICAgICAgICAgIC8vIGlzIGEgcGx1Z2luXG4gICAgICAgICAgcHQgPSBfZ2V0UGx1Z2luUHJvcFR3ZWVuKHB0LCBwKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHB0ICYmIHB0Lm1vZGlmaWVyICYmIHB0Lm1vZGlmaWVyKG1vZGlmaWVyc1twXSwgdHdlZW4sIHRhcmdldHNbaV0sIHApO1xuICAgICAgfVxuICAgIH1cbiAgfVxufSxcbiAgICBfYnVpbGRNb2RpZmllclBsdWdpbiA9IGZ1bmN0aW9uIF9idWlsZE1vZGlmaWVyUGx1Z2luKG5hbWUsIG1vZGlmaWVyKSB7XG4gIHJldHVybiB7XG4gICAgbmFtZTogbmFtZSxcbiAgICByYXdWYXJzOiAxLFxuICAgIC8vZG9uJ3QgcHJlLXByb2Nlc3MgZnVuY3Rpb24tYmFzZWQgdmFsdWVzIG9yIFwicmFuZG9tKClcIiBzdHJpbmdzLlxuICAgIGluaXQ6IGZ1bmN0aW9uIGluaXQodGFyZ2V0LCB2YXJzLCB0d2Vlbikge1xuICAgICAgdHdlZW4uX29uSW5pdCA9IGZ1bmN0aW9uICh0d2Vlbikge1xuICAgICAgICB2YXIgdGVtcCwgcDtcblxuICAgICAgICBpZiAoX2lzU3RyaW5nKHZhcnMpKSB7XG4gICAgICAgICAgdGVtcCA9IHt9O1xuXG4gICAgICAgICAgX2ZvckVhY2hOYW1lKHZhcnMsIGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgICAgICAgICByZXR1cm4gdGVtcFtuYW1lXSA9IDE7XG4gICAgICAgICAgfSk7IC8vaWYgdGhlIHVzZXIgcGFzc2VzIGluIGEgY29tbWEtZGVsaW1pdGVkIGxpc3Qgb2YgcHJvcGVydHkgbmFtZXMgdG8gcm91bmRQcm9wcywgbGlrZSBcIngseVwiLCB3ZSByb3VuZCB0byB3aG9sZSBudW1iZXJzLlxuXG5cbiAgICAgICAgICB2YXJzID0gdGVtcDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChtb2RpZmllcikge1xuICAgICAgICAgIHRlbXAgPSB7fTtcblxuICAgICAgICAgIGZvciAocCBpbiB2YXJzKSB7XG4gICAgICAgICAgICB0ZW1wW3BdID0gbW9kaWZpZXIodmFyc1twXSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgdmFycyA9IHRlbXA7XG4gICAgICAgIH1cblxuICAgICAgICBfYWRkTW9kaWZpZXJzKHR3ZWVuLCB2YXJzKTtcbiAgICAgIH07XG4gICAgfVxuICB9O1xufTsgLy9yZWdpc3RlciBjb3JlIHBsdWdpbnNcblxuXG5leHBvcnQgdmFyIGdzYXAgPSBfZ3NhcC5yZWdpc3RlclBsdWdpbih7XG4gIG5hbWU6IFwiYXR0clwiLFxuICBpbml0OiBmdW5jdGlvbiBpbml0KHRhcmdldCwgdmFycywgdHdlZW4sIGluZGV4LCB0YXJnZXRzKSB7XG4gICAgdmFyIHAsIHB0O1xuXG4gICAgZm9yIChwIGluIHZhcnMpIHtcbiAgICAgIHB0ID0gdGhpcy5hZGQodGFyZ2V0LCBcInNldEF0dHJpYnV0ZVwiLCAodGFyZ2V0LmdldEF0dHJpYnV0ZShwKSB8fCAwKSArIFwiXCIsIHZhcnNbcF0sIGluZGV4LCB0YXJnZXRzLCAwLCAwLCBwKTtcbiAgICAgIHB0ICYmIChwdC5vcCA9IHApO1xuXG4gICAgICB0aGlzLl9wcm9wcy5wdXNoKHApO1xuICAgIH1cbiAgfVxufSwge1xuICBuYW1lOiBcImVuZEFycmF5XCIsXG4gIGluaXQ6IGZ1bmN0aW9uIGluaXQodGFyZ2V0LCB2YWx1ZSkge1xuICAgIHZhciBpID0gdmFsdWUubGVuZ3RoO1xuXG4gICAgd2hpbGUgKGktLSkge1xuICAgICAgdGhpcy5hZGQodGFyZ2V0LCBpLCB0YXJnZXRbaV0gfHwgMCwgdmFsdWVbaV0pO1xuICAgIH1cbiAgfVxufSwgX2J1aWxkTW9kaWZpZXJQbHVnaW4oXCJyb3VuZFByb3BzXCIsIF9yb3VuZE1vZGlmaWVyKSwgX2J1aWxkTW9kaWZpZXJQbHVnaW4oXCJtb2RpZmllcnNcIiksIF9idWlsZE1vZGlmaWVyUGx1Z2luKFwic25hcFwiLCBzbmFwKSkgfHwgX2dzYXA7IC8vdG8gcHJldmVudCB0aGUgY29yZSBwbHVnaW5zIGZyb20gYmVpbmcgZHJvcHBlZCB2aWEgYWdncmVzc2l2ZSB0cmVlIHNoYWtpbmcsIHdlIG11c3QgaW5jbHVkZSB0aGVtIGluIHRoZSB2YXJpYWJsZSBkZWNsYXJhdGlvbiBpbiB0aGlzIHdheS5cblxuVHdlZW4udmVyc2lvbiA9IFRpbWVsaW5lLnZlcnNpb24gPSBnc2FwLnZlcnNpb24gPSBcIjMuNS4xXCI7XG5fY29yZVJlYWR5ID0gMTtcblxuaWYgKF93aW5kb3dFeGlzdHMoKSkge1xuICBfd2FrZSgpO1xufVxuXG52YXIgUG93ZXIwID0gX2Vhc2VNYXAuUG93ZXIwLFxuICAgIFBvd2VyMSA9IF9lYXNlTWFwLlBvd2VyMSxcbiAgICBQb3dlcjIgPSBfZWFzZU1hcC5Qb3dlcjIsXG4gICAgUG93ZXIzID0gX2Vhc2VNYXAuUG93ZXIzLFxuICAgIFBvd2VyNCA9IF9lYXNlTWFwLlBvd2VyNCxcbiAgICBMaW5lYXIgPSBfZWFzZU1hcC5MaW5lYXIsXG4gICAgUXVhZCA9IF9lYXNlTWFwLlF1YWQsXG4gICAgQ3ViaWMgPSBfZWFzZU1hcC5DdWJpYyxcbiAgICBRdWFydCA9IF9lYXNlTWFwLlF1YXJ0LFxuICAgIFF1aW50ID0gX2Vhc2VNYXAuUXVpbnQsXG4gICAgU3Ryb25nID0gX2Vhc2VNYXAuU3Ryb25nLFxuICAgIEVsYXN0aWMgPSBfZWFzZU1hcC5FbGFzdGljLFxuICAgIEJhY2sgPSBfZWFzZU1hcC5CYWNrLFxuICAgIFN0ZXBwZWRFYXNlID0gX2Vhc2VNYXAuU3RlcHBlZEVhc2UsXG4gICAgQm91bmNlID0gX2Vhc2VNYXAuQm91bmNlLFxuICAgIFNpbmUgPSBfZWFzZU1hcC5TaW5lLFxuICAgIEV4cG8gPSBfZWFzZU1hcC5FeHBvLFxuICAgIENpcmMgPSBfZWFzZU1hcC5DaXJjO1xuZXhwb3J0IHsgUG93ZXIwLCBQb3dlcjEsIFBvd2VyMiwgUG93ZXIzLCBQb3dlcjQsIExpbmVhciwgUXVhZCwgQ3ViaWMsIFF1YXJ0LCBRdWludCwgU3Ryb25nLCBFbGFzdGljLCBCYWNrLCBTdGVwcGVkRWFzZSwgQm91bmNlLCBTaW5lLCBFeHBvLCBDaXJjIH07XG5leHBvcnQgeyBUd2VlbiBhcyBUd2Vlbk1heCwgVHdlZW4gYXMgVHdlZW5MaXRlLCBUaW1lbGluZSBhcyBUaW1lbGluZU1heCwgVGltZWxpbmUgYXMgVGltZWxpbmVMaXRlLCBnc2FwIGFzIGRlZmF1bHQsIHdyYXAsIHdyYXBZb3lvLCBkaXN0cmlidXRlLCByYW5kb20sIHNuYXAsIG5vcm1hbGl6ZSwgZ2V0VW5pdCwgY2xhbXAsIHNwbGl0Q29sb3IsIHRvQXJyYXksIG1hcFJhbmdlLCBwaXBlLCB1bml0aXplLCBpbnRlcnBvbGF0ZSwgc2h1ZmZsZSB9OyAvL2V4cG9ydCBzb21lIGludGVybmFsIG1ldGhvZHMvb3JvamVjdHMgZm9yIHVzZSBpbiBDU1NQbHVnaW4gc28gdGhhdCB3ZSBjYW4gZXh0ZXJuYWxpemUgdGhhdCBmaWxlIGFuZCBhbGxvdyBjdXN0b20gYnVpbGRzIHRoYXQgZXhjbHVkZSBpdC5cblxuZXhwb3J0IHsgX2dldFByb3BlcnR5LCBfbnVtRXhwLCBfbnVtV2l0aFVuaXRFeHAsIF9pc1N0cmluZywgX2lzVW5kZWZpbmVkLCBfcmVuZGVyQ29tcGxleFN0cmluZywgX3JlbEV4cCwgX3NldERlZmF1bHRzLCBfcmVtb3ZlTGlua2VkTGlzdEl0ZW0sIF9mb3JFYWNoTmFtZSwgX3NvcnRQcm9wVHdlZW5zQnlQcmlvcml0eSwgX2NvbG9yU3RyaW5nRmlsdGVyLCBfcmVwbGFjZVJhbmRvbSwgX2NoZWNrUGx1Z2luLCBfcGx1Z2lucywgX3RpY2tlciwgX2NvbmZpZywgX3JvdW5kTW9kaWZpZXIsIF9yb3VuZCwgX21pc3NpbmdQbHVnaW4sIF9nZXRTZXR0ZXIsIF9nZXRDYWNoZSB9OyIsImltcG9ydCB7IGdzYXAsIFBvd2VyMCwgUG93ZXIxLCBQb3dlcjIsIFBvd2VyMywgUG93ZXI0LCBMaW5lYXIsIFF1YWQsIEN1YmljLCBRdWFydCwgUXVpbnQsIFN0cm9uZywgRWxhc3RpYywgQmFjaywgU3RlcHBlZEVhc2UsIEJvdW5jZSwgU2luZSwgRXhwbywgQ2lyYywgVHdlZW5MaXRlLCBUaW1lbGluZUxpdGUsIFRpbWVsaW5lTWF4IH0gZnJvbSBcIi4vZ3NhcC1jb3JlLmpzXCI7XG5pbXBvcnQgeyBDU1NQbHVnaW4gfSBmcm9tIFwiLi9DU1NQbHVnaW4uanNcIjtcbnZhciBnc2FwV2l0aENTUyA9IGdzYXAucmVnaXN0ZXJQbHVnaW4oQ1NTUGx1Z2luKSB8fCBnc2FwLFxuICAgIC8vIHRvIHByb3RlY3QgZnJvbSB0cmVlIHNoYWtpbmdcblR3ZWVuTWF4V2l0aENTUyA9IGdzYXBXaXRoQ1NTLmNvcmUuVHdlZW47XG5leHBvcnQgeyBnc2FwV2l0aENTUyBhcyBnc2FwLCBnc2FwV2l0aENTUyBhcyBkZWZhdWx0LCBDU1NQbHVnaW4sIFR3ZWVuTWF4V2l0aENTUyBhcyBUd2Vlbk1heCwgVHdlZW5MaXRlLCBUaW1lbGluZU1heCwgVGltZWxpbmVMaXRlLCBQb3dlcjAsIFBvd2VyMSwgUG93ZXIyLCBQb3dlcjMsIFBvd2VyNCwgTGluZWFyLCBRdWFkLCBDdWJpYywgUXVhcnQsIFF1aW50LCBTdHJvbmcsIEVsYXN0aWMsIEJhY2ssIFN0ZXBwZWRFYXNlLCBCb3VuY2UsIFNpbmUsIEV4cG8sIENpcmMgfTsiLCIvKiFcbiAqIGltYWdlc0xvYWRlZCB2NC4xLjRcbiAqIEphdmFTY3JpcHQgaXMgYWxsIGxpa2UgXCJZb3UgaW1hZ2VzIGFyZSBkb25lIHlldCBvciB3aGF0P1wiXG4gKiBNSVQgTGljZW5zZVxuICovXG5cbiggZnVuY3Rpb24oIHdpbmRvdywgZmFjdG9yeSApIHsgJ3VzZSBzdHJpY3QnO1xuICAvLyB1bml2ZXJzYWwgbW9kdWxlIGRlZmluaXRpb25cblxuICAvKmdsb2JhbCBkZWZpbmU6IGZhbHNlLCBtb2R1bGU6IGZhbHNlLCByZXF1aXJlOiBmYWxzZSAqL1xuXG4gIGlmICggdHlwZW9mIGRlZmluZSA9PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgKSB7XG4gICAgLy8gQU1EXG4gICAgZGVmaW5lKCBbXG4gICAgICAnZXYtZW1pdHRlci9ldi1lbWl0dGVyJ1xuICAgIF0sIGZ1bmN0aW9uKCBFdkVtaXR0ZXIgKSB7XG4gICAgICByZXR1cm4gZmFjdG9yeSggd2luZG93LCBFdkVtaXR0ZXIgKTtcbiAgICB9KTtcbiAgfSBlbHNlIGlmICggdHlwZW9mIG1vZHVsZSA9PSAnb2JqZWN0JyAmJiBtb2R1bGUuZXhwb3J0cyApIHtcbiAgICAvLyBDb21tb25KU1xuICAgIG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeShcbiAgICAgIHdpbmRvdyxcbiAgICAgIHJlcXVpcmUoJ2V2LWVtaXR0ZXInKVxuICAgICk7XG4gIH0gZWxzZSB7XG4gICAgLy8gYnJvd3NlciBnbG9iYWxcbiAgICB3aW5kb3cuaW1hZ2VzTG9hZGVkID0gZmFjdG9yeShcbiAgICAgIHdpbmRvdyxcbiAgICAgIHdpbmRvdy5FdkVtaXR0ZXJcbiAgICApO1xuICB9XG5cbn0pKCB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyA/IHdpbmRvdyA6IHRoaXMsXG5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tICBmYWN0b3J5IC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIC8vXG5cbmZ1bmN0aW9uIGZhY3RvcnkoIHdpbmRvdywgRXZFbWl0dGVyICkge1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciAkID0gd2luZG93LmpRdWVyeTtcbnZhciBjb25zb2xlID0gd2luZG93LmNvbnNvbGU7XG5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIGhlbHBlcnMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gLy9cblxuLy8gZXh0ZW5kIG9iamVjdHNcbmZ1bmN0aW9uIGV4dGVuZCggYSwgYiApIHtcbiAgZm9yICggdmFyIHByb3AgaW4gYiApIHtcbiAgICBhWyBwcm9wIF0gPSBiWyBwcm9wIF07XG4gIH1cbiAgcmV0dXJuIGE7XG59XG5cbnZhciBhcnJheVNsaWNlID0gQXJyYXkucHJvdG90eXBlLnNsaWNlO1xuXG4vLyB0dXJuIGVsZW1lbnQgb3Igbm9kZUxpc3QgaW50byBhbiBhcnJheVxuZnVuY3Rpb24gbWFrZUFycmF5KCBvYmogKSB7XG4gIGlmICggQXJyYXkuaXNBcnJheSggb2JqICkgKSB7XG4gICAgLy8gdXNlIG9iamVjdCBpZiBhbHJlYWR5IGFuIGFycmF5XG4gICAgcmV0dXJuIG9iajtcbiAgfVxuXG4gIHZhciBpc0FycmF5TGlrZSA9IHR5cGVvZiBvYmogPT0gJ29iamVjdCcgJiYgdHlwZW9mIG9iai5sZW5ndGggPT0gJ251bWJlcic7XG4gIGlmICggaXNBcnJheUxpa2UgKSB7XG4gICAgLy8gY29udmVydCBub2RlTGlzdCB0byBhcnJheVxuICAgIHJldHVybiBhcnJheVNsaWNlLmNhbGwoIG9iaiApO1xuICB9XG5cbiAgLy8gYXJyYXkgb2Ygc2luZ2xlIGluZGV4XG4gIHJldHVybiBbIG9iaiBdO1xufVxuXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBpbWFnZXNMb2FkZWQgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gLy9cblxuLyoqXG4gKiBAcGFyYW0ge0FycmF5LCBFbGVtZW50LCBOb2RlTGlzdCwgU3RyaW5nfSBlbGVtXG4gKiBAcGFyYW0ge09iamVjdCBvciBGdW5jdGlvbn0gb3B0aW9ucyAtIGlmIGZ1bmN0aW9uLCB1c2UgYXMgY2FsbGJhY2tcbiAqIEBwYXJhbSB7RnVuY3Rpb259IG9uQWx3YXlzIC0gY2FsbGJhY2sgZnVuY3Rpb25cbiAqL1xuZnVuY3Rpb24gSW1hZ2VzTG9hZGVkKCBlbGVtLCBvcHRpb25zLCBvbkFsd2F5cyApIHtcbiAgLy8gY29lcmNlIEltYWdlc0xvYWRlZCgpIHdpdGhvdXQgbmV3LCB0byBiZSBuZXcgSW1hZ2VzTG9hZGVkKClcbiAgaWYgKCAhKCB0aGlzIGluc3RhbmNlb2YgSW1hZ2VzTG9hZGVkICkgKSB7XG4gICAgcmV0dXJuIG5ldyBJbWFnZXNMb2FkZWQoIGVsZW0sIG9wdGlvbnMsIG9uQWx3YXlzICk7XG4gIH1cbiAgLy8gdXNlIGVsZW0gYXMgc2VsZWN0b3Igc3RyaW5nXG4gIHZhciBxdWVyeUVsZW0gPSBlbGVtO1xuICBpZiAoIHR5cGVvZiBlbGVtID09ICdzdHJpbmcnICkge1xuICAgIHF1ZXJ5RWxlbSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoIGVsZW0gKTtcbiAgfVxuICAvLyBiYWlsIGlmIGJhZCBlbGVtZW50XG4gIGlmICggIXF1ZXJ5RWxlbSApIHtcbiAgICBjb25zb2xlLmVycm9yKCAnQmFkIGVsZW1lbnQgZm9yIGltYWdlc0xvYWRlZCAnICsgKCBxdWVyeUVsZW0gfHwgZWxlbSApICk7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgdGhpcy5lbGVtZW50cyA9IG1ha2VBcnJheSggcXVlcnlFbGVtICk7XG4gIHRoaXMub3B0aW9ucyA9IGV4dGVuZCgge30sIHRoaXMub3B0aW9ucyApO1xuICAvLyBzaGlmdCBhcmd1bWVudHMgaWYgbm8gb3B0aW9ucyBzZXRcbiAgaWYgKCB0eXBlb2Ygb3B0aW9ucyA9PSAnZnVuY3Rpb24nICkge1xuICAgIG9uQWx3YXlzID0gb3B0aW9ucztcbiAgfSBlbHNlIHtcbiAgICBleHRlbmQoIHRoaXMub3B0aW9ucywgb3B0aW9ucyApO1xuICB9XG5cbiAgaWYgKCBvbkFsd2F5cyApIHtcbiAgICB0aGlzLm9uKCAnYWx3YXlzJywgb25BbHdheXMgKTtcbiAgfVxuXG4gIHRoaXMuZ2V0SW1hZ2VzKCk7XG5cbiAgaWYgKCAkICkge1xuICAgIC8vIGFkZCBqUXVlcnkgRGVmZXJyZWQgb2JqZWN0XG4gICAgdGhpcy5qcURlZmVycmVkID0gbmV3ICQuRGVmZXJyZWQoKTtcbiAgfVxuXG4gIC8vIEhBQ0sgY2hlY2sgYXN5bmMgdG8gYWxsb3cgdGltZSB0byBiaW5kIGxpc3RlbmVyc1xuICBzZXRUaW1lb3V0KCB0aGlzLmNoZWNrLmJpbmQoIHRoaXMgKSApO1xufVxuXG5JbWFnZXNMb2FkZWQucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZSggRXZFbWl0dGVyLnByb3RvdHlwZSApO1xuXG5JbWFnZXNMb2FkZWQucHJvdG90eXBlLm9wdGlvbnMgPSB7fTtcblxuSW1hZ2VzTG9hZGVkLnByb3RvdHlwZS5nZXRJbWFnZXMgPSBmdW5jdGlvbigpIHtcbiAgdGhpcy5pbWFnZXMgPSBbXTtcblxuICAvLyBmaWx0ZXIgJiBmaW5kIGl0ZW1zIGlmIHdlIGhhdmUgYW4gaXRlbSBzZWxlY3RvclxuICB0aGlzLmVsZW1lbnRzLmZvckVhY2goIHRoaXMuYWRkRWxlbWVudEltYWdlcywgdGhpcyApO1xufTtcblxuLyoqXG4gKiBAcGFyYW0ge05vZGV9IGVsZW1lbnRcbiAqL1xuSW1hZ2VzTG9hZGVkLnByb3RvdHlwZS5hZGRFbGVtZW50SW1hZ2VzID0gZnVuY3Rpb24oIGVsZW0gKSB7XG4gIC8vIGZpbHRlciBzaWJsaW5nc1xuICBpZiAoIGVsZW0ubm9kZU5hbWUgPT0gJ0lNRycgKSB7XG4gICAgdGhpcy5hZGRJbWFnZSggZWxlbSApO1xuICB9XG4gIC8vIGdldCBiYWNrZ3JvdW5kIGltYWdlIG9uIGVsZW1lbnRcbiAgaWYgKCB0aGlzLm9wdGlvbnMuYmFja2dyb3VuZCA9PT0gdHJ1ZSApIHtcbiAgICB0aGlzLmFkZEVsZW1lbnRCYWNrZ3JvdW5kSW1hZ2VzKCBlbGVtICk7XG4gIH1cblxuICAvLyBmaW5kIGNoaWxkcmVuXG4gIC8vIG5vIG5vbi1lbGVtZW50IG5vZGVzLCAjMTQzXG4gIHZhciBub2RlVHlwZSA9IGVsZW0ubm9kZVR5cGU7XG4gIGlmICggIW5vZGVUeXBlIHx8ICFlbGVtZW50Tm9kZVR5cGVzWyBub2RlVHlwZSBdICkge1xuICAgIHJldHVybjtcbiAgfVxuICB2YXIgY2hpbGRJbWdzID0gZWxlbS5xdWVyeVNlbGVjdG9yQWxsKCdpbWcnKTtcbiAgLy8gY29uY2F0IGNoaWxkRWxlbXMgdG8gZmlsdGVyRm91bmQgYXJyYXlcbiAgZm9yICggdmFyIGk9MDsgaSA8IGNoaWxkSW1ncy5sZW5ndGg7IGkrKyApIHtcbiAgICB2YXIgaW1nID0gY2hpbGRJbWdzW2ldO1xuICAgIHRoaXMuYWRkSW1hZ2UoIGltZyApO1xuICB9XG5cbiAgLy8gZ2V0IGNoaWxkIGJhY2tncm91bmQgaW1hZ2VzXG4gIGlmICggdHlwZW9mIHRoaXMub3B0aW9ucy5iYWNrZ3JvdW5kID09ICdzdHJpbmcnICkge1xuICAgIHZhciBjaGlsZHJlbiA9IGVsZW0ucXVlcnlTZWxlY3RvckFsbCggdGhpcy5vcHRpb25zLmJhY2tncm91bmQgKTtcbiAgICBmb3IgKCBpPTA7IGkgPCBjaGlsZHJlbi5sZW5ndGg7IGkrKyApIHtcbiAgICAgIHZhciBjaGlsZCA9IGNoaWxkcmVuW2ldO1xuICAgICAgdGhpcy5hZGRFbGVtZW50QmFja2dyb3VuZEltYWdlcyggY2hpbGQgKTtcbiAgICB9XG4gIH1cbn07XG5cbnZhciBlbGVtZW50Tm9kZVR5cGVzID0ge1xuICAxOiB0cnVlLFxuICA5OiB0cnVlLFxuICAxMTogdHJ1ZVxufTtcblxuSW1hZ2VzTG9hZGVkLnByb3RvdHlwZS5hZGRFbGVtZW50QmFja2dyb3VuZEltYWdlcyA9IGZ1bmN0aW9uKCBlbGVtICkge1xuICB2YXIgc3R5bGUgPSBnZXRDb21wdXRlZFN0eWxlKCBlbGVtICk7XG4gIGlmICggIXN0eWxlICkge1xuICAgIC8vIEZpcmVmb3ggcmV0dXJucyBudWxsIGlmIGluIGEgaGlkZGVuIGlmcmFtZSBodHRwczovL2J1Z3ppbC5sYS81NDgzOTdcbiAgICByZXR1cm47XG4gIH1cbiAgLy8gZ2V0IHVybCBpbnNpZGUgdXJsKFwiLi4uXCIpXG4gIHZhciByZVVSTCA9IC91cmxcXCgoWydcIl0pPyguKj8pXFwxXFwpL2dpO1xuICB2YXIgbWF0Y2hlcyA9IHJlVVJMLmV4ZWMoIHN0eWxlLmJhY2tncm91bmRJbWFnZSApO1xuICB3aGlsZSAoIG1hdGNoZXMgIT09IG51bGwgKSB7XG4gICAgdmFyIHVybCA9IG1hdGNoZXMgJiYgbWF0Y2hlc1syXTtcbiAgICBpZiAoIHVybCApIHtcbiAgICAgIHRoaXMuYWRkQmFja2dyb3VuZCggdXJsLCBlbGVtICk7XG4gICAgfVxuICAgIG1hdGNoZXMgPSByZVVSTC5leGVjKCBzdHlsZS5iYWNrZ3JvdW5kSW1hZ2UgKTtcbiAgfVxufTtcblxuLyoqXG4gKiBAcGFyYW0ge0ltYWdlfSBpbWdcbiAqL1xuSW1hZ2VzTG9hZGVkLnByb3RvdHlwZS5hZGRJbWFnZSA9IGZ1bmN0aW9uKCBpbWcgKSB7XG4gIHZhciBsb2FkaW5nSW1hZ2UgPSBuZXcgTG9hZGluZ0ltYWdlKCBpbWcgKTtcbiAgdGhpcy5pbWFnZXMucHVzaCggbG9hZGluZ0ltYWdlICk7XG59O1xuXG5JbWFnZXNMb2FkZWQucHJvdG90eXBlLmFkZEJhY2tncm91bmQgPSBmdW5jdGlvbiggdXJsLCBlbGVtICkge1xuICB2YXIgYmFja2dyb3VuZCA9IG5ldyBCYWNrZ3JvdW5kKCB1cmwsIGVsZW0gKTtcbiAgdGhpcy5pbWFnZXMucHVzaCggYmFja2dyb3VuZCApO1xufTtcblxuSW1hZ2VzTG9hZGVkLnByb3RvdHlwZS5jaGVjayA9IGZ1bmN0aW9uKCkge1xuICB2YXIgX3RoaXMgPSB0aGlzO1xuICB0aGlzLnByb2dyZXNzZWRDb3VudCA9IDA7XG4gIHRoaXMuaGFzQW55QnJva2VuID0gZmFsc2U7XG4gIC8vIGNvbXBsZXRlIGlmIG5vIGltYWdlc1xuICBpZiAoICF0aGlzLmltYWdlcy5sZW5ndGggKSB7XG4gICAgdGhpcy5jb21wbGV0ZSgpO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGZ1bmN0aW9uIG9uUHJvZ3Jlc3MoIGltYWdlLCBlbGVtLCBtZXNzYWdlICkge1xuICAgIC8vIEhBQ0sgLSBDaHJvbWUgdHJpZ2dlcnMgZXZlbnQgYmVmb3JlIG9iamVjdCBwcm9wZXJ0aWVzIGhhdmUgY2hhbmdlZC4gIzgzXG4gICAgc2V0VGltZW91dCggZnVuY3Rpb24oKSB7XG4gICAgICBfdGhpcy5wcm9ncmVzcyggaW1hZ2UsIGVsZW0sIG1lc3NhZ2UgKTtcbiAgICB9KTtcbiAgfVxuXG4gIHRoaXMuaW1hZ2VzLmZvckVhY2goIGZ1bmN0aW9uKCBsb2FkaW5nSW1hZ2UgKSB7XG4gICAgbG9hZGluZ0ltYWdlLm9uY2UoICdwcm9ncmVzcycsIG9uUHJvZ3Jlc3MgKTtcbiAgICBsb2FkaW5nSW1hZ2UuY2hlY2soKTtcbiAgfSk7XG59O1xuXG5JbWFnZXNMb2FkZWQucHJvdG90eXBlLnByb2dyZXNzID0gZnVuY3Rpb24oIGltYWdlLCBlbGVtLCBtZXNzYWdlICkge1xuICB0aGlzLnByb2dyZXNzZWRDb3VudCsrO1xuICB0aGlzLmhhc0FueUJyb2tlbiA9IHRoaXMuaGFzQW55QnJva2VuIHx8ICFpbWFnZS5pc0xvYWRlZDtcbiAgLy8gcHJvZ3Jlc3MgZXZlbnRcbiAgdGhpcy5lbWl0RXZlbnQoICdwcm9ncmVzcycsIFsgdGhpcywgaW1hZ2UsIGVsZW0gXSApO1xuICBpZiAoIHRoaXMuanFEZWZlcnJlZCAmJiB0aGlzLmpxRGVmZXJyZWQubm90aWZ5ICkge1xuICAgIHRoaXMuanFEZWZlcnJlZC5ub3RpZnkoIHRoaXMsIGltYWdlICk7XG4gIH1cbiAgLy8gY2hlY2sgaWYgY29tcGxldGVkXG4gIGlmICggdGhpcy5wcm9ncmVzc2VkQ291bnQgPT0gdGhpcy5pbWFnZXMubGVuZ3RoICkge1xuICAgIHRoaXMuY29tcGxldGUoKTtcbiAgfVxuXG4gIGlmICggdGhpcy5vcHRpb25zLmRlYnVnICYmIGNvbnNvbGUgKSB7XG4gICAgY29uc29sZS5sb2coICdwcm9ncmVzczogJyArIG1lc3NhZ2UsIGltYWdlLCBlbGVtICk7XG4gIH1cbn07XG5cbkltYWdlc0xvYWRlZC5wcm90b3R5cGUuY29tcGxldGUgPSBmdW5jdGlvbigpIHtcbiAgdmFyIGV2ZW50TmFtZSA9IHRoaXMuaGFzQW55QnJva2VuID8gJ2ZhaWwnIDogJ2RvbmUnO1xuICB0aGlzLmlzQ29tcGxldGUgPSB0cnVlO1xuICB0aGlzLmVtaXRFdmVudCggZXZlbnROYW1lLCBbIHRoaXMgXSApO1xuICB0aGlzLmVtaXRFdmVudCggJ2Fsd2F5cycsIFsgdGhpcyBdICk7XG4gIGlmICggdGhpcy5qcURlZmVycmVkICkge1xuICAgIHZhciBqcU1ldGhvZCA9IHRoaXMuaGFzQW55QnJva2VuID8gJ3JlamVjdCcgOiAncmVzb2x2ZSc7XG4gICAgdGhpcy5qcURlZmVycmVkWyBqcU1ldGhvZCBdKCB0aGlzICk7XG4gIH1cbn07XG5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tICAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAvL1xuXG5mdW5jdGlvbiBMb2FkaW5nSW1hZ2UoIGltZyApIHtcbiAgdGhpcy5pbWcgPSBpbWc7XG59XG5cbkxvYWRpbmdJbWFnZS5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKCBFdkVtaXR0ZXIucHJvdG90eXBlICk7XG5cbkxvYWRpbmdJbWFnZS5wcm90b3R5cGUuY2hlY2sgPSBmdW5jdGlvbigpIHtcbiAgLy8gSWYgY29tcGxldGUgaXMgdHJ1ZSBhbmQgYnJvd3NlciBzdXBwb3J0cyBuYXR1cmFsIHNpemVzLFxuICAvLyB0cnkgdG8gY2hlY2sgZm9yIGltYWdlIHN0YXR1cyBtYW51YWxseS5cbiAgdmFyIGlzQ29tcGxldGUgPSB0aGlzLmdldElzSW1hZ2VDb21wbGV0ZSgpO1xuICBpZiAoIGlzQ29tcGxldGUgKSB7XG4gICAgLy8gcmVwb3J0IGJhc2VkIG9uIG5hdHVyYWxXaWR0aFxuICAgIHRoaXMuY29uZmlybSggdGhpcy5pbWcubmF0dXJhbFdpZHRoICE9PSAwLCAnbmF0dXJhbFdpZHRoJyApO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8vIElmIG5vbmUgb2YgdGhlIGNoZWNrcyBhYm92ZSBtYXRjaGVkLCBzaW11bGF0ZSBsb2FkaW5nIG9uIGRldGFjaGVkIGVsZW1lbnQuXG4gIHRoaXMucHJveHlJbWFnZSA9IG5ldyBJbWFnZSgpO1xuICB0aGlzLnByb3h5SW1hZ2UuYWRkRXZlbnRMaXN0ZW5lciggJ2xvYWQnLCB0aGlzICk7XG4gIHRoaXMucHJveHlJbWFnZS5hZGRFdmVudExpc3RlbmVyKCAnZXJyb3InLCB0aGlzICk7XG4gIC8vIGJpbmQgdG8gaW1hZ2UgYXMgd2VsbCBmb3IgRmlyZWZveC4gIzE5MVxuICB0aGlzLmltZy5hZGRFdmVudExpc3RlbmVyKCAnbG9hZCcsIHRoaXMgKTtcbiAgdGhpcy5pbWcuYWRkRXZlbnRMaXN0ZW5lciggJ2Vycm9yJywgdGhpcyApO1xuICB0aGlzLnByb3h5SW1hZ2Uuc3JjID0gdGhpcy5pbWcuc3JjO1xufTtcblxuTG9hZGluZ0ltYWdlLnByb3RvdHlwZS5nZXRJc0ltYWdlQ29tcGxldGUgPSBmdW5jdGlvbigpIHtcbiAgLy8gY2hlY2sgZm9yIG5vbi16ZXJvLCBub24tdW5kZWZpbmVkIG5hdHVyYWxXaWR0aFxuICAvLyBmaXhlcyBTYWZhcmkrSW5maW5pdGVTY3JvbGwrTWFzb25yeSBidWcgaW5maW5pdGUtc2Nyb2xsIzY3MVxuICByZXR1cm4gdGhpcy5pbWcuY29tcGxldGUgJiYgdGhpcy5pbWcubmF0dXJhbFdpZHRoO1xufTtcblxuTG9hZGluZ0ltYWdlLnByb3RvdHlwZS5jb25maXJtID0gZnVuY3Rpb24oIGlzTG9hZGVkLCBtZXNzYWdlICkge1xuICB0aGlzLmlzTG9hZGVkID0gaXNMb2FkZWQ7XG4gIHRoaXMuZW1pdEV2ZW50KCAncHJvZ3Jlc3MnLCBbIHRoaXMsIHRoaXMuaW1nLCBtZXNzYWdlIF0gKTtcbn07XG5cbi8vIC0tLS0tIGV2ZW50cyAtLS0tLSAvL1xuXG4vLyB0cmlnZ2VyIHNwZWNpZmllZCBoYW5kbGVyIGZvciBldmVudCB0eXBlXG5Mb2FkaW5nSW1hZ2UucHJvdG90eXBlLmhhbmRsZUV2ZW50ID0gZnVuY3Rpb24oIGV2ZW50ICkge1xuICB2YXIgbWV0aG9kID0gJ29uJyArIGV2ZW50LnR5cGU7XG4gIGlmICggdGhpc1sgbWV0aG9kIF0gKSB7XG4gICAgdGhpc1sgbWV0aG9kIF0oIGV2ZW50ICk7XG4gIH1cbn07XG5cbkxvYWRpbmdJbWFnZS5wcm90b3R5cGUub25sb2FkID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMuY29uZmlybSggdHJ1ZSwgJ29ubG9hZCcgKTtcbiAgdGhpcy51bmJpbmRFdmVudHMoKTtcbn07XG5cbkxvYWRpbmdJbWFnZS5wcm90b3R5cGUub25lcnJvciA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLmNvbmZpcm0oIGZhbHNlLCAnb25lcnJvcicgKTtcbiAgdGhpcy51bmJpbmRFdmVudHMoKTtcbn07XG5cbkxvYWRpbmdJbWFnZS5wcm90b3R5cGUudW5iaW5kRXZlbnRzID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMucHJveHlJbWFnZS5yZW1vdmVFdmVudExpc3RlbmVyKCAnbG9hZCcsIHRoaXMgKTtcbiAgdGhpcy5wcm94eUltYWdlLnJlbW92ZUV2ZW50TGlzdGVuZXIoICdlcnJvcicsIHRoaXMgKTtcbiAgdGhpcy5pbWcucmVtb3ZlRXZlbnRMaXN0ZW5lciggJ2xvYWQnLCB0aGlzICk7XG4gIHRoaXMuaW1nLnJlbW92ZUV2ZW50TGlzdGVuZXIoICdlcnJvcicsIHRoaXMgKTtcbn07XG5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIEJhY2tncm91bmQgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gLy9cblxuZnVuY3Rpb24gQmFja2dyb3VuZCggdXJsLCBlbGVtZW50ICkge1xuICB0aGlzLnVybCA9IHVybDtcbiAgdGhpcy5lbGVtZW50ID0gZWxlbWVudDtcbiAgdGhpcy5pbWcgPSBuZXcgSW1hZ2UoKTtcbn1cblxuLy8gaW5oZXJpdCBMb2FkaW5nSW1hZ2UgcHJvdG90eXBlXG5CYWNrZ3JvdW5kLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoIExvYWRpbmdJbWFnZS5wcm90b3R5cGUgKTtcblxuQmFja2dyb3VuZC5wcm90b3R5cGUuY2hlY2sgPSBmdW5jdGlvbigpIHtcbiAgdGhpcy5pbWcuYWRkRXZlbnRMaXN0ZW5lciggJ2xvYWQnLCB0aGlzICk7XG4gIHRoaXMuaW1nLmFkZEV2ZW50TGlzdGVuZXIoICdlcnJvcicsIHRoaXMgKTtcbiAgdGhpcy5pbWcuc3JjID0gdGhpcy51cmw7XG4gIC8vIGNoZWNrIGlmIGltYWdlIGlzIGFscmVhZHkgY29tcGxldGVcbiAgdmFyIGlzQ29tcGxldGUgPSB0aGlzLmdldElzSW1hZ2VDb21wbGV0ZSgpO1xuICBpZiAoIGlzQ29tcGxldGUgKSB7XG4gICAgdGhpcy5jb25maXJtKCB0aGlzLmltZy5uYXR1cmFsV2lkdGggIT09IDAsICduYXR1cmFsV2lkdGgnICk7XG4gICAgdGhpcy51bmJpbmRFdmVudHMoKTtcbiAgfVxufTtcblxuQmFja2dyb3VuZC5wcm90b3R5cGUudW5iaW5kRXZlbnRzID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMuaW1nLnJlbW92ZUV2ZW50TGlzdGVuZXIoICdsb2FkJywgdGhpcyApO1xuICB0aGlzLmltZy5yZW1vdmVFdmVudExpc3RlbmVyKCAnZXJyb3InLCB0aGlzICk7XG59O1xuXG5CYWNrZ3JvdW5kLnByb3RvdHlwZS5jb25maXJtID0gZnVuY3Rpb24oIGlzTG9hZGVkLCBtZXNzYWdlICkge1xuICB0aGlzLmlzTG9hZGVkID0gaXNMb2FkZWQ7XG4gIHRoaXMuZW1pdEV2ZW50KCAncHJvZ3Jlc3MnLCBbIHRoaXMsIHRoaXMuZWxlbWVudCwgbWVzc2FnZSBdICk7XG59O1xuXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBqUXVlcnkgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gLy9cblxuSW1hZ2VzTG9hZGVkLm1ha2VKUXVlcnlQbHVnaW4gPSBmdW5jdGlvbiggalF1ZXJ5ICkge1xuICBqUXVlcnkgPSBqUXVlcnkgfHwgd2luZG93LmpRdWVyeTtcbiAgaWYgKCAhalF1ZXJ5ICkge1xuICAgIHJldHVybjtcbiAgfVxuICAvLyBzZXQgbG9jYWwgdmFyaWFibGVcbiAgJCA9IGpRdWVyeTtcbiAgLy8gJCgpLmltYWdlc0xvYWRlZCgpXG4gICQuZm4uaW1hZ2VzTG9hZGVkID0gZnVuY3Rpb24oIG9wdGlvbnMsIGNhbGxiYWNrICkge1xuICAgIHZhciBpbnN0YW5jZSA9IG5ldyBJbWFnZXNMb2FkZWQoIHRoaXMsIG9wdGlvbnMsIGNhbGxiYWNrICk7XG4gICAgcmV0dXJuIGluc3RhbmNlLmpxRGVmZXJyZWQucHJvbWlzZSggJCh0aGlzKSApO1xuICB9O1xufTtcbi8vIHRyeSBtYWtpbmcgcGx1Z2luXG5JbWFnZXNMb2FkZWQubWFrZUpRdWVyeVBsdWdpbigpO1xuXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gLy9cblxucmV0dXJuIEltYWdlc0xvYWRlZDtcblxufSk7XG4iLCJpbXBvcnQgJy4vY29tcG9uZW50cy9hbmltYXRpb25zJztcbmltcG9ydCAnLi9jb21wb25lbnRzL2JhcmJhJztcbmltcG9ydCAnLi9jb21wb25lbnRzL21lbnUnO1xuaW1wb3J0ICcuL2NvbXBvbmVudHMvc3RpY2t5JztcbiIsImNvbnN0IHJ1blNjcmlwdHMgPSAoKSA9PiB7XG5cdC8vIFNtb290aCBTY3JvbGwgdG8gYW5jaG9yc1xuXHRkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCdhW2hyZWZePVwiI1wiXScpLmZvckVhY2goYW5jaG9yID0+IHtcblx0XHRhbmNob3IuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBmdW5jdGlvbihlKSB7XG5cdFx0XHRlLnByZXZlbnREZWZhdWx0KCk7XG5cblx0XHRcdGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IodGhpcy5nZXRBdHRyaWJ1dGUoJ2hyZWYnKSkuc2Nyb2xsSW50b1ZpZXcoe1xuXHRcdFx0XHRiZWhhdmlvcjogJ3Ntb290aCdcblx0XHRcdH0pO1xuXHRcdH0pO1xuXHR9KTtcblxuXHQvLyBBbGwgY29sb3JlZC1jaXJjbGUgd2l0aCB0cmFuc2l0aW9uIGRlbGF5XG5cblx0Y29uc3QgbWVudUl0ZW1zV2l0aENoaWxkcmVucyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXG5cdFx0Jy5jb2xvcmVkLWNpcmNsZS1lbGVtZW50LCAucG91ci1xdWktYmxvY2staW1hZ2UnXG5cdCk7XG5cdG1lbnVJdGVtc1dpdGhDaGlsZHJlbnMuZm9yRWFjaCgobWVudUl0ZW1XaXRoQ2hpbGRyZW5zLCBpbmRleCkgPT4ge1xuXHRcdGNvbnN0IHN1Yk1lbnVJdGVtcyA9IG1lbnVJdGVtV2l0aENoaWxkcmVucy5xdWVyeVNlbGVjdG9yQWxsKCcuY29sb3JlZC1jaXJjbGUnKTtcblx0XHRzdWJNZW51SXRlbXMuZm9yRWFjaChzdWJNZW51SXRlbSA9PiB7XG5cdFx0XHRzdWJNZW51SXRlbS5zdHlsZS5hbmltYXRpb25EZWxheSA9IGAkezUwMCAqIGluZGV4fW1zYDtcblx0XHR9KTtcblx0fSk7XG5cblx0Ly8gRmFkZWluIHdoZW4gdGV4dCBhcHBlYXJzXG5cdGNvbnN0IG9ic2VydmVyID0gbmV3IEludGVyc2VjdGlvbk9ic2VydmVyKFxuXHRcdGVudHJpZXMgPT4ge1xuXHRcdFx0ZW50cmllcy5mb3JFYWNoKGVudHJ5ID0+IHtcblx0XHRcdFx0aWYgKGVudHJ5LmludGVyc2VjdGlvblJhdGlvID49IDAuMSkge1xuXHRcdFx0XHRcdGVudHJ5LnRhcmdldC5jbGFzc0xpc3QuYWRkKCdpbi12aWV3Jyk7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0ZW50cnkudGFyZ2V0LmNsYXNzTGlzdC5yZW1vdmUoJ2luLXZpZXcnKTtcblx0XHRcdFx0fVxuXHRcdFx0fSk7XG5cdFx0fSxcblx0XHR7XG5cdFx0XHR0aHJlc2hvbGQ6IFswLCAwLjEsIDFdXG5cdFx0fVxuXHQpO1xuXG5cdGNvbnN0IHNsaWRlUmV2ZWFscyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5zbGlkZV9fcmV2ZWFsJyk7XG5cdC8vIGNvbnN0IHBCaWcgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCdwLmJpZycpO1xuXG5cdHNsaWRlUmV2ZWFscy5mb3JFYWNoKChzbGlkZSwgaW5kZXgpID0+IHtcblx0XHRjb25zdCBzdWJNZW51SXRlbXMgPSBzbGlkZS5xdWVyeVNlbGVjdG9yQWxsKCdoMSxoMicpO1xuXHRcdHN1Yk1lbnVJdGVtcy5mb3JFYWNoKHN1Yk1lbnVJdGVtID0+IHtcblx0XHRcdHN1Yk1lbnVJdGVtLnN0eWxlLnRyYW5zaXRpb25EZWxheSA9IGAkezMwMCAqIGluZGV4fW1zYDtcblx0XHR9KTtcblx0fSk7XG5cblx0c2xpZGVSZXZlYWxzLmZvckVhY2goc2xpZGUgPT4ge1xuXHRcdG9ic2VydmVyLm9ic2VydmUoc2xpZGUpO1xuXHR9KTtcblxuXHQvLyBGYWRpbmcgQmFja2dyb3VuZC1jb2xvciBieSBzZWN0aW9uc1xuXHRjb25zdCBzZWN0aW9ucyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJ3NlY3Rpb24nKTtcblx0Y29uc3QgYm9keVRhZyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ2JvZHknKTtcblxuXHRjb25zdCBjaGFuZ2VCYWNrZ3JvdW5kID0gKCkgPT4ge1xuXHRcdGNvbnN0IHRvcFZpZXdwb3J0ID0gd2luZG93LnBhZ2VZT2Zmc2V0O1xuXHRcdGNvbnN0IG1pZFZpZXdwb3J0ID0gdG9wVmlld3BvcnQgKyB3aW5kb3cuaW5uZXJIZWlnaHQgLyAyO1xuXHRcdGNvbnN0IHN0aWNreU5hdiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5wYWdlLWhlcm8tbmF2Jyk7XG5cdFx0Y29uc3QgbWVudSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5uYXYtLWRlc2t0b3AnKTtcblxuXHRcdHNlY3Rpb25zLmZvckVhY2goKHNlY3Rpb24sIGluZGV4KSA9PiB7XG5cdFx0XHRjb25zdCB0b3BTZWN0aW9uID0gc2VjdGlvbi5vZmZzZXRUb3A7XG5cdFx0XHRjb25zdCBkaXN0YW5jZVRvU2VjdGlvblRvcCA9IG1pZFZpZXdwb3J0IC0gdG9wU2VjdGlvbjtcblxuXHRcdFx0aWYgKGRpc3RhbmNlVG9TZWN0aW9uVG9wID4gLTEwMCkge1xuXHRcdFx0XHRjb25zdCBkYXRhQmFja2dyb3VuZCA9IHNlY3Rpb24uZ2V0QXR0cmlidXRlKCdkYXRhLWJhY2tncm91bmQnKTtcblx0XHRcdFx0Ym9keVRhZy5zdHlsZS5iYWNrZ3JvdW5kQ29sb3IgPSBkYXRhQmFja2dyb3VuZDtcblx0XHRcdFx0aWYgKHN0aWNreU5hdikge1xuXHRcdFx0XHRcdHN0aWNreU5hdi5zdHlsZS5iYWNrZ3JvdW5kQ29sb3IgPSBkYXRhQmFja2dyb3VuZDtcblx0XHRcdFx0fVxuXHRcdFx0XHRtZW51LnN0eWxlLmJhY2tncm91bmRDb2xvciA9IGRhdGFCYWNrZ3JvdW5kO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHR9O1xuXG5cdGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ3Njcm9sbCcsICgpID0+IHtcblx0XHRjaGFuZ2VCYWNrZ3JvdW5kKCk7XG5cdH0pO1xuXG5cdHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdyZXNpemUnLCAoKSA9PiB7XG5cdFx0Y2hhbmdlQmFja2dyb3VuZCgpO1xuXHR9KTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IHJ1blNjcmlwdHM7XG4iLCJpbXBvcnQgYmFyYmEgZnJvbSAnQGJhcmJhL2NvcmUnO1xuaW1wb3J0IGltYWdlc0xvYWRlZCBmcm9tICdpbWFnZXNsb2FkZWQnO1xuaW1wb3J0IGdzYXAgZnJvbSAnZ3NhcCc7XG5pbXBvcnQgcnVuU2NyaXB0cyBmcm9tICcuL2FuaW1hdGlvbnMnO1xuaW1wb3J0IG1lbnVTY3JpcHRzIGZyb20gJy4vbWVudSc7XG5pbXBvcnQgc3RpY2t5U2NyaXB0cyBmcm9tICcuL3N0aWNreSc7XG5cbnJ1blNjcmlwdHMoKTtcbm1lbnVTY3JpcHRzKCk7XG5zdGlja3lTY3JpcHRzKCk7XG5cbmNvbnN0IHNjcm9sbDJ0b3AgPSAoKSA9PiB7XG5cdHdpbmRvdy5zY3JvbGxUbyh7XG5cdFx0dG9wOiAwLFxuXHRcdGJlaGF2aW9yOiAnc21vb3RoJ1xuXHR9KTtcbn07XG5cbmJhcmJhLmluaXQoe1xuXHR0cmFuc2l0aW9uczogW1xuXHRcdHtcblx0XHRcdG5hbWU6ICdmYWRlaW4nLFxuXHRcdFx0b25jZSh7IGN1cnJlbnQsIG5leHQsIHRyaWdnZXIgfSkge1xuXHRcdFx0XHRyZXR1cm4gbmV3IFByb21pc2UocmVzb2x2ZSA9PiB7XG5cdFx0XHRcdFx0Y29uc3QgaW1hZ2VzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChpbWFnZXMpO1xuXHRcdFx0XHRcdGltYWdlc0xvYWRlZChpbWFnZXMsICgpID0+IHtcblx0XHRcdFx0XHRcdGNvbnN0IHRpbWVsaW5lID0gZ3NhcC50aW1lbGluZSh7XG5cdFx0XHRcdFx0XHRcdG9uQ29tcGxldGUoKSB7XG5cdFx0XHRcdFx0XHRcdFx0cmVzb2x2ZSgpO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9KTtcblxuXHRcdFx0XHRcdFx0dGltZWxpbmUuc2V0KG5leHQuY29udGFpbmVyLCB7IG9wYWNpdHk6IDAgfSkudG8obmV4dC5jb250YWluZXIsIHsgb3BhY2l0eTogMSB9KTtcblx0XHRcdFx0XHR9KTtcblx0XHRcdFx0fSk7XG5cdFx0XHR9LFxuXHRcdFx0bGVhdmUoeyBjdXJyZW50LCBuZXh0LCB0cmlnZ2VyIH0pIHtcblx0XHRcdFx0cmV0dXJuIG5ldyBQcm9taXNlKHJlc29sdmUgPT4ge1xuXHRcdFx0XHRcdGNvbnN0IHRpbWVsaW5lID0gZ3NhcC50aW1lbGluZSh7XG5cdFx0XHRcdFx0XHRvbkNvbXBsZXRlKCkge1xuXHRcdFx0XHRcdFx0XHRjdXJyZW50LmNvbnRhaW5lci5yZW1vdmUoKTtcblx0XHRcdFx0XHRcdFx0cmVzb2x2ZSgpO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH0pO1xuXG5cdFx0XHRcdFx0dGltZWxpbmUudG8oJ2Zvb3RlcicsIHsgeTogJzEwMCUnIH0sIDApLnRvKGN1cnJlbnQuY29udGFpbmVyLCB7IG9wYWNpdHk6IDAgfSk7XG5cdFx0XHRcdH0pO1xuXHRcdFx0fSxcblx0XHRcdGVudGVyKHsgY3VycmVudCwgbmV4dCwgdHJpZ2dlciB9KSB7XG5cdFx0XHRcdHJldHVybiBuZXcgUHJvbWlzZShyZXNvbHZlID0+IHtcblx0XHRcdFx0XHRzY3JvbGwydG9wKCk7XG5cdFx0XHRcdFx0Y29uc3QgdGltZWxpbmUgPSBnc2FwLnRpbWVsaW5lKHtcblx0XHRcdFx0XHRcdG9uQ29tcGxldGUoKSB7XG5cdFx0XHRcdFx0XHRcdHJ1blNjcmlwdHMoKTtcblx0XHRcdFx0XHRcdFx0bWVudVNjcmlwdHMoKTtcblx0XHRcdFx0XHRcdFx0c3RpY2t5U2NyaXB0cygpO1xuXHRcdFx0XHRcdFx0XHRyZXNvbHZlKCk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fSk7XG5cblx0XHRcdFx0XHR0aW1lbGluZVxuXHRcdFx0XHRcdFx0LnNldChuZXh0LmNvbnRhaW5lciwgeyBvcGFjaXR5OiAwIH0pXG5cdFx0XHRcdFx0XHQuc2V0KCcuYmctaGFuZCcsIHsgb3BhY2l0eTogMCB9KVxuXHRcdFx0XHRcdFx0LnRvKCdmb290ZXInLCB7IHk6ICcwJyB9LCAwKVxuXHRcdFx0XHRcdFx0LnRvKCcuYmctaGFuZCcsIHsgb3BhY2l0eTogMSB9KVxuXHRcdFx0XHRcdFx0LnRvKG5leHQuY29udGFpbmVyLCB7IG9wYWNpdHk6IDEgfSk7XG5cdFx0XHRcdH0pO1xuXHRcdFx0fVxuXHRcdH0sXG5cdFx0e1xuXHRcdFx0bmFtZTogJ2hvbWVwYWdlJyxcblx0XHRcdHRvOiB7IG5hbWVzcGFjZTogJ2hvbWVwYWdlJyB9LFxuXHRcdFx0b25jZSh7IGN1cnJlbnQsIG5leHQsIHRyaWdnZXIgfSkge1xuXHRcdFx0XHRyZXR1cm4gbmV3IFByb21pc2UocmVzb2x2ZSA9PiB7XG5cdFx0XHRcdFx0c2Nyb2xsMnRvcCgpO1xuXHRcdFx0XHRcdGNvbnN0IHRpbWVsaW5lID0gZ3NhcC50aW1lbGluZSh7XG5cdFx0XHRcdFx0XHRvbkNvbXBsZXRlKCkge1xuXHRcdFx0XHRcdFx0XHRydW5TY3JpcHRzKCk7XG5cdFx0XHRcdFx0XHRcdHJlc29sdmUoKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9KTtcblxuXHRcdFx0XHRcdHRpbWVsaW5lXG5cdFx0XHRcdFx0XHQuc2V0KG5leHQuY29udGFpbmVyLCB7IG9wYWNpdHk6IDAgfSlcblx0XHRcdFx0XHRcdC5zZXQoJy5iZy1oYW5kJywgeyBvcGFjaXR5OiAwLCB4OiAnLTUwcHgnIH0pXG5cdFx0XHRcdFx0XHQuc2V0KCcuaHAtcXVlc3Rpb25zIGxpJywgeyBvcGFjaXR5OiAwIH0pXG5cdFx0XHRcdFx0XHQudG8oJ2Zvb3RlcicsIHsgeTogJzAnIH0sIDApXG5cdFx0XHRcdFx0XHQudG8obmV4dC5jb250YWluZXIsIHsgb3BhY2l0eTogMSB9KVxuXHRcdFx0XHRcdFx0LnRvKCcuYmctaGFuZCcsIHsgb3BhY2l0eTogMSwgeDogJzAnIH0pXG5cdFx0XHRcdFx0XHQudG8oJy5ocC1xdWVzdGlvbnMgbGknLCB7IG9wYWNpdHk6IDEsIHN0YWdnZXI6IDAuMSB9KTtcblx0XHRcdFx0fSk7XG5cdFx0XHR9LFxuXHRcdFx0bGVhdmUoeyBjdXJyZW50LCBuZXh0LCB0cmlnZ2VyIH0pIHtcblx0XHRcdFx0cmV0dXJuIG5ldyBQcm9taXNlKHJlc29sdmUgPT4ge1xuXHRcdFx0XHRcdGNvbnN0IHRpbWVsaW5lID0gZ3NhcC50aW1lbGluZSh7XG5cdFx0XHRcdFx0XHRvbkNvbXBsZXRlKCkge1xuXHRcdFx0XHRcdFx0XHRjdXJyZW50LmNvbnRhaW5lci5yZW1vdmUoKTtcblx0XHRcdFx0XHRcdFx0cmVzb2x2ZSgpO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH0pO1xuXG5cdFx0XHRcdFx0dGltZWxpbmUudG8oJ2Zvb3RlcicsIHsgeTogJzEwMCUnIH0sIDApLnRvKGN1cnJlbnQuY29udGFpbmVyLCB7IG9wYWNpdHk6IDAgfSk7XG5cdFx0XHRcdH0pO1xuXHRcdFx0fSxcblx0XHRcdGVudGVyKHsgY3VycmVudCwgbmV4dCwgdHJpZ2dlciB9KSB7XG5cdFx0XHRcdHJldHVybiBuZXcgUHJvbWlzZShyZXNvbHZlID0+IHtcblx0XHRcdFx0XHRzY3JvbGwydG9wKCk7XG5cdFx0XHRcdFx0Y29uc3QgdGltZWxpbmUgPSBnc2FwLnRpbWVsaW5lKHtcblx0XHRcdFx0XHRcdG9uQ29tcGxldGUoKSB7XG5cdFx0XHRcdFx0XHRcdHJ1blNjcmlwdHMoKTtcblx0XHRcdFx0XHRcdFx0cmVzb2x2ZSgpO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH0pO1xuXG5cdFx0XHRcdFx0dGltZWxpbmVcblx0XHRcdFx0XHRcdC5zZXQobmV4dC5jb250YWluZXIsIHsgb3BhY2l0eTogMCB9KVxuXHRcdFx0XHRcdFx0LnNldCgnLmJnLWhhbmQnLCB7IG9wYWNpdHk6IDAsIHg6ICctNTBweCcgfSlcblx0XHRcdFx0XHRcdC5zZXQoJy5ocC1xdWVzdGlvbnMgbGknLCB7IG9wYWNpdHk6IDAgfSlcblx0XHRcdFx0XHRcdC50bygnZm9vdGVyJywgeyB5OiAnMCcgfSwgMClcblx0XHRcdFx0XHRcdC50byhuZXh0LmNvbnRhaW5lciwgeyBvcGFjaXR5OiAxIH0pXG5cdFx0XHRcdFx0XHQudG8oJy5iZy1oYW5kJywgeyBvcGFjaXR5OiAxLCB4OiAnMCcgfSlcblx0XHRcdFx0XHRcdC50bygnLmhwLXF1ZXN0aW9ucyBsaScsIHsgb3BhY2l0eTogMSwgc3RhZ2dlcjogMC4xIH0pO1xuXHRcdFx0XHR9KTtcblx0XHRcdH1cblx0XHR9XG5cdF1cbn0pO1xuIiwiY29uc3QgbWVudVNjcmlwdHMgPSAoKSA9PiB7XG5cdC8vIChTdGlja3kgTmF2IHVuZGVyIFN0aWNreSBIZWFkZXIpICsgKEhlYWRlciBoaWRpbmcpIHdoZW4gc2Nyb2xsaW5nIGRvd24sIGV4Y2VwdCBmb3IgbW9iaWxlIHNjcmVlbnNcblxuXHRjb25zdCBzdGlja3lOYXYgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcucGFnZS1oZXJvLW5hdicpO1xuXHRjb25zdCBuYXYgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdoZWFkZXInKTtcblx0Y29uc3Qgc2Nyb2xsVXAgPSAnc2Nyb2xsLXVwJztcblx0Y29uc3Qgc2Nyb2xsRG93biA9ICdzY3JvbGwtZG93bic7XG5cdGNvbnN0IGJvZHkgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdib2R5Jyk7XG5cdGxldCBsYXN0U2Nyb2xsID0gMDtcblxuXHRjb25zdCBhZGRIZWFkZXJIZWlnaHRUb3AgPSBzZWN0aW9uID0+IHtcblx0XHRjb25zdCBoZWFkZXJIZWlnaHQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdoZWFkZXInKS5jbGllbnRIZWlnaHQ7XG5cdFx0Y29uc3QgY3VycmVudFBhZGRpbmcgPSBwYXJzZUZsb2F0KFxuXHRcdFx0d2luZG93LmdldENvbXB1dGVkU3R5bGUoc2VjdGlvbiwgbnVsbCkuZ2V0UHJvcGVydHlWYWx1ZSgndG9wJylcblx0XHQpO1xuXHRcdHNlY3Rpb24uc3R5bGUudG9wID0gYCR7aGVhZGVySGVpZ2h0fXB4YDtcblx0fTtcblxuXHR3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignc2Nyb2xsJywgKCkgPT4ge1xuXHRcdGNvbnN0IGN1cnJlbnRTY3JvbGwgPSB3aW5kb3cucGFnZVlPZmZzZXQ7XG5cdFx0aWYgKGN1cnJlbnRTY3JvbGwgPT0gMCkge1xuXHRcdFx0Ym9keS5jbGFzc0xpc3QucmVtb3ZlKHNjcm9sbFVwKTtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHRpZiAoY3VycmVudFNjcm9sbCA+IGxhc3RTY3JvbGwgJiYgIW5hdi5jbGFzc0xpc3QuY29udGFpbnMoc2Nyb2xsRG93bikpIHtcblx0XHRcdC8vIGRvd25cblx0XHRcdG5hdi5jbGFzc0xpc3QucmVtb3ZlKHNjcm9sbFVwKTtcblx0XHRcdG5hdi5jbGFzc0xpc3QuYWRkKHNjcm9sbERvd24pO1xuXG5cdFx0XHRpZiAoc3RpY2t5TmF2KSB7XG5cdFx0XHRcdHN0aWNreU5hdi5zdHlsZS50b3AgPSAnMCc7XG5cdFx0XHR9XG5cdFx0fSBlbHNlIGlmIChjdXJyZW50U2Nyb2xsIDwgbGFzdFNjcm9sbCAmJiBuYXYuY2xhc3NMaXN0LmNvbnRhaW5zKHNjcm9sbERvd24pKSB7XG5cdFx0XHQvLyB1cFxuXHRcdFx0bmF2LmNsYXNzTGlzdC5yZW1vdmUoc2Nyb2xsRG93bik7XG5cdFx0XHRuYXYuY2xhc3NMaXN0LmFkZChzY3JvbGxVcCk7XG5cdFx0XHRpZiAoc3RpY2t5TmF2KSB7XG5cdFx0XHRcdGFkZEhlYWRlckhlaWdodFRvcChzdGlja3lOYXYpO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRsYXN0U2Nyb2xsID0gY3VycmVudFNjcm9sbDtcblx0fSk7XG5cblx0Ly8gQWRkIGhlYWRlciBoZWlnaHQgYXMgcGFkZGluZy10b3Agb24gZmlyc3Qgc2VjdGlvbiBvZiBlYWNoIHBhZ2VcblxuXHRjb25zdCBtYXRjaFNjcmVlblNpemUgPSB4ID0+IHtcblx0XHRpZiAoeC5tYXRjaGVzKSB7XG5cdFx0XHQvLyBJZiBtZWRpYSBxdWVyeSBtYXRjaGVzXG5cdFx0XHRjb25zdCBpbnRyb1NlY3Rpb25QYWRkaW5nID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnBhZ2UtaGVybycpO1xuXHRcdFx0aWYgKGludHJvU2VjdGlvblBhZGRpbmcpIHtcblx0XHRcdFx0YWRkSGVhZGVySGVpZ2h0QXNQYWRkaW5nKGludHJvU2VjdGlvblBhZGRpbmcpO1xuXHRcdFx0fVxuXHRcdH1cblx0fTtcblxuXHRjb25zdCBzY3JlZW5TaXplID0gd2luZG93Lm1hdGNoTWVkaWEoJyhtaW4td2lkdGg6IDU3NnB4KScpO1xuXHRkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdET01Db250ZW50TG9hZGVkJywgKCkgPT4ge1xuXHRcdG1hdGNoU2NyZWVuU2l6ZShzY3JlZW5TaXplKTsgLy8gQ2FsbCBsaXN0ZW5lciBmdW5jdGlvbiBhdCBydW4gdGltZVxuXHRcdHNjcmVlblNpemUuYWRkTGlzdGVuZXIobWF0Y2hTY3JlZW5TaXplKTsgLy8gQXR0YWNoIGxpc3RlbmVyIGZ1bmN0aW9uIG9uIHN0YXRlIGNoYW5nZXNcblx0fSk7XG5cblx0Ly8gZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignRE9NQ29udGVudExvYWRlZCcsICgpID0+IHtcblx0Ly8gXHRjb25zdCBoZWFkZXJIZWlnaHQyID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignaGVhZGVyJykuY2xpZW50SGVpZ2h0O1xuXHQvLyBcdGNvbnNvbGUubG9nKCduZXcgJyArIGhlYWRlckhlaWdodDIpO1xuXHQvLyB9KTtcblx0Y29uc3QgaGVhZGVySGVpZ2h0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignaGVhZGVyJykuY2xpZW50SGVpZ2h0O1xuXG5cdGNvbnN0IGFkZEhlYWRlckhlaWdodEFzUGFkZGluZyA9IHNlY3Rpb24gPT4ge1xuXHRcdGNvbnN0IGhlYWRlckhlaWdodCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ2hlYWRlcicpLmNsaWVudEhlaWdodDtcblx0XHRjb25zdCBjdXJyZW50UGFkZGluZyA9IHBhcnNlRmxvYXQoXG5cdFx0XHR3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShzZWN0aW9uLCBudWxsKS5nZXRQcm9wZXJ0eVZhbHVlKCdwYWRkaW5nLXRvcCcpXG5cdFx0KTtcblx0XHRzZWN0aW9uLnN0eWxlLnBhZGRpbmdUb3AgPSBgJHtjdXJyZW50UGFkZGluZyArIGhlYWRlckhlaWdodH1weGA7XG5cdH07XG5cblx0Ly8gQ2xvc2luZyBOb3RpY2VcblxuXHRjb25zdCBjbG9zaW5nTm90aWNlID0gKG1lbnVUb0Nsb3NlQ2xhc3MsIGNsb3NpbmdCdXR0b25DbGFzcykgPT4ge1xuXHRcdGNvbnN0IG1lbnVUb0Nsb3NlID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihtZW51VG9DbG9zZUNsYXNzKTtcblx0XHRjb25zdCBjbG9zaW5nQnV0dG9uID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihjbG9zaW5nQnV0dG9uQ2xhc3MpO1xuXHRcdGlmIChjbG9zaW5nQnV0dG9uKSB7XG5cdFx0XHRjbG9zaW5nQnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge1xuXHRcdFx0XHRtZW51VG9DbG9zZS5jbGFzc0xpc3QuYWRkKCdoaWRkZW4nKTtcblx0XHRcdH0pO1xuXHRcdH1cblx0fTtcblxuXHRjbG9zaW5nTm90aWNlKCcubm90aWNlJywgJy5ub3RpY2UtLWNsb3NlJyk7XG5cblx0Ly8gVG9nZ2xpbmcgUmVzcG9uc2l2ZSBNZW51XG5cblx0Y29uc3QgdG9nZ2xpbmdNZW51ID0gKG1lbnVUb1RvZ2dsZUNsYXNzLCBidXJnZXJNZW51Q2xhc3MpID0+IHtcblx0XHRjb25zdCBib2R5VGFnID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignYm9keScpO1xuXHRcdGNvbnN0IG1lbnVUb1RvZ2dsZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IobWVudVRvVG9nZ2xlQ2xhc3MpO1xuXHRcdGNvbnN0IGJ1cmdlck1lbnUgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGJ1cmdlck1lbnVDbGFzcyk7XG5cdFx0YnVyZ2VyTWVudS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcblx0XHRcdGJvZHlUYWcuY2xhc3NMaXN0LnRvZ2dsZSgnb3BlbmVkJyk7XG5cdFx0XHRidXJnZXJNZW51LmNsYXNzTGlzdC50b2dnbGUoJ29wZW5lZCcpO1xuXHRcdFx0bWVudVRvVG9nZ2xlLmNsYXNzTGlzdC50b2dnbGUoJ29wZW5lZCcpO1xuXHRcdH0pO1xuXHR9O1xuXG5cdHRvZ2dsaW5nTWVudSgnLm5hdi0tbW9iaWxlX19yZXZlYWwnLCAnLm1lbnUtLXRvZ2dsZScpO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgbWVudVNjcmlwdHM7XG4iLCJjb25zdCBzdGlja3lTY3JpcHRzID0gKCkgPT4ge1xuXHQvLyBGYWRlaW4gd2hlbiB0ZXh0IGFwcGVhcnMgKHNyYzogaHR0cHM6Ly9jc3MtdHJpY2tzLmNvbS9zdGlja3ktc21vb3RoLWFjdGl2ZS1uYXYvKVxuXG5cdGxldCBuYXZTdGlja3lTZWN0aW9uID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnBhZ2UtaGVyby1uYXYnKTtcblx0aWYgKG5hdlN0aWNreVNlY3Rpb24pIHtcblx0XHRsZXQgbWFpbk5hdkxpbmtzID0gbmF2U3RpY2t5U2VjdGlvbi5xdWVyeVNlbGVjdG9yQWxsKCdoNSBhJyk7XG5cdFx0Y29uc3QgaGVhZGVySGVpZ2h0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignaGVhZGVyJykuY2xpZW50SGVpZ2h0O1xuXG5cdFx0bGV0IGxhc3RJZDtcblx0XHRsZXQgY3VyID0gW107XG5cblx0XHR3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignc2Nyb2xsJywgZXZlbnQgPT4ge1xuXHRcdFx0bGV0IGZyb21Ub3AgPSB3aW5kb3cuc2Nyb2xsWSArIGhlYWRlckhlaWdodCArIHdpbmRvdy5pbm5lckhlaWdodCAvIDQ7XG5cblx0XHRcdG1haW5OYXZMaW5rcy5mb3JFYWNoKGxpbmsgPT4ge1xuXHRcdFx0XHRsZXQgc2VjdGlvbiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IobGluay5oYXNoKTtcblxuXHRcdFx0XHRpZiAoc2VjdGlvbi5vZmZzZXRUb3AgPD0gZnJvbVRvcCAmJiBzZWN0aW9uLm9mZnNldFRvcCArIHNlY3Rpb24ub2Zmc2V0SGVpZ2h0ID4gZnJvbVRvcCkge1xuXHRcdFx0XHRcdGxpbmsuY2xhc3NMaXN0LmFkZCgnY3VycmVudCcpO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdGxpbmsuY2xhc3NMaXN0LnJlbW92ZSgnY3VycmVudCcpO1xuXHRcdFx0XHR9XG5cdFx0XHR9KTtcblx0XHR9KTtcblx0fVxufTtcblxuZXhwb3J0IGRlZmF1bHQgc3RpY2t5U2NyaXB0cztcbiJdLCJzb3VyY2VSb290IjoiIn0=